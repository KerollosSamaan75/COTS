
RCC_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000364  0800036c  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000364  08000364  0001036c  2**0
                  CONTENTS
  4 .ARM          00000000  08000364  08000364  0001036c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000364  0800036c  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000368  08000368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001036c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001036c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000001c2  00000000  00000000  000103df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000140  00000000  00000000  000105a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000078  00000000  00000000  000106e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000004d  00000000  00000000  00010760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000d78  00000000  00000000  000107ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000214  00000000  00000000  00011525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000362f  00000000  00000000  00011739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000d8  00000000  00000000  00014d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00014e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800034c 	.word	0x0800034c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800034c 	.word	0x0800034c

080001d4 <RCC_voidInitSystemClock>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void RCC_voidInitSystemClock(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
		   RCC_CR   = 0x00050000; /*Enable HSE_RC with Bypass*/
		   RCC_CFGR = 0x00000001; /*HSE selected as system clock*/
	       
		   
	#elif  RCC_CLOCK_TYPE == RCC_HSI
	       RCC_CR   = 0x00000081; /*Enable HSI With Triming - 0*/
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <RCC_voidInitSystemClock+0x1c>)
 80001da:	2281      	movs	r2, #129	; 0x81
 80001dc:	601a      	str	r2, [r3, #0]
		   RCC_CFGR = 0x00000000; /*HSI selected as system clock*/
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <RCC_voidInitSystemClock+0x20>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
		   #endif
		   
	#else
		   #error("You Choose Wrong Clock Type")
	#endif
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000
 80001f4:	40021004 	.word	0x40021004

080001f8 <RCC_voidEnableClock>:

void RCC_voidEnableClock (u8 Copy_u8BusID,u8 copy_u8PerID)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
	 if(copy_u8PerID <= 31)
 8000208:	79bb      	ldrb	r3, [r7, #6]
 800020a:	2b1f      	cmp	r3, #31
 800020c:	d82a      	bhi.n	8000264 <RCC_voidEnableClock+0x6c>
	 {
		 switch(Copy_u8BusID)
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	2b02      	cmp	r3, #2
 8000212:	d01c      	beq.n	800024e <RCC_voidEnableClock+0x56>
 8000214:	2b02      	cmp	r3, #2
 8000216:	dc25      	bgt.n	8000264 <RCC_voidEnableClock+0x6c>
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <RCC_voidEnableClock+0x2a>
 800021c:	2b01      	cmp	r3, #1
 800021e:	d00b      	beq.n	8000238 <RCC_voidEnableClock+0x40>
	 }
	 else
	 {
		 /*Return Error*/
	 }
}
 8000220:	e020      	b.n	8000264 <RCC_voidEnableClock+0x6c>
			 case RCC_AHB  : SET_BIT(RCC_AHBENR  , copy_u8PerID);  break; 
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <RCC_voidEnableClock+0x78>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	79ba      	ldrb	r2, [r7, #6]
 8000228:	2101      	movs	r1, #1
 800022a:	fa01 f202 	lsl.w	r2, r1, r2
 800022e:	4611      	mov	r1, r2
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <RCC_voidEnableClock+0x78>)
 8000232:	430b      	orrs	r3, r1
 8000234:	6013      	str	r3, [r2, #0]
 8000236:	e015      	b.n	8000264 <RCC_voidEnableClock+0x6c>
			 case RCC_APB1 : SET_BIT(RCC_APB1ENR , copy_u8PerID);  break;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <RCC_voidEnableClock+0x7c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	79ba      	ldrb	r2, [r7, #6]
 800023e:	2101      	movs	r1, #1
 8000240:	fa01 f202 	lsl.w	r2, r1, r2
 8000244:	4611      	mov	r1, r2
 8000246:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <RCC_voidEnableClock+0x7c>)
 8000248:	430b      	orrs	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	e00a      	b.n	8000264 <RCC_voidEnableClock+0x6c>
			 case RCC_APB2 : SET_BIT(RCC_APB2ENR , copy_u8PerID);  break;
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <RCC_voidEnableClock+0x80>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	79ba      	ldrb	r2, [r7, #6]
 8000254:	2101      	movs	r1, #1
 8000256:	fa01 f202 	lsl.w	r2, r1, r2
 800025a:	4611      	mov	r1, r2
 800025c:	4a06      	ldr	r2, [pc, #24]	; (8000278 <RCC_voidEnableClock+0x80>)
 800025e:	430b      	orrs	r3, r1
 8000260:	6013      	str	r3, [r2, #0]
 8000262:	bf00      	nop
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	40021014 	.word	0x40021014
 8000274:	4002101c 	.word	0x4002101c
 8000278:	40021018 	.word	0x40021018

0800027c <main>:
#include "RCC_interface.h"

#define   GPIOA_MODER    *((u32*) 0x48000000)
#define   GPIOA_OTYPER   *((u32*) 0x48000014)
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	RCC_voidInitSystemClock();
 8000280:	f7ff ffa8 	bl	80001d4 <RCC_voidInitSystemClock>
	RCC_voidEnableClock(RCC_AHB, 17);
 8000284:	2111      	movs	r1, #17
 8000286:	2000      	movs	r0, #0
 8000288:	f7ff ffb6 	bl	80001f8 <RCC_voidEnableClock>
	SET_BIT(GPIOA_MODER,10);
 800028c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOA_OTYPER,5);
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <main+0x30>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a02      	ldr	r2, [pc, #8]	; (80002ac <main+0x30>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6013      	str	r3, [r2, #0]

    while(1);
 80002a8:	e7fe      	b.n	80002a8 <main+0x2c>
 80002aa:	bf00      	nop
 80002ac:	48000014 	.word	0x48000014

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	; (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	; (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 f811 	bl	8000304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ffcb 	bl	800027c <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	0800036c 	.word	0x0800036c
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC1_2_IRQHandler>
	...

08000304 <__libc_init_array>:
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	4d0d      	ldr	r5, [pc, #52]	; (800033c <__libc_init_array+0x38>)
 8000308:	4c0d      	ldr	r4, [pc, #52]	; (8000340 <__libc_init_array+0x3c>)
 800030a:	1b64      	subs	r4, r4, r5
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	2600      	movs	r6, #0
 8000310:	42a6      	cmp	r6, r4
 8000312:	d109      	bne.n	8000328 <__libc_init_array+0x24>
 8000314:	4d0b      	ldr	r5, [pc, #44]	; (8000344 <__libc_init_array+0x40>)
 8000316:	4c0c      	ldr	r4, [pc, #48]	; (8000348 <__libc_init_array+0x44>)
 8000318:	f000 f818 	bl	800034c <_init>
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	10a4      	asrs	r4, r4, #2
 8000320:	2600      	movs	r6, #0
 8000322:	42a6      	cmp	r6, r4
 8000324:	d105      	bne.n	8000332 <__libc_init_array+0x2e>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f855 3b04 	ldr.w	r3, [r5], #4
 800032c:	4798      	blx	r3
 800032e:	3601      	adds	r6, #1
 8000330:	e7ee      	b.n	8000310 <__libc_init_array+0xc>
 8000332:	f855 3b04 	ldr.w	r3, [r5], #4
 8000336:	4798      	blx	r3
 8000338:	3601      	adds	r6, #1
 800033a:	e7f2      	b.n	8000322 <__libc_init_array+0x1e>
 800033c:	08000364 	.word	0x08000364
 8000340:	08000364 	.word	0x08000364
 8000344:	08000364 	.word	0x08000364
 8000348:	08000368 	.word	0x08000368

0800034c <_init>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr

08000358 <_fini>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr
