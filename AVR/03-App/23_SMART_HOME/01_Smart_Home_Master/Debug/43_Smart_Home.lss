
43_Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000572e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ce  00800060  0000572e  000057a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00004d58  00000000  00000000  00005970  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012b8  00000000  00000000  0000a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000b980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000bae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000bc6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000edb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000fd38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000feb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0001017a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010a08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a8 18 	call	0x3150	; 0x3150 <main>
      7a:	0c 94 95 2b 	jmp	0x572a	; 0x572a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e0       	ldi	r26, 0x0D	; 13
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7a 2b 	jmp	0x56f4	; 0x56f4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 86 2b 	jmp	0x570c	; 0x570c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 86 2b 	jmp	0x570c	; 0x570c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e0       	ldi	r24, 0x0D	; 13
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7a 2b 	jmp	0x56f4	; 0x56f4 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 66 2b 	jmp	0x56cc	; 0x56cc <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e0       	ldi	r22, 0x0D	; 13
     68c:	72 e0       	ldi	r23, 0x02	; 2
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 82 2b 	jmp	0x5704	; 0x5704 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 86 2b 	jmp	0x570c	; 0x570c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 86 2b 	jmp	0x570c	; 0x570c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 86 2b 	jmp	0x570c	; 0x570c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 6e 2b 	jmp	0x56dc	; 0x56dc <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 8a 2b 	jmp	0x5714	; 0x5714 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/*Intial PINS Direction*/ 
	DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION , DIO_u8_PA6_INTIAL_DIRECTION , DIO_u8_PA5_INTIAL_DIRECTION ,  DIO_u8_PA4_INTIAL_DIRECTION, 
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	80 83       	st	Z, r24
	                       DIO_u8_PA3_INTIAL_DIRECTION , DIO_u8_PA2_INTIAL_DIRECTION , DIO_u8_PA1_INTIAL_DIRECTION ,  DIO_u8_PA0_INTIAL_DIRECTION );
    
	DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION , DIO_u8_PB6_INTIAL_DIRECTION , DIO_u8_PB5_INTIAL_DIRECTION ,  DIO_u8_PB4_INTIAL_DIRECTION , 
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	87 eb       	ldi	r24, 0xB7	; 183
     ca4:	80 83       	st	Z, r24
			               DIO_u8_PB3_INTIAL_DIRECTION , DIO_u8_PB2_INTIAL_DIRECTION , DIO_u8_PB1_INTIAL_DIRECTION ,  DIO_u8_PB0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION , DIO_u8_PC6_INTIAL_DIRECTION , DIO_u8_PC5_INTIAL_DIRECTION ,  DIO_u8_PC4_INTIAL_DIRECTION ,
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f e1       	ldi	r24, 0x1F	; 31
     cac:	80 83       	st	Z, r24
			               DIO_u8_PC3_INTIAL_DIRECTION , DIO_u8_PC2_INTIAL_DIRECTION , DIO_u8_PC1_INTIAL_DIRECTION ,  DIO_u8_PC0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION , DIO_u8_PD6_INTIAL_DIRECTION , DIO_u8_PD5_INTIAL_DIRECTION ,  DIO_u8_PD4_INTIAL_DIRECTION , 
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f e0       	ldi	r24, 0x0F	; 15
     cb4:	80 83       	st	Z, r24
			               DIO_u8_PD3_INTIAL_DIRECTION , DIO_u8_PD2_INTIAL_DIRECTION , DIO_u8_PD1_INTIAL_DIRECTION ,  DIO_u8_PD0_INTIAL_DIRECTION );
						  
						  
	/*Intial PINS Value*/
    DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE         , DIO_u8_PA6_INTIAL_VALUE     , DIO_u8_PA5_INTIAL_VALUE ,      DIO_u8_PA4_INTIAL_VALUE , 
     cb6:	eb e3       	ldi	r30, 0x3B	; 59
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	10 82       	st	Z, r1
				            DIO_u8_PA3_INTIAL_VALUE         , DIO_u8_PA2_INTIAL_VALUE     , DIO_u8_PA1_INTIAL_VALUE ,      DIO_u8_PA0_INTIAL_VALUE);                  
                                                                                   
	DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE         , DIO_u8_PB6_INTIAL_VALUE     , DIO_u8_PB5_INTIAL_VALUE ,      DIO_u8_PB4_INTIAL_VALUE ,
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
				            DIO_u8_PB3_INTIAL_VALUE         , DIO_u8_PB2_INTIAL_VALUE     , DIO_u8_PB1_INTIAL_VALUE ,      DIO_u8_PB0_INTIAL_VALUE);                  
					                                                                  
	DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE         , DIO_u8_PC6_INTIAL_VALUE     , DIO_u8_PC5_INTIAL_VALUE ,      DIO_u8_PC4_INTIAL_VALUE , 
     cc2:	e5 e3       	ldi	r30, 0x35	; 53
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
				            DIO_u8_PC3_INTIAL_VALUE         , DIO_u8_PC2_INTIAL_VALUE     , DIO_u8_PC1_INTIAL_VALUE ,      DIO_u8_PC0_INTIAL_VALUE);                  
					                                                                 
	DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE         , DIO_u8_PD6_INTIAL_VALUE     , DIO_u8_PD5_INTIAL_VALUE ,      DIO_u8_PD4_INTIAL_VALUE , 
     cc8:	e2 e3       	ldi	r30, 0x32	; 50
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	80 83       	st	Z, r24
				            DIO_u8_PD3_INTIAL_VALUE         , DIO_u8_PD2_INTIAL_VALUE     , DIO_u8_PD1_INTIAL_VALUE ,      DIO_u8_PD0_INTIAL_VALUE);
						                                               
						   
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinDirection)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2e 97       	sbiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	6b 83       	std	Y+3, r22	; 0x03
     cee:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_PinDirection == DIO_u8_OUTPUT)||(Copy_PinDirection == DIO_u8_INPUT)))
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <DIO_u8SetPinDirection+0x26>
     cfa:	0c c1       	rjmp	.+536    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	08 f0       	brcs	.+2      	; 0xd04 <DIO_u8SetPinDirection+0x2e>
     d02:	08 c1       	rjmp	.+528    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	21 f0       	breq	.+8      	; 0xd12 <DIO_u8SetPinDirection+0x3c>
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	88 23       	and	r24, r24
     d0e:	09 f0       	breq	.+2      	; 0xd12 <DIO_u8SetPinDirection+0x3c>
     d10:	01 c1       	rjmp	.+514    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	3e 87       	std	Y+14, r19	; 0x0e
     d1a:	2d 87       	std	Y+13, r18	; 0x0d
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	09 f4       	brne	.+2      	; 0xd28 <DIO_u8SetPinDirection+0x52>
     d26:	4f c0       	rjmp	.+158    	; 0xdc6 <DIO_u8SetPinDirection+0xf0>
     d28:	2d 85       	ldd	r18, Y+13	; 0x0d
     d2a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	2c f4       	brge	.+10     	; 0xd3c <DIO_u8SetPinDirection+0x66>
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	9e 85       	ldd	r25, Y+14	; 0x0e
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	71 f0       	breq	.+28     	; 0xd56 <DIO_u8SetPinDirection+0x80>
     d3a:	ed c0       	rjmp	.+474    	; 0xf16 <DIO_u8SetPinDirection+0x240>
     d3c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <DIO_u8SetPinDirection+0x72>
     d46:	77 c0       	rjmp	.+238    	; 0xe36 <DIO_u8SetPinDirection+0x160>
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <DIO_u8SetPinDirection+0x7e>
     d52:	a9 c0       	rjmp	.+338    	; 0xea6 <DIO_u8SetPinDirection+0x1d0>
     d54:	e0 c0       	rjmp	.+448    	; 0xf16 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch(Copy_PinDirection)
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3c 87       	std	Y+12, r19	; 0x0c
     d5e:	2b 87       	std	Y+11, r18	; 0x0b
     d60:	8b 85       	ldd	r24, Y+11	; 0x0b
     d62:	9c 85       	ldd	r25, Y+12	; 0x0c
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	d1 f0       	breq	.+52     	; 0xd9c <DIO_u8SetPinDirection+0xc6>
     d68:	2b 85       	ldd	r18, Y+11	; 0x0b
     d6a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6c:	21 30       	cpi	r18, 0x01	; 1
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f0       	breq	.+2      	; 0xd74 <DIO_u8SetPinDirection+0x9e>
     d72:	d1 c0       	rjmp	.+418    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     d74:	aa e3       	ldi	r26, 0x3A	; 58
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ea e3       	ldi	r30, 0x3A	; 58
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_u8SetPinDirection+0xbc>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_u8SetPinDirection+0xb8>
     d96:	84 2b       	or	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	bd c0       	rjmp	.+378    	; 0xf16 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     d9c:	aa e3       	ldi	r26, 0x3A	; 58
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_u8SetPinDirection+0xe4>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_u8SetPinDirection+0xe0>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	a8 c0       	rjmp	.+336    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTB:
				switch(Copy_PinDirection)
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3a 87       	std	Y+10, r19	; 0x0a
     dce:	29 87       	std	Y+9, r18	; 0x09
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <DIO_u8SetPinDirection+0x136>
     dd8:	29 85       	ldd	r18, Y+9	; 0x09
     dda:	3a 85       	ldd	r19, Y+10	; 0x0a
     ddc:	21 30       	cpi	r18, 0x01	; 1
     dde:	31 05       	cpc	r19, r1
     de0:	09 f0       	breq	.+2      	; 0xde4 <DIO_u8SetPinDirection+0x10e>
     de2:	99 c0       	rjmp	.+306    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     de4:	a7 e3       	ldi	r26, 0x37	; 55
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e7 e3       	ldi	r30, 0x37	; 55
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_u8SetPinDirection+0x12c>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_u8SetPinDirection+0x128>
     e06:	84 2b       	or	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	85 c0       	rjmp	.+266    	; 0xf16 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     e0c:	a7 e3       	ldi	r26, 0x37	; 55
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e7 e3       	ldi	r30, 0x37	; 55
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_u8SetPinDirection+0x154>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <DIO_u8SetPinDirection+0x150>
     e2e:	80 95       	com	r24
     e30:	84 23       	and	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	70 c0       	rjmp	.+224    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTC:
				switch(Copy_PinDirection)
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	38 87       	std	Y+8, r19	; 0x08
     e3e:	2f 83       	std	Y+7, r18	; 0x07
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	d1 f0       	breq	.+52     	; 0xe7c <DIO_u8SetPinDirection+0x1a6>
     e48:	2f 81       	ldd	r18, Y+7	; 0x07
     e4a:	38 85       	ldd	r19, Y+8	; 0x08
     e4c:	21 30       	cpi	r18, 0x01	; 1
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f0       	breq	.+2      	; 0xe54 <DIO_u8SetPinDirection+0x17e>
     e52:	61 c0       	rjmp	.+194    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     e54:	a4 e3       	ldi	r26, 0x34	; 52
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e4 e3       	ldi	r30, 0x34	; 52
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_u8SetPinDirection+0x19c>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_u8SetPinDirection+0x198>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	4d c0       	rjmp	.+154    	; 0xf16 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     e7c:	a4 e3       	ldi	r26, 0x34	; 52
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e3       	ldi	r30, 0x34	; 52
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_u8SetPinDirection+0x1c4>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_u8SetPinDirection+0x1c0>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	38 c0       	rjmp	.+112    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTD:
				switch(Copy_PinDirection)
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3e 83       	std	Y+6, r19	; 0x06
     eae:	2d 83       	std	Y+5, r18	; 0x05
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	c9 f0       	breq	.+50     	; 0xeea <DIO_u8SetPinDirection+0x214>
     eb8:	2d 81       	ldd	r18, Y+5	; 0x05
     eba:	3e 81       	ldd	r19, Y+6	; 0x06
     ebc:	21 30       	cpi	r18, 0x01	; 1
     ebe:	31 05       	cpc	r19, r1
     ec0:	51 f5       	brne	.+84     	; 0xf16 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     ec2:	a1 e3       	ldi	r26, 0x31	; 49
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e1 e3       	ldi	r30, 0x31	; 49
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_u8SetPinDirection+0x20a>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_u8SetPinDirection+0x206>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	16 c0       	rjmp	.+44     	; 0xf16 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     eea:	a1 e3       	ldi	r26, 0x31	; 49
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_u8SetPinDirection+0x232>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_u8SetPinDirection+0x22e>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <DIO_u8SetPinDirection+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f14:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
}
     f18:	2e 96       	adiw	r28, 0x0e	; 14
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinValue)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	2e 97       	sbiw	r28, 0x0e	; 14
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	8a 83       	std	Y+2, r24	; 0x02
     f40:	6b 83       	std	Y+3, r22	; 0x03
     f42:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	88 30       	cpi	r24, 0x08	; 8
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <DIO_u8SetPinValue+0x26>
     f4e:	08 c1       	rjmp	.+528    	; 0x1160 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3e 87       	std	Y+14, r19	; 0x0e
     f58:	2d 87       	std	Y+13, r18	; 0x0d
     f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	09 f4       	brne	.+2      	; 0xf66 <DIO_u8SetPinValue+0x3c>
     f64:	50 c0       	rjmp	.+160    	; 0x1006 <DIO_u8SetPinValue+0xdc>
     f66:	2d 85       	ldd	r18, Y+13	; 0x0d
     f68:	3e 85       	ldd	r19, Y+14	; 0x0e
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	2c f4       	brge	.+10     	; 0xf7a <DIO_u8SetPinValue+0x50>
     f70:	8d 85       	ldd	r24, Y+13	; 0x0d
     f72:	9e 85       	ldd	r25, Y+14	; 0x0e
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	71 f0       	breq	.+28     	; 0xf94 <DIO_u8SetPinValue+0x6a>
     f78:	f1 c0       	rjmp	.+482    	; 0x115c <DIO_u8SetPinValue+0x232>
     f7a:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7c:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	09 f4       	brne	.+2      	; 0xf86 <DIO_u8SetPinValue+0x5c>
     f84:	79 c0       	rjmp	.+242    	; 0x1078 <DIO_u8SetPinValue+0x14e>
     f86:	8d 85       	ldd	r24, Y+13	; 0x0d
     f88:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	91 05       	cpc	r25, r1
     f8e:	09 f4       	brne	.+2      	; 0xf92 <DIO_u8SetPinValue+0x68>
     f90:	ac c0       	rjmp	.+344    	; 0x10ea <DIO_u8SetPinValue+0x1c0>
     f92:	e4 c0       	rjmp	.+456    	; 0x115c <DIO_u8SetPinValue+0x232>
			{
				case DIO_u8_PORTA:
					switch (Copy_PinValue)
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3c 87       	std	Y+12, r19	; 0x0c
     f9c:	2b 87       	std	Y+11, r18	; 0x0b
     f9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     fa0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	c9 f0       	breq	.+50     	; 0xfd8 <DIO_u8SetPinValue+0xae>
     fa6:	2b 85       	ldd	r18, Y+11	; 0x0b
     fa8:	3c 85       	ldd	r19, Y+12	; 0x0c
     faa:	21 30       	cpi	r18, 0x01	; 1
     fac:	31 05       	cpc	r19, r1
     fae:	49 f5       	brne	.+82     	; 0x1002 <DIO_u8SetPinValue+0xd8>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     fb0:	ab e3       	ldi	r26, 0x3B	; 59
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_u8SetPinValue+0xa4>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_u8SetPinValue+0xa0>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	c5 c0       	rjmp	.+394    	; 0x1162 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPinValue+0xcc>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_u8SetPinValue+0xc8>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	b0 c0       	rjmp	.+352    	; 0x1162 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1002:	19 82       	std	Y+1, r1	; 0x01
    1004:	ae c0       	rjmp	.+348    	; 0x1162 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTB:
					switch (Copy_PinValue)
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	3a 87       	std	Y+10, r19	; 0x0a
    100e:	29 87       	std	Y+9, r18	; 0x09
    1010:	89 85       	ldd	r24, Y+9	; 0x09
    1012:	9a 85       	ldd	r25, Y+10	; 0x0a
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	c9 f0       	breq	.+50     	; 0x104a <DIO_u8SetPinValue+0x120>
    1018:	29 85       	ldd	r18, Y+9	; 0x09
    101a:	3a 85       	ldd	r19, Y+10	; 0x0a
    101c:	21 30       	cpi	r18, 0x01	; 1
    101e:	31 05       	cpc	r19, r1
    1020:	49 f5       	brne	.+82     	; 0x1074 <DIO_u8SetPinValue+0x14a>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    1022:	a8 e3       	ldi	r26, 0x38	; 56
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_u8SetPinValue+0x116>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_u8SetPinValue+0x112>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	8c c0       	rjmp	.+280    	; 0x1162 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    104a:	a8 e3       	ldi	r26, 0x38	; 56
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e3       	ldi	r30, 0x38	; 56
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_u8SetPinValue+0x13e>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_u8SetPinValue+0x13a>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	77 c0       	rjmp	.+238    	; 0x1162 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1074:	19 82       	std	Y+1, r1	; 0x01
    1076:	75 c0       	rjmp	.+234    	; 0x1162 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTC:
					switch (Copy_PinValue)
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	38 87       	std	Y+8, r19	; 0x08
    1080:	2f 83       	std	Y+7, r18	; 0x07
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	c9 f0       	breq	.+50     	; 0x10bc <DIO_u8SetPinValue+0x192>
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	38 85       	ldd	r19, Y+8	; 0x08
    108e:	21 30       	cpi	r18, 0x01	; 1
    1090:	31 05       	cpc	r19, r1
    1092:	49 f5       	brne	.+82     	; 0x10e6 <DIO_u8SetPinValue+0x1bc>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    1094:	a5 e3       	ldi	r26, 0x35	; 53
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e5 e3       	ldi	r30, 0x35	; 53
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_u8SetPinValue+0x188>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_u8SetPinValue+0x184>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	53 c0       	rjmp	.+166    	; 0x1162 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    10bc:	a5 e3       	ldi	r26, 0x35	; 53
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e3       	ldi	r30, 0x35	; 53
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_u8SetPinValue+0x1b0>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_u8SetPinValue+0x1ac>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	3e c0       	rjmp	.+124    	; 0x1162 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	3c c0       	rjmp	.+120    	; 0x1162 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTD:
					switch (Copy_PinValue)
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3e 83       	std	Y+6, r19	; 0x06
    10f2:	2d 83       	std	Y+5, r18	; 0x05
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	c9 f0       	breq	.+50     	; 0x112e <DIO_u8SetPinValue+0x204>
    10fc:	2d 81       	ldd	r18, Y+5	; 0x05
    10fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1100:	21 30       	cpi	r18, 0x01	; 1
    1102:	31 05       	cpc	r19, r1
    1104:	49 f5       	brne	.+82     	; 0x1158 <DIO_u8SetPinValue+0x22e>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    1106:	a2 e3       	ldi	r26, 0x32	; 50
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_u8SetPinValue+0x1fa>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_u8SetPinValue+0x1f6>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	1a c0       	rjmp	.+52     	; 0x1162 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    112e:	a2 e3       	ldi	r26, 0x32	; 50
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_u8SetPinValue+0x222>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_u8SetPinValue+0x21e>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				default:Local_u8ErrorState = STD_TYPES_NOK;
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <DIO_u8SetPinValue+0x238>
				
			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1160:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	2e 96       	adiw	r28, 0x0e	; 14
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 * Copy_pu8ReturnedPinValue )
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	28 97       	sbiw	r28, 0x08	; 8
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	8b 83       	std	Y+3, r24	; 0x03
    118c:	6c 83       	std	Y+4, r22	; 0x04
    118e:	5e 83       	std	Y+6, r21	; 0x06
    1190:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	84 30       	cpi	r24, 0x04	; 4
    119a:	08 f0       	brcs	.+2      	; 0x119e <DIO_u8GetPinValue+0x28>
    119c:	9f c0       	rjmp	.+318    	; 0x12dc <DIO_u8GetPinValue+0x166>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	88 30       	cpi	r24, 0x08	; 8
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <DIO_u8GetPinValue+0x30>
    11a4:	9b c0       	rjmp	.+310    	; 0x12dc <DIO_u8GetPinValue+0x166>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <DIO_u8GetPinValue+0x3a>
    11ae:	96 c0       	rjmp	.+300    	; 0x12dc <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	38 87       	std	Y+8, r19	; 0x08
    11b8:	2f 83       	std	Y+7, r18	; 0x07
    11ba:	4f 81       	ldd	r20, Y+7	; 0x07
    11bc:	58 85       	ldd	r21, Y+8	; 0x08
    11be:	41 30       	cpi	r20, 0x01	; 1
    11c0:	51 05       	cpc	r21, r1
    11c2:	a9 f1       	breq	.+106    	; 0x122e <DIO_u8GetPinValue+0xb8>
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
    11c6:	98 85       	ldd	r25, Y+8	; 0x08
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	91 05       	cpc	r25, r1
    11cc:	34 f4       	brge	.+12     	; 0x11da <DIO_u8GetPinValue+0x64>
    11ce:	2f 81       	ldd	r18, Y+7	; 0x07
    11d0:	38 85       	ldd	r19, Y+8	; 0x08
    11d2:	21 15       	cp	r18, r1
    11d4:	31 05       	cpc	r19, r1
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <DIO_u8GetPinValue+0x7e>
    11d8:	82 c0       	rjmp	.+260    	; 0x12de <DIO_u8GetPinValue+0x168>
    11da:	4f 81       	ldd	r20, Y+7	; 0x07
    11dc:	58 85       	ldd	r21, Y+8	; 0x08
    11de:	42 30       	cpi	r20, 0x02	; 2
    11e0:	51 05       	cpc	r21, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <DIO_u8GetPinValue+0x70>
    11e4:	41 c0       	rjmp	.+130    	; 0x1268 <DIO_u8GetPinValue+0xf2>
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	91 05       	cpc	r25, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <DIO_u8GetPinValue+0x7c>
    11f0:	58 c0       	rjmp	.+176    	; 0x12a2 <DIO_u8GetPinValue+0x12c>
    11f2:	75 c0       	rjmp	.+234    	; 0x12de <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA :
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);
    11f4:	e9 e3       	ldi	r30, 0x39	; 57
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8GetPinValue+0x96>
    1208:	55 95       	asr	r21
    120a:	47 95       	ror	r20
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8GetPinValue+0x92>
    1210:	ca 01       	movw	r24, r20
    1212:	81 70       	andi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	88 23       	and	r24, r24
    121a:	21 f4       	brne	.+8      	; 0x1224 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    121c:	ed 81       	ldd	r30, Y+5	; 0x05
    121e:	fe 81       	ldd	r31, Y+6	; 0x06
    1220:	10 82       	st	Z, r1
    1222:	5d c0       	rjmp	.+186    	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1224:	ed 81       	ldd	r30, Y+5	; 0x05
    1226:	fe 81       	ldd	r31, Y+6	; 0x06
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 83       	st	Z, r24
    122c:	58 c0       	rjmp	.+176    	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			break;

			case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    122e:	e6 e3       	ldi	r30, 0x36	; 54
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a9 01       	movw	r20, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8GetPinValue+0xd0>
    1242:	55 95       	asr	r21
    1244:	47 95       	ror	r20
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8GetPinValue+0xcc>
    124a:	ca 01       	movw	r24, r20
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	88 23       	and	r24, r24
    1254:	21 f4       	brne	.+8      	; 0x125e <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1256:	ed 81       	ldd	r30, Y+5	; 0x05
    1258:	fe 81       	ldd	r31, Y+6	; 0x06
    125a:	10 82       	st	Z, r1
    125c:	40 c0       	rjmp	.+128    	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    125e:	ed 81       	ldd	r30, Y+5	; 0x05
    1260:	fe 81       	ldd	r31, Y+6	; 0x06
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 83       	st	Z, r24
    1266:	3b c0       	rjmp	.+118    	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			break;

			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    1268:	e3 e3       	ldi	r30, 0x33	; 51
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a9 01       	movw	r20, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8GetPinValue+0x10a>
    127c:	55 95       	asr	r21
    127e:	47 95       	ror	r20
    1280:	8a 95       	dec	r24
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8GetPinValue+0x106>
    1284:	ca 01       	movw	r24, r20
    1286:	81 70       	andi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	88 23       	and	r24, r24
    128e:	21 f4       	brne	.+8      	; 0x1298 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1290:	ed 81       	ldd	r30, Y+5	; 0x05
    1292:	fe 81       	ldd	r31, Y+6	; 0x06
    1294:	10 82       	st	Z, r1
    1296:	23 c0       	rjmp	.+70     	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1298:	ed 81       	ldd	r30, Y+5	; 0x05
    129a:	fe 81       	ldd	r31, Y+6	; 0x06
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 83       	st	Z, r24
    12a0:	1e c0       	rjmp	.+60     	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			break;

			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    12a2:	e0 e3       	ldi	r30, 0x30	; 48
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a9 01       	movw	r20, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_u8GetPinValue+0x144>
    12b6:	55 95       	asr	r21
    12b8:	47 95       	ror	r20
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_u8GetPinValue+0x140>
    12be:	ca 01       	movw	r24, r20
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	88 23       	and	r24, r24
    12c8:	21 f4       	brne	.+8      	; 0x12d2 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12ca:	ed 81       	ldd	r30, Y+5	; 0x05
    12cc:	fe 81       	ldd	r31, Y+6	; 0x06
    12ce:	10 82       	st	Z, r1
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12d2:	ed 81       	ldd	r30, Y+5	; 0x05
    12d4:	fe 81       	ldd	r31, Y+6	; 0x06
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 83       	st	Z, r24
    12da:	01 c0       	rjmp	.+2      	; 0x12de <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12dc:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12de:	8a 81       	ldd	r24, Y+2	; 0x02

}
    12e0:	28 96       	adiw	r28, 0x08	; 8
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DIO_u8SetPortDirection>:
 
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_PortDirection)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	2d 97       	sbiw	r28, 0x0d	; 13
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_PortDirection == DIO_u8_OUTPUT  )||(Copy_PortDirection == DIO_u8_INPUT))
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	21 f0       	breq	.+8      	; 0x131c <DIO_u8SetPortDirection+0x2a>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 23       	and	r24, r24
    1318:	09 f0       	breq	.+2      	; 0x131c <DIO_u8SetPortDirection+0x2a>
    131a:	7f c0       	rjmp	.+254    	; 0x141a <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3d 87       	std	Y+13, r19	; 0x0d
    1324:	2c 87       	std	Y+12, r18	; 0x0c
    1326:	8c 85       	ldd	r24, Y+12	; 0x0c
    1328:	9d 85       	ldd	r25, Y+13	; 0x0d
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	71 f1       	breq	.+92     	; 0x138c <DIO_u8SetPortDirection+0x9a>
    1330:	2c 85       	ldd	r18, Y+12	; 0x0c
    1332:	3d 85       	ldd	r19, Y+13	; 0x0d
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <DIO_u8SetPortDirection+0x52>
    133a:	8c 85       	ldd	r24, Y+12	; 0x0c
    133c:	9d 85       	ldd	r25, Y+13	; 0x0d
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f0       	breq	.+26     	; 0x135c <DIO_u8SetPortDirection+0x6a>
    1342:	69 c0       	rjmp	.+210    	; 0x1416 <DIO_u8SetPortDirection+0x124>
    1344:	2c 85       	ldd	r18, Y+12	; 0x0c
    1346:	3d 85       	ldd	r19, Y+13	; 0x0d
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	b1 f1       	breq	.+108    	; 0x13ba <DIO_u8SetPortDirection+0xc8>
    134e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1350:	9d 85       	ldd	r25, Y+13	; 0x0d
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <DIO_u8SetPortDirection+0x68>
    1358:	47 c0       	rjmp	.+142    	; 0x13e8 <DIO_u8SetPortDirection+0xf6>
    135a:	5d c0       	rjmp	.+186    	; 0x1416 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA : 
				switch (Copy_PortDirection)
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3b 87       	std	Y+11, r19	; 0x0b
    1364:	2a 87       	std	Y+10, r18	; 0x0a
    1366:	8a 85       	ldd	r24, Y+10	; 0x0a
    1368:	9b 85       	ldd	r25, Y+11	; 0x0b
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	59 f0       	breq	.+22     	; 0x1384 <DIO_u8SetPortDirection+0x92>
    136e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1370:	3b 85       	ldd	r19, Y+11	; 0x0b
    1372:	21 30       	cpi	r18, 0x01	; 1
    1374:	31 05       	cpc	r19, r1
    1376:	09 f0       	breq	.+2      	; 0x137a <DIO_u8SetPortDirection+0x88>
    1378:	51 c0       	rjmp	.+162    	; 0x141c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRA_REG = 0xff; break;
    137a:	ea e3       	ldi	r30, 0x3A	; 58
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	80 83       	st	Z, r24
    1382:	4c c0       	rjmp	.+152    	; 0x141c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRA_REG = 0x00; break;
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	10 82       	st	Z, r1
    138a:	48 c0       	rjmp	.+144    	; 0x141c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTB :
				switch (Copy_PortDirection)
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	39 87       	std	Y+9, r19	; 0x09
    1394:	28 87       	std	Y+8, r18	; 0x08
    1396:	88 85       	ldd	r24, Y+8	; 0x08
    1398:	99 85       	ldd	r25, Y+9	; 0x09
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	51 f0       	breq	.+20     	; 0x13b2 <DIO_u8SetPortDirection+0xc0>
    139e:	28 85       	ldd	r18, Y+8	; 0x08
    13a0:	39 85       	ldd	r19, Y+9	; 0x09
    13a2:	21 30       	cpi	r18, 0x01	; 1
    13a4:	31 05       	cpc	r19, r1
    13a6:	d1 f5       	brne	.+116    	; 0x141c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRB_REG = 0xff; break;
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	80 83       	st	Z, r24
    13b0:	35 c0       	rjmp	.+106    	; 0x141c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRB_REG = 0x00; break;
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	10 82       	st	Z, r1
    13b8:	31 c0       	rjmp	.+98     	; 0x141c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTC :
				switch (Copy_PortDirection)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3f 83       	std	Y+7, r19	; 0x07
    13c2:	2e 83       	std	Y+6, r18	; 0x06
    13c4:	8e 81       	ldd	r24, Y+6	; 0x06
    13c6:	9f 81       	ldd	r25, Y+7	; 0x07
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	51 f0       	breq	.+20     	; 0x13e0 <DIO_u8SetPortDirection+0xee>
    13cc:	2e 81       	ldd	r18, Y+6	; 0x06
    13ce:	3f 81       	ldd	r19, Y+7	; 0x07
    13d0:	21 30       	cpi	r18, 0x01	; 1
    13d2:	31 05       	cpc	r19, r1
    13d4:	19 f5       	brne	.+70     	; 0x141c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRC_REG = 0xff; break;
    13d6:	e4 e3       	ldi	r30, 0x34	; 52
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	80 83       	st	Z, r24
    13de:	1e c0       	rjmp	.+60     	; 0x141c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRC_REG = 0x00; break;
    13e0:	e4 e3       	ldi	r30, 0x34	; 52
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	10 82       	st	Z, r1
    13e6:	1a c0       	rjmp	.+52     	; 0x141c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTD :
				switch (Copy_PortDirection)
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3d 83       	std	Y+5, r19	; 0x05
    13f0:	2c 83       	std	Y+4, r18	; 0x04
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	51 f0       	breq	.+20     	; 0x140e <DIO_u8SetPortDirection+0x11c>
    13fa:	2c 81       	ldd	r18, Y+4	; 0x04
    13fc:	3d 81       	ldd	r19, Y+5	; 0x05
    13fe:	21 30       	cpi	r18, 0x01	; 1
    1400:	31 05       	cpc	r19, r1
    1402:	61 f4       	brne	.+24     	; 0x141c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRD_REG = 0xff; break;
    1404:	e1 e3       	ldi	r30, 0x31	; 49
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	80 83       	st	Z, r24
    140c:	07 c0       	rjmp	.+14     	; 0x141c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRD_REG = 0x00; break;
    140e:	e1 e3       	ldi	r30, 0x31	; 49
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
    1414:	03 c0       	rjmp	.+6      	; 0x141c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			default      :Local_u8ErrorState =STD_TYPES_NOK;
    1416:	19 82       	std	Y+1, r1	; 0x01
    1418:	01 c0       	rjmp	.+2      	; 0x141c <DIO_u8SetPortDirection+0x12a>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    141a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	2d 96       	adiw	r28, 0x0d	; 13
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_PortValue)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <DIO_u8SetPortValue+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <DIO_u8SetPortValue+0x8>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3d 83       	std	Y+5, r19	; 0x05
    144e:	2c 83       	std	Y+4, r18	; 0x04
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	91 05       	cpc	r25, r1
    1458:	d1 f0       	breq	.+52     	; 0x148e <DIO_u8SetPortValue+0x5e>
    145a:	2c 81       	ldd	r18, Y+4	; 0x04
    145c:	3d 81       	ldd	r19, Y+5	; 0x05
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	2c f4       	brge	.+10     	; 0x146e <DIO_u8SetPortValue+0x3e>
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	9d 81       	ldd	r25, Y+5	; 0x05
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	61 f0       	breq	.+24     	; 0x1484 <DIO_u8SetPortValue+0x54>
    146c:	1f c0       	rjmp	.+62     	; 0x14ac <DIO_u8SetPortValue+0x7c>
    146e:	2c 81       	ldd	r18, Y+4	; 0x04
    1470:	3d 81       	ldd	r19, Y+5	; 0x05
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	81 f0       	breq	.+32     	; 0x1498 <DIO_u8SetPortValue+0x68>
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	81 f0       	breq	.+32     	; 0x14a2 <DIO_u8SetPortValue+0x72>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_PortValue; break;
    1484:	eb e3       	ldi	r30, 0x3B	; 59
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	80 83       	st	Z, r24
    148c:	10 c0       	rjmp	.+32     	; 0x14ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_PortValue; break;
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	80 83       	st	Z, r24
    1496:	0b c0       	rjmp	.+22     	; 0x14ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_PortValue; break;
    1498:	e5 e3       	ldi	r30, 0x35	; 53
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	80 83       	st	Z, r24
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_PortValue; break;
    14a2:	e2 e3       	ldi	r30, 0x32	; 50
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	80 83       	st	Z, r24
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <DIO_u8SetPortValue+0x7e>
		default           : Local_u8ErrorState = STD_TYPES_NOK;
    14ac:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return Local_u8ErrorState;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue (u8 Copy_u8PortId , u8 * Copy_pu8ReturnedPortValue )
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <DIO_u8GetPortValue+0x6>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <DIO_u8GetPortValue+0x8>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_u8GetPortValue+0xa>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	8a 83       	std	Y+2, r24	; 0x02
    14d0:	7c 83       	std	Y+4, r23	; 0x04
    14d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL)
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	e9 f1       	breq	.+122    	; 0x155a <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3e 83       	std	Y+6, r19	; 0x06
    14e8:	2d 83       	std	Y+5, r18	; 0x05
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	e1 f0       	breq	.+56     	; 0x152c <DIO_u8GetPortValue+0x6c>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <DIO_u8GetPortValue+0x48>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <DIO_u8GetPortValue+0x5e>
    1506:	27 c0       	rjmp	.+78     	; 0x1556 <DIO_u8GetPortValue+0x96>
    1508:	2d 81       	ldd	r18, Y+5	; 0x05
    150a:	3e 81       	ldd	r19, Y+6	; 0x06
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	a1 f0       	breq	.+40     	; 0x153a <DIO_u8GetPortValue+0x7a>
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	b1 f0       	breq	.+44     	; 0x1548 <DIO_u8GetPortValue+0x88>
    151c:	1c c0       	rjmp	.+56     	; 0x1556 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA : *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG; break;
    151e:	e9 e3       	ldi	r30, 0x39	; 57
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	80 83       	st	Z, r24
    152a:	18 c0       	rjmp	.+48     	; 0x155c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB : *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG; break;
    152c:	e6 e3       	ldi	r30, 0x36	; 54
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	80 83       	st	Z, r24
    1538:	11 c0       	rjmp	.+34     	; 0x155c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC : *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG; break; 
    153a:	e3 e3       	ldi	r30, 0x33	; 51
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	eb 81       	ldd	r30, Y+3	; 0x03
    1542:	fc 81       	ldd	r31, Y+4	; 0x04
    1544:	80 83       	st	Z, r24
    1546:	0a c0       	rjmp	.+20     	; 0x155c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD : *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG; break;
    1548:	e0 e3       	ldi	r30, 0x30	; 48
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	80 83       	st	Z, r24
    1554:	03 c0       	rjmp	.+6      	; 0x155c <DIO_u8GetPortValue+0x9c>
			default           : Local_u8ErrorState = STD_TYPES_NOK;
    1556:	19 82       	std	Y+1, r1	; 0x01
    1558:	01 c0       	rjmp	.+2      	; 0x155c <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    155a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    155c:	89 81       	ldd	r24, Y+1	; 0x01
}
    155e:	26 96       	adiw	r28, 0x06	; 6
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <DIO_u8TogglePin>:

u8  DIO_u8TogglePin(u8 Copy_u8PortId, u8 Copy_u8PinId )
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <DIO_u8TogglePin+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <DIO_u8TogglePin+0x8>
    1578:	0f 92       	push	r0
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	8a 83       	std	Y+2, r24	; 0x02
    1580:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7))
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	08 f0       	brcs	.+2      	; 0x158e <DIO_u8TogglePin+0x1e>
    158c:	73 c0       	rjmp	.+230    	; 0x1674 <DIO_u8TogglePin+0x104>
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	88 30       	cpi	r24, 0x08	; 8
    1592:	08 f0       	brcs	.+2      	; 0x1596 <DIO_u8TogglePin+0x26>
    1594:	6f c0       	rjmp	.+222    	; 0x1674 <DIO_u8TogglePin+0x104>
	{
		switch(Copy_u8PortId)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	3d 83       	std	Y+5, r19	; 0x05
    159e:	2c 83       	std	Y+4, r18	; 0x04
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	91 05       	cpc	r25, r1
    15a8:	49 f1       	breq	.+82     	; 0x15fc <DIO_u8TogglePin+0x8c>
    15aa:	2c 81       	ldd	r18, Y+4	; 0x04
    15ac:	3d 81       	ldd	r19, Y+5	; 0x05
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	2c f4       	brge	.+10     	; 0x15be <DIO_u8TogglePin+0x4e>
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <DIO_u8TogglePin+0x64>
    15bc:	5c c0       	rjmp	.+184    	; 0x1676 <DIO_u8TogglePin+0x106>
    15be:	2c 81       	ldd	r18, Y+4	; 0x04
    15c0:	3d 81       	ldd	r19, Y+5	; 0x05
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	71 f1       	breq	.+92     	; 0x1624 <DIO_u8TogglePin+0xb4>
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	91 05       	cpc	r25, r1
    15d0:	e9 f1       	breq	.+122    	; 0x164c <DIO_u8TogglePin+0xdc>
    15d2:	51 c0       	rjmp	.+162    	; 0x1676 <DIO_u8TogglePin+0x106>
		{
			case DIO_u8_PORTA : TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    15d4:	ab e3       	ldi	r26, 0x3B	; 59
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	eb e3       	ldi	r30, 0x3B	; 59
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_u8TogglePin+0x82>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_u8TogglePin+0x7e>
    15f6:	84 27       	eor	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	3d c0       	rjmp	.+122    	; 0x1676 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTB : TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    15fc:	a8 e3       	ldi	r26, 0x38	; 56
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e8 e3       	ldi	r30, 0x38	; 56
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_u8TogglePin+0xaa>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_u8TogglePin+0xa6>
    161e:	84 27       	eor	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	29 c0       	rjmp	.+82     	; 0x1676 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTC : TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1624:	a5 e3       	ldi	r26, 0x35	; 53
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_u8TogglePin+0xd2>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_u8TogglePin+0xce>
    1646:	84 27       	eor	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	15 c0       	rjmp	.+42     	; 0x1676 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTD : TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    164c:	a2 e3       	ldi	r26, 0x32	; 50
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_u8TogglePin+0xfa>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_u8TogglePin+0xf6>
    166e:	84 27       	eor	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <DIO_u8TogglePin+0x106>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1674:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1676:	89 81       	ldd	r24, Y+1	; 0x01
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <DIO_u8SendMostNebble>:

u8 DIO_u8SendMostNebble(u8 Copy_u8PortId, u8 Copy_u8Status )
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	00 d0       	rcall	.+0      	; 0x168e <DIO_u8SendMostNebble+0x6>
    168e:	00 d0       	rcall	.+0      	; 0x1690 <DIO_u8SendMostNebble+0x8>
    1690:	0f 92       	push	r0
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	8a 83       	std	Y+2, r24	; 0x02
    1698:	6b 83       	std	Y+3, r22	; 0x03
    Copy_u8Status &= 0xF0;
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	80 7f       	andi	r24, 0xF0	; 240
    169e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <=  DIO_u8_PORTD)
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	84 30       	cpi	r24, 0x04	; 4
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <DIO_u8SendMostNebble+0x24>
    16aa:	5f c0       	rjmp	.+190    	; 0x176a <DIO_u8SendMostNebble+0xe2>
	{
		switch(Copy_u8PortId)
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3d 83       	std	Y+5, r19	; 0x05
    16b4:	2c 83       	std	Y+4, r18	; 0x04
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	29 f1       	breq	.+74     	; 0x170a <DIO_u8SendMostNebble+0x82>
    16c0:	2c 81       	ldd	r18, Y+4	; 0x04
    16c2:	3d 81       	ldd	r19, Y+5	; 0x05
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <DIO_u8SendMostNebble+0x4c>
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	61 f0       	breq	.+24     	; 0x16ea <DIO_u8SendMostNebble+0x62>
    16d2:	4c c0       	rjmp	.+152    	; 0x176c <DIO_u8SendMostNebble+0xe4>
    16d4:	2c 81       	ldd	r18, Y+4	; 0x04
    16d6:	3d 81       	ldd	r19, Y+5	; 0x05
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	31 f1       	breq	.+76     	; 0x172a <DIO_u8SendMostNebble+0xa2>
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	89 f1       	breq	.+98     	; 0x174a <DIO_u8SendMostNebble+0xc2>
    16e8:	41 c0       	rjmp	.+130    	; 0x176c <DIO_u8SendMostNebble+0xe4>
        {
			case DIO_u8_PORTA : DIO_u8_PORTA_REG &= 0x0F; DIO_u8_PORTA_REG |= Copy_u8Status ; break;
    16ea:	ab e3       	ldi	r26, 0x3B	; 59
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e3       	ldi	r30, 0x3B	; 59
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8f 70       	andi	r24, 0x0F	; 15
    16f6:	8c 93       	st	X, r24
    16f8:	ab e3       	ldi	r26, 0x3B	; 59
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	90 81       	ld	r25, Z
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	89 2b       	or	r24, r25
    1706:	8c 93       	st	X, r24
    1708:	31 c0       	rjmp	.+98     	; 0x176c <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTB : DIO_u8_PORTB_REG &= 0x0F; DIO_u8_PORTB_REG |= Copy_u8Status ; break;
    170a:	a8 e3       	ldi	r26, 0x38	; 56
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e8 e3       	ldi	r30, 0x38	; 56
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8f 70       	andi	r24, 0x0F	; 15
    1716:	8c 93       	st	X, r24
    1718:	a8 e3       	ldi	r26, 0x38	; 56
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e8 e3       	ldi	r30, 0x38	; 56
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	90 81       	ld	r25, Z
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	89 2b       	or	r24, r25
    1726:	8c 93       	st	X, r24
    1728:	21 c0       	rjmp	.+66     	; 0x176c <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTC : DIO_u8_PORTC_REG &= 0x0F; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    172a:	a5 e3       	ldi	r26, 0x35	; 53
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e3       	ldi	r30, 0x35	; 53
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 70       	andi	r24, 0x0F	; 15
    1736:	8c 93       	st	X, r24
    1738:	a5 e3       	ldi	r26, 0x35	; 53
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e5 e3       	ldi	r30, 0x35	; 53
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	90 81       	ld	r25, Z
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	89 2b       	or	r24, r25
    1746:	8c 93       	st	X, r24
    1748:	11 c0       	rjmp	.+34     	; 0x176c <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTD : DIO_u8_PORTD_REG &= 0x0F; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    174a:	a2 e3       	ldi	r26, 0x32	; 50
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e2 e3       	ldi	r30, 0x32	; 50
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	8f 70       	andi	r24, 0x0F	; 15
    1756:	8c 93       	st	X, r24
    1758:	a5 e3       	ldi	r26, 0x35	; 53
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e5 e3       	ldi	r30, 0x35	; 53
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	90 81       	ld	r25, Z
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	89 2b       	or	r24, r25
    1766:	8c 93       	st	X, r24
    1768:	01 c0       	rjmp	.+2      	; 0x176c <DIO_u8SendMostNebble+0xe4>
        }
	}
    else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    176a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    176c:	89 81       	ldd	r24, Y+1	; 0x01
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <DIO_u8SendLeastNebble>:


u8   DIO_u8SendLeastNebble   (u8 Copy_u8PortId, u8 Copy_u8Status)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <DIO_u8SendLeastNebble+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <DIO_u8SendLeastNebble+0x8>
    1786:	0f 92       	push	r0
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	8a 83       	std	Y+2, r24	; 0x02
    178e:	6b 83       	std	Y+3, r22	; 0x03
	Copy_u8Status &= 0x0F;
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	8f 70       	andi	r24, 0x0F	; 15
    1794:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <=  DIO_u8_PORTD)
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <DIO_u8SendLeastNebble+0x24>
    17a0:	5f c0       	rjmp	.+190    	; 0x1860 <DIO_u8SendLeastNebble+0xe2>
	{
		switch (Copy_u8PortId)
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3d 83       	std	Y+5, r19	; 0x05
    17aa:	2c 83       	std	Y+4, r18	; 0x04
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	29 f1       	breq	.+74     	; 0x1800 <DIO_u8SendLeastNebble+0x82>
    17b6:	2c 81       	ldd	r18, Y+4	; 0x04
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	2c f4       	brge	.+10     	; 0x17ca <DIO_u8SendLeastNebble+0x4c>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	61 f0       	breq	.+24     	; 0x17e0 <DIO_u8SendLeastNebble+0x62>
    17c8:	4c c0       	rjmp	.+152    	; 0x1862 <DIO_u8SendLeastNebble+0xe4>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	31 f1       	breq	.+76     	; 0x1820 <DIO_u8SendLeastNebble+0xa2>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	91 05       	cpc	r25, r1
    17dc:	89 f1       	breq	.+98     	; 0x1840 <DIO_u8SendLeastNebble+0xc2>
    17de:	41 c0       	rjmp	.+130    	; 0x1862 <DIO_u8SendLeastNebble+0xe4>
        {
			case DIO_u8_PORTA : DIO_u8_PORTA_REG &= 0xF0; DIO_u8_PORTA_REG |= Copy_u8Status ; break;
    17e0:	ab e3       	ldi	r26, 0x3B	; 59
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	eb e3       	ldi	r30, 0x3B	; 59
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 7f       	andi	r24, 0xF0	; 240
    17ec:	8c 93       	st	X, r24
    17ee:	ab e3       	ldi	r26, 0x3B	; 59
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	eb e3       	ldi	r30, 0x3B	; 59
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	90 81       	ld	r25, Z
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	89 2b       	or	r24, r25
    17fc:	8c 93       	st	X, r24
    17fe:	31 c0       	rjmp	.+98     	; 0x1862 <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTB : DIO_u8_PORTB_REG &= 0xF0; DIO_u8_PORTB_REG |= Copy_u8Status ; break;
    1800:	a8 e3       	ldi	r26, 0x38	; 56
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e8 e3       	ldi	r30, 0x38	; 56
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 7f       	andi	r24, 0xF0	; 240
    180c:	8c 93       	st	X, r24
    180e:	a8 e3       	ldi	r26, 0x38	; 56
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e8 e3       	ldi	r30, 0x38	; 56
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	90 81       	ld	r25, Z
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	89 2b       	or	r24, r25
    181c:	8c 93       	st	X, r24
    181e:	21 c0       	rjmp	.+66     	; 0x1862 <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTC : DIO_u8_PORTC_REG &= 0xF0; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    1820:	a5 e3       	ldi	r26, 0x35	; 53
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e5 e3       	ldi	r30, 0x35	; 53
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 7f       	andi	r24, 0xF0	; 240
    182c:	8c 93       	st	X, r24
    182e:	a5 e3       	ldi	r26, 0x35	; 53
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e3       	ldi	r30, 0x35	; 53
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	90 81       	ld	r25, Z
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	89 2b       	or	r24, r25
    183c:	8c 93       	st	X, r24
    183e:	11 c0       	rjmp	.+34     	; 0x1862 <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTD : DIO_u8_PORTD_REG &= 0xF0; DIO_u8_PORTD_REG |= Copy_u8Status ; break;
    1840:	a2 e3       	ldi	r26, 0x32	; 50
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e2 e3       	ldi	r30, 0x32	; 50
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	80 7f       	andi	r24, 0xF0	; 240
    184c:	8c 93       	st	X, r24
    184e:	a2 e3       	ldi	r26, 0x32	; 50
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e2 e3       	ldi	r30, 0x32	; 50
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	90 81       	ld	r25, Z
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	89 2b       	or	r24, r25
    185c:	8c 93       	st	X, r24
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <DIO_u8SendLeastNebble+0xe4>
        }
	}
    else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1860:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <EEPROM_u8WriteDataByte>:
#include"EEPROM_interface.h"
#include"EEPROM_private.h"
#include"EEPROM_config.h"

u8 EEPROM_u8WriteDataByte(u16 Copy_u16ByteAddress , u8 Copy_u8DataByte)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	63 97       	sbiw	r28, 0x13	; 19
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	9a 8b       	std	Y+18, r25	; 0x12
    188a:	89 8b       	std	Y+17, r24	; 0x11
    188c:	6b 8b       	std	Y+19, r22	; 0x13
	u8 Local_u8ErrorState = STD_TYPES_OK;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	88 8b       	std	Y+16, r24	; 0x10
	TWI_ErrorState Local_enumTWIErrorState = TWI_OK;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	8f 87       	std	Y+15, r24	; 0x0f

    /*1-Send Start Condition*/
    Local_enumTWIErrorState = TWI_enuSendStartCondition();
    1896:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <TWI_enuSendStartCondition>
    189a:	8f 87       	std	Y+15, r24	; 0x0f
    Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    189c:	8f 85       	ldd	r24, Y+15	; 0x0f
    189e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    18a2:	88 8b       	std	Y+16, r24	; 0x10

    /*2-Send Slave Address With Write Operation*/
    Local_enumTWIErrorState = TWI_enuSendSlaveAddWithWrite((EEPROM_u8_FIXED_ADDRESS) | (EEPROM_u8_A2_ADDRESS << 2) | ((Copy_u16ByteAddress >> 8) & 3));
    18a4:	89 89       	ldd	r24, Y+17	; 0x11
    18a6:	9a 89       	ldd	r25, Y+18	; 0x12
    18a8:	89 2f       	mov	r24, r25
    18aa:	99 27       	eor	r25, r25
    18ac:	83 70       	andi	r24, 0x03	; 3
    18ae:	80 65       	ori	r24, 0x50	; 80
    18b0:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_enuSendSlaveAddWithWrite>
    18b4:	8f 87       	std	Y+15, r24	; 0x0f
    Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    18b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    18bc:	88 8b       	std	Y+16, r24	; 0x10

    /*3-Send Byte Address*/
    Local_enumTWIErrorState = TWI_enuMasterSendDataByte((u8)Copy_u16ByteAddress);
    18be:	89 89       	ldd	r24, Y+17	; 0x11
    18c0:	0e 94 47 18 	call	0x308e	; 0x308e <TWI_enuMasterSendDataByte>
    18c4:	8f 87       	std	Y+15, r24	; 0x0f
    Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    18c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    18cc:	88 8b       	std	Y+16, r24	; 0x10

    /*4-Send Data Byte*/
    Local_enumTWIErrorState = TWI_enuMasterSendDataByte(Copy_u8DataByte);
    18ce:	8b 89       	ldd	r24, Y+19	; 0x13
    18d0:	0e 94 47 18 	call	0x308e	; 0x308e <TWI_enuMasterSendDataByte>
    18d4:	8f 87       	std	Y+15, r24	; 0x0f
    Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    18d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    18dc:	88 8b       	std	Y+16, r24	; 0x10

    /*5-Send Stop Condition*/
    TWI_enuSendStopCondition();
    18de:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <TWI_enuSendStopCondition>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 ea       	ldi	r26, 0xA0	; 160
    18e8:	b1 e4       	ldi	r27, 0x41	; 65
    18ea:	8b 87       	std	Y+11, r24	; 0x0b
    18ec:	9c 87       	std	Y+12, r25	; 0x0c
    18ee:	ad 87       	std	Y+13, r26	; 0x0d
    18f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4a ef       	ldi	r20, 0xFA	; 250
    1900:	54 e4       	ldi	r21, 0x44	; 68
    1902:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8f 83       	std	Y+7, r24	; 0x07
    190c:	98 87       	std	Y+8, r25	; 0x08
    190e:	a9 87       	std	Y+9, r26	; 0x09
    1910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1912:	6f 81       	ldd	r22, Y+7	; 0x07
    1914:	78 85       	ldd	r23, Y+8	; 0x08
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e8       	ldi	r20, 0x80	; 128
    1920:	5f e3       	ldi	r21, 0x3F	; 63
    1922:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1926:	88 23       	and	r24, r24
    1928:	2c f4       	brge	.+10     	; 0x1934 <EEPROM_u8WriteDataByte+0xc0>
		__ticks = 1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	3f c0       	rjmp	.+126    	; 0x19b2 <EEPROM_u8WriteDataByte+0x13e>
	else if (__tmp > 65535)
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	4c f5       	brge	.+82     	; 0x199e <EEPROM_u8WriteDataByte+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	6b 85       	ldd	r22, Y+11	; 0x0b
    194e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1950:	8d 85       	ldd	r24, Y+13	; 0x0d
    1952:	9e 85       	ldd	r25, Y+14	; 0x0e
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <EEPROM_u8WriteDataByte+0x120>
    1976:	88 ec       	ldi	r24, 0xC8	; 200
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9c 83       	std	Y+4, r25	; 0x04
    197c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <EEPROM_u8WriteDataByte+0x10e>
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	69 f7       	brne	.-38     	; 0x1976 <EEPROM_u8WriteDataByte+0x102>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <EEPROM_u8WriteDataByte+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <EEPROM_u8WriteDataByte+0x14a>
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01

    /*6-Delay 5 msec*/
    _delay_ms(20);

	return Local_u8ErrorState;
    19c6:	88 89       	ldd	r24, Y+16	; 0x10
}
    19c8:	63 96       	adiw	r28, 0x13	; 19
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte (u16 Copy_u16ByteAddress , u8* Copy_pu8ReturnedData)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	64 97       	sbiw	r28, 0x14	; 20
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	9a 8b       	std	Y+18, r25	; 0x12
    19f0:	89 8b       	std	Y+17, r24	; 0x11
    19f2:	7c 8b       	std	Y+20, r23	; 0x14
    19f4:	6b 8b       	std	Y+19, r22	; 0x13
	u8 Local_u8ErrorState = STD_TYPES_OK;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	88 8b       	std	Y+16, r24	; 0x10
	TWI_ErrorState Local_enumTWIErrorState = TWI_OK;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	8f 87       	std	Y+15, r24	; 0x0f
     if(Copy_pu8ReturnedData != NULL)
    19fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1a00:	9c 89       	ldd	r25, Y+20	; 0x14
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <EEPROM_u8ReadDataByte+0x2e>
    1a06:	ac c0       	rjmp	.+344    	; 0x1b60 <EEPROM_u8ReadDataByte+0x186>
     {
    	 /*1-Send Start Condition*/
		 Local_enumTWIErrorState = TWI_enuSendStartCondition();
    1a08:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <TWI_enuSendStartCondition>
    1a0c:	8f 87       	std	Y+15, r24	; 0x0f
		 Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    1a0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a10:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    1a14:	88 8b       	std	Y+16, r24	; 0x10
		 

		 /*2-Send Slave Address With Write Operation*/
		 Local_enumTWIErrorState = TWI_enuSendSlaveAddWithWrite((EEPROM_u8_FIXED_ADDRESS) | (EEPROM_u8_A2_ADDRESS << 2)|((Copy_u16ByteAddress >> 8)));
    1a16:	89 89       	ldd	r24, Y+17	; 0x11
    1a18:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1a:	89 2f       	mov	r24, r25
    1a1c:	99 27       	eor	r25, r25
    1a1e:	80 65       	ori	r24, 0x50	; 80
    1a20:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <TWI_enuSendSlaveAddWithWrite>
    1a24:	8f 87       	std	Y+15, r24	; 0x0f
		 Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    1a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a28:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    1a2c:	88 8b       	std	Y+16, r24	; 0x10

		 /*3-Send Byte Address*/
		 Local_enumTWIErrorState = TWI_enuMasterSendDataByte((u8)Copy_u16ByteAddress);
    1a2e:	89 89       	ldd	r24, Y+17	; 0x11
    1a30:	0e 94 47 18 	call	0x308e	; 0x308e <TWI_enuMasterSendDataByte>
    1a34:	8f 87       	std	Y+15, r24	; 0x0f
		 Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    1a36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a38:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    1a3c:	88 8b       	std	Y+16, r24	; 0x10

		 /*4-Send Restart Condition*/
		 Local_enumTWIErrorState = TWI_enuSendReStartCondition();
    1a3e:	0e 94 7e 17 	call	0x2efc	; 0x2efc <TWI_enuSendReStartCondition>
    1a42:	8f 87       	std	Y+15, r24	; 0x0f
		 Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    1a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a46:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    1a4a:	88 8b       	std	Y+16, r24	; 0x10

		 /*5-Send Slave Address With Read Operation*/
		 Local_enumTWIErrorState = TWI_enuSendSlaveAddressWithRead((EEPROM_u8_FIXED_ADDRESS) | (EEPROM_u8_A2_ADDRESS << 2)|((Copy_u16ByteAddress >> 8)));
    1a4c:	89 89       	ldd	r24, Y+17	; 0x11
    1a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a50:	89 2f       	mov	r24, r25
    1a52:	99 27       	eor	r25, r25
    1a54:	80 65       	ori	r24, 0x50	; 80
    1a56:	0e 94 05 18 	call	0x300a	; 0x300a <TWI_enuSendSlaveAddressWithRead>
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
		 Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    1a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    1a62:	88 8b       	std	Y+16, r24	; 0x10

		 /*6-Read Data Byte*/
		 Local_enumTWIErrorState = TWI_enuMasterReadDataByte(Copy_pu8ReturnedData);
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	0e 94 71 18 	call	0x30e2	; 0x30e2 <TWI_enuMasterReadDataByte>
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
		 Local_u8ErrorState = Private_u8CheckErrorState(Local_enumTWIErrorState);
    1a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a70:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Private_u8CheckErrorState>
    1a74:	88 8b       	std	Y+16, r24	; 0x10

		 /*7-Send Stop Condition*/
		 TWI_enuSendStopCondition();
    1a76:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <TWI_enuSendStopCondition>
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 ea       	ldi	r26, 0xA0	; 160
    1a80:	b1 e4       	ldi	r27, 0x41	; 65
    1a82:	8b 87       	std	Y+11, r24	; 0x0b
    1a84:	9c 87       	std	Y+12, r25	; 0x0c
    1a86:	ad 87       	std	Y+13, r26	; 0x0d
    1a88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4a ef       	ldi	r20, 0xFA	; 250
    1a98:	54 e4       	ldi	r21, 0x44	; 68
    1a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8f 83       	std	Y+7, r24	; 0x07
    1aa4:	98 87       	std	Y+8, r25	; 0x08
    1aa6:	a9 87       	std	Y+9, r26	; 0x09
    1aa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	2c f4       	brge	.+10     	; 0x1acc <EEPROM_u8ReadDataByte+0xf2>
		__ticks = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	3f c0       	rjmp	.+126    	; 0x1b4a <EEPROM_u8ReadDataByte+0x170>
	else if (__tmp > 65535)
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	57 e4       	ldi	r21, 0x47	; 71
    1adc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ae0:	18 16       	cp	r1, r24
    1ae2:	4c f5       	brge	.+82     	; 0x1b36 <EEPROM_u8ReadDataByte+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e2       	ldi	r20, 0x20	; 32
    1af2:	51 e4       	ldi	r21, 0x41	; 65
    1af4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	0f c0       	rjmp	.+30     	; 0x1b2c <EEPROM_u8ReadDataByte+0x152>
    1b0e:	88 ec       	ldi	r24, 0xC8	; 200
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <EEPROM_u8ReadDataByte+0x140>
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	69 f7       	brne	.-38     	; 0x1b0e <EEPROM_u8ReadDataByte+0x134>
    1b34:	16 c0       	rjmp	.+44     	; 0x1b62 <EEPROM_u8ReadDataByte+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b36:	6f 81       	ldd	r22, Y+7	; 0x07
    1b38:	78 85       	ldd	r23, Y+8	; 0x08
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <EEPROM_u8ReadDataByte+0x17c>
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <EEPROM_u8ReadDataByte+0x188>
		 /*8-Delay 5 msec*/
		  _delay_ms(20);
     }
     else
     {
    	 Local_u8ErrorState = STD_TYPES_NOK;
    1b60:	18 8a       	std	Y+16, r1	; 0x10
     }

     return Local_u8ErrorState;
    1b62:	88 89       	ldd	r24, Y+16	; 0x10
}
    1b64:	64 96       	adiw	r28, 0x14	; 20
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <Private_u8CheckErrorState>:

static u8 Private_u8CheckErrorState(TWI_ErrorState Copy_enumErrorState)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <Private_u8CheckErrorState+0x6>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enumErrorState != TWI_OK)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <Private_u8CheckErrorState+0x18>
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1b8c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <KPD_u8GetKeyState>:
static const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};

static const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

u8 KPD_u8GetKeyState(u8* Copy_pu8ReturnedKey)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	65 97       	sbiw	r28, 0x15	; 21
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	9d 8b       	std	Y+21, r25	; 0x15
    1bb0:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowCounter;
	u8 Local_u8ColCounter;
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
    1bb6:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    1bb8:	8c 89       	ldd	r24, Y+20	; 0x14
    1bba:	9d 89       	ldd	r25, Y+21	; 0x15
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <KPD_u8GetKeyState+0x28>
    1bc0:	f0 c0       	rjmp	.+480    	; 0x1da2 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
    1bc2:	ec 89       	ldd	r30, Y+20	; 0x14
    1bc4:	fd 89       	ldd	r31, Y+21	; 0x15
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	80 83       	st	Z, r24
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    1bca:	19 8a       	std	Y+17, r1	; 0x11
    1bcc:	e5 c0       	rjmp	.+458    	; 0x1d98 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
    1bce:	89 89       	ldd	r24, Y+17	; 0x11
    1bd0:	88 2f       	mov	r24, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	eb 5d       	subi	r30, 0xDB	; 219
    1bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bda:	90 81       	ld	r25, Z
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	69 2f       	mov	r22, r25
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    1be6:	18 8a       	std	Y+16, r1	; 0x10
    1be8:	c1 c0       	rjmp	.+386    	; 0x1d6c <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    1bea:	88 89       	ldd	r24, Y+16	; 0x10
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	e7 5d       	subi	r30, 0xD7	; 215
    1bf4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf6:	90 81       	ld	r25, Z
    1bf8:	9e 01       	movw	r18, r28
    1bfa:	2d 5e       	subi	r18, 0xED	; 237
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	69 2f       	mov	r22, r25
    1c02:	a9 01       	movw	r20, r18
    1c04:	0e 94 bb 08 	call	0x1176	; 0x1176 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <KPD_u8GetKeyState+0x76>
    1c0e:	ab c0       	rjmp	.+342    	; 0x1d66 <KPD_u8GetKeyState+0x1cc>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 ea       	ldi	r26, 0xA0	; 160
    1c16:	b1 e4       	ldi	r27, 0x41	; 65
    1c18:	8b 87       	std	Y+11, r24	; 0x0b
    1c1a:	9c 87       	std	Y+12, r25	; 0x0c
    1c1c:	ad 87       	std	Y+13, r26	; 0x0d
    1c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a ef       	ldi	r20, 0xFA	; 250
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8f 83       	std	Y+7, r24	; 0x07
    1c3a:	98 87       	std	Y+8, r25	; 0x08
    1c3c:	a9 87       	std	Y+9, r26	; 0x09
    1c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <KPD_u8GetKeyState+0x128>
    1ca4:	88 ec       	ldi	r24, 0xC8	; 200
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <KPD_u8GetKeyState+0x116>
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <KPD_u8GetKeyState+0x10a>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <KPD_u8GetKeyState+0x152>
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    1cf4:	88 89       	ldd	r24, Y+16	; 0x10
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e7 5d       	subi	r30, 0xD7	; 215
    1cfe:	fd 4f       	sbci	r31, 0xFD	; 253
    1d00:	90 81       	ld	r25, Z
    1d02:	9e 01       	movw	r18, r28
    1d04:	2d 5e       	subi	r18, 0xED	; 237
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	69 2f       	mov	r22, r25
    1d0c:	a9 01       	movw	r20, r18
    1d0e:	0e 94 bb 08 	call	0x1176	; 0x1176 <DIO_u8GetPinValue>
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <KPD_u8GetKeyState+0x198>
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    1d14:	88 89       	ldd	r24, Y+16	; 0x10
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	e7 5d       	subi	r30, 0xD7	; 215
    1d1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d20:	90 81       	ld	r25, Z
    1d22:	9e 01       	movw	r18, r28
    1d24:	2d 5e       	subi	r18, 0xED	; 237
    1d26:	3f 4f       	sbci	r19, 0xFF	; 255
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	69 2f       	mov	r22, r25
    1d2c:	a9 01       	movw	r20, r18
    1d2e:	0e 94 bb 08 	call	0x1176	; 0x1176 <DIO_u8GetPinValue>
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					while(Local_u8PinValue == DIO_u8_LOW)
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	88 23       	and	r24, r24
    1d36:	71 f3       	breq	.-36     	; 0x1d14 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
    1d38:	89 89       	ldd	r24, Y+17	; 0x11
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	88 89       	ldd	r24, Y+16	; 0x10
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	ca 01       	movw	r24, r20
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	fc 01       	movw	r30, r24
    1d54:	eb 5e       	subi	r30, 0xEB	; 235
    1d56:	fd 4f       	sbci	r31, 0xFD	; 253
    1d58:	80 81       	ld	r24, Z
    1d5a:	ec 89       	ldd	r30, Y+20	; 0x14
    1d5c:	fd 89       	ldd	r31, Y+21	; 0x15
    1d5e:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	8f 87       	std	Y+15, r24	; 0x0f
    1d64:	07 c0       	rjmp	.+14     	; 0x1d74 <KPD_u8GetKeyState+0x1da>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    1d66:	88 89       	ldd	r24, Y+16	; 0x10
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	88 8b       	std	Y+16, r24	; 0x10
    1d6c:	88 89       	ldd	r24, Y+16	; 0x10
    1d6e:	84 30       	cpi	r24, 0x04	; 4
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <KPD_u8GetKeyState+0x1da>
    1d72:	3b cf       	rjmp	.-394    	; 0x1bea <KPD_u8GetKeyState+0x50>
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
					Local_u8Flag = 1;
					break; 
				}
			}
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_HIGH);
    1d74:	89 89       	ldd	r24, Y+17	; 0x11
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	eb 5d       	subi	r30, 0xDB	; 219
    1d7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d80:	90 81       	ld	r25, Z
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	69 2f       	mov	r22, r25
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			if(Local_u8Flag == 1) 
    1d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	49 f0       	breq	.+18     	; 0x1da4 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    1d92:	89 89       	ldd	r24, Y+17	; 0x11
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	89 8b       	std	Y+17, r24	; 0x11
    1d98:	89 89       	ldd	r24, Y+17	; 0x11
    1d9a:	84 30       	cpi	r24, 0x04	; 4
    1d9c:	08 f4       	brcc	.+2      	; 0x1da0 <KPD_u8GetKeyState+0x206>
    1d9e:	17 cf       	rjmp	.-466    	; 0x1bce <KPD_u8GetKeyState+0x34>
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <KPD_u8GetKeyState+0x20a>
			}	
		}
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    1da2:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    1da4:	8a 89       	ldd	r24, Y+18	; 0x12
	
}
    1da6:	65 96       	adiw	r28, 0x15	; 21
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <LCD_voidInit>:
/*HAL*/
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"
void LCD_voidInit(void)
{
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	cc 54       	subi	r28, 0x4C	; 76
    1dc6:	d0 40       	sbci	r29, 0x00	; 0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e7 5b       	subi	r30, 0xB7	; 183
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	ac e0       	ldi	r26, 0x0C	; 12
    1dde:	b2 e4       	ldi	r27, 0x42	; 66
    1de0:	80 83       	st	Z, r24
    1de2:	91 83       	std	Z+1, r25	; 0x01
    1de4:	a2 83       	std	Z+2, r26	; 0x02
    1de6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	8e 01       	movw	r16, r28
    1dea:	0b 5b       	subi	r16, 0xBB	; 187
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
    1dee:	fe 01       	movw	r30, r28
    1df0:	e7 5b       	subi	r30, 0xB7	; 183
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	4a ef       	ldi	r20, 0xFA	; 250
    1e02:	54 e4       	ldi	r21, 0x44	; 68
    1e04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	80 83       	st	Z, r24
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	a2 83       	std	Z+2, r26	; 0x02
    1e14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e16:	fe 01       	movw	r30, r28
    1e18:	eb 5b       	subi	r30, 0xBB	; 187
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	44 f4       	brge	.+16     	; 0x1e44 <LCD_voidInit+0x8c>
		__ticks = 1;
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 5b       	subi	r30, 0xBD	; 189
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
    1e42:	64 c0       	rjmp	.+200    	; 0x1f0c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1e44:	fe 01       	movw	r30, r28
    1e46:	eb 5b       	subi	r30, 0xBB	; 187
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	0c f0       	brlt	.+2      	; 0x1e64 <LCD_voidInit+0xac>
    1e62:	43 c0       	rjmp	.+134    	; 0x1eea <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e64:	fe 01       	movw	r30, r28
    1e66:	e7 5b       	subi	r30, 0xB7	; 183
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	8e 01       	movw	r16, r28
    1e84:	0d 5b       	subi	r16, 0xBD	; 189
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	f8 01       	movw	r30, r16
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	1f c0       	rjmp	.+62     	; 0x1eda <LCD_voidInit+0x122>
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ef 5b       	subi	r30, 0xBF	; 191
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	88 ec       	ldi	r24, 0xC8	; 200
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ef 5b       	subi	r30, 0xBF	; 191
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_voidInit+0xfc>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ef 5b       	subi	r30, 0xBF	; 191
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec2:	de 01       	movw	r26, r28
    1ec4:	ad 5b       	subi	r26, 0xBD	; 189
    1ec6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ed 5b       	subi	r30, 0xBD	; 189
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	11 96       	adiw	r26, 0x01	; 1
    1ed6:	9c 93       	st	X, r25
    1ed8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	fe 01       	movw	r30, r28
    1edc:	ed 5b       	subi	r30, 0xBD	; 189
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	d1 f6       	brne	.-76     	; 0x1e9c <LCD_voidInit+0xe4>
    1ee8:	24 c0       	rjmp	.+72     	; 0x1f32 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	8e 01       	movw	r16, r28
    1eec:	0d 5b       	subi	r16, 0xBD	; 189
    1eee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	eb 5b       	subi	r30, 0xBB	; 187
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	f8 01       	movw	r30, r16
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ed 5b       	subi	r30, 0xBD	; 189
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	fe 01       	movw	r30, r28
    1f18:	ff 96       	adiw	r30, 0x3f	; 63
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
    1f1e:	fe 01       	movw	r30, r28
    1f20:	ff 96       	adiw	r30, 0x3f	; 63
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_voidInit+0x16e>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ff 96       	adiw	r30, 0x3f	; 63
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
	_delay_ms(35);
	
	/*1- Function Set CMND*/
	LCD_voidSendCmnd(CONC(0,0,1,LCD_u8_MODE,LCD_u8_INTIAL_LINE_NUM,LCD_u8_INTIAL_FONT,0,0));
    1f32:	88 e3       	ldi	r24, 0x38	; 56
    1f34:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e2       	ldi	r26, 0x20	; 32
    1f3e:	b2 e4       	ldi	r27, 0x42	; 66
    1f40:	8b af       	std	Y+59, r24	; 0x3b
    1f42:	9c af       	std	Y+60, r25	; 0x3c
    1f44:	ad af       	std	Y+61, r26	; 0x3d
    1f46:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f48:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f4a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f50:	2b ea       	ldi	r18, 0xAB	; 171
    1f52:	3a ea       	ldi	r19, 0xAA	; 170
    1f54:	4a e2       	ldi	r20, 0x2A	; 42
    1f56:	50 e4       	ldi	r21, 0x40	; 64
    1f58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8f ab       	std	Y+55, r24	; 0x37
    1f62:	98 af       	std	Y+56, r25	; 0x38
    1f64:	a9 af       	std	Y+57, r26	; 0x39
    1f66:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f68:	6f a9       	ldd	r22, Y+55	; 0x37
    1f6a:	78 ad       	ldd	r23, Y+56	; 0x38
    1f6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	1c f4       	brge	.+6      	; 0x1f86 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	8e ab       	std	Y+54, r24	; 0x36
    1f84:	91 c0       	rjmp	.+290    	; 0x20a8 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1f86:	6f a9       	ldd	r22, Y+55	; 0x37
    1f88:	78 ad       	ldd	r23, Y+56	; 0x38
    1f8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	53 e4       	ldi	r21, 0x43	; 67
    1f96:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	0c f0       	brlt	.+2      	; 0x1fa0 <LCD_voidInit+0x1e8>
    1f9e:	7b c0       	rjmp	.+246    	; 0x2096 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1fa0:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fa2:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	4a e7       	ldi	r20, 0x7A	; 122
    1fae:	54 e4       	ldi	r21, 0x44	; 68
    1fb0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	8a ab       	std	Y+50, r24	; 0x32
    1fba:	9b ab       	std	Y+51, r25	; 0x33
    1fbc:	ac ab       	std	Y+52, r26	; 0x34
    1fbe:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	6a a9       	ldd	r22, Y+50	; 0x32
    1fc2:	7b a9       	ldd	r23, Y+51	; 0x33
    1fc4:	8c a9       	ldd	r24, Y+52	; 0x34
    1fc6:	9d a9       	ldd	r25, Y+53	; 0x35
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a ef       	ldi	r20, 0xFA	; 250
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8e a7       	std	Y+46, r24	; 0x2e
    1fda:	9f a7       	std	Y+47, r25	; 0x2f
    1fdc:	a8 ab       	std	Y+48, r26	; 0x30
    1fde:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1fe0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fe2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fe4:	88 a9       	ldd	r24, Y+48	; 0x30
    1fe6:	99 a9       	ldd	r25, Y+49	; 0x31
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <LCD_voidInit+0x24a>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9d a7       	std	Y+45, r25	; 0x2d
    1ffe:	8c a7       	std	Y+44, r24	; 0x2c
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2002:	6e a5       	ldd	r22, Y+46	; 0x2e
    2004:	7f a5       	ldd	r23, Y+47	; 0x2f
    2006:	88 a9       	ldd	r24, Y+48	; 0x30
    2008:	99 a9       	ldd	r25, Y+49	; 0x31
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	6a a9       	ldd	r22, Y+50	; 0x32
    201c:	7b a9       	ldd	r23, Y+51	; 0x33
    201e:	8c a9       	ldd	r24, Y+52	; 0x34
    2020:	9d a9       	ldd	r25, Y+53	; 0x35
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9d a7       	std	Y+45, r25	; 0x2d
    2040:	8c a7       	std	Y+44, r24	; 0x2c
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <LCD_voidInit+0x2aa>
    2044:	88 ec       	ldi	r24, 0xC8	; 200
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9b a7       	std	Y+43, r25	; 0x2b
    204a:	8a a7       	std	Y+42, r24	; 0x2a
    204c:	8a a5       	ldd	r24, Y+42	; 0x2a
    204e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_voidInit+0x298>
    2054:	9b a7       	std	Y+43, r25	; 0x2b
    2056:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	8c a5       	ldd	r24, Y+44	; 0x2c
    205a:	9d a5       	ldd	r25, Y+45	; 0x2d
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9d a7       	std	Y+45, r25	; 0x2d
    2060:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8c a5       	ldd	r24, Y+44	; 0x2c
    2064:	9d a5       	ldd	r25, Y+45	; 0x2d
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <LCD_voidInit+0x28c>
    206a:	24 c0       	rjmp	.+72     	; 0x20b4 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6e a5       	ldd	r22, Y+46	; 0x2e
    206e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2070:	88 a9       	ldd	r24, Y+48	; 0x30
    2072:	99 a9       	ldd	r25, Y+49	; 0x31
    2074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9d a7       	std	Y+45, r25	; 0x2d
    207e:	8c a7       	std	Y+44, r24	; 0x2c
    2080:	8c a5       	ldd	r24, Y+44	; 0x2c
    2082:	9d a5       	ldd	r25, Y+45	; 0x2d
    2084:	99 a7       	std	Y+41, r25	; 0x29
    2086:	88 a7       	std	Y+40, r24	; 0x28
    2088:	88 a5       	ldd	r24, Y+40	; 0x28
    208a:	99 a5       	ldd	r25, Y+41	; 0x29
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_voidInit+0x2d4>
    2090:	99 a7       	std	Y+41, r25	; 0x29
    2092:	88 a7       	std	Y+40, r24	; 0x28
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2096:	6f a9       	ldd	r22, Y+55	; 0x37
    2098:	78 ad       	ldd	r23, Y+56	; 0x38
    209a:	89 ad       	ldd	r24, Y+57	; 0x39
    209c:	9a ad       	ldd	r25, Y+58	; 0x3a
    209e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	8e ab       	std	Y+54, r24	; 0x36
    20a8:	8e a9       	ldd	r24, Y+54	; 0x36
    20aa:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ac:	8f a1       	ldd	r24, Y+39	; 0x27
    20ae:	8a 95       	dec	r24
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_voidInit+0x2f6>
    20b2:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	
	/*2- Display NO/OFF Control */
	LCD_voidSendCmnd(CONC(0,0,0,0,1,1,LCD_u8_INTIAL_CURSOR_DISPLAY,LCD_u8_INTIAL_CURSOR_BLINK));
    20b4:	8c e0       	ldi	r24, 0x0C	; 12
    20b6:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e2       	ldi	r26, 0x20	; 32
    20c0:	b2 e4       	ldi	r27, 0x42	; 66
    20c2:	8b a3       	std	Y+35, r24	; 0x23
    20c4:	9c a3       	std	Y+36, r25	; 0x24
    20c6:	ad a3       	std	Y+37, r26	; 0x25
    20c8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	2b ea       	ldi	r18, 0xAB	; 171
    20d4:	3a ea       	ldi	r19, 0xAA	; 170
    20d6:	4a e2       	ldi	r20, 0x2A	; 42
    20d8:	50 e4       	ldi	r21, 0x40	; 64
    20da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8f 8f       	std	Y+31, r24	; 0x1f
    20e4:	98 a3       	std	Y+32, r25	; 0x20
    20e6:	a9 a3       	std	Y+33, r26	; 0x21
    20e8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    20ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20ec:	78 a1       	ldd	r23, Y+32	; 0x20
    20ee:	89 a1       	ldd	r24, Y+33	; 0x21
    20f0:	9a a1       	ldd	r25, Y+34	; 0x22
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	1c f4       	brge	.+6      	; 0x2108 <LCD_voidInit+0x350>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	8e 8f       	std	Y+30, r24	; 0x1e
    2106:	91 c0       	rjmp	.+290    	; 0x222a <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2108:	6f 8d       	ldd	r22, Y+31	; 0x1f
    210a:	78 a1       	ldd	r23, Y+32	; 0x20
    210c:	89 a1       	ldd	r24, Y+33	; 0x21
    210e:	9a a1       	ldd	r25, Y+34	; 0x22
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	53 e4       	ldi	r21, 0x43	; 67
    2118:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	0c f0       	brlt	.+2      	; 0x2122 <LCD_voidInit+0x36a>
    2120:	7b c0       	rjmp	.+246    	; 0x2218 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2122:	6b a1       	ldd	r22, Y+35	; 0x23
    2124:	7c a1       	ldd	r23, Y+36	; 0x24
    2126:	8d a1       	ldd	r24, Y+37	; 0x25
    2128:	9e a1       	ldd	r25, Y+38	; 0x26
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8a 8f       	std	Y+26, r24	; 0x1a
    213c:	9b 8f       	std	Y+27, r25	; 0x1b
    213e:	ac 8f       	std	Y+28, r26	; 0x1c
    2140:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2144:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2146:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2148:	9d 8d       	ldd	r25, Y+29	; 0x1d
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a ef       	ldi	r20, 0xFA	; 250
    2150:	54 e4       	ldi	r21, 0x44	; 68
    2152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8e 8b       	std	Y+22, r24	; 0x16
    215c:	9f 8b       	std	Y+23, r25	; 0x17
    215e:	a8 8f       	std	Y+24, r26	; 0x18
    2160:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2162:	6e 89       	ldd	r22, Y+22	; 0x16
    2164:	7f 89       	ldd	r23, Y+23	; 0x17
    2166:	88 8d       	ldd	r24, Y+24	; 0x18
    2168:	99 8d       	ldd	r25, Y+25	; 0x19
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <LCD_voidInit+0x3cc>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9d 8b       	std	Y+21, r25	; 0x15
    2180:	8c 8b       	std	Y+20, r24	; 0x14
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2184:	6e 89       	ldd	r22, Y+22	; 0x16
    2186:	7f 89       	ldd	r23, Y+23	; 0x17
    2188:	88 8d       	ldd	r24, Y+24	; 0x18
    218a:	99 8d       	ldd	r25, Y+25	; 0x19
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    219e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9d 8b       	std	Y+21, r25	; 0x15
    21c2:	8c 8b       	std	Y+20, r24	; 0x14
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <LCD_voidInit+0x42c>
    21c6:	88 ec       	ldi	r24, 0xC8	; 200
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9b 8b       	std	Y+19, r25	; 0x13
    21cc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ce:	8a 89       	ldd	r24, Y+18	; 0x12
    21d0:	9b 89       	ldd	r25, Y+19	; 0x13
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_voidInit+0x41a>
    21d6:	9b 8b       	std	Y+19, r25	; 0x13
    21d8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	8c 89       	ldd	r24, Y+20	; 0x14
    21dc:	9d 89       	ldd	r25, Y+21	; 0x15
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9d 8b       	std	Y+21, r25	; 0x15
    21e2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	8c 89       	ldd	r24, Y+20	; 0x14
    21e6:	9d 89       	ldd	r25, Y+21	; 0x15
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <LCD_voidInit+0x40e>
    21ec:	24 c0       	rjmp	.+72     	; 0x2236 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6e 89       	ldd	r22, Y+22	; 0x16
    21f0:	7f 89       	ldd	r23, Y+23	; 0x17
    21f2:	88 8d       	ldd	r24, Y+24	; 0x18
    21f4:	99 8d       	ldd	r25, Y+25	; 0x19
    21f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9d 8b       	std	Y+21, r25	; 0x15
    2200:	8c 8b       	std	Y+20, r24	; 0x14
    2202:	8c 89       	ldd	r24, Y+20	; 0x14
    2204:	9d 89       	ldd	r25, Y+21	; 0x15
    2206:	99 8b       	std	Y+17, r25	; 0x11
    2208:	88 8b       	std	Y+16, r24	; 0x10
    220a:	88 89       	ldd	r24, Y+16	; 0x10
    220c:	99 89       	ldd	r25, Y+17	; 0x11
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_voidInit+0x456>
    2212:	99 8b       	std	Y+17, r25	; 0x11
    2214:	88 8b       	std	Y+16, r24	; 0x10
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2218:	6f 8d       	ldd	r22, Y+31	; 0x1f
    221a:	78 a1       	ldd	r23, Y+32	; 0x20
    221c:	89 a1       	ldd	r24, Y+33	; 0x21
    221e:	9a a1       	ldd	r25, Y+34	; 0x22
    2220:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8e 8f       	std	Y+30, r24	; 0x1e
    222a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    222c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    222e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2230:	8a 95       	dec	r24
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCD_voidInit+0x478>
    2234:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	
	/* 3-Display Clear */
	LCD_voidSendCmnd(0b00000001);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 e0       	ldi	r26, 0x00	; 0
    2242:	b0 e4       	ldi	r27, 0x40	; 64
    2244:	8b 87       	std	Y+11, r24	; 0x0b
    2246:	9c 87       	std	Y+12, r25	; 0x0c
    2248:	ad 87       	std	Y+13, r26	; 0x0d
    224a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224c:	6b 85       	ldd	r22, Y+11	; 0x0b
    224e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2250:	8d 85       	ldd	r24, Y+13	; 0x0d
    2252:	9e 85       	ldd	r25, Y+14	; 0x0e
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4a ef       	ldi	r20, 0xFA	; 250
    225a:	54 e4       	ldi	r21, 0x44	; 68
    225c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	8f 83       	std	Y+7, r24	; 0x07
    2266:	98 87       	std	Y+8, r25	; 0x08
    2268:	a9 87       	std	Y+9, r26	; 0x09
    226a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	5f e3       	ldi	r21, 0x3F	; 63
    227c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2280:	88 23       	and	r24, r24
    2282:	2c f4       	brge	.+10     	; 0x228e <LCD_voidInit+0x4d6>
		__ticks = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
    228c:	3f c0       	rjmp	.+126    	; 0x230c <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	3f ef       	ldi	r19, 0xFF	; 255
    229a:	4f e7       	ldi	r20, 0x7F	; 127
    229c:	57 e4       	ldi	r21, 0x47	; 71
    229e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22a2:	18 16       	cp	r1, r24
    22a4:	4c f5       	brge	.+82     	; 0x22f8 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	0f c0       	rjmp	.+30     	; 0x22ee <LCD_voidInit+0x536>
    22d0:	88 ec       	ldi	r24, 0xC8	; 200
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_voidInit+0x524>
    22e0:	9c 83       	std	Y+4, r25	; 0x04
    22e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	69 f7       	brne	.-38     	; 0x22d0 <LCD_voidInit+0x518>
    22f6:	14 c0       	rjmp	.+40     	; 0x2320 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	9a 81       	ldd	r25, Y+2	; 0x02
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <LCD_voidInit+0x560>
    231c:	9a 83       	std	Y+2, r25	; 0x02
    231e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
	/* 4-Entry Mood Set */
	LCD_voidSendCmnd(0b00000110);
    2320:	86 e0       	ldi	r24, 0x06	; 6
    2322:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
	
}
    2326:	c4 5b       	subi	r28, 0xB4	; 180
    2328:	df 4f       	sbci	r29, 0xFF	; 255
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	1f 91       	pop	r17
    233a:	0f 91       	pop	r16
    233c:	08 95       	ret

0000233e <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	69 97       	sbiw	r28, 0x19	; 25
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	89 8f       	std	Y+25, r24	; 0x19
	#if LCD_u8_MODE == BIT_LENGTH_8
	/* step-1:Rs = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_LOW);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	61 e0       	ldi	r22, 0x01	; 1
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	/* Write command */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Cmnd  );
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	62 e0       	ldi	r22, 0x02	; 2
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e8       	ldi	r26, 0x80	; 128
    2380:	bf e3       	ldi	r27, 0x3F	; 63
    2382:	8d 8b       	std	Y+21, r24	; 0x15
    2384:	9e 8b       	std	Y+22, r25	; 0x16
    2386:	af 8b       	std	Y+23, r26	; 0x17
    2388:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	2b ea       	ldi	r18, 0xAB	; 171
    2394:	3a ea       	ldi	r19, 0xAA	; 170
    2396:	4a e2       	ldi	r20, 0x2A	; 42
    2398:	50 e4       	ldi	r21, 0x40	; 64
    239a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	89 8b       	std	Y+17, r24	; 0x11
    23a4:	9a 8b       	std	Y+18, r25	; 0x12
    23a6:	ab 8b       	std	Y+19, r26	; 0x13
    23a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23aa:	69 89       	ldd	r22, Y+17	; 0x11
    23ac:	7a 89       	ldd	r23, Y+18	; 0x12
    23ae:	8b 89       	ldd	r24, Y+19	; 0x13
    23b0:	9c 89       	ldd	r25, Y+20	; 0x14
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	1c f4       	brge	.+6      	; 0x23c8 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	88 8b       	std	Y+16, r24	; 0x10
    23c6:	91 c0       	rjmp	.+290    	; 0x24ea <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    23c8:	69 89       	ldd	r22, Y+17	; 0x11
    23ca:	7a 89       	ldd	r23, Y+18	; 0x12
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	53 e4       	ldi	r21, 0x43	; 67
    23d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23dc:	18 16       	cp	r1, r24
    23de:	0c f0       	brlt	.+2      	; 0x23e2 <LCD_voidSendCmnd+0xa4>
    23e0:	7b c0       	rjmp	.+246    	; 0x24d8 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    23e2:	6d 89       	ldd	r22, Y+21	; 0x15
    23e4:	7e 89       	ldd	r23, Y+22	; 0x16
    23e6:	8f 89       	ldd	r24, Y+23	; 0x17
    23e8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	4a e7       	ldi	r20, 0x7A	; 122
    23f0:	54 e4       	ldi	r21, 0x44	; 68
    23f2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8c 87       	std	Y+12, r24	; 0x0c
    23fc:	9d 87       	std	Y+13, r25	; 0x0d
    23fe:	ae 87       	std	Y+14, r26	; 0x0e
    2400:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	6c 85       	ldd	r22, Y+12	; 0x0c
    2404:	7d 85       	ldd	r23, Y+13	; 0x0d
    2406:	8e 85       	ldd	r24, Y+14	; 0x0e
    2408:	9f 85       	ldd	r25, Y+15	; 0x0f
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a ef       	ldi	r20, 0xFA	; 250
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	88 87       	std	Y+8, r24	; 0x08
    241c:	99 87       	std	Y+9, r25	; 0x09
    241e:	aa 87       	std	Y+10, r26	; 0x0a
    2420:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2422:	68 85       	ldd	r22, Y+8	; 0x08
    2424:	79 85       	ldd	r23, Y+9	; 0x09
    2426:	8a 85       	ldd	r24, Y+10	; 0x0a
    2428:	9b 85       	ldd	r25, Y+11	; 0x0b
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9f 83       	std	Y+7, r25	; 0x07
    2440:	8e 83       	std	Y+6, r24	; 0x06
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2444:	68 85       	ldd	r22, Y+8	; 0x08
    2446:	79 85       	ldd	r23, Y+9	; 0x09
    2448:	8a 85       	ldd	r24, Y+10	; 0x0a
    244a:	9b 85       	ldd	r25, Y+11	; 0x0b
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	6c 85       	ldd	r22, Y+12	; 0x0c
    245e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2460:	8e 85       	ldd	r24, Y+14	; 0x0e
    2462:	9f 85       	ldd	r25, Y+15	; 0x0f
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9f 83       	std	Y+7, r25	; 0x07
    2482:	8e 83       	std	Y+6, r24	; 0x06
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <LCD_voidSendCmnd+0x166>
    2486:	88 ec       	ldi	r24, 0xC8	; 200
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9d 83       	std	Y+5, r25	; 0x05
    248c:	8c 83       	std	Y+4, r24	; 0x04
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	9d 81       	ldd	r25, Y+5	; 0x05
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_voidSendCmnd+0x154>
    2496:	9d 83       	std	Y+5, r25	; 0x05
    2498:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	8e 81       	ldd	r24, Y+6	; 0x06
    249c:	9f 81       	ldd	r25, Y+7	; 0x07
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9f 83       	std	Y+7, r25	; 0x07
    24a2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	8e 81       	ldd	r24, Y+6	; 0x06
    24a6:	9f 81       	ldd	r25, Y+7	; 0x07
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <LCD_voidSendCmnd+0x148>
    24ac:	24 c0       	rjmp	.+72     	; 0x24f6 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	68 85       	ldd	r22, Y+8	; 0x08
    24b0:	79 85       	ldd	r23, Y+9	; 0x09
    24b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9f 83       	std	Y+7, r25	; 0x07
    24c0:	8e 83       	std	Y+6, r24	; 0x06
    24c2:	8e 81       	ldd	r24, Y+6	; 0x06
    24c4:	9f 81       	ldd	r25, Y+7	; 0x07
    24c6:	9b 83       	std	Y+3, r25	; 0x03
    24c8:	8a 83       	std	Y+2, r24	; 0x02
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	9b 81       	ldd	r25, Y+3	; 0x03
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_voidSendCmnd+0x190>
    24d2:	9b 83       	std	Y+3, r25	; 0x03
    24d4:	8a 83       	std	Y+2, r24	; 0x02
    24d6:	0f c0       	rjmp	.+30     	; 0x24f6 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24d8:	69 89       	ldd	r22, Y+17	; 0x11
    24da:	7a 89       	ldd	r23, Y+18	; 0x12
    24dc:	8b 89       	ldd	r24, Y+19	; 0x13
    24de:	9c 89       	ldd	r25, Y+20	; 0x14
    24e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	88 8b       	std	Y+16, r24	; 0x10
    24ea:	88 89       	ldd	r24, Y+16	; 0x10
    24ec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	8a 95       	dec	r24
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_voidSendCmnd+0x1b2>
    24f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	62 e0       	ldi	r22, 0x02	; 2
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
	_delay_us(10);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
	#endif
}
    2500:	69 96       	adiw	r28, 0x19	; 25
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	69 97       	sbiw	r28, 0x19	; 25
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	89 8f       	std	Y+25, r24	; 0x19
	#if LCD_u8_MODE == BIT_LENGTH_8
	/* step-1:Rs = 1 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_HIGH);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	61 e0       	ldi	r22, 0x01	; 1
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	/* Write char */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Char);
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	69 8d       	ldd	r22, Y+25	; 0x19
    2540:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	62 e0       	ldi	r22, 0x02	; 2
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e2       	ldi	r26, 0x20	; 32
    2554:	b1 e4       	ldi	r27, 0x41	; 65
    2556:	8d 8b       	std	Y+21, r24	; 0x15
    2558:	9e 8b       	std	Y+22, r25	; 0x16
    255a:	af 8b       	std	Y+23, r26	; 0x17
    255c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    255e:	6d 89       	ldd	r22, Y+21	; 0x15
    2560:	7e 89       	ldd	r23, Y+22	; 0x16
    2562:	8f 89       	ldd	r24, Y+23	; 0x17
    2564:	98 8d       	ldd	r25, Y+24	; 0x18
    2566:	2b ea       	ldi	r18, 0xAB	; 171
    2568:	3a ea       	ldi	r19, 0xAA	; 170
    256a:	4a e2       	ldi	r20, 0x2A	; 42
    256c:	50 e4       	ldi	r21, 0x40	; 64
    256e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	89 8b       	std	Y+17, r24	; 0x11
    2578:	9a 8b       	std	Y+18, r25	; 0x12
    257a:	ab 8b       	std	Y+19, r26	; 0x13
    257c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    257e:	69 89       	ldd	r22, Y+17	; 0x11
    2580:	7a 89       	ldd	r23, Y+18	; 0x12
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e8       	ldi	r20, 0x80	; 128
    258c:	5f e3       	ldi	r21, 0x3F	; 63
    258e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2592:	88 23       	and	r24, r24
    2594:	1c f4       	brge	.+6      	; 0x259c <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	88 8b       	std	Y+16, r24	; 0x10
    259a:	91 c0       	rjmp	.+290    	; 0x26be <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    259c:	69 89       	ldd	r22, Y+17	; 0x11
    259e:	7a 89       	ldd	r23, Y+18	; 0x12
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	9c 89       	ldd	r25, Y+20	; 0x14
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	53 e4       	ldi	r21, 0x43	; 67
    25ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	0c f0       	brlt	.+2      	; 0x25b6 <LCD_voidSendChar+0xa4>
    25b4:	7b c0       	rjmp	.+246    	; 0x26ac <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a e7       	ldi	r20, 0x7A	; 122
    25c4:	54 e4       	ldi	r21, 0x44	; 68
    25c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8c 87       	std	Y+12, r24	; 0x0c
    25d0:	9d 87       	std	Y+13, r25	; 0x0d
    25d2:	ae 87       	std	Y+14, r26	; 0x0e
    25d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    25d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    25da:	8e 85       	ldd	r24, Y+14	; 0x0e
    25dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4a ef       	ldi	r20, 0xFA	; 250
    25e4:	54 e4       	ldi	r21, 0x44	; 68
    25e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	88 87       	std	Y+8, r24	; 0x08
    25f0:	99 87       	std	Y+9, r25	; 0x09
    25f2:	aa 87       	std	Y+10, r26	; 0x0a
    25f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25f6:	68 85       	ldd	r22, Y+8	; 0x08
    25f8:	79 85       	ldd	r23, Y+9	; 0x09
    25fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    25fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5f e3       	ldi	r21, 0x3F	; 63
    2606:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    260a:	88 23       	and	r24, r24
    260c:	2c f4       	brge	.+10     	; 0x2618 <LCD_voidSendChar+0x106>
		__ticks = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9f 83       	std	Y+7, r25	; 0x07
    2614:	8e 83       	std	Y+6, r24	; 0x06
    2616:	3f c0       	rjmp	.+126    	; 0x2696 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2618:	68 85       	ldd	r22, Y+8	; 0x08
    261a:	79 85       	ldd	r23, Y+9	; 0x09
    261c:	8a 85       	ldd	r24, Y+10	; 0x0a
    261e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	3f ef       	ldi	r19, 0xFF	; 255
    2624:	4f e7       	ldi	r20, 0x7F	; 127
    2626:	57 e4       	ldi	r21, 0x47	; 71
    2628:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    262c:	18 16       	cp	r1, r24
    262e:	4c f5       	brge	.+82     	; 0x2682 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2630:	6c 85       	ldd	r22, Y+12	; 0x0c
    2632:	7d 85       	ldd	r23, Y+13	; 0x0d
    2634:	8e 85       	ldd	r24, Y+14	; 0x0e
    2636:	9f 85       	ldd	r25, Y+15	; 0x0f
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	51 e4       	ldi	r21, 0x41	; 65
    2640:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9f 83       	std	Y+7, r25	; 0x07
    2656:	8e 83       	std	Y+6, r24	; 0x06
    2658:	0f c0       	rjmp	.+30     	; 0x2678 <LCD_voidSendChar+0x166>
    265a:	88 ec       	ldi	r24, 0xC8	; 200
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9d 83       	std	Y+5, r25	; 0x05
    2660:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	9d 81       	ldd	r25, Y+5	; 0x05
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_voidSendChar+0x154>
    266a:	9d 83       	std	Y+5, r25	; 0x05
    266c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266e:	8e 81       	ldd	r24, Y+6	; 0x06
    2670:	9f 81       	ldd	r25, Y+7	; 0x07
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	9f 83       	std	Y+7, r25	; 0x07
    2676:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	8e 81       	ldd	r24, Y+6	; 0x06
    267a:	9f 81       	ldd	r25, Y+7	; 0x07
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	69 f7       	brne	.-38     	; 0x265a <LCD_voidSendChar+0x148>
    2680:	24 c0       	rjmp	.+72     	; 0x26ca <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2682:	68 85       	ldd	r22, Y+8	; 0x08
    2684:	79 85       	ldd	r23, Y+9	; 0x09
    2686:	8a 85       	ldd	r24, Y+10	; 0x0a
    2688:	9b 85       	ldd	r25, Y+11	; 0x0b
    268a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9f 83       	std	Y+7, r25	; 0x07
    2694:	8e 83       	std	Y+6, r24	; 0x06
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	9f 81       	ldd	r25, Y+7	; 0x07
    269a:	9b 83       	std	Y+3, r25	; 0x03
    269c:	8a 83       	std	Y+2, r24	; 0x02
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <LCD_voidSendChar+0x190>
    26a6:	9b 83       	std	Y+3, r25	; 0x03
    26a8:	8a 83       	std	Y+2, r24	; 0x02
    26aa:	0f c0       	rjmp	.+30     	; 0x26ca <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26ac:	69 89       	ldd	r22, Y+17	; 0x11
    26ae:	7a 89       	ldd	r23, Y+18	; 0x12
    26b0:	8b 89       	ldd	r24, Y+19	; 0x13
    26b2:	9c 89       	ldd	r25, Y+20	; 0x14
    26b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	88 8b       	std	Y+16, r24	; 0x10
    26be:	88 89       	ldd	r24, Y+16	; 0x10
    26c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	8a 95       	dec	r24
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_voidSendChar+0x1b2>
    26c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	62 e0       	ldi	r22, 0x02	; 2
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
	_delay_us(10);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
	#endif
}
    26d4:	69 96       	adiw	r28, 0x19	; 25
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <LCD_voidSendStr>:

void LCD_voidSendStr(u8* Copy_pu8Str )
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <LCD_voidSendStr+0x6>
    26ec:	0f 92       	push	r0
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	9b 83       	std	Y+3, r25	; 0x03
    26f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StrLen = 0;
    26f6:	19 82       	std	Y+1, r1	; 0x01
    26f8:	0e c0       	rjmp	.+28     	; 0x2716 <LCD_voidSendStr+0x30>
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	9b 81       	ldd	r25, Y+3	; 0x03
    2704:	fc 01       	movw	r30, r24
    2706:	e2 0f       	add	r30, r18
    2708:	f3 1f       	adc	r31, r19
    270a:	80 81       	ld	r24, Z
    270c:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
		Local_u8StrLen++;
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	8f 5f       	subi	r24, 0xFF	; 255
    2714:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendStr(u8* Copy_pu8Str )
{
	u8 Local_u8StrLen = 0;
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	fc 01       	movw	r30, r24
    2722:	e2 0f       	add	r30, r18
    2724:	f3 1f       	adc	r31, r19
    2726:	80 81       	ld	r24, Z
    2728:	88 23       	and	r24, r24
    272a:	39 f7       	brne	.-50     	; 0x26fa <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
		Local_u8StrLen++;
	}
}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <LCD_voidSendNum>:

void LCD_voidSendNum (u32  Copy_u32Num )
{
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	61 97       	sbiw	r28, 0x11	; 17
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	6e 87       	std	Y+14, r22	; 0x0e
    2752:	7f 87       	std	Y+15, r23	; 0x0f
    2754:	88 8b       	std	Y+16, r24	; 0x10
    2756:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8NumArr[10]= {0};
    2758:	8a e0       	ldi	r24, 0x0A	; 10
    275a:	fe 01       	movw	r30, r28
    275c:	34 96       	adiw	r30, 0x04	; 4
    275e:	df 01       	movw	r26, r30
    2760:	98 2f       	mov	r25, r24
    2762:	1d 92       	st	X+, r1
    2764:	9a 95       	dec	r25
    2766:	e9 f7       	brne	.-6      	; 0x2762 <LCD_voidSendNum+0x2a>
	u8 Local_u8ArrIndex = 0;
    2768:	1b 82       	std	Y+3, r1	; 0x03
    276a:	2d c0       	rjmp	.+90     	; 0x27c6 <LCD_voidSendNum+0x8e>
	while(Copy_u32Num > 0)
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	08 2f       	mov	r16, r24
    2770:	10 e0       	ldi	r17, 0x00	; 0
    2772:	8e 85       	ldd	r24, Y+14	; 0x0e
    2774:	9f 85       	ldd	r25, Y+15	; 0x0f
    2776:	a8 89       	ldd	r26, Y+16	; 0x10
    2778:	b9 89       	ldd	r27, Y+17	; 0x11
    277a:	2a e0       	ldi	r18, 0x0A	; 10
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__udivmodsi4>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	28 2f       	mov	r18, r24
    2790:	ce 01       	movw	r24, r28
    2792:	04 96       	adiw	r24, 0x04	; 4
    2794:	fc 01       	movw	r30, r24
    2796:	e0 0f       	add	r30, r16
    2798:	f1 1f       	adc	r31, r17
    279a:	20 83       	st	Z, r18
		Copy_u32Num /=10;
    279c:	8e 85       	ldd	r24, Y+14	; 0x0e
    279e:	9f 85       	ldd	r25, Y+15	; 0x0f
    27a0:	a8 89       	ldd	r26, Y+16	; 0x10
    27a2:	b9 89       	ldd	r27, Y+17	; 0x11
    27a4:	2a e0       	ldi	r18, 0x0A	; 10
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__udivmodsi4>
    27b4:	da 01       	movw	r26, r20
    27b6:	c9 01       	movw	r24, r18
    27b8:	8e 87       	std	Y+14, r24	; 0x0e
    27ba:	9f 87       	std	Y+15, r25	; 0x0f
    27bc:	a8 8b       	std	Y+16, r26	; 0x10
    27be:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ArrIndex++;
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	8f 5f       	subi	r24, 0xFF	; 255
    27c4:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidSendNum (u32  Copy_u32Num )
{
    u8 Local_u8NumArr[10]= {0};
	u8 Local_u8ArrIndex = 0;
	while(Copy_u32Num > 0)
    27c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    27ca:	a8 89       	ldd	r26, Y+16	; 0x10
    27cc:	b9 89       	ldd	r27, Y+17	; 0x11
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	a1 05       	cpc	r26, r1
    27d2:	b1 05       	cpc	r27, r1
    27d4:	59 f6       	brne	.-106    	; 0x276c <LCD_voidSendNum+0x34>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	88 2f       	mov	r24, r24
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	9a 83       	std	Y+2, r25	; 0x02
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	10 c0       	rjmp	.+32     	; 0x2804 <LCD_voidSendNum+0xcc>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
    27e4:	29 81       	ldd	r18, Y+1	; 0x01
    27e6:	3a 81       	ldd	r19, Y+2	; 0x02
    27e8:	ce 01       	movw	r24, r28
    27ea:	04 96       	adiw	r24, 0x04	; 4
    27ec:	fc 01       	movw	r30, r24
    27ee:	e2 0f       	add	r30, r18
    27f0:	f3 1f       	adc	r31, r19
    27f2:	80 81       	ld	r24, Z
    27f4:	80 5d       	subi	r24, 0xD0	; 208
    27f6:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	99 23       	and	r25, r25
    280a:	64 f7       	brge	.-40     	; 0x27e4 <LCD_voidSendNum+0xac>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
	}
} 
    280c:	61 96       	adiw	r28, 0x11	; 17
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	08 95       	ret

00002822 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY (u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	00 d0       	rcall	.+0      	; 0x2828 <LCD_u8GoToXY+0x6>
    2828:	00 d0       	rcall	.+0      	; 0x282a <LCD_u8GoToXY+0x8>
    282a:	0f 92       	push	r0
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	8a 83       	std	Y+2, r24	; 0x02
    2832:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Location <= 39)
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	88 32       	cpi	r24, 0x28	; 40
    283c:	e0 f4       	brcc	.+56     	; 0x2876 <LCD_u8GoToXY+0x54>
	{
			switch (Copy_u8LineNum)
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	3d 83       	std	Y+5, r19	; 0x05
    2846:	2c 83       	std	Y+4, r18	; 0x04
    2848:	8c 81       	ldd	r24, Y+4	; 0x04
    284a:	9d 81       	ldd	r25, Y+5	; 0x05
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	91 05       	cpc	r25, r1
    2850:	31 f0       	breq	.+12     	; 0x285e <LCD_u8GoToXY+0x3c>
    2852:	2c 81       	ldd	r18, Y+4	; 0x04
    2854:	3d 81       	ldd	r19, Y+5	; 0x05
    2856:	22 30       	cpi	r18, 0x02	; 2
    2858:	31 05       	cpc	r19, r1
    285a:	31 f0       	breq	.+12     	; 0x2868 <LCD_u8GoToXY+0x46>
    285c:	0a c0       	rjmp	.+20     	; 0x2872 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE_1   : LCD_voidSendCmnd (0x80 + Copy_u8Location); break;
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	80 58       	subi	r24, 0x80	; 128
    2862:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2866:	08 c0       	rjmp	.+16     	; 0x2878 <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE_2   : LCD_voidSendCmnd (0xC0 + Copy_u8Location); break;
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	80 54       	subi	r24, 0x40	; 64
    286c:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2870:	03 c0       	rjmp	.+6      	; 0x2878 <LCD_u8GoToXY+0x56>
			default              : Local_u8ErrorState = STD_TYPES_NOK;
    2872:	19 82       	std	Y+1, r1	; 0x01
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2876:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2878:	89 81       	ldd	r24, Y+1	; 0x01
}
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <LCD_voidClearScreen>:

void LCD_voidClearScreen (void)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	2e 97       	sbiw	r28, 0x0e	; 14
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd (0x01);
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e0       	ldi	r26, 0x00	; 0
    28aa:	b0 e4       	ldi	r27, 0x40	; 64
    28ac:	8b 87       	std	Y+11, r24	; 0x0b
    28ae:	9c 87       	std	Y+12, r25	; 0x0c
    28b0:	ad 87       	std	Y+13, r26	; 0x0d
    28b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a ef       	ldi	r20, 0xFA	; 250
    28c2:	54 e4       	ldi	r21, 0x44	; 68
    28c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	8f 83       	std	Y+7, r24	; 0x07
    28ce:	98 87       	std	Y+8, r25	; 0x08
    28d0:	a9 87       	std	Y+9, r26	; 0x09
    28d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d4:	6f 81       	ldd	r22, Y+7	; 0x07
    28d6:	78 85       	ldd	r23, Y+8	; 0x08
    28d8:	89 85       	ldd	r24, Y+9	; 0x09
    28da:	9a 85       	ldd	r25, Y+10	; 0x0a
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9e 83       	std	Y+6, r25	; 0x06
    28f2:	8d 83       	std	Y+5, r24	; 0x05
    28f4:	3f c0       	rjmp	.+126    	; 0x2974 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    28f6:	6f 81       	ldd	r22, Y+7	; 0x07
    28f8:	78 85       	ldd	r23, Y+8	; 0x08
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	3f ef       	ldi	r19, 0xFF	; 255
    2902:	4f e7       	ldi	r20, 0x7F	; 127
    2904:	57 e4       	ldi	r21, 0x47	; 71
    2906:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    290a:	18 16       	cp	r1, r24
    290c:	4c f5       	brge	.+82     	; 0x2960 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2910:	7c 85       	ldd	r23, Y+12	; 0x0c
    2912:	8d 85       	ldd	r24, Y+13	; 0x0d
    2914:	9e 85       	ldd	r25, Y+14	; 0x0e
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9e 83       	std	Y+6, r25	; 0x06
    2934:	8d 83       	std	Y+5, r24	; 0x05
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <LCD_voidClearScreen+0xcc>
    2938:	88 ec       	ldi	r24, 0xC8	; 200
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <LCD_voidClearScreen+0xba>
    2948:	9c 83       	std	Y+4, r25	; 0x04
    294a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	9e 83       	std	Y+6, r25	; 0x06
    2954:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	69 f7       	brne	.-38     	; 0x2938 <LCD_voidClearScreen+0xae>
    295e:	14 c0       	rjmp	.+40     	; 0x2988 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	6f 81       	ldd	r22, Y+7	; 0x07
    2962:	78 85       	ldd	r23, Y+8	; 0x08
    2964:	89 85       	ldd	r24, Y+9	; 0x09
    2966:	9a 85       	ldd	r25, Y+10	; 0x0a
    2968:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	8d 83       	std	Y+5, r24	; 0x05
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	9e 81       	ldd	r25, Y+6	; 0x06
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <LCD_voidClearScreen+0xf6>
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    2988:	2e 96       	adiw	r28, 0x0e	; 14
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <LCD_u8SendSpecialChar>:

u8 LCD_u8SendSpecialChar    (u8 Copy_u8CharNum , u8* Copy_pu8CharShape ,u8  Copy_u8LineNum , u8 Copy_u8Location )
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	2a 97       	sbiw	r28, 0x0a	; 10
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	8c 83       	std	Y+4, r24	; 0x04
    29b0:	7e 83       	std	Y+6, r23	; 0x06
    29b2:	6d 83       	std	Y+5, r22	; 0x05
    29b4:	4f 83       	std	Y+7, r20	; 0x07
    29b6:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	8b 83       	std	Y+3, r24	; 0x03
	if((Copy_u8CharNum <= 7)&&(Copy_u8Location <= 39)&&(Copy_u8LineNum <=2)) 
    29bc:	8c 81       	ldd	r24, Y+4	; 0x04
    29be:	88 30       	cpi	r24, 0x08	; 8
    29c0:	08 f0       	brcs	.+2      	; 0x29c4 <LCD_u8SendSpecialChar+0x2a>
    29c2:	79 c0       	rjmp	.+242    	; 0x2ab6 <LCD_u8SendSpecialChar+0x11c>
    29c4:	88 85       	ldd	r24, Y+8	; 0x08
    29c6:	88 32       	cpi	r24, 0x28	; 40
    29c8:	08 f0       	brcs	.+2      	; 0x29cc <LCD_u8SendSpecialChar+0x32>
    29ca:	75 c0       	rjmp	.+234    	; 0x2ab6 <LCD_u8SendSpecialChar+0x11c>
    29cc:	8f 81       	ldd	r24, Y+7	; 0x07
    29ce:	83 30       	cpi	r24, 0x03	; 3
    29d0:	08 f0       	brcs	.+2      	; 0x29d4 <LCD_u8SendSpecialChar+0x3a>
    29d2:	71 c0       	rjmp	.+226    	; 0x2ab6 <LCD_u8SendSpecialChar+0x11c>
	{
		switch(Copy_u8CharNum)
    29d4:	8c 81       	ldd	r24, Y+4	; 0x04
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	3a 87       	std	Y+10, r19	; 0x0a
    29dc:	29 87       	std	Y+9, r18	; 0x09
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	83 30       	cpi	r24, 0x03	; 3
    29e4:	91 05       	cpc	r25, r1
    29e6:	a9 f1       	breq	.+106    	; 0x2a52 <LCD_u8SendSpecialChar+0xb8>
    29e8:	29 85       	ldd	r18, Y+9	; 0x09
    29ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    29ec:	24 30       	cpi	r18, 0x04	; 4
    29ee:	31 05       	cpc	r19, r1
    29f0:	7c f4       	brge	.+30     	; 0x2a10 <LCD_u8SendSpecialChar+0x76>
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	91 05       	cpc	r25, r1
    29fa:	19 f1       	breq	.+70     	; 0x2a42 <LCD_u8SendSpecialChar+0xa8>
    29fc:	29 85       	ldd	r18, Y+9	; 0x09
    29fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a00:	22 30       	cpi	r18, 0x02	; 2
    2a02:	31 05       	cpc	r19, r1
    2a04:	14 f5       	brge	.+68     	; 0x2a4a <LCD_u8SendSpecialChar+0xb0>
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	b1 f0       	breq	.+44     	; 0x2a3a <LCD_u8SendSpecialChar+0xa0>
    2a0e:	34 c0       	rjmp	.+104    	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
    2a10:	29 85       	ldd	r18, Y+9	; 0x09
    2a12:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a14:	25 30       	cpi	r18, 0x05	; 5
    2a16:	31 05       	cpc	r19, r1
    2a18:	21 f1       	breq	.+72     	; 0x2a62 <LCD_u8SendSpecialChar+0xc8>
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	85 30       	cpi	r24, 0x05	; 5
    2a20:	91 05       	cpc	r25, r1
    2a22:	dc f0       	brlt	.+54     	; 0x2a5a <LCD_u8SendSpecialChar+0xc0>
    2a24:	29 85       	ldd	r18, Y+9	; 0x09
    2a26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a28:	26 30       	cpi	r18, 0x06	; 6
    2a2a:	31 05       	cpc	r19, r1
    2a2c:	f1 f0       	breq	.+60     	; 0x2a6a <LCD_u8SendSpecialChar+0xd0>
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	87 30       	cpi	r24, 0x07	; 7
    2a34:	91 05       	cpc	r25, r1
    2a36:	e9 f0       	breq	.+58     	; 0x2a72 <LCD_u8SendSpecialChar+0xd8>
    2a38:	1f c0       	rjmp	.+62     	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
		{
			case 0:LCD_voidSendCmnd(0b01000000); break; //0
    2a3a:	80 e4       	ldi	r24, 0x40	; 64
    2a3c:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2a40:	1b c0       	rjmp	.+54     	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
			case 1:LCD_voidSendCmnd(0b01001000); break; //8
    2a42:	88 e4       	ldi	r24, 0x48	; 72
    2a44:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2a48:	17 c0       	rjmp	.+46     	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
			case 2:LCD_voidSendCmnd(0b01010000); break; //16
    2a4a:	80 e5       	ldi	r24, 0x50	; 80
    2a4c:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2a50:	13 c0       	rjmp	.+38     	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
			case 3:LCD_voidSendCmnd(0b01011000); break; //24
    2a52:	88 e5       	ldi	r24, 0x58	; 88
    2a54:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
    2a5a:	80 e6       	ldi	r24, 0x60	; 96
    2a5c:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2a60:	0b c0       	rjmp	.+22     	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
    2a62:	88 e6       	ldi	r24, 0x68	; 104
    2a64:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2a68:	07 c0       	rjmp	.+14     	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
    2a6a:	80 e7       	ldi	r24, 0x70	; 112
    2a6c:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <LCD_u8SendSpecialChar+0xde>
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
    2a72:	88 e7       	ldi	r24, 0x78	; 120
    2a74:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
		}
		for(int i=0 ;i <8 ;i++)
    2a78:	1a 82       	std	Y+2, r1	; 0x02
    2a7a:	19 82       	std	Y+1, r1	; 0x01
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <LCD_u8SendSpecialChar+0x102>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
    2a7e:	29 81       	ldd	r18, Y+1	; 0x01
    2a80:	3a 81       	ldd	r19, Y+2	; 0x02
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	9e 81       	ldd	r25, Y+6	; 0x06
    2a86:	fc 01       	movw	r30, r24
    2a88:	e2 0f       	add	r30, r18
    2a8a:	f3 1f       	adc	r31, r19
    2a8c:	80 81       	ld	r24, Z
    2a8e:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
		}
		for(int i=0 ;i <8 ;i++)
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa0:	88 30       	cpi	r24, 0x08	; 8
    2aa2:	91 05       	cpc	r25, r1
    2aa4:	64 f3       	brlt	.-40     	; 0x2a7e <LCD_u8SendSpecialChar+0xe4>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
		}
	    LCD_u8GoToXY(Copy_u8LineNum ,Copy_u8Location );	
    2aa6:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa8:	68 85       	ldd	r22, Y+8	; 0x08
    2aaa:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2aae:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab0:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <LCD_u8SendSpecialChar+0x11e>
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    2ab6:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2aba:	2a 96       	adiw	r28, 0x0a	; 10
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <LCD_voidShiftRight>:

void LCD_voidShiftRight(void)
{
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	2e 97       	sbiw	r28, 0x0e	; 14
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011100);
    2ae0:	8c e1       	ldi	r24, 0x1C	; 28
    2ae2:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a8 ec       	ldi	r26, 0xC8	; 200
    2aec:	b2 e4       	ldi	r27, 0x42	; 66
    2aee:	8b 87       	std	Y+11, r24	; 0x0b
    2af0:	9c 87       	std	Y+12, r25	; 0x0c
    2af2:	ad 87       	std	Y+13, r26	; 0x0d
    2af4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	4a ef       	ldi	r20, 0xFA	; 250
    2b04:	54 e4       	ldi	r21, 0x44	; 68
    2b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8f 83       	std	Y+7, r24	; 0x07
    2b10:	98 87       	std	Y+8, r25	; 0x08
    2b12:	a9 87       	std	Y+9, r26	; 0x09
    2b14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b16:	6f 81       	ldd	r22, Y+7	; 0x07
    2b18:	78 85       	ldd	r23, Y+8	; 0x08
    2b1a:	89 85       	ldd	r24, Y+9	; 0x09
    2b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	2c f4       	brge	.+10     	; 0x2b38 <LCD_voidShiftRight+0x6c>
		__ticks = 1;
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9e 83       	std	Y+6, r25	; 0x06
    2b34:	8d 83       	std	Y+5, r24	; 0x05
    2b36:	3f c0       	rjmp	.+126    	; 0x2bb6 <LCD_voidShiftRight+0xea>
	else if (__tmp > 65535)
    2b38:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3a:	78 85       	ldd	r23, Y+8	; 0x08
    2b3c:	89 85       	ldd	r24, Y+9	; 0x09
    2b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	3f ef       	ldi	r19, 0xFF	; 255
    2b44:	4f e7       	ldi	r20, 0x7F	; 127
    2b46:	57 e4       	ldi	r21, 0x47	; 71
    2b48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b4c:	18 16       	cp	r1, r24
    2b4e:	4c f5       	brge	.+82     	; 0x2ba2 <LCD_voidShiftRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e2       	ldi	r20, 0x20	; 32
    2b5e:	51 e4       	ldi	r21, 0x41	; 65
    2b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
    2b78:	0f c0       	rjmp	.+30     	; 0x2b98 <LCD_voidShiftRight+0xcc>
    2b7a:	88 ec       	ldi	r24, 0xC8	; 200
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9c 83       	std	Y+4, r25	; 0x04
    2b80:	8b 83       	std	Y+3, r24	; 0x03
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	9c 81       	ldd	r25, Y+4	; 0x04
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <LCD_voidShiftRight+0xba>
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	69 f7       	brne	.-38     	; 0x2b7a <LCD_voidShiftRight+0xae>
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <LCD_voidShiftRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba4:	78 85       	ldd	r23, Y+8	; 0x08
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9e 83       	std	Y+6, r25	; 0x06
    2bb4:	8d 83       	std	Y+5, r24	; 0x05
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bba:	9a 83       	std	Y+2, r25	; 0x02
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_voidShiftRight+0xf6>
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    2bca:	2e 96       	adiw	r28, 0x0e	; 14
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <LCD_voidShiftLeft>:

void LCD_voidShiftLeft(void)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	2e 97       	sbiw	r28, 0x0e	; 14
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011000);
    2bf0:	88 e1       	ldi	r24, 0x18	; 24
    2bf2:	0e 94 9f 11 	call	0x233e	; 0x233e <LCD_voidSendCmnd>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a8 ec       	ldi	r26, 0xC8	; 200
    2bfc:	b2 e4       	ldi	r27, 0x42	; 66
    2bfe:	8b 87       	std	Y+11, r24	; 0x0b
    2c00:	9c 87       	std	Y+12, r25	; 0x0c
    2c02:	ad 87       	std	Y+13, r26	; 0x0d
    2c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	4a ef       	ldi	r20, 0xFA	; 250
    2c14:	54 e4       	ldi	r21, 0x44	; 68
    2c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	8f 83       	std	Y+7, r24	; 0x07
    2c20:	98 87       	std	Y+8, r25	; 0x08
    2c22:	a9 87       	std	Y+9, r26	; 0x09
    2c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c26:	6f 81       	ldd	r22, Y+7	; 0x07
    2c28:	78 85       	ldd	r23, Y+8	; 0x08
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	2c f4       	brge	.+10     	; 0x2c48 <LCD_voidShiftLeft+0x6c>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	3f c0       	rjmp	.+126    	; 0x2cc6 <LCD_voidShiftLeft+0xea>
	else if (__tmp > 65535)
    2c48:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4a:	78 85       	ldd	r23, Y+8	; 0x08
    2c4c:	89 85       	ldd	r24, Y+9	; 0x09
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	3f ef       	ldi	r19, 0xFF	; 255
    2c54:	4f e7       	ldi	r20, 0x7F	; 127
    2c56:	57 e4       	ldi	r21, 0x47	; 71
    2c58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c5c:	18 16       	cp	r1, r24
    2c5e:	4c f5       	brge	.+82     	; 0x2cb2 <LCD_voidShiftLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e2       	ldi	r20, 0x20	; 32
    2c6e:	51 e4       	ldi	r21, 0x41	; 65
    2c70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <LCD_voidShiftLeft+0xcc>
    2c8a:	88 ec       	ldi	r24, 0xC8	; 200
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_voidShiftLeft+0xba>
    2c9a:	9c 83       	std	Y+4, r25	; 0x04
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	69 f7       	brne	.-38     	; 0x2c8a <LCD_voidShiftLeft+0xae>
    2cb0:	14 c0       	rjmp	.+40     	; 0x2cda <LCD_voidShiftLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb4:	78 85       	ldd	r23, Y+8	; 0x08
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <LCD_voidShiftLeft+0xf6>
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
    2cda:	2e 96       	adiw	r28, 0x0e	; 14
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <SPI_voidInit>:
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_config.h"

void SPI_voidInit(void)
{
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
	#if   (SPI_u8_Mood == SPI_u8_MASTE_MOOD)

		  /*Select Master Mood*/
		  SET_BIT(SPI_u8_SPCR_REG , MASTR);
    2cf4:	ad e2       	ldi	r26, 0x2D	; 45
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	ed e2       	ldi	r30, 0x2D	; 45
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	80 61       	ori	r24, 0x10	; 16
    2d00:	8c 93       	st	X, r24

		  /*Data Order-->MSB First*/
		  CLR_BIT(SPI_u8_SPCR_REG , DORD);
    2d02:	ad e2       	ldi	r26, 0x2D	; 45
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	ed e2       	ldi	r30, 0x2D	; 45
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8f 7d       	andi	r24, 0xDF	; 223
    2d0e:	8c 93       	st	X, r24

		  /*Select Clock = F\64*/
		  SET_BIT(SPI_u8_SPCR_REG , SPR1);
    2d10:	ad e2       	ldi	r26, 0x2D	; 45
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	ed e2       	ldi	r30, 0x2D	; 45
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	82 60       	ori	r24, 0x02	; 2
    2d1c:	8c 93       	st	X, r24
		  CLR_BIT(SPI_u8_SPCR_REG , SPR0);
    2d1e:	ad e2       	ldi	r26, 0x2D	; 45
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	ed e2       	ldi	r30, 0x2D	; 45
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	8e 7f       	andi	r24, 0xFE	; 254
    2d2a:	8c 93       	st	X, r24

		  /*Choose Clock Polarity And Clock Phase --> Raising Edge,Falling Edge,Sampling,Setup*/
		  CLR_BIT(SPI_u8_SPCR_REG , CPOL);
    2d2c:	ad e2       	ldi	r26, 0x2D	; 45
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	ed e2       	ldi	r30, 0x2D	; 45
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	87 7f       	andi	r24, 0xF7	; 247
    2d38:	8c 93       	st	X, r24
		  CLR_BIT(SPI_u8_SPCR_REG , CPHA);
    2d3a:	ad e2       	ldi	r26, 0x2D	; 45
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	ed e2       	ldi	r30, 0x2D	; 45
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	8b 7f       	andi	r24, 0xFB	; 251
    2d46:	8c 93       	st	X, r24

		  /*Enable SPI*/
		  SET_BIT(SPI_u8_SPCR_REG , SPE);
    2d48:	ad e2       	ldi	r26, 0x2D	; 45
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ed e2       	ldi	r30, 0x2D	; 45
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	80 64       	ori	r24, 0x40	; 64
    2d54:	8c 93       	st	X, r24

		   /*Enable SPI*/
		   SET_BIT(SPI_u8_SPCR_REG , SPE);

	#endif
}
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <SPI_u8TransRecieve>:

u8   SPI_u8TransRecieve(u8 Copy_u8TransByte , u8*Copy_pu8RecieveByte)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <SPI_u8TransRecieve+0x6>
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <SPI_u8TransRecieve+0x8>
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	8a 83       	std	Y+2, r24	; 0x02
    2d6a:	7c 83       	std	Y+4, r23	; 0x04
    2d6c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    2d6e:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_pu8RecieveByte != NULL)
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	89 f0       	breq	.+34     	; 0x2d9a <SPI_u8TransRecieve+0x3e>
	{
		/*Send Byte*/
		SPI_u8_SPDR_REG = Copy_u8TransByte;
    2d78:	ef e2       	ldi	r30, 0x2F	; 47
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	80 83       	st	Z, r24
		
		/*Check If The Transmission is Completed*/
		while((GET_BIT(SPI_u8_SPSR_REG,SPIF)) == 0);
    2d80:	ee e2       	ldi	r30, 0x2E	; 46
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	88 23       	and	r24, r24
    2d88:	dc f7       	brge	.-10     	; 0x2d80 <SPI_u8TransRecieve+0x24>
		
		/*Read Data*/
		*Copy_pu8RecieveByte = SPI_u8_SPDR_REG;
    2d8a:	ef e2       	ldi	r30, 0x2F	; 47
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	eb 81       	ldd	r30, Y+3	; 0x03
    2d92:	fc 81       	ldd	r31, Y+4	; 0x04
    2d94:	80 83       	st	Z, r24
		 
		Local_u8ErrorState = STD_TYPES_OK;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;	
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <SPI_voidSendSlaveByte>:

void SPI_voidSendSlaveByte  (u8 Copy_u8TransByte)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	0f 92       	push	r0
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	89 83       	std	Y+1, r24	; 0x01
	SPI_u8_SPDR_REG = Copy_u8TransByte;
    2db6:	ef e2       	ldi	r30, 0x2F	; 47
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	80 83       	st	Z, r24
	while((GET_BIT(SPI_u8_SPSR_REG,SPIF)) == 0);
    2dbe:	ee e2       	ldi	r30, 0x2E	; 46
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	88 23       	and	r24, r24
    2dc6:	dc f7       	brge	.-10     	; 0x2dbe <SPI_voidSendSlaveByte+0x14>
}
    2dc8:	0f 90       	pop	r0
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	08 95       	ret

00002dd0 <SPI_u8RecieveByte>:

u8 SPI_u8RecieveByte   (u8*Copy_pu8RecieveByte)
{
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	00 d0       	rcall	.+0      	; 0x2dd6 <SPI_u8RecieveByte+0x6>
    2dd6:	0f 92       	push	r0
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	9b 83       	std	Y+3, r25	; 0x03
    2dde:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    2de0:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_pu8RecieveByte != NULL)
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	9b 81       	ldd	r25, Y+3	; 0x03
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f0       	breq	.+26     	; 0x2e04 <SPI_u8RecieveByte+0x34>
	{
		/*Check If The Transmission is Completed*/
		while((GET_BIT(SPI_u8_SPSR_REG,SPIF)) == 0);
    2dea:	ee e2       	ldi	r30, 0x2E	; 46
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	88 23       	and	r24, r24
    2df2:	dc f7       	brge	.-10     	; 0x2dea <SPI_u8RecieveByte+0x1a>

		/*Read Data*/
		*Copy_pu8RecieveByte = SPI_u8_SPDR_REG;
    2df4:	ef e2       	ldi	r30, 0x2F	; 47
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	ea 81       	ldd	r30, Y+2	; 0x02
    2dfc:	fb 81       	ldd	r31, Y+3	; 0x03
    2dfe:	80 83       	st	Z, r24
		 
		Local_u8ErrorState = STD_TYPES_OK;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <TWI_voidMasterInit>:
#include "TWI_private.h"
#include "TWI_config.h"


void TWI_voidMasterInit(void)
{
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
	/*Set PreScaler Value = 1*/
	CLR_BIT(TWI_u8_TWSR_REG ,TWSR_TWPS0);
    2e1a:	a1 e2       	ldi	r26, 0x21	; 33
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	e1 e2       	ldi	r30, 0x21	; 33
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	8e 7f       	andi	r24, 0xFE	; 254
    2e26:	8c 93       	st	X, r24
	CLR_BIT(TWI_u8_TWSR_REG ,TWSR_TWPS1);
    2e28:	a1 e2       	ldi	r26, 0x21	; 33
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	e1 e2       	ldi	r30, 0x21	; 33
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	8d 7f       	andi	r24, 0xFD	; 253
    2e34:	8c 93       	st	X, r24

	/*Set TWBR With The Value => 400KHz*/ 
	TWI_u8_TWBR_REG = 2;
    2e36:	e0 e2       	ldi	r30, 0x20	; 32
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	80 83       	st	Z, r24

	/*Enable ACK*/
	//SET_BIT(TWI_u8_TWCR_REG,TWCR_TWEA);

	/*Enable TWI*/
	SET_BIT(TWI_u8_TWCR_REG,TWCR_TWEN);
    2e3e:	a6 e5       	ldi	r26, 0x56	; 86
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e6 e5       	ldi	r30, 0x56	; 86
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	84 60       	ori	r24, 0x04	; 4
    2e4a:	8c 93       	st	X, r24
}
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <TWI_enuSlaveInit>:

TWI_ErrorState   TWI_enuSlaveInit(u8 Copy_u8Address)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <TWI_enuSlaveInit+0x6>
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	89 83       	std	Y+1, r24	; 0x01
	
	if((Copy_u8Address <= 127)&&(Copy_u8Address != 0))
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	88 23       	and	r24, r24
    2e66:	bc f0       	brlt	.+46     	; 0x2e96 <TWI_enuSlaveInit+0x44>
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	88 23       	and	r24, r24
    2e6c:	a1 f0       	breq	.+40     	; 0x2e96 <TWI_enuSlaveInit+0x44>
	{
		/*Set Slave Address in TWAR*/
		TWI_u8_TWAR_REG = Copy_u8Address << 1;
    2e6e:	e2 e2       	ldi	r30, 0x22	; 34
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	88 0f       	add	r24, r24
    2e76:	80 83       	st	Z, r24

		/*Enable ACK*/
		SET_BIT(TWI_u8_TWCR_REG,TWCR_TWEA);
    2e78:	a6 e5       	ldi	r26, 0x56	; 86
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e6 e5       	ldi	r30, 0x56	; 86
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	80 64       	ori	r24, 0x40	; 64
    2e84:	8c 93       	st	X, r24

		/*Enable TWI*/
		SET_BIT(TWI_u8_TWCR_REG,TWCR_TWEN);
    2e86:	a6 e5       	ldi	r26, 0x56	; 86
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e6 e5       	ldi	r30, 0x56	; 86
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	84 60       	ori	r24, 0x04	; 4
    2e92:	8c 93       	st	X, r24
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <TWI_enuSlaveInit+0x48>
	}
	else
	{
		Local_enuErrorState = TWI_SLA_ERROR;
    2e96:	82 e0       	ldi	r24, 0x02	; 2
    2e98:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <TWI_enuSendStartCondition>:

TWI_ErrorState   TWI_enuSendStartCondition(void)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	0f 92       	push	r0
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	89 83       	std	Y+1, r24	; 0x01

	/*1-Start Condition*/ 
	SET_BIT(TWI_u8_TWCR_REG,TWCR_TWSTA);
    2eb4:	a6 e5       	ldi	r26, 0x56	; 86
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e6 e5       	ldi	r30, 0x56	; 86
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	80 62       	ori	r24, 0x20	; 32
    2ec0:	8c 93       	st	X, r24
	
	/*2-Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT);
    2ec2:	a6 e5       	ldi	r26, 0x56	; 86
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e6 e5       	ldi	r30, 0x56	; 86
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	80 68       	ori	r24, 0x80	; 128
    2ece:	8c 93       	st	X, r24

	/*3-Wait For The Flag To Be One*/
	while(GET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT) == 0);
    2ed0:	e6 e5       	ldi	r30, 0x56	; 86
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	88 23       	and	r24, r24
    2ed8:	dc f7       	brge	.-10     	; 0x2ed0 <TWI_enuSendStartCondition+0x2a>
	if((TWI_u8_TWSR_REG & 0xF8) != TWI_SC_ACK)
    2eda:	e1 e2       	ldi	r30, 0x21	; 33
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	88 7f       	andi	r24, 0xF8	; 248
    2ee6:	90 70       	andi	r25, 0x00	; 0
    2ee8:	88 30       	cpi	r24, 0x08	; 8
    2eea:	91 05       	cpc	r25, r1
    2eec:	11 f0       	breq	.+4      	; 0x2ef2 <TWI_enuSendStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_SC_ACK_ERROR;
    2eee:	83 e0       	ldi	r24, 0x03	; 3
    2ef0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ef4:	0f 90       	pop	r0
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <TWI_enuSendReStartCondition>:

TWI_ErrorState   TWI_enuSendReStartCondition(void)
{
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	0f 92       	push	r0
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	89 83       	std	Y+1, r24	; 0x01
	
	/*1-Start Condition*/ 
	SET_BIT(TWI_u8_TWCR_REG,TWCR_TWSTA);
    2f0a:	a6 e5       	ldi	r26, 0x56	; 86
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e6 e5       	ldi	r30, 0x56	; 86
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	80 62       	ori	r24, 0x20	; 32
    2f16:	8c 93       	st	X, r24
	
	/*2-Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT);
    2f18:	a6 e5       	ldi	r26, 0x56	; 86
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e6 e5       	ldi	r30, 0x56	; 86
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	80 68       	ori	r24, 0x80	; 128
    2f24:	8c 93       	st	X, r24

	/*3-Wait For The Flag To Be One*/
	while(GET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT) == 0);
    2f26:	e6 e5       	ldi	r30, 0x56	; 86
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	88 23       	and	r24, r24
    2f2e:	dc f7       	brge	.-10     	; 0x2f26 <TWI_enuSendReStartCondition+0x2a>
	/*Check The Status Code */
	if((TWI_u8_TWSR_REG & 0xF8) != TWI_RSC_ACK)
    2f30:	e1 e2       	ldi	r30, 0x21	; 33
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	88 7f       	andi	r24, 0xF8	; 248
    2f3c:	90 70       	andi	r25, 0x00	; 0
    2f3e:	80 31       	cpi	r24, 0x10	; 16
    2f40:	91 05       	cpc	r25, r1
    2f42:	11 f0       	breq	.+4      	; 0x2f48 <TWI_enuSendReStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_RSC_ACK_ERROR;
    2f44:	84 e0       	ldi	r24, 0x04	; 4
    2f46:	89 83       	std	Y+1, r24	; 0x01

	}
	
	return Local_enuErrorState;
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f4a:	0f 90       	pop	r0
    2f4c:	cf 91       	pop	r28
    2f4e:	df 91       	pop	r29
    2f50:	08 95       	ret

00002f52 <TWI_enuSendStopCondition>:

TWI_ErrorState   TWI_enuSendStopCondition(void)
{
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	0f 92       	push	r0
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	89 83       	std	Y+1, r24	; 0x01

	/*1-Stop Condition*/
	SET_BIT(TWI_u8_TWCR_REG,TWCR_TWSTO);
    2f60:	a6 e5       	ldi	r26, 0x56	; 86
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	e6 e5       	ldi	r30, 0x56	; 86
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	80 61       	ori	r24, 0x10	; 16
    2f6c:	8c 93       	st	X, r24
	
	/*2-Clear Flag */
	SET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT);
    2f6e:	a6 e5       	ldi	r26, 0x56	; 86
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	e6 e5       	ldi	r30, 0x56	; 86
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	80 68       	ori	r24, 0x80	; 128
    2f7a:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f7e:	0f 90       	pop	r0
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <TWI_enuSendSlaveAddWithWrite>:

TWI_ErrorState   TWI_enuSendSlaveAddWithWrite(u8 Copy_u8SlaveAddress)
{
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <TWI_enuSendSlaveAddWithWrite+0x6>
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8SlaveAddress <= 127)&&(Copy_u8SlaveAddress != 0))
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	88 23       	and	r24, r24
    2f9a:	7c f1       	brlt	.+94     	; 0x2ffa <TWI_enuSendSlaveAddWithWrite+0x74>
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	88 23       	and	r24, r24
    2fa0:	61 f1       	breq	.+88     	; 0x2ffa <TWI_enuSendSlaveAddWithWrite+0x74>
	{
		/*1-Write Slave Address + 0 in TWDR*/
		TWI_u8_TWDR_REG = Copy_u8SlaveAddress << 1;
    2fa2:	e3 e2       	ldi	r30, 0x23	; 35
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa8:	88 0f       	add	r24, r24
    2faa:	80 83       	st	Z, r24
		CLR_BIT(TWI_u8_TWDR_REG,0); 
    2fac:	a3 e2       	ldi	r26, 0x23	; 35
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e3 e2       	ldi	r30, 0x23	; 35
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	8e 7f       	andi	r24, 0xFE	; 254
    2fb8:	8c 93       	st	X, r24

		/*2-Clear Start Condition*/
	    CLR_BIT(TWI_u8_TWCR_REG,TWCR_TWSTA);
    2fba:	a6 e5       	ldi	r26, 0x56	; 86
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e6 e5       	ldi	r30, 0x56	; 86
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8f 7d       	andi	r24, 0xDF	; 223
    2fc6:	8c 93       	st	X, r24

		/*3-clear Flag*/
		SET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT);
    2fc8:	a6 e5       	ldi	r26, 0x56	; 86
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e6 e5       	ldi	r30, 0x56	; 86
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	80 68       	ori	r24, 0x80	; 128
    2fd4:	8c 93       	st	X, r24

		/*4-Wait For The Flag To Be One*/
		while(GET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT) == 0);
    2fd6:	e6 e5       	ldi	r30, 0x56	; 86
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	88 23       	and	r24, r24
    2fde:	dc f7       	brge	.-10     	; 0x2fd6 <TWI_enuSendSlaveAddWithWrite+0x50>

		/*Check The Status Code*/
		if((TWI_u8_TWSR_REG & 0xF8) != TWI_MT_SLA_W_ACK)
    2fe0:	e1 e2       	ldi	r30, 0x21	; 33
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	88 2f       	mov	r24, r24
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	88 7f       	andi	r24, 0xF8	; 248
    2fec:	90 70       	andi	r25, 0x00	; 0
    2fee:	88 31       	cpi	r24, 0x18	; 24
    2ff0:	91 05       	cpc	r25, r1
    2ff2:	29 f0       	breq	.+10     	; 0x2ffe <TWI_enuSendSlaveAddWithWrite+0x78>
		{
			Local_enuErrorState = TWI_MT_SLA_W_ACK_ERROR;
    2ff4:	85 e0       	ldi	r24, 0x05	; 5
    2ff6:	89 83       	std	Y+1, r24	; 0x01
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <TWI_enuSendSlaveAddWithWrite+0x78>
		}

	}
	else
	{
		Local_enuErrorState = TWI_SLA_ERROR;
    2ffa:	82 e0       	ldi	r24, 0x02	; 2
    2ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <TWI_enuSendSlaveAddressWithRead>:

TWI_ErrorState   TWI_enuSendSlaveAddressWithRead( u8 Copy_u8SlaveAddress)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <TWI_enuSendSlaveAddressWithRead+0x6>
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8SlaveAddress <= 127)&&(Copy_u8SlaveAddress != 0))
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	88 23       	and	r24, r24
    301e:	7c f1       	brlt	.+94     	; 0x307e <TWI_enuSendSlaveAddressWithRead+0x74>
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	88 23       	and	r24, r24
    3024:	61 f1       	breq	.+88     	; 0x307e <TWI_enuSendSlaveAddressWithRead+0x74>
	{
		/*1-Write Slave Address + 1 in TWDR*/
		TWI_u8_TWDR_REG = Copy_u8SlaveAddress << 1;
    3026:	e3 e2       	ldi	r30, 0x23	; 35
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	8a 81       	ldd	r24, Y+2	; 0x02
    302c:	88 0f       	add	r24, r24
    302e:	80 83       	st	Z, r24
		SET_BIT(TWI_u8_TWDR_REG,0); 
    3030:	a3 e2       	ldi	r26, 0x23	; 35
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	e3 e2       	ldi	r30, 0x23	; 35
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	81 60       	ori	r24, 0x01	; 1
    303c:	8c 93       	st	X, r24

		/*2-Clear Start Condition*/
	    CLR_BIT(TWI_u8_TWCR_REG,TWCR_TWSTA);
    303e:	a6 e5       	ldi	r26, 0x56	; 86
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	e6 e5       	ldi	r30, 0x56	; 86
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	8f 7d       	andi	r24, 0xDF	; 223
    304a:	8c 93       	st	X, r24

		/*3-clear Flag*/
		SET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT);
    304c:	a6 e5       	ldi	r26, 0x56	; 86
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e6 e5       	ldi	r30, 0x56	; 86
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	80 68       	ori	r24, 0x80	; 128
    3058:	8c 93       	st	X, r24
		
		/*4-Wait For The Flag To Be One*/
		while(GET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT) == 0);
    305a:	e6 e5       	ldi	r30, 0x56	; 86
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	88 23       	and	r24, r24
    3062:	dc f7       	brge	.-10     	; 0x305a <TWI_enuSendSlaveAddressWithRead+0x50>
		/*Check The Status Code*/
		if((TWI_u8_TWSR_REG & 0xF8) != TWI_MR_SLA_R_ACK)
    3064:	e1 e2       	ldi	r30, 0x21	; 33
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	88 2f       	mov	r24, r24
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	88 7f       	andi	r24, 0xF8	; 248
    3070:	90 70       	andi	r25, 0x00	; 0
    3072:	80 34       	cpi	r24, 0x40	; 64
    3074:	91 05       	cpc	r25, r1
    3076:	29 f0       	breq	.+10     	; 0x3082 <TWI_enuSendSlaveAddressWithRead+0x78>
		{
			Local_enuErrorState = TWI_MR_SLA_R_ACK_ERROR;
    3078:	86 e0       	ldi	r24, 0x06	; 6
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <TWI_enuSendSlaveAddressWithRead+0x78>
		}

	}
	else
	{
		Local_enuErrorState = TWI_SLA_ERROR;
    307e:	82 e0       	ldi	r24, 0x02	; 2
    3080:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3082:	89 81       	ldd	r24, Y+1	; 0x01
}
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	08 95       	ret

0000308e <TWI_enuMasterSendDataByte>:

TWI_ErrorState   TWI_enuMasterSendDataByte(u8 Copy_u8DataByte)
{
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	00 d0       	rcall	.+0      	; 0x3094 <TWI_enuMasterSendDataByte+0x6>
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	89 83       	std	Y+1, r24	; 0x01

	/*1-Write Data Byte in TWDR*/
	TWI_u8_TWDR_REG = Copy_u8DataByte;
    309e:	e3 e2       	ldi	r30, 0x23	; 35
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	80 83       	st	Z, r24

	/*2-clear Flag*/
	SET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT);
    30a6:	a6 e5       	ldi	r26, 0x56	; 86
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	e6 e5       	ldi	r30, 0x56	; 86
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	80 68       	ori	r24, 0x80	; 128
    30b2:	8c 93       	st	X, r24
	
	/*3-Wait For The Flag To Be One*/
	while(GET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT) == 0);
    30b4:	e6 e5       	ldi	r30, 0x56	; 86
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	88 23       	and	r24, r24
    30bc:	dc f7       	brge	.-10     	; 0x30b4 <TWI_enuMasterSendDataByte+0x26>
	/*Check The Status Code*/
	if((TWI_u8_TWSR_REG & 0xF8) != TWI_MT_DATA_ACK)
    30be:	e1 e2       	ldi	r30, 0x21	; 33
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	88 2f       	mov	r24, r24
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	88 7f       	andi	r24, 0xF8	; 248
    30ca:	90 70       	andi	r25, 0x00	; 0
    30cc:	88 32       	cpi	r24, 0x28	; 40
    30ce:	91 05       	cpc	r25, r1
    30d0:	11 f0       	breq	.+4      	; 0x30d6 <TWI_enuMasterSendDataByte+0x48>
	{
		Local_enuErrorState = TWI_MT_DATA_ACK_ERROR;
    30d2:	87 e0       	ldi	r24, 0x07	; 7
    30d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <TWI_enuMasterReadDataByte>:

TWI_ErrorState   TWI_enuMasterReadDataByte(u8* Copy_pu8RecieavedData)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <TWI_enuMasterReadDataByte+0x6>
    30e8:	0f 92       	push	r0
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	9b 83       	std	Y+3, r25	; 0x03
    30f0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	89 83       	std	Y+1, r24	; 0x01

	/*Check Pointer*/
	if(Copy_pu8RecieavedData != NULL)
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	9b 81       	ldd	r25, Y+3	; 0x03
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	01 f1       	breq	.+64     	; 0x313e <TWI_enuMasterReadDataByte+0x5c>
	{
		/*1-clear Flag*/
		SET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT);
    30fe:	a6 e5       	ldi	r26, 0x56	; 86
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e6 e5       	ldi	r30, 0x56	; 86
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	80 68       	ori	r24, 0x80	; 128
    310a:	8c 93       	st	X, r24

		/*2-Wait For The Flag To Be One*/
		while(GET_BIT(TWI_u8_TWCR_REG,TWCR_TWINT) == 0);
    310c:	e6 e5       	ldi	r30, 0x56	; 86
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	88 23       	and	r24, r24
    3114:	dc f7       	brge	.-10     	; 0x310c <TWI_enuMasterReadDataByte+0x2a>

		/*Check The Status Code*/
		if((TWI_u8_TWSR_REG & 0xF8) != TWI_MR_DATA_NACK)
    3116:	e1 e2       	ldi	r30, 0x21	; 33
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	88 2f       	mov	r24, r24
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	88 7f       	andi	r24, 0xF8	; 248
    3122:	90 70       	andi	r25, 0x00	; 0
    3124:	88 35       	cpi	r24, 0x58	; 88
    3126:	91 05       	cpc	r25, r1
    3128:	19 f0       	breq	.+6      	; 0x3130 <TWI_enuMasterReadDataByte+0x4e>
		{
			Local_enuErrorState = TWI_MR_DATA_ACK_ERROR;
    312a:	88 e0       	ldi	r24, 0x08	; 8
    312c:	89 83       	std	Y+1, r24	; 0x01
    312e:	09 c0       	rjmp	.+18     	; 0x3142 <TWI_enuMasterReadDataByte+0x60>
		}
		else
		{
			/*Read Data in The Pointer*/
			*Copy_pu8RecieavedData = TWI_u8_TWDR_REG;
    3130:	e3 e2       	ldi	r30, 0x23	; 35
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	ea 81       	ldd	r30, Y+2	; 0x02
    3138:	fb 81       	ldd	r31, Y+3	; 0x03
    313a:	80 83       	st	Z, r24
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <TWI_enuMasterReadDataByte+0x60>
		}
	}
	else
	{
		Local_enuErrorState = TWI_NULL_POINTER;
    313e:	89 e0       	ldi	r24, 0x09	; 9
    3140:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    3142:	89 81       	ldd	r24, Y+1	; 0x01
}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <main>:
#include "EEPROM_interface.h"

#include "main_config.h"

int main(void)
{
    3150:	0f 93       	push	r16
    3152:	1f 93       	push	r17
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	cb 5f       	subi	r28, 0xFB	; 251
    315e:	d0 40       	sbci	r29, 0x00	; 0
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyValue;
	u8 Local_u8ReadingByte;
	u8 Local_u8PassFlag=0;
    316a:	fe 01       	movw	r30, r28
    316c:	ef 50       	subi	r30, 0x0F	; 15
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	10 82       	st	Z, r1
	u8 Local_u8TryNum=0;
    3172:	fe 01       	movw	r30, r28
    3174:	e0 51       	subi	r30, 0x10	; 16
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	10 82       	st	Z, r1
	u8 Local_u8Index=0;
    317a:	fe 01       	movw	r30, r28
    317c:	e1 51       	subi	r30, 0x11	; 17
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	10 82       	st	Z, r1
	u8 Local_u8AirCondPower=AIR_CONDITION_POWER_OFF;
    3182:	fe 01       	movw	r30, r28
    3184:	e2 51       	subi	r30, 0x12	; 18
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	87 ef       	ldi	r24, 0xF7	; 247
    318a:	80 83       	st	Z, r24
	u32 Local_u32Time_Out=0;
    318c:	fe 01       	movw	r30, r28
    318e:	e6 51       	subi	r30, 0x16	; 22
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	10 82       	st	Z, r1
    3194:	11 82       	std	Z+1, r1	; 0x01
    3196:	12 82       	std	Z+2, r1	; 0x02
    3198:	13 82       	std	Z+3, r1	; 0x03
	u8 Local_u8AdminPass[4];
	u8 Local_u8GuestPass[4];
	u8 Local_u8TemperatureValue=0;
    319a:	fe 01       	movw	r30, r28
    319c:	e7 51       	subi	r30, 0x17	; 23
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	10 82       	st	Z, r1
	DIO_voidInit();
    31a2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	TWI_voidMasterInit();
    31a6:	0e 94 09 17 	call	0x2e12	; 0x2e12 <TWI_voidMasterInit>
	SPI_voidInit();
    31aa:	0e 94 76 16 	call	0x2cec	; 0x2cec <SPI_voidInit>
	LCD_voidInit();
    31ae:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_voidInit>
	LCD_voidSendStr("Welcome To Smart");
    31b2:	80 e6       	ldi	r24, 0x60	; 96
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
	LCD_u8GoToXY(2,6);
    31ba:	82 e0       	ldi	r24, 0x02	; 2
    31bc:	66 e0       	ldi	r22, 0x06	; 6
    31be:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
	LCD_voidSendStr("Home");
    31c2:	81 e7       	ldi	r24, 0x71	; 113
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
    31ca:	fe 01       	movw	r30, r28
    31cc:	e3 52       	subi	r30, 0x23	; 35
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	aa ef       	ldi	r26, 0xFA	; 250
    31d6:	b3 e4       	ldi	r27, 0x43	; 67
    31d8:	80 83       	st	Z, r24
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	a2 83       	std	Z+2, r26	; 0x02
    31de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e0:	8e 01       	movw	r16, r28
    31e2:	07 52       	subi	r16, 0x27	; 39
    31e4:	1f 4f       	sbci	r17, 0xFF	; 255
    31e6:	fe 01       	movw	r30, r28
    31e8:	e3 52       	subi	r30, 0x23	; 35
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	82 81       	ldd	r24, Z+2	; 0x02
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	4a ef       	ldi	r20, 0xFA	; 250
    31fa:	54 e4       	ldi	r21, 0x44	; 68
    31fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	f8 01       	movw	r30, r16
    3206:	80 83       	st	Z, r24
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	a2 83       	std	Z+2, r26	; 0x02
    320c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    320e:	fe 01       	movw	r30, r28
    3210:	e7 52       	subi	r30, 0x27	; 39
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	60 81       	ld	r22, Z
    3216:	71 81       	ldd	r23, Z+1	; 0x01
    3218:	82 81       	ldd	r24, Z+2	; 0x02
    321a:	93 81       	ldd	r25, Z+3	; 0x03
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3228:	88 23       	and	r24, r24
    322a:	44 f4       	brge	.+16     	; 0x323c <main+0xec>
		__ticks = 1;
    322c:	fe 01       	movw	r30, r28
    322e:	e9 52       	subi	r30, 0x29	; 41
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
    323a:	64 c0       	rjmp	.+200    	; 0x3304 <main+0x1b4>
	else if (__tmp > 65535)
    323c:	fe 01       	movw	r30, r28
    323e:	e7 52       	subi	r30, 0x27	; 39
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	3f ef       	ldi	r19, 0xFF	; 255
    324e:	4f e7       	ldi	r20, 0x7F	; 127
    3250:	57 e4       	ldi	r21, 0x47	; 71
    3252:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3256:	18 16       	cp	r1, r24
    3258:	0c f0       	brlt	.+2      	; 0x325c <main+0x10c>
    325a:	43 c0       	rjmp	.+134    	; 0x32e2 <main+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	fe 01       	movw	r30, r28
    325e:	e3 52       	subi	r30, 0x23	; 35
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	60 81       	ld	r22, Z
    3264:	71 81       	ldd	r23, Z+1	; 0x01
    3266:	82 81       	ldd	r24, Z+2	; 0x02
    3268:	93 81       	ldd	r25, Z+3	; 0x03
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e2       	ldi	r20, 0x20	; 32
    3270:	51 e4       	ldi	r21, 0x41	; 65
    3272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	8e 01       	movw	r16, r28
    327c:	09 52       	subi	r16, 0x29	; 41
    327e:	1f 4f       	sbci	r17, 0xFF	; 255
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	f8 01       	movw	r30, r16
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	80 83       	st	Z, r24
    3292:	1f c0       	rjmp	.+62     	; 0x32d2 <main+0x182>
    3294:	fe 01       	movw	r30, r28
    3296:	eb 52       	subi	r30, 0x2B	; 43
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	88 ec       	ldi	r24, 0xC8	; 200
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	91 83       	std	Z+1, r25	; 0x01
    32a0:	80 83       	st	Z, r24
    32a2:	fe 01       	movw	r30, r28
    32a4:	eb 52       	subi	r30, 0x2B	; 43
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	91 81       	ldd	r25, Z+1	; 0x01
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <main+0x15c>
    32b0:	fe 01       	movw	r30, r28
    32b2:	eb 52       	subi	r30, 0x2B	; 43
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ba:	de 01       	movw	r26, r28
    32bc:	a9 52       	subi	r26, 0x29	; 41
    32be:	bf 4f       	sbci	r27, 0xFF	; 255
    32c0:	fe 01       	movw	r30, r28
    32c2:	e9 52       	subi	r30, 0x29	; 41
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	11 96       	adiw	r26, 0x01	; 1
    32ce:	9c 93       	st	X, r25
    32d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d2:	fe 01       	movw	r30, r28
    32d4:	e9 52       	subi	r30, 0x29	; 41
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	80 81       	ld	r24, Z
    32da:	91 81       	ldd	r25, Z+1	; 0x01
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	d1 f6       	brne	.-76     	; 0x3294 <main+0x144>
    32e0:	27 c0       	rjmp	.+78     	; 0x3330 <main+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e2:	8e 01       	movw	r16, r28
    32e4:	09 52       	subi	r16, 0x29	; 41
    32e6:	1f 4f       	sbci	r17, 0xFF	; 255
    32e8:	fe 01       	movw	r30, r28
    32ea:	e7 52       	subi	r30, 0x27	; 39
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	60 81       	ld	r22, Z
    32f0:	71 81       	ldd	r23, Z+1	; 0x01
    32f2:	82 81       	ldd	r24, Z+2	; 0x02
    32f4:	93 81       	ldd	r25, Z+3	; 0x03
    32f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	f8 01       	movw	r30, r16
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	80 83       	st	Z, r24
    3304:	de 01       	movw	r26, r28
    3306:	ad 52       	subi	r26, 0x2D	; 45
    3308:	bf 4f       	sbci	r27, 0xFF	; 255
    330a:	fe 01       	movw	r30, r28
    330c:	e9 52       	subi	r30, 0x29	; 41
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 81       	ld	r24, Z
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	8d 93       	st	X+, r24
    3316:	9c 93       	st	X, r25
    3318:	fe 01       	movw	r30, r28
    331a:	ed 52       	subi	r30, 0x2D	; 45
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	91 81       	ldd	r25, Z+1	; 0x01
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	f1 f7       	brne	.-4      	; 0x3322 <main+0x1d2>
    3326:	fe 01       	movw	r30, r28
    3328:	ed 52       	subi	r30, 0x2D	; 45
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	80 83       	st	Z, r24
	_delay_ms(500);
/*********************************Admin Set Password*****************************/
	EEPROM_u8ReadDataByte(0,&Local_u8ReadingByte);
    3330:	9e 01       	movw	r18, r28
    3332:	2d 50       	subi	r18, 0x0D	; 13
    3334:	3f 4f       	sbci	r19, 0xFF	; 255
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	b9 01       	movw	r22, r18
    333c:	0e 94 ed 0c 	call	0x19da	; 0x19da <EEPROM_u8ReadDataByte>
	if(Local_u8ReadingByte == 0xff)
    3340:	fe 01       	movw	r30, r28
    3342:	ed 50       	subi	r30, 0x0D	; 13
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	80 81       	ld	r24, Z
    3348:	8f 3f       	cpi	r24, 0xFF	; 255
    334a:	09 f0       	breq	.+2      	; 0x334e <main+0x1fe>
    334c:	8f c2       	rjmp	.+1310   	; 0x386c <main+0x71c>
    334e:	fe 01       	movw	r30, r28
    3350:	e1 53       	subi	r30, 0x31	; 49
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	aa e7       	ldi	r26, 0x7A	; 122
    335a:	b4 e4       	ldi	r27, 0x44	; 68
    335c:	80 83       	st	Z, r24
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	a2 83       	std	Z+2, r26	; 0x02
    3362:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3364:	8e 01       	movw	r16, r28
    3366:	05 53       	subi	r16, 0x35	; 53
    3368:	1f 4f       	sbci	r17, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	e1 53       	subi	r30, 0x31	; 49
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	4a ef       	ldi	r20, 0xFA	; 250
    337e:	54 e4       	ldi	r21, 0x44	; 68
    3380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	f8 01       	movw	r30, r16
    338a:	80 83       	st	Z, r24
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	a2 83       	std	Z+2, r26	; 0x02
    3390:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3392:	fe 01       	movw	r30, r28
    3394:	e5 53       	subi	r30, 0x35	; 53
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	60 81       	ld	r22, Z
    339a:	71 81       	ldd	r23, Z+1	; 0x01
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	93 81       	ldd	r25, Z+3	; 0x03
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	44 f4       	brge	.+16     	; 0x33c0 <main+0x270>
		__ticks = 1;
    33b0:	fe 01       	movw	r30, r28
    33b2:	e7 53       	subi	r30, 0x37	; 55
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	91 83       	std	Z+1, r25	; 0x01
    33bc:	80 83       	st	Z, r24
    33be:	64 c0       	rjmp	.+200    	; 0x3488 <main+0x338>
	else if (__tmp > 65535)
    33c0:	fe 01       	movw	r30, r28
    33c2:	e5 53       	subi	r30, 0x35	; 53
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	60 81       	ld	r22, Z
    33c8:	71 81       	ldd	r23, Z+1	; 0x01
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	93 81       	ldd	r25, Z+3	; 0x03
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	3f ef       	ldi	r19, 0xFF	; 255
    33d2:	4f e7       	ldi	r20, 0x7F	; 127
    33d4:	57 e4       	ldi	r21, 0x47	; 71
    33d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    33da:	18 16       	cp	r1, r24
    33dc:	0c f0       	brlt	.+2      	; 0x33e0 <main+0x290>
    33de:	43 c0       	rjmp	.+134    	; 0x3466 <main+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e0:	fe 01       	movw	r30, r28
    33e2:	e1 53       	subi	r30, 0x31	; 49
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	60 81       	ld	r22, Z
    33e8:	71 81       	ldd	r23, Z+1	; 0x01
    33ea:	82 81       	ldd	r24, Z+2	; 0x02
    33ec:	93 81       	ldd	r25, Z+3	; 0x03
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e2       	ldi	r20, 0x20	; 32
    33f4:	51 e4       	ldi	r21, 0x41	; 65
    33f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8e 01       	movw	r16, r28
    3400:	07 53       	subi	r16, 0x37	; 55
    3402:	1f 4f       	sbci	r17, 0xFF	; 255
    3404:	bc 01       	movw	r22, r24
    3406:	cd 01       	movw	r24, r26
    3408:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	f8 01       	movw	r30, r16
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	80 83       	st	Z, r24
    3416:	1f c0       	rjmp	.+62     	; 0x3456 <main+0x306>
    3418:	fe 01       	movw	r30, r28
    341a:	e9 53       	subi	r30, 0x39	; 57
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	88 ec       	ldi	r24, 0xC8	; 200
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	80 83       	st	Z, r24
    3426:	fe 01       	movw	r30, r28
    3428:	e9 53       	subi	r30, 0x39	; 57
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	80 81       	ld	r24, Z
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <main+0x2e0>
    3434:	fe 01       	movw	r30, r28
    3436:	e9 53       	subi	r30, 0x39	; 57
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343e:	de 01       	movw	r26, r28
    3440:	a7 53       	subi	r26, 0x37	; 55
    3442:	bf 4f       	sbci	r27, 0xFF	; 255
    3444:	fe 01       	movw	r30, r28
    3446:	e7 53       	subi	r30, 0x37	; 55
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	11 96       	adiw	r26, 0x01	; 1
    3452:	9c 93       	st	X, r25
    3454:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	fe 01       	movw	r30, r28
    3458:	e7 53       	subi	r30, 0x37	; 55
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	d1 f6       	brne	.-76     	; 0x3418 <main+0x2c8>
    3464:	27 c0       	rjmp	.+78     	; 0x34b4 <main+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3466:	8e 01       	movw	r16, r28
    3468:	07 53       	subi	r16, 0x37	; 55
    346a:	1f 4f       	sbci	r17, 0xFF	; 255
    346c:	fe 01       	movw	r30, r28
    346e:	e5 53       	subi	r30, 0x35	; 53
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	f8 01       	movw	r30, r16
    3484:	91 83       	std	Z+1, r25	; 0x01
    3486:	80 83       	st	Z, r24
    3488:	de 01       	movw	r26, r28
    348a:	ab 53       	subi	r26, 0x3B	; 59
    348c:	bf 4f       	sbci	r27, 0xFF	; 255
    348e:	fe 01       	movw	r30, r28
    3490:	e7 53       	subi	r30, 0x37	; 55
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 81       	ld	r24, Z
    3496:	91 81       	ldd	r25, Z+1	; 0x01
    3498:	8d 93       	st	X+, r24
    349a:	9c 93       	st	X, r25
    349c:	fe 01       	movw	r30, r28
    349e:	eb 53       	subi	r30, 0x3B	; 59
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	80 81       	ld	r24, Z
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <main+0x356>
    34aa:	fe 01       	movw	r30, r28
    34ac:	eb 53       	subi	r30, 0x3B	; 59
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
	{
		_delay_ms(1000);
		LCD_voidClearScreen();
    34b4:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
		LCD_u8GoToXY(1,1);
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
		LCD_voidSendStr("Login For First");
    34c0:	86 e7       	ldi	r24, 0x76	; 118
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
		LCD_u8GoToXY(2,6);
    34c8:	82 e0       	ldi	r24, 0x02	; 2
    34ca:	66 e0       	ldi	r22, 0x06	; 6
    34cc:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
		LCD_voidSendStr("Time");
    34d0:	86 e8       	ldi	r24, 0x86	; 134
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
    34d8:	fe 01       	movw	r30, r28
    34da:	ef 53       	subi	r30, 0x3F	; 63
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	aa e7       	ldi	r26, 0x7A	; 122
    34e4:	b4 e4       	ldi	r27, 0x44	; 68
    34e6:	80 83       	st	Z, r24
    34e8:	91 83       	std	Z+1, r25	; 0x01
    34ea:	a2 83       	std	Z+2, r26	; 0x02
    34ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ee:	8e 01       	movw	r16, r28
    34f0:	03 54       	subi	r16, 0x43	; 67
    34f2:	1f 4f       	sbci	r17, 0xFF	; 255
    34f4:	fe 01       	movw	r30, r28
    34f6:	ef 53       	subi	r30, 0x3F	; 63
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	60 81       	ld	r22, Z
    34fc:	71 81       	ldd	r23, Z+1	; 0x01
    34fe:	82 81       	ldd	r24, Z+2	; 0x02
    3500:	93 81       	ldd	r25, Z+3	; 0x03
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	4a ef       	ldi	r20, 0xFA	; 250
    3508:	54 e4       	ldi	r21, 0x44	; 68
    350a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	f8 01       	movw	r30, r16
    3514:	80 83       	st	Z, r24
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	a2 83       	std	Z+2, r26	; 0x02
    351a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    351c:	fe 01       	movw	r30, r28
    351e:	e3 54       	subi	r30, 0x43	; 67
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	60 81       	ld	r22, Z
    3524:	71 81       	ldd	r23, Z+1	; 0x01
    3526:	82 81       	ldd	r24, Z+2	; 0x02
    3528:	93 81       	ldd	r25, Z+3	; 0x03
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e8       	ldi	r20, 0x80	; 128
    3530:	5f e3       	ldi	r21, 0x3F	; 63
    3532:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3536:	88 23       	and	r24, r24
    3538:	44 f4       	brge	.+16     	; 0x354a <main+0x3fa>
		__ticks = 1;
    353a:	fe 01       	movw	r30, r28
    353c:	e5 54       	subi	r30, 0x45	; 69
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	80 83       	st	Z, r24
    3548:	64 c0       	rjmp	.+200    	; 0x3612 <main+0x4c2>
	else if (__tmp > 65535)
    354a:	fe 01       	movw	r30, r28
    354c:	e3 54       	subi	r30, 0x43	; 67
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3564:	18 16       	cp	r1, r24
    3566:	0c f0       	brlt	.+2      	; 0x356a <main+0x41a>
    3568:	43 c0       	rjmp	.+134    	; 0x35f0 <main+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356a:	fe 01       	movw	r30, r28
    356c:	ef 53       	subi	r30, 0x3F	; 63
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	82 81       	ldd	r24, Z+2	; 0x02
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e2       	ldi	r20, 0x20	; 32
    357e:	51 e4       	ldi	r21, 0x41	; 65
    3580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	8e 01       	movw	r16, r28
    358a:	05 54       	subi	r16, 0x45	; 69
    358c:	1f 4f       	sbci	r17, 0xFF	; 255
    358e:	bc 01       	movw	r22, r24
    3590:	cd 01       	movw	r24, r26
    3592:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	f8 01       	movw	r30, r16
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	80 83       	st	Z, r24
    35a0:	1f c0       	rjmp	.+62     	; 0x35e0 <main+0x490>
    35a2:	fe 01       	movw	r30, r28
    35a4:	e7 54       	subi	r30, 0x47	; 71
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	88 ec       	ldi	r24, 0xC8	; 200
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
    35b0:	fe 01       	movw	r30, r28
    35b2:	e7 54       	subi	r30, 0x47	; 71
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <main+0x46a>
    35be:	fe 01       	movw	r30, r28
    35c0:	e7 54       	subi	r30, 0x47	; 71
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c8:	de 01       	movw	r26, r28
    35ca:	a5 54       	subi	r26, 0x45	; 69
    35cc:	bf 4f       	sbci	r27, 0xFF	; 255
    35ce:	fe 01       	movw	r30, r28
    35d0:	e5 54       	subi	r30, 0x45	; 69
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	11 96       	adiw	r26, 0x01	; 1
    35dc:	9c 93       	st	X, r25
    35de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	fe 01       	movw	r30, r28
    35e2:	e5 54       	subi	r30, 0x45	; 69
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	80 81       	ld	r24, Z
    35e8:	91 81       	ldd	r25, Z+1	; 0x01
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	d1 f6       	brne	.-76     	; 0x35a2 <main+0x452>
    35ee:	27 c0       	rjmp	.+78     	; 0x363e <main+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f0:	8e 01       	movw	r16, r28
    35f2:	05 54       	subi	r16, 0x45	; 69
    35f4:	1f 4f       	sbci	r17, 0xFF	; 255
    35f6:	fe 01       	movw	r30, r28
    35f8:	e3 54       	subi	r30, 0x43	; 67
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	60 81       	ld	r22, Z
    35fe:	71 81       	ldd	r23, Z+1	; 0x01
    3600:	82 81       	ldd	r24, Z+2	; 0x02
    3602:	93 81       	ldd	r25, Z+3	; 0x03
    3604:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	f8 01       	movw	r30, r16
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	80 83       	st	Z, r24
    3612:	de 01       	movw	r26, r28
    3614:	a9 54       	subi	r26, 0x49	; 73
    3616:	bf 4f       	sbci	r27, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	e5 54       	subi	r30, 0x45	; 69
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	8d 93       	st	X+, r24
    3624:	9c 93       	st	X, r25
    3626:	fe 01       	movw	r30, r28
    3628:	e9 54       	subi	r30, 0x49	; 73
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	f1 f7       	brne	.-4      	; 0x3630 <main+0x4e0>
    3634:	fe 01       	movw	r30, r28
    3636:	e9 54       	subi	r30, 0x49	; 73
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	80 83       	st	Z, r24
		_delay_ms(1000);
		LCD_voidClearScreen();
    363e:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
		LCD_voidSendStr("Set Admin Pass");
    3642:	8b e8       	ldi	r24, 0x8B	; 139
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
		LCD_u8GoToXY(2,0);
    364a:	82 e0       	ldi	r24, 0x02	; 2
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
		LCD_voidSendStr("Admin pass:");
    3652:	8a e9       	ldi	r24, 0x9A	; 154
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
		for(u8 i = 0 ;i < 4 ;i++)
    365a:	fe 01       	movw	r30, r28
    365c:	e8 51       	subi	r30, 0x18	; 24
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	10 82       	st	Z, r1
    3662:	f7 c0       	rjmp	.+494    	; 0x3852 <main+0x702>
		{
			KPD_u8GetKeyState(&Local_u8KeyValue);
    3664:	ce 01       	movw	r24, r28
    3666:	8e 50       	subi	r24, 0x0E	; 14
    3668:	9f 4f       	sbci	r25, 0xFF	; 255
    366a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    366e:	05 c0       	rjmp	.+10     	; 0x367a <main+0x52a>
			while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
			{
				KPD_u8GetKeyState(&Local_u8KeyValue);
    3670:	ce 01       	movw	r24, r28
    3672:	8e 50       	subi	r24, 0x0E	; 14
    3674:	9f 4f       	sbci	r25, 0xFF	; 255
    3676:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
		LCD_u8GoToXY(2,0);
		LCD_voidSendStr("Admin pass:");
		for(u8 i = 0 ;i < 4 ;i++)
		{
			KPD_u8GetKeyState(&Local_u8KeyValue);
			while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    367a:	fe 01       	movw	r30, r28
    367c:	ee 50       	subi	r30, 0x0E	; 14
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 81       	ld	r24, Z
    3682:	8f 3f       	cpi	r24, 0xFF	; 255
    3684:	a9 f3       	breq	.-22     	; 0x3670 <main+0x520>
			{
				KPD_u8GetKeyState(&Local_u8KeyValue);
			}
			EEPROM_u8WriteDataByte(i,Local_u8KeyValue);
    3686:	fe 01       	movw	r30, r28
    3688:	e8 51       	subi	r30, 0x18	; 24
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	88 2f       	mov	r24, r24
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	fe 01       	movw	r30, r28
    3694:	ee 50       	subi	r30, 0x0E	; 14
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	20 81       	ld	r18, Z
    369a:	62 2f       	mov	r22, r18
    369c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <EEPROM_u8WriteDataByte>
			LCD_u8GoToXY(2,11+i);
    36a0:	fe 01       	movw	r30, r28
    36a2:	e8 51       	subi	r30, 0x18	; 24
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	98 2f       	mov	r25, r24
    36aa:	95 5f       	subi	r25, 0xF5	; 245
    36ac:	82 e0       	ldi	r24, 0x02	; 2
    36ae:	69 2f       	mov	r22, r25
    36b0:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
			LCD_voidSendChar(Local_u8KeyValue);
    36b4:	fe 01       	movw	r30, r28
    36b6:	ee 50       	subi	r30, 0x0E	; 14
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	80 81       	ld	r24, Z
    36bc:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
    36c0:	fe 01       	movw	r30, r28
    36c2:	ed 54       	subi	r30, 0x4D	; 77
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a8 ec       	ldi	r26, 0xC8	; 200
    36cc:	b2 e4       	ldi	r27, 0x42	; 66
    36ce:	80 83       	st	Z, r24
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	a2 83       	std	Z+2, r26	; 0x02
    36d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d6:	8e 01       	movw	r16, r28
    36d8:	01 55       	subi	r16, 0x51	; 81
    36da:	1f 4f       	sbci	r17, 0xFF	; 255
    36dc:	fe 01       	movw	r30, r28
    36de:	ed 54       	subi	r30, 0x4D	; 77
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	4a ef       	ldi	r20, 0xFA	; 250
    36f0:	54 e4       	ldi	r21, 0x44	; 68
    36f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	f8 01       	movw	r30, r16
    36fc:	80 83       	st	Z, r24
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	a2 83       	std	Z+2, r26	; 0x02
    3702:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3704:	fe 01       	movw	r30, r28
    3706:	e1 55       	subi	r30, 0x51	; 81
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e8       	ldi	r20, 0x80	; 128
    3718:	5f e3       	ldi	r21, 0x3F	; 63
    371a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    371e:	88 23       	and	r24, r24
    3720:	44 f4       	brge	.+16     	; 0x3732 <main+0x5e2>
		__ticks = 1;
    3722:	fe 01       	movw	r30, r28
    3724:	e3 55       	subi	r30, 0x53	; 83
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	80 83       	st	Z, r24
    3730:	64 c0       	rjmp	.+200    	; 0x37fa <main+0x6aa>
	else if (__tmp > 65535)
    3732:	fe 01       	movw	r30, r28
    3734:	e1 55       	subi	r30, 0x51	; 81
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	3f ef       	ldi	r19, 0xFF	; 255
    3744:	4f e7       	ldi	r20, 0x7F	; 127
    3746:	57 e4       	ldi	r21, 0x47	; 71
    3748:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    374c:	18 16       	cp	r1, r24
    374e:	0c f0       	brlt	.+2      	; 0x3752 <main+0x602>
    3750:	43 c0       	rjmp	.+134    	; 0x37d8 <main+0x688>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	fe 01       	movw	r30, r28
    3754:	ed 54       	subi	r30, 0x4D	; 77
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	60 81       	ld	r22, Z
    375a:	71 81       	ldd	r23, Z+1	; 0x01
    375c:	82 81       	ldd	r24, Z+2	; 0x02
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e2       	ldi	r20, 0x20	; 32
    3766:	51 e4       	ldi	r21, 0x41	; 65
    3768:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	8e 01       	movw	r16, r28
    3772:	03 55       	subi	r16, 0x53	; 83
    3774:	1f 4f       	sbci	r17, 0xFF	; 255
    3776:	bc 01       	movw	r22, r24
    3778:	cd 01       	movw	r24, r26
    377a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	f8 01       	movw	r30, r16
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	80 83       	st	Z, r24
    3788:	1f c0       	rjmp	.+62     	; 0x37c8 <main+0x678>
    378a:	fe 01       	movw	r30, r28
    378c:	e5 55       	subi	r30, 0x55	; 85
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	88 ec       	ldi	r24, 0xC8	; 200
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	91 83       	std	Z+1, r25	; 0x01
    3796:	80 83       	st	Z, r24
    3798:	fe 01       	movw	r30, r28
    379a:	e5 55       	subi	r30, 0x55	; 85
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	80 81       	ld	r24, Z
    37a0:	91 81       	ldd	r25, Z+1	; 0x01
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <main+0x652>
    37a6:	fe 01       	movw	r30, r28
    37a8:	e5 55       	subi	r30, 0x55	; 85
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b0:	de 01       	movw	r26, r28
    37b2:	a3 55       	subi	r26, 0x53	; 83
    37b4:	bf 4f       	sbci	r27, 0xFF	; 255
    37b6:	fe 01       	movw	r30, r28
    37b8:	e3 55       	subi	r30, 0x53	; 83
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	80 81       	ld	r24, Z
    37be:	91 81       	ldd	r25, Z+1	; 0x01
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	11 96       	adiw	r26, 0x01	; 1
    37c4:	9c 93       	st	X, r25
    37c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c8:	fe 01       	movw	r30, r28
    37ca:	e3 55       	subi	r30, 0x53	; 83
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	80 81       	ld	r24, Z
    37d0:	91 81       	ldd	r25, Z+1	; 0x01
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	d1 f6       	brne	.-76     	; 0x378a <main+0x63a>
    37d6:	27 c0       	rjmp	.+78     	; 0x3826 <main+0x6d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	8e 01       	movw	r16, r28
    37da:	03 55       	subi	r16, 0x53	; 83
    37dc:	1f 4f       	sbci	r17, 0xFF	; 255
    37de:	fe 01       	movw	r30, r28
    37e0:	e1 55       	subi	r30, 0x51	; 81
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	60 81       	ld	r22, Z
    37e6:	71 81       	ldd	r23, Z+1	; 0x01
    37e8:	82 81       	ldd	r24, Z+2	; 0x02
    37ea:	93 81       	ldd	r25, Z+3	; 0x03
    37ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	f8 01       	movw	r30, r16
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
    37fa:	de 01       	movw	r26, r28
    37fc:	a7 55       	subi	r26, 0x57	; 87
    37fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3800:	fe 01       	movw	r30, r28
    3802:	e3 55       	subi	r30, 0x53	; 83
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	8d 93       	st	X+, r24
    380c:	9c 93       	st	X, r25
    380e:	fe 01       	movw	r30, r28
    3810:	e7 55       	subi	r30, 0x57	; 87
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	80 81       	ld	r24, Z
    3816:	91 81       	ldd	r25, Z+1	; 0x01
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	f1 f7       	brne	.-4      	; 0x3818 <main+0x6c8>
    381c:	fe 01       	movw	r30, r28
    381e:	e7 55       	subi	r30, 0x57	; 87
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
			_delay_ms(100);
			LCD_u8GoToXY(2,11+i);
    3826:	fe 01       	movw	r30, r28
    3828:	e8 51       	subi	r30, 0x18	; 24
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	80 81       	ld	r24, Z
    382e:	98 2f       	mov	r25, r24
    3830:	95 5f       	subi	r25, 0xF5	; 245
    3832:	82 e0       	ldi	r24, 0x02	; 2
    3834:	69 2f       	mov	r22, r25
    3836:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
			LCD_voidSendChar('*');
    383a:	8a e2       	ldi	r24, 0x2A	; 42
    383c:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
		_delay_ms(1000);
		LCD_voidClearScreen();
		LCD_voidSendStr("Set Admin Pass");
		LCD_u8GoToXY(2,0);
		LCD_voidSendStr("Admin pass:");
		for(u8 i = 0 ;i < 4 ;i++)
    3840:	de 01       	movw	r26, r28
    3842:	a8 51       	subi	r26, 0x18	; 24
    3844:	bf 4f       	sbci	r27, 0xFF	; 255
    3846:	fe 01       	movw	r30, r28
    3848:	e8 51       	subi	r30, 0x18	; 24
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	8f 5f       	subi	r24, 0xFF	; 255
    3850:	8c 93       	st	X, r24
    3852:	fe 01       	movw	r30, r28
    3854:	e8 51       	subi	r30, 0x18	; 24
    3856:	ff 4f       	sbci	r31, 0xFF	; 255
    3858:	80 81       	ld	r24, Z
    385a:	84 30       	cpi	r24, 0x04	; 4
    385c:	08 f4       	brcc	.+2      	; 0x3860 <main+0x710>
    385e:	02 cf       	rjmp	.-508    	; 0x3664 <main+0x514>
			LCD_voidSendChar(Local_u8KeyValue);
			_delay_ms(100);
			LCD_u8GoToXY(2,11+i);
			LCD_voidSendChar('*');
		}
		LCD_voidClearScreen();
    3860:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
		LCD_voidSendStr("Pass Saved");
    3864:	86 ea       	ldi	r24, 0xA6	; 166
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
	}
/*****************************************************************************************/

/****************Set Guest Password*******************************************************/
	EEPROM_u8ReadDataByte(4,&Local_u8ReadingByte);
    386c:	9e 01       	movw	r18, r28
    386e:	2d 50       	subi	r18, 0x0D	; 13
    3870:	3f 4f       	sbci	r19, 0xFF	; 255
    3872:	84 e0       	ldi	r24, 0x04	; 4
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	b9 01       	movw	r22, r18
    3878:	0e 94 ed 0c 	call	0x19da	; 0x19da <EEPROM_u8ReadDataByte>
		if(Local_u8ReadingByte == 0xff)
    387c:	fe 01       	movw	r30, r28
    387e:	ed 50       	subi	r30, 0x0D	; 13
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	80 81       	ld	r24, Z
    3884:	8f 3f       	cpi	r24, 0xFF	; 255
    3886:	09 f0       	breq	.+2      	; 0x388a <main+0x73a>
    3888:	cb c1       	rjmp	.+918    	; 0x3c20 <main+0xad0>
    388a:	fe 01       	movw	r30, r28
    388c:	eb 55       	subi	r30, 0x5B	; 91
    388e:	ff 4f       	sbci	r31, 0xFF	; 255
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	aa e7       	ldi	r26, 0x7A	; 122
    3896:	b4 e4       	ldi	r27, 0x44	; 68
    3898:	80 83       	st	Z, r24
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	a2 83       	std	Z+2, r26	; 0x02
    389e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a0:	8e 01       	movw	r16, r28
    38a2:	0f 55       	subi	r16, 0x5F	; 95
    38a4:	1f 4f       	sbci	r17, 0xFF	; 255
    38a6:	fe 01       	movw	r30, r28
    38a8:	eb 55       	subi	r30, 0x5B	; 91
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	60 81       	ld	r22, Z
    38ae:	71 81       	ldd	r23, Z+1	; 0x01
    38b0:	82 81       	ldd	r24, Z+2	; 0x02
    38b2:	93 81       	ldd	r25, Z+3	; 0x03
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	4a ef       	ldi	r20, 0xFA	; 250
    38ba:	54 e4       	ldi	r21, 0x44	; 68
    38bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	f8 01       	movw	r30, r16
    38c6:	80 83       	st	Z, r24
    38c8:	91 83       	std	Z+1, r25	; 0x01
    38ca:	a2 83       	std	Z+2, r26	; 0x02
    38cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38ce:	fe 01       	movw	r30, r28
    38d0:	ef 55       	subi	r30, 0x5F	; 95
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	60 81       	ld	r22, Z
    38d6:	71 81       	ldd	r23, Z+1	; 0x01
    38d8:	82 81       	ldd	r24, Z+2	; 0x02
    38da:	93 81       	ldd	r25, Z+3	; 0x03
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e8       	ldi	r20, 0x80	; 128
    38e2:	5f e3       	ldi	r21, 0x3F	; 63
    38e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    38e8:	88 23       	and	r24, r24
    38ea:	44 f4       	brge	.+16     	; 0x38fc <main+0x7ac>
		__ticks = 1;
    38ec:	fe 01       	movw	r30, r28
    38ee:	e1 56       	subi	r30, 0x61	; 97
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	91 83       	std	Z+1, r25	; 0x01
    38f8:	80 83       	st	Z, r24
    38fa:	64 c0       	rjmp	.+200    	; 0x39c4 <main+0x874>
	else if (__tmp > 65535)
    38fc:	fe 01       	movw	r30, r28
    38fe:	ef 55       	subi	r30, 0x5F	; 95
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	60 81       	ld	r22, Z
    3904:	71 81       	ldd	r23, Z+1	; 0x01
    3906:	82 81       	ldd	r24, Z+2	; 0x02
    3908:	93 81       	ldd	r25, Z+3	; 0x03
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	3f ef       	ldi	r19, 0xFF	; 255
    390e:	4f e7       	ldi	r20, 0x7F	; 127
    3910:	57 e4       	ldi	r21, 0x47	; 71
    3912:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3916:	18 16       	cp	r1, r24
    3918:	0c f0       	brlt	.+2      	; 0x391c <main+0x7cc>
    391a:	43 c0       	rjmp	.+134    	; 0x39a2 <main+0x852>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391c:	fe 01       	movw	r30, r28
    391e:	eb 55       	subi	r30, 0x5B	; 91
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	60 81       	ld	r22, Z
    3924:	71 81       	ldd	r23, Z+1	; 0x01
    3926:	82 81       	ldd	r24, Z+2	; 0x02
    3928:	93 81       	ldd	r25, Z+3	; 0x03
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	40 e2       	ldi	r20, 0x20	; 32
    3930:	51 e4       	ldi	r21, 0x41	; 65
    3932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	8e 01       	movw	r16, r28
    393c:	01 56       	subi	r16, 0x61	; 97
    393e:	1f 4f       	sbci	r17, 0xFF	; 255
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	f8 01       	movw	r30, r16
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	80 83       	st	Z, r24
    3952:	1f c0       	rjmp	.+62     	; 0x3992 <main+0x842>
    3954:	fe 01       	movw	r30, r28
    3956:	e3 56       	subi	r30, 0x63	; 99
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	88 ec       	ldi	r24, 0xC8	; 200
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	91 83       	std	Z+1, r25	; 0x01
    3960:	80 83       	st	Z, r24
    3962:	fe 01       	movw	r30, r28
    3964:	e3 56       	subi	r30, 0x63	; 99
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 81       	ld	r24, Z
    396a:	91 81       	ldd	r25, Z+1	; 0x01
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	f1 f7       	brne	.-4      	; 0x396c <main+0x81c>
    3970:	fe 01       	movw	r30, r28
    3972:	e3 56       	subi	r30, 0x63	; 99
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	91 83       	std	Z+1, r25	; 0x01
    3978:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397a:	de 01       	movw	r26, r28
    397c:	a1 56       	subi	r26, 0x61	; 97
    397e:	bf 4f       	sbci	r27, 0xFF	; 255
    3980:	fe 01       	movw	r30, r28
    3982:	e1 56       	subi	r30, 0x61	; 97
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	80 81       	ld	r24, Z
    3988:	91 81       	ldd	r25, Z+1	; 0x01
    398a:	01 97       	sbiw	r24, 0x01	; 1
    398c:	11 96       	adiw	r26, 0x01	; 1
    398e:	9c 93       	st	X, r25
    3990:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3992:	fe 01       	movw	r30, r28
    3994:	e1 56       	subi	r30, 0x61	; 97
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	80 81       	ld	r24, Z
    399a:	91 81       	ldd	r25, Z+1	; 0x01
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	d1 f6       	brne	.-76     	; 0x3954 <main+0x804>
    39a0:	27 c0       	rjmp	.+78     	; 0x39f0 <main+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a2:	8e 01       	movw	r16, r28
    39a4:	01 56       	subi	r16, 0x61	; 97
    39a6:	1f 4f       	sbci	r17, 0xFF	; 255
    39a8:	fe 01       	movw	r30, r28
    39aa:	ef 55       	subi	r30, 0x5F	; 95
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	60 81       	ld	r22, Z
    39b0:	71 81       	ldd	r23, Z+1	; 0x01
    39b2:	82 81       	ldd	r24, Z+2	; 0x02
    39b4:	93 81       	ldd	r25, Z+3	; 0x03
    39b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	f8 01       	movw	r30, r16
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	80 83       	st	Z, r24
    39c4:	de 01       	movw	r26, r28
    39c6:	a5 56       	subi	r26, 0x65	; 101
    39c8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ca:	fe 01       	movw	r30, r28
    39cc:	e1 56       	subi	r30, 0x61	; 97
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	8d 93       	st	X+, r24
    39d6:	9c 93       	st	X, r25
    39d8:	fe 01       	movw	r30, r28
    39da:	e5 56       	subi	r30, 0x65	; 101
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	80 81       	ld	r24, Z
    39e0:	91 81       	ldd	r25, Z+1	; 0x01
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <main+0x892>
    39e6:	fe 01       	movw	r30, r28
    39e8:	e5 56       	subi	r30, 0x65	; 101
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	91 83       	std	Z+1, r25	; 0x01
    39ee:	80 83       	st	Z, r24
		{
		    _delay_ms(1000);
			LCD_voidClearScreen();
    39f0:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
			LCD_voidSendStr("Set Guest Pass");
    39f4:	81 eb       	ldi	r24, 0xB1	; 177
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
			LCD_u8GoToXY(2,0);
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
			LCD_voidSendStr("Guest pass:");
    3a04:	80 ec       	ldi	r24, 0xC0	; 192
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
			for(u8 i = 0 ;i < 4 ;i++)
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e9 51       	subi	r30, 0x19	; 25
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	10 82       	st	Z, r1
    3a14:	f8 c0       	rjmp	.+496    	; 0x3c06 <main+0xab6>
			{
				KPD_u8GetKeyState(&Local_u8KeyValue);
    3a16:	ce 01       	movw	r24, r28
    3a18:	8e 50       	subi	r24, 0x0E	; 14
    3a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    3a20:	05 c0       	rjmp	.+10     	; 0x3a2c <main+0x8dc>
				while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
				{
					KPD_u8GetKeyState(&Local_u8KeyValue);
    3a22:	ce 01       	movw	r24, r28
    3a24:	8e 50       	subi	r24, 0x0E	; 14
    3a26:	9f 4f       	sbci	r25, 0xFF	; 255
    3a28:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
			LCD_u8GoToXY(2,0);
			LCD_voidSendStr("Guest pass:");
			for(u8 i = 0 ;i < 4 ;i++)
			{
				KPD_u8GetKeyState(&Local_u8KeyValue);
				while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	ee 50       	subi	r30, 0x0E	; 14
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	8f 3f       	cpi	r24, 0xFF	; 255
    3a36:	a9 f3       	breq	.-22     	; 0x3a22 <main+0x8d2>
				{
					KPD_u8GetKeyState(&Local_u8KeyValue);
				}
				EEPROM_u8WriteDataByte(i+4,Local_u8KeyValue);
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e9 51       	subi	r30, 0x19	; 25
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	80 81       	ld	r24, Z
    3a40:	88 2f       	mov	r24, r24
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	04 96       	adiw	r24, 0x04	; 4
    3a46:	fe 01       	movw	r30, r28
    3a48:	ee 50       	subi	r30, 0x0E	; 14
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	20 81       	ld	r18, Z
    3a4e:	62 2f       	mov	r22, r18
    3a50:	0e 94 3a 0c 	call	0x1874	; 0x1874 <EEPROM_u8WriteDataByte>
				LCD_u8GoToXY(2,11+i);
    3a54:	fe 01       	movw	r30, r28
    3a56:	e9 51       	subi	r30, 0x19	; 25
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 81       	ld	r24, Z
    3a5c:	98 2f       	mov	r25, r24
    3a5e:	95 5f       	subi	r25, 0xF5	; 245
    3a60:	82 e0       	ldi	r24, 0x02	; 2
    3a62:	69 2f       	mov	r22, r25
    3a64:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				LCD_voidSendChar(Local_u8KeyValue);
    3a68:	fe 01       	movw	r30, r28
    3a6a:	ee 50       	subi	r30, 0x0E	; 14
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	80 81       	ld	r24, Z
    3a70:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
    3a74:	fe 01       	movw	r30, r28
    3a76:	e9 56       	subi	r30, 0x69	; 105
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	a8 ec       	ldi	r26, 0xC8	; 200
    3a80:	b2 e4       	ldi	r27, 0x42	; 66
    3a82:	80 83       	st	Z, r24
    3a84:	91 83       	std	Z+1, r25	; 0x01
    3a86:	a2 83       	std	Z+2, r26	; 0x02
    3a88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a8a:	8e 01       	movw	r16, r28
    3a8c:	0d 56       	subi	r16, 0x6D	; 109
    3a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a90:	fe 01       	movw	r30, r28
    3a92:	e9 56       	subi	r30, 0x69	; 105
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	60 81       	ld	r22, Z
    3a98:	71 81       	ldd	r23, Z+1	; 0x01
    3a9a:	82 81       	ldd	r24, Z+2	; 0x02
    3a9c:	93 81       	ldd	r25, Z+3	; 0x03
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	4a ef       	ldi	r20, 0xFA	; 250
    3aa4:	54 e4       	ldi	r21, 0x44	; 68
    3aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	f8 01       	movw	r30, r16
    3ab0:	80 83       	st	Z, r24
    3ab2:	91 83       	std	Z+1, r25	; 0x01
    3ab4:	a2 83       	std	Z+2, r26	; 0x02
    3ab6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ab8:	fe 01       	movw	r30, r28
    3aba:	ed 56       	subi	r30, 0x6D	; 109
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	82 81       	ldd	r24, Z+2	; 0x02
    3ac4:	93 81       	ldd	r25, Z+3	; 0x03
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e8       	ldi	r20, 0x80	; 128
    3acc:	5f e3       	ldi	r21, 0x3F	; 63
    3ace:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3ad2:	88 23       	and	r24, r24
    3ad4:	44 f4       	brge	.+16     	; 0x3ae6 <main+0x996>
		__ticks = 1;
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	ef 56       	subi	r30, 0x6F	; 111
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24
    3ae4:	64 c0       	rjmp	.+200    	; 0x3bae <main+0xa5e>
	else if (__tmp > 65535)
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	ed 56       	subi	r30, 0x6D	; 109
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	60 81       	ld	r22, Z
    3aee:	71 81       	ldd	r23, Z+1	; 0x01
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	3f ef       	ldi	r19, 0xFF	; 255
    3af8:	4f e7       	ldi	r20, 0x7F	; 127
    3afa:	57 e4       	ldi	r21, 0x47	; 71
    3afc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3b00:	18 16       	cp	r1, r24
    3b02:	0c f0       	brlt	.+2      	; 0x3b06 <main+0x9b6>
    3b04:	43 c0       	rjmp	.+134    	; 0x3b8c <main+0xa3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b06:	fe 01       	movw	r30, r28
    3b08:	e9 56       	subi	r30, 0x69	; 105
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	60 81       	ld	r22, Z
    3b0e:	71 81       	ldd	r23, Z+1	; 0x01
    3b10:	82 81       	ldd	r24, Z+2	; 0x02
    3b12:	93 81       	ldd	r25, Z+3	; 0x03
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e2       	ldi	r20, 0x20	; 32
    3b1a:	51 e4       	ldi	r21, 0x41	; 65
    3b1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8e 01       	movw	r16, r28
    3b26:	0f 56       	subi	r16, 0x6F	; 111
    3b28:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2a:	bc 01       	movw	r22, r24
    3b2c:	cd 01       	movw	r24, r26
    3b2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	f8 01       	movw	r30, r16
    3b38:	91 83       	std	Z+1, r25	; 0x01
    3b3a:	80 83       	st	Z, r24
    3b3c:	1f c0       	rjmp	.+62     	; 0x3b7c <main+0xa2c>
    3b3e:	fe 01       	movw	r30, r28
    3b40:	e1 57       	subi	r30, 0x71	; 113
    3b42:	ff 4f       	sbci	r31, 0xFF	; 255
    3b44:	88 ec       	ldi	r24, 0xC8	; 200
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	80 83       	st	Z, r24
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	e1 57       	subi	r30, 0x71	; 113
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	80 81       	ld	r24, Z
    3b54:	91 81       	ldd	r25, Z+1	; 0x01
    3b56:	01 97       	sbiw	r24, 0x01	; 1
    3b58:	f1 f7       	brne	.-4      	; 0x3b56 <main+0xa06>
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e1 57       	subi	r30, 0x71	; 113
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	91 83       	std	Z+1, r25	; 0x01
    3b62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b64:	de 01       	movw	r26, r28
    3b66:	af 56       	subi	r26, 0x6F	; 111
    3b68:	bf 4f       	sbci	r27, 0xFF	; 255
    3b6a:	fe 01       	movw	r30, r28
    3b6c:	ef 56       	subi	r30, 0x6F	; 111
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	80 81       	ld	r24, Z
    3b72:	91 81       	ldd	r25, Z+1	; 0x01
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	11 96       	adiw	r26, 0x01	; 1
    3b78:	9c 93       	st	X, r25
    3b7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	ef 56       	subi	r30, 0x6F	; 111
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	80 81       	ld	r24, Z
    3b84:	91 81       	ldd	r25, Z+1	; 0x01
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	d1 f6       	brne	.-76     	; 0x3b3e <main+0x9ee>
    3b8a:	27 c0       	rjmp	.+78     	; 0x3bda <main+0xa8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8c:	8e 01       	movw	r16, r28
    3b8e:	0f 56       	subi	r16, 0x6F	; 111
    3b90:	1f 4f       	sbci	r17, 0xFF	; 255
    3b92:	fe 01       	movw	r30, r28
    3b94:	ed 56       	subi	r30, 0x6D	; 109
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	60 81       	ld	r22, Z
    3b9a:	71 81       	ldd	r23, Z+1	; 0x01
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ba0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	f8 01       	movw	r30, r16
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
    3bae:	de 01       	movw	r26, r28
    3bb0:	a3 57       	subi	r26, 0x73	; 115
    3bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	ef 56       	subi	r30, 0x6F	; 111
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	8d 93       	st	X+, r24
    3bc0:	9c 93       	st	X, r25
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	e3 57       	subi	r30, 0x73	; 115
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	80 81       	ld	r24, Z
    3bca:	91 81       	ldd	r25, Z+1	; 0x01
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <main+0xa7c>
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	e3 57       	subi	r30, 0x73	; 115
    3bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd6:	91 83       	std	Z+1, r25	; 0x01
    3bd8:	80 83       	st	Z, r24
				_delay_ms(100);
				LCD_u8GoToXY(2,11+i);
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e9 51       	subi	r30, 0x19	; 25
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	80 81       	ld	r24, Z
    3be2:	98 2f       	mov	r25, r24
    3be4:	95 5f       	subi	r25, 0xF5	; 245
    3be6:	82 e0       	ldi	r24, 0x02	; 2
    3be8:	69 2f       	mov	r22, r25
    3bea:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				LCD_voidSendChar('*');
    3bee:	8a e2       	ldi	r24, 0x2A	; 42
    3bf0:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
		    _delay_ms(1000);
			LCD_voidClearScreen();
			LCD_voidSendStr("Set Guest Pass");
			LCD_u8GoToXY(2,0);
			LCD_voidSendStr("Guest pass:");
			for(u8 i = 0 ;i < 4 ;i++)
    3bf4:	de 01       	movw	r26, r28
    3bf6:	a9 51       	subi	r26, 0x19	; 25
    3bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	e9 51       	subi	r30, 0x19	; 25
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	80 81       	ld	r24, Z
    3c02:	8f 5f       	subi	r24, 0xFF	; 255
    3c04:	8c 93       	st	X, r24
    3c06:	fe 01       	movw	r30, r28
    3c08:	e9 51       	subi	r30, 0x19	; 25
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	84 30       	cpi	r24, 0x04	; 4
    3c10:	08 f4       	brcc	.+2      	; 0x3c14 <main+0xac4>
    3c12:	01 cf       	rjmp	.-510    	; 0x3a16 <main+0x8c6>
				LCD_voidSendChar(Local_u8KeyValue);
				_delay_ms(100);
				LCD_u8GoToXY(2,11+i);
				LCD_voidSendChar('*');
			}
			LCD_voidClearScreen();
    3c14:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
			LCD_voidSendStr("Pass Saved");
    3c18:	86 ea       	ldi	r24, 0xA6	; 166
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
		}
/*****************************************************************************************************/
/************************Select Mood************************************************/
		while(1)
		{
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_LOW);
    3c20:	82 e0       	ldi	r24, 0x02	; 2
    3c22:	62 e0       	ldi	r22, 0x02	; 2
    3c24:	40 e0       	ldi	r20, 0x00	; 0
    3c26:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    3c2a:	82 e0       	ldi	r24, 0x02	; 2
    3c2c:	63 e0       	ldi	r22, 0x03	; 3
    3c2e:	40 e0       	ldi	r20, 0x00	; 0
    3c30:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    3c34:	82 e0       	ldi	r24, 0x02	; 2
    3c36:	64 e0       	ldi	r22, 0x04	; 4
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			Local_u8PassFlag  = 0;
    3c3e:	fe 01       	movw	r30, r28
    3c40:	ef 50       	subi	r30, 0x0F	; 15
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	10 82       	st	Z, r1
			Local_u32Time_Out = 0;
    3c46:	fe 01       	movw	r30, r28
    3c48:	e6 51       	subi	r30, 0x16	; 22
    3c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4c:	10 82       	st	Z, r1
    3c4e:	11 82       	std	Z+1, r1	; 0x01
    3c50:	12 82       	std	Z+2, r1	; 0x02
    3c52:	13 82       	std	Z+3, r1	; 0x03

			LCD_voidClearScreen();
    3c54:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
			LCD_voidSendStr("Select Mood:");
    3c58:	8c ec       	ldi	r24, 0xCC	; 204
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
			LCD_u8GoToXY(2,0);
    3c60:	82 e0       	ldi	r24, 0x02	; 2
    3c62:	60 e0       	ldi	r22, 0x00	; 0
    3c64:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
			LCD_voidSendStr("1:Admin");
    3c68:	89 ed       	ldi	r24, 0xD9	; 217
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
			LCD_u8GoToXY(2,8);
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	68 e0       	ldi	r22, 0x08	; 8
    3c74:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
			LCD_voidSendStr("2:Guest");
    3c78:	81 ee       	ldi	r24, 0xE1	; 225
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
	/***********************************************************************************/
		KPD_u8GetKeyState(&Local_u8KeyValue);
    3c80:	ce 01       	movw	r24, r28
    3c82:	8e 50       	subi	r24, 0x0E	; 14
    3c84:	9f 4f       	sbci	r25, 0xFF	; 255
    3c86:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    3c8a:	05 c0       	rjmp	.+10     	; 0x3c96 <main+0xb46>
		while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
		{
			KPD_u8GetKeyState(&Local_u8KeyValue);
    3c8c:	ce 01       	movw	r24, r28
    3c8e:	8e 50       	subi	r24, 0x0E	; 14
    3c90:	9f 4f       	sbci	r25, 0xFF	; 255
    3c92:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
			LCD_voidSendStr("1:Admin");
			LCD_u8GoToXY(2,8);
			LCD_voidSendStr("2:Guest");
	/***********************************************************************************/
		KPD_u8GetKeyState(&Local_u8KeyValue);
		while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    3c96:	fe 01       	movw	r30, r28
    3c98:	ee 50       	subi	r30, 0x0E	; 14
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	80 81       	ld	r24, Z
    3c9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3ca0:	a9 f3       	breq	.-22     	; 0x3c8c <main+0xb3c>
		{
			KPD_u8GetKeyState(&Local_u8KeyValue);
		}
		/*****************************************Admin Mood***************************************/
		if(Local_u8KeyValue == '1')
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	ee 50       	subi	r30, 0x0E	; 14
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	81 33       	cpi	r24, 0x31	; 49
    3cac:	11 f0       	breq	.+4      	; 0x3cb2 <main+0xb62>
    3cae:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <main+0x1c0e>
		{
		   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    3cb2:	82 e0       	ldi	r24, 0x02	; 2
    3cb4:	62 e0       	ldi	r22, 0x02	; 2
    3cb6:	41 e0       	ldi	r20, 0x01	; 1
    3cb8:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    3cbc:	3d c2       	rjmp	.+1146   	; 0x4138 <main+0xfe8>
		   while(Local_u8PassFlag == 0 && Local_u8TryNum < 3)
		   {
				Local_u8PassFlag =1;
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	ef 50       	subi	r30, 0x0F	; 15
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	80 83       	st	Z, r24
				LCD_voidClearScreen();
    3cc8:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
				LCD_voidSendStr("Admin Pass:");
    3ccc:	89 ee       	ldi	r24, 0xE9	; 233
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				for(u8 i = 0 ;i < 4 ;i++)
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	ea 51       	subi	r30, 0x1A	; 26
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	10 82       	st	Z, r1
    3cdc:	fb c0       	rjmp	.+502    	; 0x3ed4 <main+0xd84>
				{
					KPD_u8GetKeyState(&Local_u8KeyValue);
    3cde:	ce 01       	movw	r24, r28
    3ce0:	8e 50       	subi	r24, 0x0E	; 14
    3ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    3ce8:	05 c0       	rjmp	.+10     	; 0x3cf4 <main+0xba4>
					while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
					{
						KPD_u8GetKeyState(&Local_u8KeyValue);
    3cea:	ce 01       	movw	r24, r28
    3cec:	8e 50       	subi	r24, 0x0E	; 14
    3cee:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf0:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
				LCD_voidClearScreen();
				LCD_voidSendStr("Admin Pass:");
				for(u8 i = 0 ;i < 4 ;i++)
				{
					KPD_u8GetKeyState(&Local_u8KeyValue);
					while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	ee 50       	subi	r30, 0x0E	; 14
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	80 81       	ld	r24, Z
    3cfc:	8f 3f       	cpi	r24, 0xFF	; 255
    3cfe:	a9 f3       	breq	.-22     	; 0x3cea <main+0xb9a>
					{
						KPD_u8GetKeyState(&Local_u8KeyValue);
					}
					Local_u8AdminPass[i]=Local_u8KeyValue;
    3d00:	fe 01       	movw	r30, r28
    3d02:	ea 51       	subi	r30, 0x1A	; 26
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	80 81       	ld	r24, Z
    3d08:	28 2f       	mov	r18, r24
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	ee 50       	subi	r30, 0x0E	; 14
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	40 81       	ld	r20, Z
    3d14:	ce 01       	movw	r24, r28
    3d16:	8c 50       	subi	r24, 0x0C	; 12
    3d18:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	e2 0f       	add	r30, r18
    3d1e:	f3 1f       	adc	r31, r19
    3d20:	40 83       	st	Z, r20
					LCD_u8GoToXY(1,11+i);
    3d22:	fe 01       	movw	r30, r28
    3d24:	ea 51       	subi	r30, 0x1A	; 26
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	80 81       	ld	r24, Z
    3d2a:	98 2f       	mov	r25, r24
    3d2c:	95 5f       	subi	r25, 0xF5	; 245
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	69 2f       	mov	r22, r25
    3d32:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendChar(Local_u8KeyValue);
    3d36:	fe 01       	movw	r30, r28
    3d38:	ee 50       	subi	r30, 0x0E	; 14
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	80 81       	ld	r24, Z
    3d3e:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
    3d42:	fe 01       	movw	r30, r28
    3d44:	e7 57       	subi	r30, 0x77	; 119
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	a8 ec       	ldi	r26, 0xC8	; 200
    3d4e:	b2 e4       	ldi	r27, 0x42	; 66
    3d50:	80 83       	st	Z, r24
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	a2 83       	std	Z+2, r26	; 0x02
    3d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d58:	8e 01       	movw	r16, r28
    3d5a:	0b 57       	subi	r16, 0x7B	; 123
    3d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e7 57       	subi	r30, 0x77	; 119
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	60 81       	ld	r22, Z
    3d66:	71 81       	ldd	r23, Z+1	; 0x01
    3d68:	82 81       	ldd	r24, Z+2	; 0x02
    3d6a:	93 81       	ldd	r25, Z+3	; 0x03
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	4a ef       	ldi	r20, 0xFA	; 250
    3d72:	54 e4       	ldi	r21, 0x44	; 68
    3d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	80 83       	st	Z, r24
    3d80:	91 83       	std	Z+1, r25	; 0x01
    3d82:	a2 83       	std	Z+2, r26	; 0x02
    3d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d86:	fe 01       	movw	r30, r28
    3d88:	eb 57       	subi	r30, 0x7B	; 123
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	60 81       	ld	r22, Z
    3d8e:	71 81       	ldd	r23, Z+1	; 0x01
    3d90:	82 81       	ldd	r24, Z+2	; 0x02
    3d92:	93 81       	ldd	r25, Z+3	; 0x03
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e8       	ldi	r20, 0x80	; 128
    3d9a:	5f e3       	ldi	r21, 0x3F	; 63
    3d9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3da0:	88 23       	and	r24, r24
    3da2:	44 f4       	brge	.+16     	; 0x3db4 <main+0xc64>
		__ticks = 1;
    3da4:	fe 01       	movw	r30, r28
    3da6:	ed 57       	subi	r30, 0x7D	; 125
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	91 83       	std	Z+1, r25	; 0x01
    3db0:	80 83       	st	Z, r24
    3db2:	64 c0       	rjmp	.+200    	; 0x3e7c <main+0xd2c>
	else if (__tmp > 65535)
    3db4:	fe 01       	movw	r30, r28
    3db6:	eb 57       	subi	r30, 0x7B	; 123
    3db8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dba:	60 81       	ld	r22, Z
    3dbc:	71 81       	ldd	r23, Z+1	; 0x01
    3dbe:	82 81       	ldd	r24, Z+2	; 0x02
    3dc0:	93 81       	ldd	r25, Z+3	; 0x03
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	3f ef       	ldi	r19, 0xFF	; 255
    3dc6:	4f e7       	ldi	r20, 0x7F	; 127
    3dc8:	57 e4       	ldi	r21, 0x47	; 71
    3dca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3dce:	18 16       	cp	r1, r24
    3dd0:	0c f0       	brlt	.+2      	; 0x3dd4 <main+0xc84>
    3dd2:	43 c0       	rjmp	.+134    	; 0x3e5a <main+0xd0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	e7 57       	subi	r30, 0x77	; 119
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	60 81       	ld	r22, Z
    3ddc:	71 81       	ldd	r23, Z+1	; 0x01
    3dde:	82 81       	ldd	r24, Z+2	; 0x02
    3de0:	93 81       	ldd	r25, Z+3	; 0x03
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e2       	ldi	r20, 0x20	; 32
    3de8:	51 e4       	ldi	r21, 0x41	; 65
    3dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	8e 01       	movw	r16, r28
    3df4:	0d 57       	subi	r16, 0x7D	; 125
    3df6:	1f 4f       	sbci	r17, 0xFF	; 255
    3df8:	bc 01       	movw	r22, r24
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	f8 01       	movw	r30, r16
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
    3e0a:	1f c0       	rjmp	.+62     	; 0x3e4a <main+0xcfa>
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ef 57       	subi	r30, 0x7F	; 127
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	88 ec       	ldi	r24, 0xC8	; 200
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	80 83       	st	Z, r24
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	ef 57       	subi	r30, 0x7F	; 127
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	80 81       	ld	r24, Z
    3e22:	91 81       	ldd	r25, Z+1	; 0x01
    3e24:	01 97       	sbiw	r24, 0x01	; 1
    3e26:	f1 f7       	brne	.-4      	; 0x3e24 <main+0xcd4>
    3e28:	fe 01       	movw	r30, r28
    3e2a:	ef 57       	subi	r30, 0x7F	; 127
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	91 83       	std	Z+1, r25	; 0x01
    3e30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e32:	de 01       	movw	r26, r28
    3e34:	ad 57       	subi	r26, 0x7D	; 125
    3e36:	bf 4f       	sbci	r27, 0xFF	; 255
    3e38:	fe 01       	movw	r30, r28
    3e3a:	ed 57       	subi	r30, 0x7D	; 125
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	80 81       	ld	r24, Z
    3e40:	91 81       	ldd	r25, Z+1	; 0x01
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	11 96       	adiw	r26, 0x01	; 1
    3e46:	9c 93       	st	X, r25
    3e48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	ed 57       	subi	r30, 0x7D	; 125
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	80 81       	ld	r24, Z
    3e52:	91 81       	ldd	r25, Z+1	; 0x01
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	d1 f6       	brne	.-76     	; 0x3e0c <main+0xcbc>
    3e58:	27 c0       	rjmp	.+78     	; 0x3ea8 <main+0xd58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5a:	8e 01       	movw	r16, r28
    3e5c:	0d 57       	subi	r16, 0x7D	; 125
    3e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e60:	fe 01       	movw	r30, r28
    3e62:	eb 57       	subi	r30, 0x7B	; 123
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	60 81       	ld	r22, Z
    3e68:	71 81       	ldd	r23, Z+1	; 0x01
    3e6a:	82 81       	ldd	r24, Z+2	; 0x02
    3e6c:	93 81       	ldd	r25, Z+3	; 0x03
    3e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	f8 01       	movw	r30, r16
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	80 83       	st	Z, r24
    3e7c:	de 01       	movw	r26, r28
    3e7e:	a1 58       	subi	r26, 0x81	; 129
    3e80:	bf 4f       	sbci	r27, 0xFF	; 255
    3e82:	fe 01       	movw	r30, r28
    3e84:	ed 57       	subi	r30, 0x7D	; 125
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	80 81       	ld	r24, Z
    3e8a:	91 81       	ldd	r25, Z+1	; 0x01
    3e8c:	8d 93       	st	X+, r24
    3e8e:	9c 93       	st	X, r25
    3e90:	fe 01       	movw	r30, r28
    3e92:	e1 58       	subi	r30, 0x81	; 129
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	80 81       	ld	r24, Z
    3e98:	91 81       	ldd	r25, Z+1	; 0x01
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	f1 f7       	brne	.-4      	; 0x3e9a <main+0xd4a>
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	e1 58       	subi	r30, 0x81	; 129
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	91 83       	std	Z+1, r25	; 0x01
    3ea6:	80 83       	st	Z, r24
					_delay_ms(100);
					LCD_u8GoToXY(1,11+i);
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	ea 51       	subi	r30, 0x1A	; 26
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	80 81       	ld	r24, Z
    3eb0:	98 2f       	mov	r25, r24
    3eb2:	95 5f       	subi	r25, 0xF5	; 245
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	69 2f       	mov	r22, r25
    3eb8:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendChar('*');
    3ebc:	8a e2       	ldi	r24, 0x2A	; 42
    3ebe:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
		   while(Local_u8PassFlag == 0 && Local_u8TryNum < 3)
		   {
				Local_u8PassFlag =1;
				LCD_voidClearScreen();
				LCD_voidSendStr("Admin Pass:");
				for(u8 i = 0 ;i < 4 ;i++)
    3ec2:	de 01       	movw	r26, r28
    3ec4:	aa 51       	subi	r26, 0x1A	; 26
    3ec6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec8:	fe 01       	movw	r30, r28
    3eca:	ea 51       	subi	r30, 0x1A	; 26
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	80 81       	ld	r24, Z
    3ed0:	8f 5f       	subi	r24, 0xFF	; 255
    3ed2:	8c 93       	st	X, r24
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	ea 51       	subi	r30, 0x1A	; 26
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	84 30       	cpi	r24, 0x04	; 4
    3ede:	08 f4       	brcc	.+2      	; 0x3ee2 <main+0xd92>
    3ee0:	fe ce       	rjmp	.-516    	; 0x3cde <main+0xb8e>
					_delay_ms(100);
					LCD_u8GoToXY(1,11+i);
					LCD_voidSendChar('*');
				}

				for(u8 i = 0 ;i < 4 ;i++)
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	eb 51       	subi	r30, 0x1B	; 27
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	10 82       	st	Z, r1
    3eea:	36 c0       	rjmp	.+108    	; 0x3f58 <main+0xe08>
				{
					EEPROM_u8ReadDataByte(i,&Local_u8ReadingByte);
    3eec:	fe 01       	movw	r30, r28
    3eee:	eb 51       	subi	r30, 0x1B	; 27
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	80 81       	ld	r24, Z
    3ef4:	88 2f       	mov	r24, r24
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	9e 01       	movw	r18, r28
    3efa:	2d 50       	subi	r18, 0x0D	; 13
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	b9 01       	movw	r22, r18
    3f00:	0e 94 ed 0c 	call	0x19da	; 0x19da <EEPROM_u8ReadDataByte>
					if(Local_u8ReadingByte != Local_u8AdminPass[i])
    3f04:	fe 01       	movw	r30, r28
    3f06:	eb 51       	subi	r30, 0x1B	; 27
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	80 81       	ld	r24, Z
    3f0c:	28 2f       	mov	r18, r24
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	ce 01       	movw	r24, r28
    3f12:	8c 50       	subi	r24, 0x0C	; 12
    3f14:	9f 4f       	sbci	r25, 0xFF	; 255
    3f16:	fc 01       	movw	r30, r24
    3f18:	e2 0f       	add	r30, r18
    3f1a:	f3 1f       	adc	r31, r19
    3f1c:	90 81       	ld	r25, Z
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ed 50       	subi	r30, 0x0D	; 13
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	80 81       	ld	r24, Z
    3f26:	98 17       	cp	r25, r24
    3f28:	71 f0       	breq	.+28     	; 0x3f46 <main+0xdf6>
					{
						Local_u8PassFlag =0;
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	ef 50       	subi	r30, 0x0F	; 15
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	10 82       	st	Z, r1
						Local_u8TryNum++;
    3f32:	de 01       	movw	r26, r28
    3f34:	a0 51       	subi	r26, 0x10	; 16
    3f36:	bf 4f       	sbci	r27, 0xFF	; 255
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e0 51       	subi	r30, 0x10	; 16
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	80 81       	ld	r24, Z
    3f40:	8f 5f       	subi	r24, 0xFF	; 255
    3f42:	8c 93       	st	X, r24
    3f44:	0f c0       	rjmp	.+30     	; 0x3f64 <main+0xe14>
					_delay_ms(100);
					LCD_u8GoToXY(1,11+i);
					LCD_voidSendChar('*');
				}

				for(u8 i = 0 ;i < 4 ;i++)
    3f46:	de 01       	movw	r26, r28
    3f48:	ab 51       	subi	r26, 0x1B	; 27
    3f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	eb 51       	subi	r30, 0x1B	; 27
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	80 81       	ld	r24, Z
    3f54:	8f 5f       	subi	r24, 0xFF	; 255
    3f56:	8c 93       	st	X, r24
    3f58:	fe 01       	movw	r30, r28
    3f5a:	eb 51       	subi	r30, 0x1B	; 27
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 81       	ld	r24, Z
    3f60:	84 30       	cpi	r24, 0x04	; 4
    3f62:	20 f2       	brcs	.-120    	; 0x3eec <main+0xd9c>
						Local_u8TryNum++;
						break;
					}
				}

				if(Local_u8PassFlag == 0 && Local_u8TryNum < 3)
    3f64:	fe 01       	movw	r30, r28
    3f66:	ef 50       	subi	r30, 0x0F	; 15
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	80 81       	ld	r24, Z
    3f6c:	88 23       	and	r24, r24
    3f6e:	09 f0       	breq	.+2      	; 0x3f72 <main+0xe22>
    3f70:	e3 c0       	rjmp	.+454    	; 0x4138 <main+0xfe8>
    3f72:	fe 01       	movw	r30, r28
    3f74:	e0 51       	subi	r30, 0x10	; 16
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	80 81       	ld	r24, Z
    3f7a:	83 30       	cpi	r24, 0x03	; 3
    3f7c:	08 f0       	brcs	.+2      	; 0x3f80 <main+0xe30>
    3f7e:	dc c0       	rjmp	.+440    	; 0x4138 <main+0xfe8>
				{
					LCD_voidClearScreen();
    3f80:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
					LCD_u8GoToXY(1,0);
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	60 e0       	ldi	r22, 0x00	; 0
    3f88:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendStr("Wrong PassWord");
    3f8c:	85 ef       	ldi	r24, 0xF5	; 245
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
					LCD_u8GoToXY(2,0);
    3f94:	82 e0       	ldi	r24, 0x02	; 2
    3f96:	60 e0       	ldi	r22, 0x00	; 0
    3f98:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendStr("Tries Left:");
    3f9c:	84 e0       	ldi	r24, 0x04	; 4
    3f9e:	91 e0       	ldi	r25, 0x01	; 1
    3fa0:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
					LCD_u8GoToXY(2,12);
    3fa4:	82 e0       	ldi	r24, 0x02	; 2
    3fa6:	6c e0       	ldi	r22, 0x0C	; 12
    3fa8:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendNum(3-Local_u8TryNum);
    3fac:	fe 01       	movw	r30, r28
    3fae:	e0 51       	subi	r30, 0x10	; 16
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	80 81       	ld	r24, Z
    3fb4:	28 2f       	mov	r18, r24
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	83 e0       	ldi	r24, 0x03	; 3
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	82 1b       	sub	r24, r18
    3fbe:	93 0b       	sbc	r25, r19
    3fc0:	aa 27       	eor	r26, r26
    3fc2:	97 fd       	sbrc	r25, 7
    3fc4:	a0 95       	com	r26
    3fc6:	ba 2f       	mov	r27, r26
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_voidSendNum>
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e5 58       	subi	r30, 0x85	; 133
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	aa e7       	ldi	r26, 0x7A	; 122
    3fdc:	b4 e4       	ldi	r27, 0x44	; 68
    3fde:	80 83       	st	Z, r24
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	a2 83       	std	Z+2, r26	; 0x02
    3fe4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe6:	8e 01       	movw	r16, r28
    3fe8:	09 58       	subi	r16, 0x89	; 137
    3fea:	1f 4f       	sbci	r17, 0xFF	; 255
    3fec:	fe 01       	movw	r30, r28
    3fee:	e5 58       	subi	r30, 0x85	; 133
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	60 81       	ld	r22, Z
    3ff4:	71 81       	ldd	r23, Z+1	; 0x01
    3ff6:	82 81       	ldd	r24, Z+2	; 0x02
    3ff8:	93 81       	ldd	r25, Z+3	; 0x03
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	4a ef       	ldi	r20, 0xFA	; 250
    4000:	54 e4       	ldi	r21, 0x44	; 68
    4002:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	f8 01       	movw	r30, r16
    400c:	80 83       	st	Z, r24
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	a2 83       	std	Z+2, r26	; 0x02
    4012:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4014:	fe 01       	movw	r30, r28
    4016:	e9 58       	subi	r30, 0x89	; 137
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	60 81       	ld	r22, Z
    401c:	71 81       	ldd	r23, Z+1	; 0x01
    401e:	82 81       	ldd	r24, Z+2	; 0x02
    4020:	93 81       	ldd	r25, Z+3	; 0x03
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	40 e8       	ldi	r20, 0x80	; 128
    4028:	5f e3       	ldi	r21, 0x3F	; 63
    402a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    402e:	88 23       	and	r24, r24
    4030:	44 f4       	brge	.+16     	; 0x4042 <main+0xef2>
		__ticks = 1;
    4032:	fe 01       	movw	r30, r28
    4034:	eb 58       	subi	r30, 0x8B	; 139
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	80 83       	st	Z, r24
    4040:	64 c0       	rjmp	.+200    	; 0x410a <main+0xfba>
	else if (__tmp > 65535)
    4042:	fe 01       	movw	r30, r28
    4044:	e9 58       	subi	r30, 0x89	; 137
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	60 81       	ld	r22, Z
    404a:	71 81       	ldd	r23, Z+1	; 0x01
    404c:	82 81       	ldd	r24, Z+2	; 0x02
    404e:	93 81       	ldd	r25, Z+3	; 0x03
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	3f ef       	ldi	r19, 0xFF	; 255
    4054:	4f e7       	ldi	r20, 0x7F	; 127
    4056:	57 e4       	ldi	r21, 0x47	; 71
    4058:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    405c:	18 16       	cp	r1, r24
    405e:	0c f0       	brlt	.+2      	; 0x4062 <main+0xf12>
    4060:	43 c0       	rjmp	.+134    	; 0x40e8 <main+0xf98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4062:	fe 01       	movw	r30, r28
    4064:	e5 58       	subi	r30, 0x85	; 133
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	60 81       	ld	r22, Z
    406a:	71 81       	ldd	r23, Z+1	; 0x01
    406c:	82 81       	ldd	r24, Z+2	; 0x02
    406e:	93 81       	ldd	r25, Z+3	; 0x03
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	40 e2       	ldi	r20, 0x20	; 32
    4076:	51 e4       	ldi	r21, 0x41	; 65
    4078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	8e 01       	movw	r16, r28
    4082:	0b 58       	subi	r16, 0x8B	; 139
    4084:	1f 4f       	sbci	r17, 0xFF	; 255
    4086:	bc 01       	movw	r22, r24
    4088:	cd 01       	movw	r24, r26
    408a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	f8 01       	movw	r30, r16
    4094:	91 83       	std	Z+1, r25	; 0x01
    4096:	80 83       	st	Z, r24
    4098:	1f c0       	rjmp	.+62     	; 0x40d8 <main+0xf88>
    409a:	fe 01       	movw	r30, r28
    409c:	ed 58       	subi	r30, 0x8D	; 141
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	88 ec       	ldi	r24, 0xC8	; 200
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	91 83       	std	Z+1, r25	; 0x01
    40a6:	80 83       	st	Z, r24
    40a8:	fe 01       	movw	r30, r28
    40aa:	ed 58       	subi	r30, 0x8D	; 141
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	80 81       	ld	r24, Z
    40b0:	91 81       	ldd	r25, Z+1	; 0x01
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	f1 f7       	brne	.-4      	; 0x40b2 <main+0xf62>
    40b6:	fe 01       	movw	r30, r28
    40b8:	ed 58       	subi	r30, 0x8D	; 141
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	91 83       	std	Z+1, r25	; 0x01
    40be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c0:	de 01       	movw	r26, r28
    40c2:	ab 58       	subi	r26, 0x8B	; 139
    40c4:	bf 4f       	sbci	r27, 0xFF	; 255
    40c6:	fe 01       	movw	r30, r28
    40c8:	eb 58       	subi	r30, 0x8B	; 139
    40ca:	ff 4f       	sbci	r31, 0xFF	; 255
    40cc:	80 81       	ld	r24, Z
    40ce:	91 81       	ldd	r25, Z+1	; 0x01
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	11 96       	adiw	r26, 0x01	; 1
    40d4:	9c 93       	st	X, r25
    40d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d8:	fe 01       	movw	r30, r28
    40da:	eb 58       	subi	r30, 0x8B	; 139
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	80 81       	ld	r24, Z
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	00 97       	sbiw	r24, 0x00	; 0
    40e4:	d1 f6       	brne	.-76     	; 0x409a <main+0xf4a>
    40e6:	28 c0       	rjmp	.+80     	; 0x4138 <main+0xfe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e8:	8e 01       	movw	r16, r28
    40ea:	0b 58       	subi	r16, 0x8B	; 139
    40ec:	1f 4f       	sbci	r17, 0xFF	; 255
    40ee:	fe 01       	movw	r30, r28
    40f0:	e9 58       	subi	r30, 0x89	; 137
    40f2:	ff 4f       	sbci	r31, 0xFF	; 255
    40f4:	60 81       	ld	r22, Z
    40f6:	71 81       	ldd	r23, Z+1	; 0x01
    40f8:	82 81       	ldd	r24, Z+2	; 0x02
    40fa:	93 81       	ldd	r25, Z+3	; 0x03
    40fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	f8 01       	movw	r30, r16
    4106:	91 83       	std	Z+1, r25	; 0x01
    4108:	80 83       	st	Z, r24
    410a:	de 01       	movw	r26, r28
    410c:	af 58       	subi	r26, 0x8F	; 143
    410e:	bf 4f       	sbci	r27, 0xFF	; 255
    4110:	fe 01       	movw	r30, r28
    4112:	eb 58       	subi	r30, 0x8B	; 139
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	80 81       	ld	r24, Z
    4118:	91 81       	ldd	r25, Z+1	; 0x01
    411a:	11 96       	adiw	r26, 0x01	; 1
    411c:	9c 93       	st	X, r25
    411e:	8e 93       	st	-X, r24
    4120:	fe 01       	movw	r30, r28
    4122:	ef 58       	subi	r30, 0x8F	; 143
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	80 81       	ld	r24, Z
    4128:	91 81       	ldd	r25, Z+1	; 0x01
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	f1 f7       	brne	.-4      	; 0x412a <main+0xfda>
    412e:	fe 01       	movw	r30, r28
    4130:	ef 58       	subi	r30, 0x8F	; 143
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	91 83       	std	Z+1, r25	; 0x01
    4136:	80 83       	st	Z, r24
		}
		/*****************************************Admin Mood***************************************/
		if(Local_u8KeyValue == '1')
		{
		   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
		   while(Local_u8PassFlag == 0 && Local_u8TryNum < 3)
    4138:	fe 01       	movw	r30, r28
    413a:	ef 50       	subi	r30, 0x0F	; 15
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	80 81       	ld	r24, Z
    4140:	88 23       	and	r24, r24
    4142:	39 f4       	brne	.+14     	; 0x4152 <main+0x1002>
    4144:	fe 01       	movw	r30, r28
    4146:	e0 51       	subi	r30, 0x10	; 16
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	80 81       	ld	r24, Z
    414c:	83 30       	cpi	r24, 0x03	; 3
    414e:	08 f4       	brcc	.+2      	; 0x4152 <main+0x1002>
    4150:	b6 cd       	rjmp	.-1172   	; 0x3cbe <main+0xb6e>
					LCD_voidSendNum(3-Local_u8TryNum);
					_delay_ms(1000);
				}
		   }

		   if(Local_u8TryNum == 3)
    4152:	fe 01       	movw	r30, r28
    4154:	e0 51       	subi	r30, 0x10	; 16
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	80 81       	ld	r24, Z
    415a:	83 30       	cpi	r24, 0x03	; 3
    415c:	09 f0       	breq	.+2      	; 0x4160 <main+0x1010>
    415e:	ee c0       	rjmp	.+476    	; 0x433c <main+0x11ec>
		   {
			   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_LOW);
    4160:	82 e0       	ldi	r24, 0x02	; 2
    4162:	62 e0       	ldi	r22, 0x02	; 2
    4164:	40 e0       	ldi	r20, 0x00	; 0
    4166:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    416a:	82 e0       	ldi	r24, 0x02	; 2
    416c:	64 e0       	ldi	r22, 0x04	; 4
    416e:	41 e0       	ldi	r20, 0x01	; 1
    4170:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			   Local_u8TryNum = 0;
    4174:	fe 01       	movw	r30, r28
    4176:	e0 51       	subi	r30, 0x10	; 16
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	10 82       	st	Z, r1
			   LCD_voidClearScreen();
    417c:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
			   LCD_voidSendStr("Waiting For   S");
    4180:	80 e1       	ldi	r24, 0x10	; 16
    4182:	91 e0       	ldi	r25, 0x01	; 1
    4184:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
			   for( u8 i = 5; i > 0; i--)
    4188:	fe 01       	movw	r30, r28
    418a:	ec 51       	subi	r30, 0x1C	; 28
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	85 e0       	ldi	r24, 0x05	; 5
    4190:	80 83       	st	Z, r24
    4192:	cc c0       	rjmp	.+408    	; 0x432c <main+0x11dc>
			   {
				   LCD_u8GoToXY(1,12);
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	6c e0       	ldi	r22, 0x0C	; 12
    4198:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				   LCD_voidSendNum(i);
    419c:	fe 01       	movw	r30, r28
    419e:	ec 51       	subi	r30, 0x1C	; 28
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	80 81       	ld	r24, Z
    41a4:	88 2f       	mov	r24, r24
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	a0 e0       	ldi	r26, 0x00	; 0
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	bc 01       	movw	r22, r24
    41ae:	cd 01       	movw	r24, r26
    41b0:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_voidSendNum>
    41b4:	fe 01       	movw	r30, r28
    41b6:	e3 59       	subi	r30, 0x93	; 147
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	aa e7       	ldi	r26, 0x7A	; 122
    41c0:	b4 e4       	ldi	r27, 0x44	; 68
    41c2:	80 83       	st	Z, r24
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	a2 83       	std	Z+2, r26	; 0x02
    41c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ca:	8e 01       	movw	r16, r28
    41cc:	07 59       	subi	r16, 0x97	; 151
    41ce:	1f 4f       	sbci	r17, 0xFF	; 255
    41d0:	fe 01       	movw	r30, r28
    41d2:	e3 59       	subi	r30, 0x93	; 147
    41d4:	ff 4f       	sbci	r31, 0xFF	; 255
    41d6:	60 81       	ld	r22, Z
    41d8:	71 81       	ldd	r23, Z+1	; 0x01
    41da:	82 81       	ldd	r24, Z+2	; 0x02
    41dc:	93 81       	ldd	r25, Z+3	; 0x03
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	4a ef       	ldi	r20, 0xFA	; 250
    41e4:	54 e4       	ldi	r21, 0x44	; 68
    41e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	f8 01       	movw	r30, r16
    41f0:	80 83       	st	Z, r24
    41f2:	91 83       	std	Z+1, r25	; 0x01
    41f4:	a2 83       	std	Z+2, r26	; 0x02
    41f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41f8:	fe 01       	movw	r30, r28
    41fa:	e7 59       	subi	r30, 0x97	; 151
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	60 81       	ld	r22, Z
    4200:	71 81       	ldd	r23, Z+1	; 0x01
    4202:	82 81       	ldd	r24, Z+2	; 0x02
    4204:	93 81       	ldd	r25, Z+3	; 0x03
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e8       	ldi	r20, 0x80	; 128
    420c:	5f e3       	ldi	r21, 0x3F	; 63
    420e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4212:	88 23       	and	r24, r24
    4214:	44 f4       	brge	.+16     	; 0x4226 <main+0x10d6>
		__ticks = 1;
    4216:	fe 01       	movw	r30, r28
    4218:	e9 59       	subi	r30, 0x99	; 153
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	91 83       	std	Z+1, r25	; 0x01
    4222:	80 83       	st	Z, r24
    4224:	64 c0       	rjmp	.+200    	; 0x42ee <main+0x119e>
	else if (__tmp > 65535)
    4226:	fe 01       	movw	r30, r28
    4228:	e7 59       	subi	r30, 0x97	; 151
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	60 81       	ld	r22, Z
    422e:	71 81       	ldd	r23, Z+1	; 0x01
    4230:	82 81       	ldd	r24, Z+2	; 0x02
    4232:	93 81       	ldd	r25, Z+3	; 0x03
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	3f ef       	ldi	r19, 0xFF	; 255
    4238:	4f e7       	ldi	r20, 0x7F	; 127
    423a:	57 e4       	ldi	r21, 0x47	; 71
    423c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4240:	18 16       	cp	r1, r24
    4242:	0c f0       	brlt	.+2      	; 0x4246 <main+0x10f6>
    4244:	43 c0       	rjmp	.+134    	; 0x42cc <main+0x117c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4246:	fe 01       	movw	r30, r28
    4248:	e3 59       	subi	r30, 0x93	; 147
    424a:	ff 4f       	sbci	r31, 0xFF	; 255
    424c:	60 81       	ld	r22, Z
    424e:	71 81       	ldd	r23, Z+1	; 0x01
    4250:	82 81       	ldd	r24, Z+2	; 0x02
    4252:	93 81       	ldd	r25, Z+3	; 0x03
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	40 e2       	ldi	r20, 0x20	; 32
    425a:	51 e4       	ldi	r21, 0x41	; 65
    425c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	8e 01       	movw	r16, r28
    4266:	09 59       	subi	r16, 0x99	; 153
    4268:	1f 4f       	sbci	r17, 0xFF	; 255
    426a:	bc 01       	movw	r22, r24
    426c:	cd 01       	movw	r24, r26
    426e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4272:	dc 01       	movw	r26, r24
    4274:	cb 01       	movw	r24, r22
    4276:	f8 01       	movw	r30, r16
    4278:	91 83       	std	Z+1, r25	; 0x01
    427a:	80 83       	st	Z, r24
    427c:	1f c0       	rjmp	.+62     	; 0x42bc <main+0x116c>
    427e:	fe 01       	movw	r30, r28
    4280:	eb 59       	subi	r30, 0x9B	; 155
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	88 ec       	ldi	r24, 0xC8	; 200
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	80 83       	st	Z, r24
    428c:	fe 01       	movw	r30, r28
    428e:	eb 59       	subi	r30, 0x9B	; 155
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	80 81       	ld	r24, Z
    4294:	91 81       	ldd	r25, Z+1	; 0x01
    4296:	01 97       	sbiw	r24, 0x01	; 1
    4298:	f1 f7       	brne	.-4      	; 0x4296 <main+0x1146>
    429a:	fe 01       	movw	r30, r28
    429c:	eb 59       	subi	r30, 0x9B	; 155
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	91 83       	std	Z+1, r25	; 0x01
    42a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a4:	de 01       	movw	r26, r28
    42a6:	a9 59       	subi	r26, 0x99	; 153
    42a8:	bf 4f       	sbci	r27, 0xFF	; 255
    42aa:	fe 01       	movw	r30, r28
    42ac:	e9 59       	subi	r30, 0x99	; 153
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	11 96       	adiw	r26, 0x01	; 1
    42b8:	9c 93       	st	X, r25
    42ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42bc:	fe 01       	movw	r30, r28
    42be:	e9 59       	subi	r30, 0x99	; 153
    42c0:	ff 4f       	sbci	r31, 0xFF	; 255
    42c2:	80 81       	ld	r24, Z
    42c4:	91 81       	ldd	r25, Z+1	; 0x01
    42c6:	00 97       	sbiw	r24, 0x00	; 0
    42c8:	d1 f6       	brne	.-76     	; 0x427e <main+0x112e>
    42ca:	27 c0       	rjmp	.+78     	; 0x431a <main+0x11ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42cc:	8e 01       	movw	r16, r28
    42ce:	09 59       	subi	r16, 0x99	; 153
    42d0:	1f 4f       	sbci	r17, 0xFF	; 255
    42d2:	fe 01       	movw	r30, r28
    42d4:	e7 59       	subi	r30, 0x97	; 151
    42d6:	ff 4f       	sbci	r31, 0xFF	; 255
    42d8:	60 81       	ld	r22, Z
    42da:	71 81       	ldd	r23, Z+1	; 0x01
    42dc:	82 81       	ldd	r24, Z+2	; 0x02
    42de:	93 81       	ldd	r25, Z+3	; 0x03
    42e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	f8 01       	movw	r30, r16
    42ea:	91 83       	std	Z+1, r25	; 0x01
    42ec:	80 83       	st	Z, r24
    42ee:	de 01       	movw	r26, r28
    42f0:	ad 59       	subi	r26, 0x9D	; 157
    42f2:	bf 4f       	sbci	r27, 0xFF	; 255
    42f4:	fe 01       	movw	r30, r28
    42f6:	e9 59       	subi	r30, 0x99	; 153
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	80 81       	ld	r24, Z
    42fc:	91 81       	ldd	r25, Z+1	; 0x01
    42fe:	8d 93       	st	X+, r24
    4300:	9c 93       	st	X, r25
    4302:	fe 01       	movw	r30, r28
    4304:	ed 59       	subi	r30, 0x9D	; 157
    4306:	ff 4f       	sbci	r31, 0xFF	; 255
    4308:	80 81       	ld	r24, Z
    430a:	91 81       	ldd	r25, Z+1	; 0x01
    430c:	01 97       	sbiw	r24, 0x01	; 1
    430e:	f1 f7       	brne	.-4      	; 0x430c <main+0x11bc>
    4310:	fe 01       	movw	r30, r28
    4312:	ed 59       	subi	r30, 0x9D	; 157
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	80 83       	st	Z, r24
			   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_LOW);
			   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
			   Local_u8TryNum = 0;
			   LCD_voidClearScreen();
			   LCD_voidSendStr("Waiting For   S");
			   for( u8 i = 5; i > 0; i--)
    431a:	de 01       	movw	r26, r28
    431c:	ac 51       	subi	r26, 0x1C	; 28
    431e:	bf 4f       	sbci	r27, 0xFF	; 255
    4320:	fe 01       	movw	r30, r28
    4322:	ec 51       	subi	r30, 0x1C	; 28
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	80 81       	ld	r24, Z
    4328:	81 50       	subi	r24, 0x01	; 1
    432a:	8c 93       	st	X, r24
    432c:	fe 01       	movw	r30, r28
    432e:	ec 51       	subi	r30, 0x1C	; 28
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	80 81       	ld	r24, Z
    4334:	88 23       	and	r24, r24
    4336:	09 f0       	breq	.+2      	; 0x433a <main+0x11ea>
    4338:	2d cf       	rjmp	.-422    	; 0x4194 <main+0x1044>
    433a:	72 cc       	rjmp	.-1820   	; 0x3c20 <main+0xad0>
				   LCD_voidSendNum(i);
				   _delay_ms(1000);
			   }
		   }

		   else if(Local_u8PassFlag == 1)
    433c:	fe 01       	movw	r30, r28
    433e:	ef 50       	subi	r30, 0x0F	; 15
    4340:	ff 4f       	sbci	r31, 0xFF	; 255
    4342:	80 81       	ld	r24, Z
    4344:	81 30       	cpi	r24, 0x01	; 1
    4346:	09 f0       	breq	.+2      	; 0x434a <main+0x11fa>
    4348:	6b cc       	rjmp	.-1834   	; 0x3c20 <main+0xad0>
		   {

			  Local_u8TryNum = 0;
    434a:	fe 01       	movw	r30, r28
    434c:	e0 51       	subi	r30, 0x10	; 16
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	10 82       	st	Z, r1
			  LCD_voidClearScreen();
    4352:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
			  LCD_u8GoToXY(1,2);
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	62 e0       	ldi	r22, 0x02	; 2
    435a:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
			  LCD_voidSendStr("Welcome Admin");
    435e:	80 e2       	ldi	r24, 0x20	; 32
    4360:	91 e0       	ldi	r25, 0x01	; 1
    4362:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
    4366:	fe 01       	movw	r30, r28
    4368:	e1 5a       	subi	r30, 0xA1	; 161
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	aa ef       	ldi	r26, 0xFA	; 250
    4372:	b3 e4       	ldi	r27, 0x43	; 67
    4374:	80 83       	st	Z, r24
    4376:	91 83       	std	Z+1, r25	; 0x01
    4378:	a2 83       	std	Z+2, r26	; 0x02
    437a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    437c:	8e 01       	movw	r16, r28
    437e:	05 5a       	subi	r16, 0xA5	; 165
    4380:	1f 4f       	sbci	r17, 0xFF	; 255
    4382:	fe 01       	movw	r30, r28
    4384:	e1 5a       	subi	r30, 0xA1	; 161
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	60 81       	ld	r22, Z
    438a:	71 81       	ldd	r23, Z+1	; 0x01
    438c:	82 81       	ldd	r24, Z+2	; 0x02
    438e:	93 81       	ldd	r25, Z+3	; 0x03
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	4a ef       	ldi	r20, 0xFA	; 250
    4396:	54 e4       	ldi	r21, 0x44	; 68
    4398:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	f8 01       	movw	r30, r16
    43a2:	80 83       	st	Z, r24
    43a4:	91 83       	std	Z+1, r25	; 0x01
    43a6:	a2 83       	std	Z+2, r26	; 0x02
    43a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43aa:	fe 01       	movw	r30, r28
    43ac:	e5 5a       	subi	r30, 0xA5	; 165
    43ae:	ff 4f       	sbci	r31, 0xFF	; 255
    43b0:	60 81       	ld	r22, Z
    43b2:	71 81       	ldd	r23, Z+1	; 0x01
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	40 e8       	ldi	r20, 0x80	; 128
    43be:	5f e3       	ldi	r21, 0x3F	; 63
    43c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    43c4:	88 23       	and	r24, r24
    43c6:	44 f4       	brge	.+16     	; 0x43d8 <main+0x1288>
		__ticks = 1;
    43c8:	fe 01       	movw	r30, r28
    43ca:	e7 5a       	subi	r30, 0xA7	; 167
    43cc:	ff 4f       	sbci	r31, 0xFF	; 255
    43ce:	81 e0       	ldi	r24, 0x01	; 1
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	91 83       	std	Z+1, r25	; 0x01
    43d4:	80 83       	st	Z, r24
    43d6:	64 c0       	rjmp	.+200    	; 0x44a0 <main+0x1350>
	else if (__tmp > 65535)
    43d8:	fe 01       	movw	r30, r28
    43da:	e5 5a       	subi	r30, 0xA5	; 165
    43dc:	ff 4f       	sbci	r31, 0xFF	; 255
    43de:	60 81       	ld	r22, Z
    43e0:	71 81       	ldd	r23, Z+1	; 0x01
    43e2:	82 81       	ldd	r24, Z+2	; 0x02
    43e4:	93 81       	ldd	r25, Z+3	; 0x03
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	3f ef       	ldi	r19, 0xFF	; 255
    43ea:	4f e7       	ldi	r20, 0x7F	; 127
    43ec:	57 e4       	ldi	r21, 0x47	; 71
    43ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    43f2:	18 16       	cp	r1, r24
    43f4:	0c f0       	brlt	.+2      	; 0x43f8 <main+0x12a8>
    43f6:	43 c0       	rjmp	.+134    	; 0x447e <main+0x132e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f8:	fe 01       	movw	r30, r28
    43fa:	e1 5a       	subi	r30, 0xA1	; 161
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	60 81       	ld	r22, Z
    4400:	71 81       	ldd	r23, Z+1	; 0x01
    4402:	82 81       	ldd	r24, Z+2	; 0x02
    4404:	93 81       	ldd	r25, Z+3	; 0x03
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e2       	ldi	r20, 0x20	; 32
    440c:	51 e4       	ldi	r21, 0x41	; 65
    440e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	8e 01       	movw	r16, r28
    4418:	07 5a       	subi	r16, 0xA7	; 167
    441a:	1f 4f       	sbci	r17, 0xFF	; 255
    441c:	bc 01       	movw	r22, r24
    441e:	cd 01       	movw	r24, r26
    4420:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	f8 01       	movw	r30, r16
    442a:	91 83       	std	Z+1, r25	; 0x01
    442c:	80 83       	st	Z, r24
    442e:	1f c0       	rjmp	.+62     	; 0x446e <main+0x131e>
    4430:	fe 01       	movw	r30, r28
    4432:	e9 5a       	subi	r30, 0xA9	; 169
    4434:	ff 4f       	sbci	r31, 0xFF	; 255
    4436:	88 ec       	ldi	r24, 0xC8	; 200
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	91 83       	std	Z+1, r25	; 0x01
    443c:	80 83       	st	Z, r24
    443e:	fe 01       	movw	r30, r28
    4440:	e9 5a       	subi	r30, 0xA9	; 169
    4442:	ff 4f       	sbci	r31, 0xFF	; 255
    4444:	80 81       	ld	r24, Z
    4446:	91 81       	ldd	r25, Z+1	; 0x01
    4448:	01 97       	sbiw	r24, 0x01	; 1
    444a:	f1 f7       	brne	.-4      	; 0x4448 <main+0x12f8>
    444c:	fe 01       	movw	r30, r28
    444e:	e9 5a       	subi	r30, 0xA9	; 169
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	91 83       	std	Z+1, r25	; 0x01
    4454:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4456:	de 01       	movw	r26, r28
    4458:	a7 5a       	subi	r26, 0xA7	; 167
    445a:	bf 4f       	sbci	r27, 0xFF	; 255
    445c:	fe 01       	movw	r30, r28
    445e:	e7 5a       	subi	r30, 0xA7	; 167
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	80 81       	ld	r24, Z
    4464:	91 81       	ldd	r25, Z+1	; 0x01
    4466:	01 97       	sbiw	r24, 0x01	; 1
    4468:	11 96       	adiw	r26, 0x01	; 1
    446a:	9c 93       	st	X, r25
    446c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    446e:	fe 01       	movw	r30, r28
    4470:	e7 5a       	subi	r30, 0xA7	; 167
    4472:	ff 4f       	sbci	r31, 0xFF	; 255
    4474:	80 81       	ld	r24, Z
    4476:	91 81       	ldd	r25, Z+1	; 0x01
    4478:	00 97       	sbiw	r24, 0x00	; 0
    447a:	d1 f6       	brne	.-76     	; 0x4430 <main+0x12e0>
    447c:	5e c4       	rjmp	.+2236   	; 0x4d3a <main+0x1bea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    447e:	8e 01       	movw	r16, r28
    4480:	07 5a       	subi	r16, 0xA7	; 167
    4482:	1f 4f       	sbci	r17, 0xFF	; 255
    4484:	fe 01       	movw	r30, r28
    4486:	e5 5a       	subi	r30, 0xA5	; 165
    4488:	ff 4f       	sbci	r31, 0xFF	; 255
    448a:	60 81       	ld	r22, Z
    448c:	71 81       	ldd	r23, Z+1	; 0x01
    448e:	82 81       	ldd	r24, Z+2	; 0x02
    4490:	93 81       	ldd	r25, Z+3	; 0x03
    4492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	f8 01       	movw	r30, r16
    449c:	91 83       	std	Z+1, r25	; 0x01
    449e:	80 83       	st	Z, r24
    44a0:	de 01       	movw	r26, r28
    44a2:	ab 5a       	subi	r26, 0xAB	; 171
    44a4:	bf 4f       	sbci	r27, 0xFF	; 255
    44a6:	fe 01       	movw	r30, r28
    44a8:	e7 5a       	subi	r30, 0xA7	; 167
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	80 81       	ld	r24, Z
    44ae:	91 81       	ldd	r25, Z+1	; 0x01
    44b0:	11 96       	adiw	r26, 0x01	; 1
    44b2:	9c 93       	st	X, r25
    44b4:	8e 93       	st	-X, r24
    44b6:	fe 01       	movw	r30, r28
    44b8:	eb 5a       	subi	r30, 0xAB	; 171
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	91 81       	ldd	r25, Z+1	; 0x01
    44c0:	01 97       	sbiw	r24, 0x01	; 1
    44c2:	f1 f7       	brne	.-4      	; 0x44c0 <main+0x1370>
    44c4:	fe 01       	movw	r30, r28
    44c6:	eb 5a       	subi	r30, 0xAB	; 171
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	91 83       	std	Z+1, r25	; 0x01
    44cc:	80 83       	st	Z, r24
    44ce:	35 c4       	rjmp	.+2154   	; 0x4d3a <main+0x1bea>
			  _delay_ms(500);
			  while(Local_u32Time_Out < MAX_TIME )
			  {
				  LCD_voidClearScreen();
    44d0:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
				  LCD_voidSendStr("1:Room1");
    44d4:	8e e2       	ldi	r24, 0x2E	; 46
    44d6:	91 e0       	ldi	r25, 0x01	; 1
    44d8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				  LCD_u8GoToXY(1,9);
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	69 e0       	ldi	r22, 0x09	; 9
    44e0:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				  LCD_voidSendStr("2:Room2");
    44e4:	86 e3       	ldi	r24, 0x36	; 54
    44e6:	91 e0       	ldi	r25, 0x01	; 1
    44e8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				  LCD_u8GoToXY(2,0);
    44ec:	82 e0       	ldi	r24, 0x02	; 2
    44ee:	60 e0       	ldi	r22, 0x00	; 0
    44f0:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				  LCD_voidSendStr("3:Room3");
    44f4:	8e e3       	ldi	r24, 0x3E	; 62
    44f6:	91 e0       	ldi	r25, 0x01	; 1
    44f8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				  LCD_u8GoToXY(2,9);
    44fc:	82 e0       	ldi	r24, 0x02	; 2
    44fe:	69 e0       	ldi	r22, 0x09	; 9
    4500:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				  LCD_voidSendStr("4:More");
    4504:	86 e4       	ldi	r24, 0x46	; 70
    4506:	91 e0       	ldi	r25, 0x01	; 1
    4508:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				  KPD_u8GetKeyState(&Local_u8KeyValue);
    450c:	ce 01       	movw	r24, r28
    450e:	8e 50       	subi	r24, 0x0E	; 14
    4510:	9f 4f       	sbci	r25, 0xFF	; 255
    4512:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4516:	17 c0       	rjmp	.+46     	; 0x4546 <main+0x13f6>
				  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED  && Local_u32Time_Out < MAX_TIME)
				  {
					  KPD_u8GetKeyState(&Local_u8KeyValue);
    4518:	ce 01       	movw	r24, r28
    451a:	8e 50       	subi	r24, 0x0E	; 14
    451c:	9f 4f       	sbci	r25, 0xFF	; 255
    451e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
					  Local_u32Time_Out++;
    4522:	9e 01       	movw	r18, r28
    4524:	26 51       	subi	r18, 0x16	; 22
    4526:	3f 4f       	sbci	r19, 0xFF	; 255
    4528:	fe 01       	movw	r30, r28
    452a:	e6 51       	subi	r30, 0x16	; 22
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	80 81       	ld	r24, Z
    4530:	91 81       	ldd	r25, Z+1	; 0x01
    4532:	a2 81       	ldd	r26, Z+2	; 0x02
    4534:	b3 81       	ldd	r27, Z+3	; 0x03
    4536:	01 96       	adiw	r24, 0x01	; 1
    4538:	a1 1d       	adc	r26, r1
    453a:	b1 1d       	adc	r27, r1
    453c:	f9 01       	movw	r30, r18
    453e:	80 83       	st	Z, r24
    4540:	91 83       	std	Z+1, r25	; 0x01
    4542:	a2 83       	std	Z+2, r26	; 0x02
    4544:	b3 83       	std	Z+3, r27	; 0x03
				  LCD_u8GoToXY(2,0);
				  LCD_voidSendStr("3:Room3");
				  LCD_u8GoToXY(2,9);
				  LCD_voidSendStr("4:More");
				  KPD_u8GetKeyState(&Local_u8KeyValue);
				  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED  && Local_u32Time_Out < MAX_TIME)
    4546:	fe 01       	movw	r30, r28
    4548:	ee 50       	subi	r30, 0x0E	; 14
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 81       	ld	r24, Z
    454e:	8f 3f       	cpi	r24, 0xFF	; 255
    4550:	79 f4       	brne	.+30     	; 0x4570 <main+0x1420>
    4552:	fe 01       	movw	r30, r28
    4554:	e6 51       	subi	r30, 0x16	; 22
    4556:	ff 4f       	sbci	r31, 0xFF	; 255
    4558:	80 81       	ld	r24, Z
    455a:	91 81       	ldd	r25, Z+1	; 0x01
    455c:	a2 81       	ldd	r26, Z+2	; 0x02
    455e:	b3 81       	ldd	r27, Z+3	; 0x03
    4560:	88 38       	cpi	r24, 0x88	; 136
    4562:	f3 e1       	ldi	r31, 0x13	; 19
    4564:	9f 07       	cpc	r25, r31
    4566:	f0 e0       	ldi	r31, 0x00	; 0
    4568:	af 07       	cpc	r26, r31
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	bf 07       	cpc	r27, r31
    456e:	a0 f2       	brcs	.-88     	; 0x4518 <main+0x13c8>
				  {
					  KPD_u8GetKeyState(&Local_u8KeyValue);
					  Local_u32Time_Out++;
				  }
				  if(Local_u8KeyValue == '4')
    4570:	fe 01       	movw	r30, r28
    4572:	ee 50       	subi	r30, 0x0E	; 14
    4574:	ff 4f       	sbci	r31, 0xFF	; 255
    4576:	80 81       	ld	r24, Z
    4578:	84 33       	cpi	r24, 0x34	; 52
    457a:	09 f0       	breq	.+2      	; 0x457e <main+0x142e>
    457c:	d4 c2       	rjmp	.+1448   	; 0x4b26 <main+0x19d6>
    457e:	c4 c2       	rjmp	.+1416   	; 0x4b08 <main+0x19b8>
				  {
					  while(Local_u8KeyValue != '3')
					  {
						  LCD_voidClearScreen();
    4580:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
						  LCD_voidSendStr("1:Air Condition");
    4584:	8d e4       	ldi	r24, 0x4D	; 77
    4586:	91 e0       	ldi	r25, 0x01	; 1
    4588:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,0);
    458c:	82 e0       	ldi	r24, 0x02	; 2
    458e:	60 e0       	ldi	r22, 0x00	; 0
    4590:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("2:TV");
    4594:	8d e5       	ldi	r24, 0x5D	; 93
    4596:	91 e0       	ldi	r25, 0x01	; 1
    4598:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,8);
    459c:	82 e0       	ldi	r24, 0x02	; 2
    459e:	68 e0       	ldi	r22, 0x08	; 8
    45a0:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("3:Back");
    45a4:	82 e6       	ldi	r24, 0x62	; 98
    45a6:	91 e0       	ldi	r25, 0x01	; 1
    45a8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  KPD_u8GetKeyState(&Local_u8KeyValue);
    45ac:	ce 01       	movw	r24, r28
    45ae:	8e 50       	subi	r24, 0x0E	; 14
    45b0:	9f 4f       	sbci	r25, 0xFF	; 255
    45b2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    45b6:	05 c0       	rjmp	.+10     	; 0x45c2 <main+0x1472>
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
    45b8:	ce 01       	movw	r24, r28
    45ba:	8e 50       	subi	r24, 0x0E	; 14
    45bc:	9f 4f       	sbci	r25, 0xFF	; 255
    45be:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
						  LCD_u8GoToXY(2,0);
						  LCD_voidSendStr("2:TV");
						  LCD_u8GoToXY(2,8);
						  LCD_voidSendStr("3:Back");
						  KPD_u8GetKeyState(&Local_u8KeyValue);
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    45c2:	fe 01       	movw	r30, r28
    45c4:	ee 50       	subi	r30, 0x0E	; 14
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	80 81       	ld	r24, Z
    45ca:	8f 3f       	cpi	r24, 0xFF	; 255
    45cc:	a9 f3       	breq	.-22     	; 0x45b8 <main+0x1468>
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
						  }
						  if(Local_u8KeyValue == '1')
    45ce:	fe 01       	movw	r30, r28
    45d0:	ee 50       	subi	r30, 0x0E	; 14
    45d2:	ff 4f       	sbci	r31, 0xFF	; 255
    45d4:	80 81       	ld	r24, Z
    45d6:	81 33       	cpi	r24, 0x31	; 49
    45d8:	09 f0       	breq	.+2      	; 0x45dc <main+0x148c>
    45da:	45 c2       	rjmp	.+1162   	; 0x4a66 <main+0x1916>
    45dc:	37 c2       	rjmp	.+1134   	; 0x4a4c <main+0x18fc>
						  {
							  while(Local_u8KeyValue != '3')
							  {
								  LCD_voidClearScreen();
    45de:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
								  LCD_voidSendStr("1:Set Temperature");
    45e2:	89 e6       	ldi	r24, 0x69	; 105
    45e4:	91 e0       	ldi	r25, 0x01	; 1
    45e6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
								  LCD_u8GoToXY(2,0);
    45ea:	82 e0       	ldi	r24, 0x02	; 2
    45ec:	60 e0       	ldi	r22, 0x00	; 0
    45ee:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
								  LCD_voidSendStr("2:Control");
    45f2:	8b e7       	ldi	r24, 0x7B	; 123
    45f4:	91 e0       	ldi	r25, 0x01	; 1
    45f6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
								  LCD_u8GoToXY(2,10);
    45fa:	82 e0       	ldi	r24, 0x02	; 2
    45fc:	6a e0       	ldi	r22, 0x0A	; 10
    45fe:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
								  LCD_voidSendStr("3:Back");
    4602:	82 e6       	ldi	r24, 0x62	; 98
    4604:	91 e0       	ldi	r25, 0x01	; 1
    4606:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
								  KPD_u8GetKeyState(&Local_u8KeyValue);
    460a:	ce 01       	movw	r24, r28
    460c:	8e 50       	subi	r24, 0x0E	; 14
    460e:	9f 4f       	sbci	r25, 0xFF	; 255
    4610:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4614:	05 c0       	rjmp	.+10     	; 0x4620 <main+0x14d0>
								  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
								  {
									  KPD_u8GetKeyState(&Local_u8KeyValue);
    4616:	ce 01       	movw	r24, r28
    4618:	8e 50       	subi	r24, 0x0E	; 14
    461a:	9f 4f       	sbci	r25, 0xFF	; 255
    461c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
								  LCD_u8GoToXY(2,0);
								  LCD_voidSendStr("2:Control");
								  LCD_u8GoToXY(2,10);
								  LCD_voidSendStr("3:Back");
								  KPD_u8GetKeyState(&Local_u8KeyValue);
								  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    4620:	fe 01       	movw	r30, r28
    4622:	ee 50       	subi	r30, 0x0E	; 14
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	80 81       	ld	r24, Z
    4628:	8f 3f       	cpi	r24, 0xFF	; 255
    462a:	a9 f3       	breq	.-22     	; 0x4616 <main+0x14c6>
								  {
									  KPD_u8GetKeyState(&Local_u8KeyValue);
								  }
								  if(Local_u8KeyValue == '1')
    462c:	fe 01       	movw	r30, r28
    462e:	ee 50       	subi	r30, 0x0E	; 14
    4630:	ff 4f       	sbci	r31, 0xFF	; 255
    4632:	80 81       	ld	r24, Z
    4634:	81 33       	cpi	r24, 0x31	; 49
    4636:	09 f0       	breq	.+2      	; 0x463a <main+0x14ea>
    4638:	b8 c1       	rjmp	.+880    	; 0x49aa <main+0x185a>
								  {
									  Local_u8Index = 0;
    463a:	fe 01       	movw	r30, r28
    463c:	e1 51       	subi	r30, 0x11	; 17
    463e:	ff 4f       	sbci	r31, 0xFF	; 255
    4640:	10 82       	st	Z, r1
									  Local_u8TemperatureValue =0;
    4642:	fe 01       	movw	r30, r28
    4644:	e7 51       	subi	r30, 0x17	; 23
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	10 82       	st	Z, r1
									  LCD_voidClearScreen();
    464a:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
									  LCD_voidSendStr("Set Temp:  `C");
    464e:	85 e8       	ldi	r24, 0x85	; 133
    4650:	91 e0       	ldi	r25, 0x01	; 1
    4652:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
    4656:	45 c0       	rjmp	.+138    	; 0x46e2 <main+0x1592>
									  while(Local_u8Index < 2)
									  {
										  KPD_u8GetKeyState(&Local_u8KeyValue);
    4658:	ce 01       	movw	r24, r28
    465a:	8e 50       	subi	r24, 0x0E	; 14
    465c:	9f 4f       	sbci	r25, 0xFF	; 255
    465e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4662:	05 c0       	rjmp	.+10     	; 0x466e <main+0x151e>
										  while( Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
										  {
											  KPD_u8GetKeyState(&Local_u8KeyValue);
    4664:	ce 01       	movw	r24, r28
    4666:	8e 50       	subi	r24, 0x0E	; 14
    4668:	9f 4f       	sbci	r25, 0xFF	; 255
    466a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
									  LCD_voidClearScreen();
									  LCD_voidSendStr("Set Temp:  `C");
									  while(Local_u8Index < 2)
									  {
										  KPD_u8GetKeyState(&Local_u8KeyValue);
										  while( Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    466e:	fe 01       	movw	r30, r28
    4670:	ee 50       	subi	r30, 0x0E	; 14
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	80 81       	ld	r24, Z
    4676:	8f 3f       	cpi	r24, 0xFF	; 255
    4678:	a9 f3       	breq	.-22     	; 0x4664 <main+0x1514>
										  {
											  KPD_u8GetKeyState(&Local_u8KeyValue);
										  }
										  LCD_u8GoToXY(1,9+Local_u8Index);
    467a:	fe 01       	movw	r30, r28
    467c:	e1 51       	subi	r30, 0x11	; 17
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	80 81       	ld	r24, Z
    4682:	98 2f       	mov	r25, r24
    4684:	97 5f       	subi	r25, 0xF7	; 247
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	69 2f       	mov	r22, r25
    468a:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
										  LCD_voidSendChar(Local_u8KeyValue);
    468e:	fe 01       	movw	r30, r28
    4690:	ee 50       	subi	r30, 0x0E	; 14
    4692:	ff 4f       	sbci	r31, 0xFF	; 255
    4694:	80 81       	ld	r24, Z
    4696:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
										  Local_u8TemperatureValue = ((Local_u8TemperatureValue*10)+(Local_u8KeyValue -'0'));
    469a:	fe 01       	movw	r30, r28
    469c:	e7 51       	subi	r30, 0x17	; 23
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	80 81       	ld	r24, Z
    46a2:	88 2f       	mov	r24, r24
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	9c 01       	movw	r18, r24
    46a8:	22 0f       	add	r18, r18
    46aa:	33 1f       	adc	r19, r19
    46ac:	c9 01       	movw	r24, r18
    46ae:	88 0f       	add	r24, r24
    46b0:	99 1f       	adc	r25, r25
    46b2:	88 0f       	add	r24, r24
    46b4:	99 1f       	adc	r25, r25
    46b6:	82 0f       	add	r24, r18
    46b8:	93 1f       	adc	r25, r19
    46ba:	98 2f       	mov	r25, r24
    46bc:	fe 01       	movw	r30, r28
    46be:	ee 50       	subi	r30, 0x0E	; 14
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	80 81       	ld	r24, Z
    46c4:	89 0f       	add	r24, r25
    46c6:	fe 01       	movw	r30, r28
    46c8:	e7 51       	subi	r30, 0x17	; 23
    46ca:	ff 4f       	sbci	r31, 0xFF	; 255
    46cc:	80 53       	subi	r24, 0x30	; 48
    46ce:	80 83       	st	Z, r24
										  Local_u8Index++;
    46d0:	de 01       	movw	r26, r28
    46d2:	a1 51       	subi	r26, 0x11	; 17
    46d4:	bf 4f       	sbci	r27, 0xFF	; 255
    46d6:	fe 01       	movw	r30, r28
    46d8:	e1 51       	subi	r30, 0x11	; 17
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	80 81       	ld	r24, Z
    46de:	8f 5f       	subi	r24, 0xFF	; 255
    46e0:	8c 93       	st	X, r24
								  {
									  Local_u8Index = 0;
									  Local_u8TemperatureValue =0;
									  LCD_voidClearScreen();
									  LCD_voidSendStr("Set Temp:  `C");
									  while(Local_u8Index < 2)
    46e2:	fe 01       	movw	r30, r28
    46e4:	e1 51       	subi	r30, 0x11	; 17
    46e6:	ff 4f       	sbci	r31, 0xFF	; 255
    46e8:	80 81       	ld	r24, Z
    46ea:	82 30       	cpi	r24, 0x02	; 2
    46ec:	08 f4       	brcc	.+2      	; 0x46f0 <main+0x15a0>
    46ee:	b4 cf       	rjmp	.-152    	; 0x4658 <main+0x1508>
										  LCD_u8GoToXY(1,9+Local_u8Index);
										  LCD_voidSendChar(Local_u8KeyValue);
										  Local_u8TemperatureValue = ((Local_u8TemperatureValue*10)+(Local_u8KeyValue -'0'));
										  Local_u8Index++;
									  }
									  SPI_voidSendSlaveByte(Local_u8TemperatureValue);
    46f0:	fe 01       	movw	r30, r28
    46f2:	e7 51       	subi	r30, 0x17	; 23
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	80 81       	ld	r24, Z
    46f8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    46fc:	fe 01       	movw	r30, r28
    46fe:	ef 5a       	subi	r30, 0xAF	; 175
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	aa ef       	ldi	r26, 0xFA	; 250
    4708:	b3 e4       	ldi	r27, 0x43	; 67
    470a:	80 83       	st	Z, r24
    470c:	91 83       	std	Z+1, r25	; 0x01
    470e:	a2 83       	std	Z+2, r26	; 0x02
    4710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4712:	8e 01       	movw	r16, r28
    4714:	03 5b       	subi	r16, 0xB3	; 179
    4716:	1f 4f       	sbci	r17, 0xFF	; 255
    4718:	fe 01       	movw	r30, r28
    471a:	ef 5a       	subi	r30, 0xAF	; 175
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	60 81       	ld	r22, Z
    4720:	71 81       	ldd	r23, Z+1	; 0x01
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	4a ef       	ldi	r20, 0xFA	; 250
    472c:	54 e4       	ldi	r21, 0x44	; 68
    472e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	f8 01       	movw	r30, r16
    4738:	80 83       	st	Z, r24
    473a:	91 83       	std	Z+1, r25	; 0x01
    473c:	a2 83       	std	Z+2, r26	; 0x02
    473e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4740:	fe 01       	movw	r30, r28
    4742:	e3 5b       	subi	r30, 0xB3	; 179
    4744:	ff 4f       	sbci	r31, 0xFF	; 255
    4746:	60 81       	ld	r22, Z
    4748:	71 81       	ldd	r23, Z+1	; 0x01
    474a:	82 81       	ldd	r24, Z+2	; 0x02
    474c:	93 81       	ldd	r25, Z+3	; 0x03
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	40 e8       	ldi	r20, 0x80	; 128
    4754:	5f e3       	ldi	r21, 0x3F	; 63
    4756:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    475a:	88 23       	and	r24, r24
    475c:	44 f4       	brge	.+16     	; 0x476e <main+0x161e>
		__ticks = 1;
    475e:	fe 01       	movw	r30, r28
    4760:	e5 5b       	subi	r30, 0xB5	; 181
    4762:	ff 4f       	sbci	r31, 0xFF	; 255
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	91 83       	std	Z+1, r25	; 0x01
    476a:	80 83       	st	Z, r24
    476c:	64 c0       	rjmp	.+200    	; 0x4836 <main+0x16e6>
	else if (__tmp > 65535)
    476e:	fe 01       	movw	r30, r28
    4770:	e3 5b       	subi	r30, 0xB3	; 179
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	60 81       	ld	r22, Z
    4776:	71 81       	ldd	r23, Z+1	; 0x01
    4778:	82 81       	ldd	r24, Z+2	; 0x02
    477a:	93 81       	ldd	r25, Z+3	; 0x03
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	3f ef       	ldi	r19, 0xFF	; 255
    4780:	4f e7       	ldi	r20, 0x7F	; 127
    4782:	57 e4       	ldi	r21, 0x47	; 71
    4784:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4788:	18 16       	cp	r1, r24
    478a:	0c f0       	brlt	.+2      	; 0x478e <main+0x163e>
    478c:	43 c0       	rjmp	.+134    	; 0x4814 <main+0x16c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    478e:	fe 01       	movw	r30, r28
    4790:	ef 5a       	subi	r30, 0xAF	; 175
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	60 81       	ld	r22, Z
    4796:	71 81       	ldd	r23, Z+1	; 0x01
    4798:	82 81       	ldd	r24, Z+2	; 0x02
    479a:	93 81       	ldd	r25, Z+3	; 0x03
    479c:	20 e0       	ldi	r18, 0x00	; 0
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	40 e2       	ldi	r20, 0x20	; 32
    47a2:	51 e4       	ldi	r21, 0x41	; 65
    47a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47a8:	dc 01       	movw	r26, r24
    47aa:	cb 01       	movw	r24, r22
    47ac:	8e 01       	movw	r16, r28
    47ae:	05 5b       	subi	r16, 0xB5	; 181
    47b0:	1f 4f       	sbci	r17, 0xFF	; 255
    47b2:	bc 01       	movw	r22, r24
    47b4:	cd 01       	movw	r24, r26
    47b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	f8 01       	movw	r30, r16
    47c0:	91 83       	std	Z+1, r25	; 0x01
    47c2:	80 83       	st	Z, r24
    47c4:	1f c0       	rjmp	.+62     	; 0x4804 <main+0x16b4>
    47c6:	fe 01       	movw	r30, r28
    47c8:	e7 5b       	subi	r30, 0xB7	; 183
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	88 ec       	ldi	r24, 0xC8	; 200
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	80 83       	st	Z, r24
    47d4:	fe 01       	movw	r30, r28
    47d6:	e7 5b       	subi	r30, 0xB7	; 183
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	80 81       	ld	r24, Z
    47dc:	91 81       	ldd	r25, Z+1	; 0x01
    47de:	01 97       	sbiw	r24, 0x01	; 1
    47e0:	f1 f7       	brne	.-4      	; 0x47de <main+0x168e>
    47e2:	fe 01       	movw	r30, r28
    47e4:	e7 5b       	subi	r30, 0xB7	; 183
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	91 83       	std	Z+1, r25	; 0x01
    47ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ec:	de 01       	movw	r26, r28
    47ee:	a5 5b       	subi	r26, 0xB5	; 181
    47f0:	bf 4f       	sbci	r27, 0xFF	; 255
    47f2:	fe 01       	movw	r30, r28
    47f4:	e5 5b       	subi	r30, 0xB5	; 181
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	80 81       	ld	r24, Z
    47fa:	91 81       	ldd	r25, Z+1	; 0x01
    47fc:	01 97       	sbiw	r24, 0x01	; 1
    47fe:	11 96       	adiw	r26, 0x01	; 1
    4800:	9c 93       	st	X, r25
    4802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4804:	fe 01       	movw	r30, r28
    4806:	e5 5b       	subi	r30, 0xB5	; 181
    4808:	ff 4f       	sbci	r31, 0xFF	; 255
    480a:	80 81       	ld	r24, Z
    480c:	91 81       	ldd	r25, Z+1	; 0x01
    480e:	00 97       	sbiw	r24, 0x00	; 0
    4810:	d1 f6       	brne	.-76     	; 0x47c6 <main+0x1676>
    4812:	27 c0       	rjmp	.+78     	; 0x4862 <main+0x1712>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4814:	8e 01       	movw	r16, r28
    4816:	05 5b       	subi	r16, 0xB5	; 181
    4818:	1f 4f       	sbci	r17, 0xFF	; 255
    481a:	fe 01       	movw	r30, r28
    481c:	e3 5b       	subi	r30, 0xB3	; 179
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	60 81       	ld	r22, Z
    4822:	71 81       	ldd	r23, Z+1	; 0x01
    4824:	82 81       	ldd	r24, Z+2	; 0x02
    4826:	93 81       	ldd	r25, Z+3	; 0x03
    4828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	f8 01       	movw	r30, r16
    4832:	91 83       	std	Z+1, r25	; 0x01
    4834:	80 83       	st	Z, r24
    4836:	de 01       	movw	r26, r28
    4838:	a9 5b       	subi	r26, 0xB9	; 185
    483a:	bf 4f       	sbci	r27, 0xFF	; 255
    483c:	fe 01       	movw	r30, r28
    483e:	e5 5b       	subi	r30, 0xB5	; 181
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	80 81       	ld	r24, Z
    4844:	91 81       	ldd	r25, Z+1	; 0x01
    4846:	8d 93       	st	X+, r24
    4848:	9c 93       	st	X, r25
    484a:	fe 01       	movw	r30, r28
    484c:	e9 5b       	subi	r30, 0xB9	; 185
    484e:	ff 4f       	sbci	r31, 0xFF	; 255
    4850:	80 81       	ld	r24, Z
    4852:	91 81       	ldd	r25, Z+1	; 0x01
    4854:	01 97       	sbiw	r24, 0x01	; 1
    4856:	f1 f7       	brne	.-4      	; 0x4854 <main+0x1704>
    4858:	fe 01       	movw	r30, r28
    485a:	e9 5b       	subi	r30, 0xB9	; 185
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	91 83       	std	Z+1, r25	; 0x01
    4860:	80 83       	st	Z, r24
									  _delay_ms(500);
									  LCD_voidClearScreen();
    4862:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
									  LCD_voidSendStr("Temperature Send");
    4866:	83 e9       	ldi	r24, 0x93	; 147
    4868:	91 e0       	ldi	r25, 0x01	; 1
    486a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
									  LCD_u8GoToXY(2,0);
    486e:	82 e0       	ldi	r24, 0x02	; 2
    4870:	60 e0       	ldi	r22, 0x00	; 0
    4872:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
									  LCD_voidSendStr("Temp =  `C");
    4876:	84 ea       	ldi	r24, 0xA4	; 164
    4878:	91 e0       	ldi	r25, 0x01	; 1
    487a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
									  LCD_u8GoToXY(2,6);
    487e:	82 e0       	ldi	r24, 0x02	; 2
    4880:	66 e0       	ldi	r22, 0x06	; 6
    4882:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
									  LCD_voidSendNum(Local_u8TemperatureValue);
    4886:	fe 01       	movw	r30, r28
    4888:	e7 51       	subi	r30, 0x17	; 23
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	80 81       	ld	r24, Z
    488e:	88 2f       	mov	r24, r24
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	a0 e0       	ldi	r26, 0x00	; 0
    4894:	b0 e0       	ldi	r27, 0x00	; 0
    4896:	bc 01       	movw	r22, r24
    4898:	cd 01       	movw	r24, r26
    489a:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_voidSendNum>
    489e:	fe 01       	movw	r30, r28
    48a0:	ed 5b       	subi	r30, 0xBD	; 189
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	aa e7       	ldi	r26, 0x7A	; 122
    48aa:	b4 e4       	ldi	r27, 0x44	; 68
    48ac:	80 83       	st	Z, r24
    48ae:	91 83       	std	Z+1, r25	; 0x01
    48b0:	a2 83       	std	Z+2, r26	; 0x02
    48b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b4:	8e 01       	movw	r16, r28
    48b6:	01 5c       	subi	r16, 0xC1	; 193
    48b8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ba:	fe 01       	movw	r30, r28
    48bc:	ed 5b       	subi	r30, 0xBD	; 189
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	60 81       	ld	r22, Z
    48c2:	71 81       	ldd	r23, Z+1	; 0x01
    48c4:	82 81       	ldd	r24, Z+2	; 0x02
    48c6:	93 81       	ldd	r25, Z+3	; 0x03
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	4a ef       	ldi	r20, 0xFA	; 250
    48ce:	54 e4       	ldi	r21, 0x44	; 68
    48d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48d4:	dc 01       	movw	r26, r24
    48d6:	cb 01       	movw	r24, r22
    48d8:	f8 01       	movw	r30, r16
    48da:	80 83       	st	Z, r24
    48dc:	91 83       	std	Z+1, r25	; 0x01
    48de:	a2 83       	std	Z+2, r26	; 0x02
    48e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48e2:	fe 01       	movw	r30, r28
    48e4:	ff 96       	adiw	r30, 0x3f	; 63
    48e6:	60 81       	ld	r22, Z
    48e8:	71 81       	ldd	r23, Z+1	; 0x01
    48ea:	82 81       	ldd	r24, Z+2	; 0x02
    48ec:	93 81       	ldd	r25, Z+3	; 0x03
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	40 e8       	ldi	r20, 0x80	; 128
    48f4:	5f e3       	ldi	r21, 0x3F	; 63
    48f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    48fa:	88 23       	and	r24, r24
    48fc:	2c f4       	brge	.+10     	; 0x4908 <main+0x17b8>
		__ticks = 1;
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	9e af       	std	Y+62, r25	; 0x3e
    4904:	8d af       	std	Y+61, r24	; 0x3d
    4906:	46 c0       	rjmp	.+140    	; 0x4994 <main+0x1844>
	else if (__tmp > 65535)
    4908:	fe 01       	movw	r30, r28
    490a:	ff 96       	adiw	r30, 0x3f	; 63
    490c:	60 81       	ld	r22, Z
    490e:	71 81       	ldd	r23, Z+1	; 0x01
    4910:	82 81       	ldd	r24, Z+2	; 0x02
    4912:	93 81       	ldd	r25, Z+3	; 0x03
    4914:	20 e0       	ldi	r18, 0x00	; 0
    4916:	3f ef       	ldi	r19, 0xFF	; 255
    4918:	4f e7       	ldi	r20, 0x7F	; 127
    491a:	57 e4       	ldi	r21, 0x47	; 71
    491c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4920:	18 16       	cp	r1, r24
    4922:	64 f5       	brge	.+88     	; 0x497c <main+0x182c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4924:	fe 01       	movw	r30, r28
    4926:	ed 5b       	subi	r30, 0xBD	; 189
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	60 81       	ld	r22, Z
    492c:	71 81       	ldd	r23, Z+1	; 0x01
    492e:	82 81       	ldd	r24, Z+2	; 0x02
    4930:	93 81       	ldd	r25, Z+3	; 0x03
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	40 e2       	ldi	r20, 0x20	; 32
    4938:	51 e4       	ldi	r21, 0x41	; 65
    493a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	bc 01       	movw	r22, r24
    4944:	cd 01       	movw	r24, r26
    4946:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    494a:	dc 01       	movw	r26, r24
    494c:	cb 01       	movw	r24, r22
    494e:	9e af       	std	Y+62, r25	; 0x3e
    4950:	8d af       	std	Y+61, r24	; 0x3d
    4952:	0f c0       	rjmp	.+30     	; 0x4972 <main+0x1822>
    4954:	88 ec       	ldi	r24, 0xC8	; 200
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	9c af       	std	Y+60, r25	; 0x3c
    495a:	8b af       	std	Y+59, r24	; 0x3b
    495c:	8b ad       	ldd	r24, Y+59	; 0x3b
    495e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4960:	01 97       	sbiw	r24, 0x01	; 1
    4962:	f1 f7       	brne	.-4      	; 0x4960 <main+0x1810>
    4964:	9c af       	std	Y+60, r25	; 0x3c
    4966:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4968:	8d ad       	ldd	r24, Y+61	; 0x3d
    496a:	9e ad       	ldd	r25, Y+62	; 0x3e
    496c:	01 97       	sbiw	r24, 0x01	; 1
    496e:	9e af       	std	Y+62, r25	; 0x3e
    4970:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4972:	8d ad       	ldd	r24, Y+61	; 0x3d
    4974:	9e ad       	ldd	r25, Y+62	; 0x3e
    4976:	00 97       	sbiw	r24, 0x00	; 0
    4978:	69 f7       	brne	.-38     	; 0x4954 <main+0x1804>
    497a:	68 c0       	rjmp	.+208    	; 0x4a4c <main+0x18fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    497c:	fe 01       	movw	r30, r28
    497e:	ff 96       	adiw	r30, 0x3f	; 63
    4980:	60 81       	ld	r22, Z
    4982:	71 81       	ldd	r23, Z+1	; 0x01
    4984:	82 81       	ldd	r24, Z+2	; 0x02
    4986:	93 81       	ldd	r25, Z+3	; 0x03
    4988:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	9e af       	std	Y+62, r25	; 0x3e
    4992:	8d af       	std	Y+61, r24	; 0x3d
    4994:	8d ad       	ldd	r24, Y+61	; 0x3d
    4996:	9e ad       	ldd	r25, Y+62	; 0x3e
    4998:	9a af       	std	Y+58, r25	; 0x3a
    499a:	89 af       	std	Y+57, r24	; 0x39
    499c:	89 ad       	ldd	r24, Y+57	; 0x39
    499e:	9a ad       	ldd	r25, Y+58	; 0x3a
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	f1 f7       	brne	.-4      	; 0x49a0 <main+0x1850>
    49a4:	9a af       	std	Y+58, r25	; 0x3a
    49a6:	89 af       	std	Y+57, r24	; 0x39
    49a8:	51 c0       	rjmp	.+162    	; 0x4a4c <main+0x18fc>
									  _delay_ms(1000);
								  }
								  else if(Local_u8KeyValue == '2')
    49aa:	fe 01       	movw	r30, r28
    49ac:	ee 50       	subi	r30, 0x0E	; 14
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	80 81       	ld	r24, Z
    49b2:	82 33       	cpi	r24, 0x32	; 50
    49b4:	09 f0       	breq	.+2      	; 0x49b8 <main+0x1868>
    49b6:	4a c0       	rjmp	.+148    	; 0x4a4c <main+0x18fc>
    49b8:	42 c0       	rjmp	.+132    	; 0x4a3e <main+0x18ee>
								  {
									  while(Local_u8KeyValue != '0')
									  {
										  LCD_voidClearScreen();
    49ba:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
										  LCD_voidSendStr("Air Condition");
    49be:	8f ea       	ldi	r24, 0xAF	; 175
    49c0:	91 e0       	ldi	r25, 0x01	; 1
    49c2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
										  LCD_u8GoToXY(2,0);
    49c6:	82 e0       	ldi	r24, 0x02	; 2
    49c8:	60 e0       	ldi	r22, 0x00	; 0
    49ca:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
										  LCD_voidSendStr("1-On");
    49ce:	8d eb       	ldi	r24, 0xBD	; 189
    49d0:	91 e0       	ldi	r25, 0x01	; 1
    49d2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
										  LCD_u8GoToXY(2,5);
    49d6:	82 e0       	ldi	r24, 0x02	; 2
    49d8:	65 e0       	ldi	r22, 0x05	; 5
    49da:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
										  LCD_voidSendStr("2-Off");
    49de:	82 ec       	ldi	r24, 0xC2	; 194
    49e0:	91 e0       	ldi	r25, 0x01	; 1
    49e2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
										  LCD_u8GoToXY(2,11);
    49e6:	82 e0       	ldi	r24, 0x02	; 2
    49e8:	6b e0       	ldi	r22, 0x0B	; 11
    49ea:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
										  LCD_voidSendStr("0-Back");
    49ee:	88 ec       	ldi	r24, 0xC8	; 200
    49f0:	91 e0       	ldi	r25, 0x01	; 1
    49f2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
										  KPD_u8GetKeyState(&Local_u8KeyValue);
    49f6:	ce 01       	movw	r24, r28
    49f8:	8e 50       	subi	r24, 0x0E	; 14
    49fa:	9f 4f       	sbci	r25, 0xFF	; 255
    49fc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4a00:	05 c0       	rjmp	.+10     	; 0x4a0c <main+0x18bc>
										  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
										  {
											  KPD_u8GetKeyState(&Local_u8KeyValue);
    4a02:	ce 01       	movw	r24, r28
    4a04:	8e 50       	subi	r24, 0x0E	; 14
    4a06:	9f 4f       	sbci	r25, 0xFF	; 255
    4a08:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
										  LCD_u8GoToXY(2,5);
										  LCD_voidSendStr("2-Off");
										  LCD_u8GoToXY(2,11);
										  LCD_voidSendStr("0-Back");
										  KPD_u8GetKeyState(&Local_u8KeyValue);
										  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    4a0c:	fe 01       	movw	r30, r28
    4a0e:	ee 50       	subi	r30, 0x0E	; 14
    4a10:	ff 4f       	sbci	r31, 0xFF	; 255
    4a12:	80 81       	ld	r24, Z
    4a14:	8f 3f       	cpi	r24, 0xFF	; 255
    4a16:	a9 f3       	breq	.-22     	; 0x4a02 <main+0x18b2>
										  {
											  KPD_u8GetKeyState(&Local_u8KeyValue);
										  }
										  if(Local_u8KeyValue == '1')
    4a18:	fe 01       	movw	r30, r28
    4a1a:	ee 50       	subi	r30, 0x0E	; 14
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	80 81       	ld	r24, Z
    4a20:	81 33       	cpi	r24, 0x31	; 49
    4a22:	21 f4       	brne	.+8      	; 0x4a2c <main+0x18dc>
										  {
											  SPI_voidSendSlaveByte(AIR_CONDITION_POWER_ON);
    4a24:	88 ef       	ldi	r24, 0xF8	; 248
    4a26:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    4a2a:	09 c0       	rjmp	.+18     	; 0x4a3e <main+0x18ee>
										  }
										  else if(Local_u8KeyValue == '2')
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	ee 50       	subi	r30, 0x0E	; 14
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	80 81       	ld	r24, Z
    4a34:	82 33       	cpi	r24, 0x32	; 50
    4a36:	19 f4       	brne	.+6      	; 0x4a3e <main+0x18ee>
										  {
											  SPI_voidSendSlaveByte(AIR_CONDITION_POWER_OFF);
    4a38:	87 ef       	ldi	r24, 0xF7	; 247
    4a3a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
									  LCD_voidSendNum(Local_u8TemperatureValue);
									  _delay_ms(1000);
								  }
								  else if(Local_u8KeyValue == '2')
								  {
									  while(Local_u8KeyValue != '0')
    4a3e:	fe 01       	movw	r30, r28
    4a40:	ee 50       	subi	r30, 0x0E	; 14
    4a42:	ff 4f       	sbci	r31, 0xFF	; 255
    4a44:	80 81       	ld	r24, Z
    4a46:	80 33       	cpi	r24, 0x30	; 48
    4a48:	09 f0       	breq	.+2      	; 0x4a4c <main+0x18fc>
    4a4a:	b7 cf       	rjmp	.-146    	; 0x49ba <main+0x186a>
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
						  }
						  if(Local_u8KeyValue == '1')
						  {
							  while(Local_u8KeyValue != '3')
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	ee 50       	subi	r30, 0x0E	; 14
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	80 81       	ld	r24, Z
    4a54:	83 33       	cpi	r24, 0x33	; 51
    4a56:	09 f0       	breq	.+2      	; 0x4a5a <main+0x190a>
    4a58:	c2 cd       	rjmp	.-1148   	; 0x45de <main+0x148e>
											  SPI_voidSendSlaveByte(AIR_CONDITION_POWER_OFF);
										  }
									  }
								  }
							  }
							  KPD_u8GetKeyState(&Local_u8KeyValue);
    4a5a:	ce 01       	movw	r24, r28
    4a5c:	8e 50       	subi	r24, 0x0E	; 14
    4a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a60:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4a64:	51 c0       	rjmp	.+162    	; 0x4b08 <main+0x19b8>

						  }
						  else if(Local_u8KeyValue == '2')
    4a66:	fe 01       	movw	r30, r28
    4a68:	ee 50       	subi	r30, 0x0E	; 14
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	80 81       	ld	r24, Z
    4a6e:	82 33       	cpi	r24, 0x32	; 50
    4a70:	09 f0       	breq	.+2      	; 0x4a74 <main+0x1924>
    4a72:	4a c0       	rjmp	.+148    	; 0x4b08 <main+0x19b8>
    4a74:	42 c0       	rjmp	.+132    	; 0x4afa <main+0x19aa>
						  {
							  while(Local_u8KeyValue != '0')
							  {
								  LCD_voidClearScreen();
    4a76:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
								  LCD_voidSendStr("Television");
    4a7a:	8f ec       	ldi	r24, 0xCF	; 207
    4a7c:	91 e0       	ldi	r25, 0x01	; 1
    4a7e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
								  LCD_u8GoToXY(2,0);
    4a82:	82 e0       	ldi	r24, 0x02	; 2
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
								  LCD_voidSendStr("1-On");
    4a8a:	8d eb       	ldi	r24, 0xBD	; 189
    4a8c:	91 e0       	ldi	r25, 0x01	; 1
    4a8e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
								  LCD_u8GoToXY(2,5);
    4a92:	82 e0       	ldi	r24, 0x02	; 2
    4a94:	65 e0       	ldi	r22, 0x05	; 5
    4a96:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
								  LCD_voidSendStr("2-Off");
    4a9a:	82 ec       	ldi	r24, 0xC2	; 194
    4a9c:	91 e0       	ldi	r25, 0x01	; 1
    4a9e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
								  LCD_u8GoToXY(2,11);
    4aa2:	82 e0       	ldi	r24, 0x02	; 2
    4aa4:	6b e0       	ldi	r22, 0x0B	; 11
    4aa6:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
								  LCD_voidSendStr("0-Back");
    4aaa:	88 ec       	ldi	r24, 0xC8	; 200
    4aac:	91 e0       	ldi	r25, 0x01	; 1
    4aae:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
								  KPD_u8GetKeyState(&Local_u8KeyValue);
    4ab2:	ce 01       	movw	r24, r28
    4ab4:	8e 50       	subi	r24, 0x0E	; 14
    4ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ab8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4abc:	05 c0       	rjmp	.+10     	; 0x4ac8 <main+0x1978>
								  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
								  {
									  KPD_u8GetKeyState(&Local_u8KeyValue);
    4abe:	ce 01       	movw	r24, r28
    4ac0:	8e 50       	subi	r24, 0x0E	; 14
    4ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
								  LCD_u8GoToXY(2,5);
								  LCD_voidSendStr("2-Off");
								  LCD_u8GoToXY(2,11);
								  LCD_voidSendStr("0-Back");
								  KPD_u8GetKeyState(&Local_u8KeyValue);
								  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    4ac8:	fe 01       	movw	r30, r28
    4aca:	ee 50       	subi	r30, 0x0E	; 14
    4acc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ace:	80 81       	ld	r24, Z
    4ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ad2:	a9 f3       	breq	.-22     	; 0x4abe <main+0x196e>
								  {
									  KPD_u8GetKeyState(&Local_u8KeyValue);
								  }
								  if(Local_u8KeyValue == '1')
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	ee 50       	subi	r30, 0x0E	; 14
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	80 81       	ld	r24, Z
    4adc:	81 33       	cpi	r24, 0x31	; 49
    4ade:	21 f4       	brne	.+8      	; 0x4ae8 <main+0x1998>
								  {
									 SPI_voidSendSlaveByte(TV_TURN_ON);
    4ae0:	86 ef       	ldi	r24, 0xF6	; 246
    4ae2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    4ae6:	09 c0       	rjmp	.+18     	; 0x4afa <main+0x19aa>
								  }
								  else if(Local_u8KeyValue == '2')
    4ae8:	fe 01       	movw	r30, r28
    4aea:	ee 50       	subi	r30, 0x0E	; 14
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	80 81       	ld	r24, Z
    4af0:	82 33       	cpi	r24, 0x32	; 50
    4af2:	19 f4       	brne	.+6      	; 0x4afa <main+0x19aa>
								  {
									  SPI_voidSendSlaveByte(TV_TURN_OFF);
    4af4:	85 ef       	ldi	r24, 0xF5	; 245
    4af6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
							  KPD_u8GetKeyState(&Local_u8KeyValue);

						  }
						  else if(Local_u8KeyValue == '2')
						  {
							  while(Local_u8KeyValue != '0')
    4afa:	fe 01       	movw	r30, r28
    4afc:	ee 50       	subi	r30, 0x0E	; 14
    4afe:	ff 4f       	sbci	r31, 0xFF	; 255
    4b00:	80 81       	ld	r24, Z
    4b02:	80 33       	cpi	r24, 0x30	; 48
    4b04:	09 f0       	breq	.+2      	; 0x4b08 <main+0x19b8>
    4b06:	b7 cf       	rjmp	.-146    	; 0x4a76 <main+0x1926>
					  KPD_u8GetKeyState(&Local_u8KeyValue);
					  Local_u32Time_Out++;
				  }
				  if(Local_u8KeyValue == '4')
				  {
					  while(Local_u8KeyValue != '3')
    4b08:	fe 01       	movw	r30, r28
    4b0a:	ee 50       	subi	r30, 0x0E	; 14
    4b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0e:	80 81       	ld	r24, Z
    4b10:	83 33       	cpi	r24, 0x33	; 51
    4b12:	09 f0       	breq	.+2      	; 0x4b16 <main+0x19c6>
    4b14:	35 cd       	rjmp	.-1430   	; 0x4580 <main+0x1430>
									  SPI_voidSendSlaveByte(TV_TURN_OFF);
								  }
							  }
						  }
					  }
					  Local_u32Time_Out = 0;
    4b16:	fe 01       	movw	r30, r28
    4b18:	e6 51       	subi	r30, 0x16	; 22
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	10 82       	st	Z, r1
    4b1e:	11 82       	std	Z+1, r1	; 0x01
    4b20:	12 82       	std	Z+2, r1	; 0x02
    4b22:	13 82       	std	Z+3, r1	; 0x03
    4b24:	0a c1       	rjmp	.+532    	; 0x4d3a <main+0x1bea>
				  }
				  else if(Local_u8KeyValue == '1')
    4b26:	fe 01       	movw	r30, r28
    4b28:	ee 50       	subi	r30, 0x0E	; 14
    4b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2c:	80 81       	ld	r24, Z
    4b2e:	81 33       	cpi	r24, 0x31	; 49
    4b30:	09 f0       	breq	.+2      	; 0x4b34 <main+0x19e4>
    4b32:	52 c0       	rjmp	.+164    	; 0x4bd8 <main+0x1a88>
    4b34:	42 c0       	rjmp	.+132    	; 0x4bba <main+0x1a6a>
				  {
					  while(Local_u8KeyValue != '0')
					  {
						  LCD_voidClearScreen();
    4b36:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
						  LCD_voidSendStr("Room1");
    4b3a:	8a ed       	ldi	r24, 0xDA	; 218
    4b3c:	91 e0       	ldi	r25, 0x01	; 1
    4b3e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,0);
    4b42:	82 e0       	ldi	r24, 0x02	; 2
    4b44:	60 e0       	ldi	r22, 0x00	; 0
    4b46:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("1-On");
    4b4a:	8d eb       	ldi	r24, 0xBD	; 189
    4b4c:	91 e0       	ldi	r25, 0x01	; 1
    4b4e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,5);
    4b52:	82 e0       	ldi	r24, 0x02	; 2
    4b54:	65 e0       	ldi	r22, 0x05	; 5
    4b56:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("2-Off");
    4b5a:	82 ec       	ldi	r24, 0xC2	; 194
    4b5c:	91 e0       	ldi	r25, 0x01	; 1
    4b5e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,11);
    4b62:	82 e0       	ldi	r24, 0x02	; 2
    4b64:	6b e0       	ldi	r22, 0x0B	; 11
    4b66:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("0-Back");
    4b6a:	88 ec       	ldi	r24, 0xC8	; 200
    4b6c:	91 e0       	ldi	r25, 0x01	; 1
    4b6e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  KPD_u8GetKeyState(&Local_u8KeyValue);
    4b72:	ce 01       	movw	r24, r28
    4b74:	8e 50       	subi	r24, 0x0E	; 14
    4b76:	9f 4f       	sbci	r25, 0xFF	; 255
    4b78:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4b7c:	05 c0       	rjmp	.+10     	; 0x4b88 <main+0x1a38>
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
    4b7e:	ce 01       	movw	r24, r28
    4b80:	8e 50       	subi	r24, 0x0E	; 14
    4b82:	9f 4f       	sbci	r25, 0xFF	; 255
    4b84:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
						  LCD_u8GoToXY(2,5);
						  LCD_voidSendStr("2-Off");
						  LCD_u8GoToXY(2,11);
						  LCD_voidSendStr("0-Back");
						  KPD_u8GetKeyState(&Local_u8KeyValue);
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    4b88:	fe 01       	movw	r30, r28
    4b8a:	ee 50       	subi	r30, 0x0E	; 14
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	80 81       	ld	r24, Z
    4b90:	8f 3f       	cpi	r24, 0xFF	; 255
    4b92:	a9 f3       	breq	.-22     	; 0x4b7e <main+0x1a2e>
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
						  }
						  if(Local_u8KeyValue == '1')
    4b94:	fe 01       	movw	r30, r28
    4b96:	ee 50       	subi	r30, 0x0E	; 14
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	80 81       	ld	r24, Z
    4b9c:	81 33       	cpi	r24, 0x31	; 49
    4b9e:	21 f4       	brne	.+8      	; 0x4ba8 <main+0x1a58>
						  {
							 SPI_voidSendSlaveByte(ROOM_1_TURN_ON);
    4ba0:	8f ef       	ldi	r24, 0xFF	; 255
    4ba2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    4ba6:	09 c0       	rjmp	.+18     	; 0x4bba <main+0x1a6a>
						  }
						  else if(Local_u8KeyValue == '2')
    4ba8:	fe 01       	movw	r30, r28
    4baa:	ee 50       	subi	r30, 0x0E	; 14
    4bac:	ff 4f       	sbci	r31, 0xFF	; 255
    4bae:	80 81       	ld	r24, Z
    4bb0:	82 33       	cpi	r24, 0x32	; 50
    4bb2:	19 f4       	brne	.+6      	; 0x4bba <main+0x1a6a>
						  {
							  SPI_voidSendSlaveByte(ROOM_1_TURN_OFF);
    4bb4:	8e ef       	ldi	r24, 0xFE	; 254
    4bb6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
					  }
					  Local_u32Time_Out = 0;
				  }
				  else if(Local_u8KeyValue == '1')
				  {
					  while(Local_u8KeyValue != '0')
    4bba:	fe 01       	movw	r30, r28
    4bbc:	ee 50       	subi	r30, 0x0E	; 14
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	80 81       	ld	r24, Z
    4bc2:	80 33       	cpi	r24, 0x30	; 48
    4bc4:	09 f0       	breq	.+2      	; 0x4bc8 <main+0x1a78>
    4bc6:	b7 cf       	rjmp	.-146    	; 0x4b36 <main+0x19e6>
						  else if(Local_u8KeyValue == '2')
						  {
							  SPI_voidSendSlaveByte(ROOM_1_TURN_OFF);
						  }
					  }
					  Local_u32Time_Out = 0;
    4bc8:	fe 01       	movw	r30, r28
    4bca:	e6 51       	subi	r30, 0x16	; 22
    4bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bce:	10 82       	st	Z, r1
    4bd0:	11 82       	std	Z+1, r1	; 0x01
    4bd2:	12 82       	std	Z+2, r1	; 0x02
    4bd4:	13 82       	std	Z+3, r1	; 0x03
    4bd6:	b1 c0       	rjmp	.+354    	; 0x4d3a <main+0x1bea>
				  }

				  else if(Local_u8KeyValue == '2')
    4bd8:	fe 01       	movw	r30, r28
    4bda:	ee 50       	subi	r30, 0x0E	; 14
    4bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bde:	80 81       	ld	r24, Z
    4be0:	82 33       	cpi	r24, 0x32	; 50
    4be2:	09 f0       	breq	.+2      	; 0x4be6 <main+0x1a96>
    4be4:	52 c0       	rjmp	.+164    	; 0x4c8a <main+0x1b3a>
    4be6:	42 c0       	rjmp	.+132    	; 0x4c6c <main+0x1b1c>
				  {
					  while(Local_u8KeyValue != '0')
					  {
						  LCD_voidClearScreen();
    4be8:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
						  LCD_voidSendStr("Room2");
    4bec:	80 ee       	ldi	r24, 0xE0	; 224
    4bee:	91 e0       	ldi	r25, 0x01	; 1
    4bf0:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,0);
    4bf4:	82 e0       	ldi	r24, 0x02	; 2
    4bf6:	60 e0       	ldi	r22, 0x00	; 0
    4bf8:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("1-On");
    4bfc:	8d eb       	ldi	r24, 0xBD	; 189
    4bfe:	91 e0       	ldi	r25, 0x01	; 1
    4c00:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,5);
    4c04:	82 e0       	ldi	r24, 0x02	; 2
    4c06:	65 e0       	ldi	r22, 0x05	; 5
    4c08:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("2-Off");
    4c0c:	82 ec       	ldi	r24, 0xC2	; 194
    4c0e:	91 e0       	ldi	r25, 0x01	; 1
    4c10:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,11);
    4c14:	82 e0       	ldi	r24, 0x02	; 2
    4c16:	6b e0       	ldi	r22, 0x0B	; 11
    4c18:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("0-Back");
    4c1c:	88 ec       	ldi	r24, 0xC8	; 200
    4c1e:	91 e0       	ldi	r25, 0x01	; 1
    4c20:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  KPD_u8GetKeyState(&Local_u8KeyValue);
    4c24:	ce 01       	movw	r24, r28
    4c26:	8e 50       	subi	r24, 0x0E	; 14
    4c28:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4c2e:	05 c0       	rjmp	.+10     	; 0x4c3a <main+0x1aea>
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
    4c30:	ce 01       	movw	r24, r28
    4c32:	8e 50       	subi	r24, 0x0E	; 14
    4c34:	9f 4f       	sbci	r25, 0xFF	; 255
    4c36:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
						  LCD_u8GoToXY(2,5);
						  LCD_voidSendStr("2-Off");
						  LCD_u8GoToXY(2,11);
						  LCD_voidSendStr("0-Back");
						  KPD_u8GetKeyState(&Local_u8KeyValue);
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    4c3a:	fe 01       	movw	r30, r28
    4c3c:	ee 50       	subi	r30, 0x0E	; 14
    4c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c40:	80 81       	ld	r24, Z
    4c42:	8f 3f       	cpi	r24, 0xFF	; 255
    4c44:	a9 f3       	breq	.-22     	; 0x4c30 <main+0x1ae0>
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
						  }
						  if(Local_u8KeyValue == '1')
    4c46:	fe 01       	movw	r30, r28
    4c48:	ee 50       	subi	r30, 0x0E	; 14
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	80 81       	ld	r24, Z
    4c4e:	81 33       	cpi	r24, 0x31	; 49
    4c50:	21 f4       	brne	.+8      	; 0x4c5a <main+0x1b0a>
						  {
							  SPI_voidSendSlaveByte(ROOM_2_TURN_ON);
    4c52:	8d ef       	ldi	r24, 0xFD	; 253
    4c54:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    4c58:	09 c0       	rjmp	.+18     	; 0x4c6c <main+0x1b1c>
						  }
						  else if(Local_u8KeyValue == '2')
    4c5a:	fe 01       	movw	r30, r28
    4c5c:	ee 50       	subi	r30, 0x0E	; 14
    4c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c60:	80 81       	ld	r24, Z
    4c62:	82 33       	cpi	r24, 0x32	; 50
    4c64:	19 f4       	brne	.+6      	; 0x4c6c <main+0x1b1c>
						  {
							  SPI_voidSendSlaveByte(ROOM_2_TURN_OFF);
    4c66:	8c ef       	ldi	r24, 0xFC	; 252
    4c68:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
					  Local_u32Time_Out = 0;
				  }

				  else if(Local_u8KeyValue == '2')
				  {
					  while(Local_u8KeyValue != '0')
    4c6c:	fe 01       	movw	r30, r28
    4c6e:	ee 50       	subi	r30, 0x0E	; 14
    4c70:	ff 4f       	sbci	r31, 0xFF	; 255
    4c72:	80 81       	ld	r24, Z
    4c74:	80 33       	cpi	r24, 0x30	; 48
    4c76:	09 f0       	breq	.+2      	; 0x4c7a <main+0x1b2a>
    4c78:	b7 cf       	rjmp	.-146    	; 0x4be8 <main+0x1a98>
						  else if(Local_u8KeyValue == '2')
						  {
							  SPI_voidSendSlaveByte(ROOM_2_TURN_OFF);
						  }
					  }
					  Local_u32Time_Out = 0;
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	e6 51       	subi	r30, 0x16	; 22
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	10 82       	st	Z, r1
    4c82:	11 82       	std	Z+1, r1	; 0x01
    4c84:	12 82       	std	Z+2, r1	; 0x02
    4c86:	13 82       	std	Z+3, r1	; 0x03
    4c88:	58 c0       	rjmp	.+176    	; 0x4d3a <main+0x1bea>
				  }

				  else if(Local_u8KeyValue == '3')
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	ee 50       	subi	r30, 0x0E	; 14
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	80 81       	ld	r24, Z
    4c92:	83 33       	cpi	r24, 0x33	; 51
    4c94:	09 f0       	breq	.+2      	; 0x4c98 <main+0x1b48>
    4c96:	51 c0       	rjmp	.+162    	; 0x4d3a <main+0x1bea>
    4c98:	42 c0       	rjmp	.+132    	; 0x4d1e <main+0x1bce>
				  {
					  while(Local_u8KeyValue != '0')
					  {
						  LCD_voidClearScreen();
    4c9a:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
						  LCD_voidSendStr("Room3");
    4c9e:	86 ee       	ldi	r24, 0xE6	; 230
    4ca0:	91 e0       	ldi	r25, 0x01	; 1
    4ca2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,0);
    4ca6:	82 e0       	ldi	r24, 0x02	; 2
    4ca8:	60 e0       	ldi	r22, 0x00	; 0
    4caa:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("1-On");
    4cae:	8d eb       	ldi	r24, 0xBD	; 189
    4cb0:	91 e0       	ldi	r25, 0x01	; 1
    4cb2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,5);
    4cb6:	82 e0       	ldi	r24, 0x02	; 2
    4cb8:	65 e0       	ldi	r22, 0x05	; 5
    4cba:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("2-Off");
    4cbe:	82 ec       	ldi	r24, 0xC2	; 194
    4cc0:	91 e0       	ldi	r25, 0x01	; 1
    4cc2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,11);
    4cc6:	82 e0       	ldi	r24, 0x02	; 2
    4cc8:	6b e0       	ldi	r22, 0x0B	; 11
    4cca:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("0-Back");
    4cce:	88 ec       	ldi	r24, 0xC8	; 200
    4cd0:	91 e0       	ldi	r25, 0x01	; 1
    4cd2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  KPD_u8GetKeyState(&Local_u8KeyValue);
    4cd6:	ce 01       	movw	r24, r28
    4cd8:	8e 50       	subi	r24, 0x0E	; 14
    4cda:	9f 4f       	sbci	r25, 0xFF	; 255
    4cdc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4ce0:	05 c0       	rjmp	.+10     	; 0x4cec <main+0x1b9c>
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
    4ce2:	ce 01       	movw	r24, r28
    4ce4:	8e 50       	subi	r24, 0x0E	; 14
    4ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
						  LCD_u8GoToXY(2,5);
						  LCD_voidSendStr("2-Off");
						  LCD_u8GoToXY(2,11);
						  LCD_voidSendStr("0-Back");
						  KPD_u8GetKeyState(&Local_u8KeyValue);
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    4cec:	fe 01       	movw	r30, r28
    4cee:	ee 50       	subi	r30, 0x0E	; 14
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	80 81       	ld	r24, Z
    4cf4:	8f 3f       	cpi	r24, 0xFF	; 255
    4cf6:	a9 f3       	breq	.-22     	; 0x4ce2 <main+0x1b92>
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
						  }
						  if(Local_u8KeyValue == '1')
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	ee 50       	subi	r30, 0x0E	; 14
    4cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfe:	80 81       	ld	r24, Z
    4d00:	81 33       	cpi	r24, 0x31	; 49
    4d02:	21 f4       	brne	.+8      	; 0x4d0c <main+0x1bbc>
						  {
							  SPI_voidSendSlaveByte(ROOM_3_TURN_ON);
    4d04:	8b ef       	ldi	r24, 0xFB	; 251
    4d06:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    4d0a:	09 c0       	rjmp	.+18     	; 0x4d1e <main+0x1bce>
						  }
						  else if(Local_u8KeyValue == '2')
    4d0c:	fe 01       	movw	r30, r28
    4d0e:	ee 50       	subi	r30, 0x0E	; 14
    4d10:	ff 4f       	sbci	r31, 0xFF	; 255
    4d12:	80 81       	ld	r24, Z
    4d14:	82 33       	cpi	r24, 0x32	; 50
    4d16:	19 f4       	brne	.+6      	; 0x4d1e <main+0x1bce>
						  {
							  SPI_voidSendSlaveByte(ROOM_3_TURN_OFF);
    4d18:	8a ef       	ldi	r24, 0xFA	; 250
    4d1a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
					  Local_u32Time_Out = 0;
				  }

				  else if(Local_u8KeyValue == '3')
				  {
					  while(Local_u8KeyValue != '0')
    4d1e:	fe 01       	movw	r30, r28
    4d20:	ee 50       	subi	r30, 0x0E	; 14
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	80 81       	ld	r24, Z
    4d26:	80 33       	cpi	r24, 0x30	; 48
    4d28:	09 f0       	breq	.+2      	; 0x4d2c <main+0x1bdc>
    4d2a:	b7 cf       	rjmp	.-146    	; 0x4c9a <main+0x1b4a>
						  else if(Local_u8KeyValue == '2')
						  {
							  SPI_voidSendSlaveByte(ROOM_3_TURN_OFF);
						  }
					  }
					  Local_u32Time_Out = 0;
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	e6 51       	subi	r30, 0x16	; 22
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	10 82       	st	Z, r1
    4d34:	11 82       	std	Z+1, r1	; 0x01
    4d36:	12 82       	std	Z+2, r1	; 0x02
    4d38:	13 82       	std	Z+3, r1	; 0x03
			  Local_u8TryNum = 0;
			  LCD_voidClearScreen();
			  LCD_u8GoToXY(1,2);
			  LCD_voidSendStr("Welcome Admin");
			  _delay_ms(500);
			  while(Local_u32Time_Out < MAX_TIME )
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	e6 51       	subi	r30, 0x16	; 22
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	a2 81       	ldd	r26, Z+2	; 0x02
    4d46:	b3 81       	ldd	r27, Z+3	; 0x03
    4d48:	88 38       	cpi	r24, 0x88	; 136
    4d4a:	f3 e1       	ldi	r31, 0x13	; 19
    4d4c:	9f 07       	cpc	r25, r31
    4d4e:	f0 e0       	ldi	r31, 0x00	; 0
    4d50:	af 07       	cpc	r26, r31
    4d52:	f0 e0       	ldi	r31, 0x00	; 0
    4d54:	bf 07       	cpc	r27, r31
    4d56:	08 f4       	brcc	.+2      	; 0x4d5a <main+0x1c0a>
    4d58:	bb cb       	rjmp	.-2186   	; 0x44d0 <main+0x1380>
    4d5a:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <main+0xad0>
			  }
	      }
		}
	/********************************************************************************************************/
	/********************************guest Mood**************************************************************/
	   else if(Local_u8KeyValue == '2')
    4d5e:	fe 01       	movw	r30, r28
    4d60:	ee 50       	subi	r30, 0x0E	; 14
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	80 81       	ld	r24, Z
    4d66:	82 33       	cpi	r24, 0x32	; 50
    4d68:	11 f0       	breq	.+4      	; 0x4d6e <main+0x1c1e>
    4d6a:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <main+0xad0>
		{
		   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    4d6e:	82 e0       	ldi	r24, 0x02	; 2
    4d70:	63 e0       	ldi	r22, 0x03	; 3
    4d72:	41 e0       	ldi	r20, 0x01	; 1
    4d74:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    4d78:	bb c1       	rjmp	.+886    	; 0x50f0 <main+0x1fa0>
		   while(Local_u8PassFlag == 0 && Local_u8TryNum < 3)
		   {
				Local_u8PassFlag =1;
    4d7a:	fe 01       	movw	r30, r28
    4d7c:	ef 50       	subi	r30, 0x0F	; 15
    4d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	80 83       	st	Z, r24
				LCD_voidClearScreen();
    4d84:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
				LCD_voidSendStr("Guest Pass:");
    4d88:	8c ee       	ldi	r24, 0xEC	; 236
    4d8a:	91 e0       	ldi	r25, 0x01	; 1
    4d8c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				for(u8 i = 0 ;i < 4 ;i++)
    4d90:	fe 01       	movw	r30, r28
    4d92:	ed 51       	subi	r30, 0x1D	; 29
    4d94:	ff 4f       	sbci	r31, 0xFF	; 255
    4d96:	10 82       	st	Z, r1
    4d98:	ba c0       	rjmp	.+372    	; 0x4f0e <main+0x1dbe>
				{
					KPD_u8GetKeyState(&Local_u8KeyValue);
    4d9a:	ce 01       	movw	r24, r28
    4d9c:	8e 50       	subi	r24, 0x0E	; 14
    4d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    4da0:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    4da4:	05 c0       	rjmp	.+10     	; 0x4db0 <main+0x1c60>
					while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
					{
						KPD_u8GetKeyState(&Local_u8KeyValue);
    4da6:	ce 01       	movw	r24, r28
    4da8:	8e 50       	subi	r24, 0x0E	; 14
    4daa:	9f 4f       	sbci	r25, 0xFF	; 255
    4dac:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
				LCD_voidClearScreen();
				LCD_voidSendStr("Guest Pass:");
				for(u8 i = 0 ;i < 4 ;i++)
				{
					KPD_u8GetKeyState(&Local_u8KeyValue);
					while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    4db0:	fe 01       	movw	r30, r28
    4db2:	ee 50       	subi	r30, 0x0E	; 14
    4db4:	ff 4f       	sbci	r31, 0xFF	; 255
    4db6:	80 81       	ld	r24, Z
    4db8:	8f 3f       	cpi	r24, 0xFF	; 255
    4dba:	a9 f3       	breq	.-22     	; 0x4da6 <main+0x1c56>
					{
						KPD_u8GetKeyState(&Local_u8KeyValue);
					}
					Local_u8GuestPass[i]=Local_u8KeyValue;
    4dbc:	fe 01       	movw	r30, r28
    4dbe:	ed 51       	subi	r30, 0x1D	; 29
    4dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc2:	80 81       	ld	r24, Z
    4dc4:	28 2f       	mov	r18, r24
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	fe 01       	movw	r30, r28
    4dca:	ee 50       	subi	r30, 0x0E	; 14
    4dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dce:	40 81       	ld	r20, Z
    4dd0:	ce 01       	movw	r24, r28
    4dd2:	88 50       	subi	r24, 0x08	; 8
    4dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	e2 0f       	add	r30, r18
    4dda:	f3 1f       	adc	r31, r19
    4ddc:	40 83       	st	Z, r20
					LCD_u8GoToXY(1,11+i);
    4dde:	fe 01       	movw	r30, r28
    4de0:	ed 51       	subi	r30, 0x1D	; 29
    4de2:	ff 4f       	sbci	r31, 0xFF	; 255
    4de4:	80 81       	ld	r24, Z
    4de6:	98 2f       	mov	r25, r24
    4de8:	95 5f       	subi	r25, 0xF5	; 245
    4dea:	81 e0       	ldi	r24, 0x01	; 1
    4dec:	69 2f       	mov	r22, r25
    4dee:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendChar(Local_u8KeyValue);
    4df2:	fe 01       	movw	r30, r28
    4df4:	ee 50       	subi	r30, 0x0E	; 14
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	80 81       	ld	r24, Z
    4dfa:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	a8 ec       	ldi	r26, 0xC8	; 200
    4e04:	b2 e4       	ldi	r27, 0x42	; 66
    4e06:	8d ab       	std	Y+53, r24	; 0x35
    4e08:	9e ab       	std	Y+54, r25	; 0x36
    4e0a:	af ab       	std	Y+55, r26	; 0x37
    4e0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e0e:	6d a9       	ldd	r22, Y+53	; 0x35
    4e10:	7e a9       	ldd	r23, Y+54	; 0x36
    4e12:	8f a9       	ldd	r24, Y+55	; 0x37
    4e14:	98 ad       	ldd	r25, Y+56	; 0x38
    4e16:	20 e0       	ldi	r18, 0x00	; 0
    4e18:	30 e0       	ldi	r19, 0x00	; 0
    4e1a:	4a ef       	ldi	r20, 0xFA	; 250
    4e1c:	54 e4       	ldi	r21, 0x44	; 68
    4e1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e22:	dc 01       	movw	r26, r24
    4e24:	cb 01       	movw	r24, r22
    4e26:	89 ab       	std	Y+49, r24	; 0x31
    4e28:	9a ab       	std	Y+50, r25	; 0x32
    4e2a:	ab ab       	std	Y+51, r26	; 0x33
    4e2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4e2e:	69 a9       	ldd	r22, Y+49	; 0x31
    4e30:	7a a9       	ldd	r23, Y+50	; 0x32
    4e32:	8b a9       	ldd	r24, Y+51	; 0x33
    4e34:	9c a9       	ldd	r25, Y+52	; 0x34
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	40 e8       	ldi	r20, 0x80	; 128
    4e3c:	5f e3       	ldi	r21, 0x3F	; 63
    4e3e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4e42:	88 23       	and	r24, r24
    4e44:	2c f4       	brge	.+10     	; 0x4e50 <main+0x1d00>
		__ticks = 1;
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	98 ab       	std	Y+48, r25	; 0x30
    4e4c:	8f a7       	std	Y+47, r24	; 0x2f
    4e4e:	3f c0       	rjmp	.+126    	; 0x4ece <main+0x1d7e>
	else if (__tmp > 65535)
    4e50:	69 a9       	ldd	r22, Y+49	; 0x31
    4e52:	7a a9       	ldd	r23, Y+50	; 0x32
    4e54:	8b a9       	ldd	r24, Y+51	; 0x33
    4e56:	9c a9       	ldd	r25, Y+52	; 0x34
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	3f ef       	ldi	r19, 0xFF	; 255
    4e5c:	4f e7       	ldi	r20, 0x7F	; 127
    4e5e:	57 e4       	ldi	r21, 0x47	; 71
    4e60:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4e64:	18 16       	cp	r1, r24
    4e66:	4c f5       	brge	.+82     	; 0x4eba <main+0x1d6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e68:	6d a9       	ldd	r22, Y+53	; 0x35
    4e6a:	7e a9       	ldd	r23, Y+54	; 0x36
    4e6c:	8f a9       	ldd	r24, Y+55	; 0x37
    4e6e:	98 ad       	ldd	r25, Y+56	; 0x38
    4e70:	20 e0       	ldi	r18, 0x00	; 0
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	40 e2       	ldi	r20, 0x20	; 32
    4e76:	51 e4       	ldi	r21, 0x41	; 65
    4e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	cb 01       	movw	r24, r22
    4e80:	bc 01       	movw	r22, r24
    4e82:	cd 01       	movw	r24, r26
    4e84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e88:	dc 01       	movw	r26, r24
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	98 ab       	std	Y+48, r25	; 0x30
    4e8e:	8f a7       	std	Y+47, r24	; 0x2f
    4e90:	0f c0       	rjmp	.+30     	; 0x4eb0 <main+0x1d60>
    4e92:	88 ec       	ldi	r24, 0xC8	; 200
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	9e a7       	std	Y+46, r25	; 0x2e
    4e98:	8d a7       	std	Y+45, r24	; 0x2d
    4e9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e9e:	01 97       	sbiw	r24, 0x01	; 1
    4ea0:	f1 f7       	brne	.-4      	; 0x4e9e <main+0x1d4e>
    4ea2:	9e a7       	std	Y+46, r25	; 0x2e
    4ea4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    4eaa:	01 97       	sbiw	r24, 0x01	; 1
    4eac:	98 ab       	std	Y+48, r25	; 0x30
    4eae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4eb2:	98 a9       	ldd	r25, Y+48	; 0x30
    4eb4:	00 97       	sbiw	r24, 0x00	; 0
    4eb6:	69 f7       	brne	.-38     	; 0x4e92 <main+0x1d42>
    4eb8:	14 c0       	rjmp	.+40     	; 0x4ee2 <main+0x1d92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eba:	69 a9       	ldd	r22, Y+49	; 0x31
    4ebc:	7a a9       	ldd	r23, Y+50	; 0x32
    4ebe:	8b a9       	ldd	r24, Y+51	; 0x33
    4ec0:	9c a9       	ldd	r25, Y+52	; 0x34
    4ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ec6:	dc 01       	movw	r26, r24
    4ec8:	cb 01       	movw	r24, r22
    4eca:	98 ab       	std	Y+48, r25	; 0x30
    4ecc:	8f a7       	std	Y+47, r24	; 0x2f
    4ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    4ed2:	9c a7       	std	Y+44, r25	; 0x2c
    4ed4:	8b a7       	std	Y+43, r24	; 0x2b
    4ed6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ed8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4eda:	01 97       	sbiw	r24, 0x01	; 1
    4edc:	f1 f7       	brne	.-4      	; 0x4eda <main+0x1d8a>
    4ede:	9c a7       	std	Y+44, r25	; 0x2c
    4ee0:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(100);
					LCD_u8GoToXY(1,11+i);
    4ee2:	fe 01       	movw	r30, r28
    4ee4:	ed 51       	subi	r30, 0x1D	; 29
    4ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee8:	80 81       	ld	r24, Z
    4eea:	98 2f       	mov	r25, r24
    4eec:	95 5f       	subi	r25, 0xF5	; 245
    4eee:	81 e0       	ldi	r24, 0x01	; 1
    4ef0:	69 2f       	mov	r22, r25
    4ef2:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendChar('*');
    4ef6:	8a e2       	ldi	r24, 0x2A	; 42
    4ef8:	0e 94 89 12 	call	0x2512	; 0x2512 <LCD_voidSendChar>
		   while(Local_u8PassFlag == 0 && Local_u8TryNum < 3)
		   {
				Local_u8PassFlag =1;
				LCD_voidClearScreen();
				LCD_voidSendStr("Guest Pass:");
				for(u8 i = 0 ;i < 4 ;i++)
    4efc:	de 01       	movw	r26, r28
    4efe:	ad 51       	subi	r26, 0x1D	; 29
    4f00:	bf 4f       	sbci	r27, 0xFF	; 255
    4f02:	fe 01       	movw	r30, r28
    4f04:	ed 51       	subi	r30, 0x1D	; 29
    4f06:	ff 4f       	sbci	r31, 0xFF	; 255
    4f08:	80 81       	ld	r24, Z
    4f0a:	8f 5f       	subi	r24, 0xFF	; 255
    4f0c:	8c 93       	st	X, r24
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ed 51       	subi	r30, 0x1D	; 29
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	80 81       	ld	r24, Z
    4f16:	84 30       	cpi	r24, 0x04	; 4
    4f18:	08 f4       	brcc	.+2      	; 0x4f1c <main+0x1dcc>
    4f1a:	3f cf       	rjmp	.-386    	; 0x4d9a <main+0x1c4a>
					_delay_ms(100);
					LCD_u8GoToXY(1,11+i);
					LCD_voidSendChar('*');
				}

				for(u8 i = 0 ;i < 4 ;i++)
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	ee 51       	subi	r30, 0x1E	; 30
    4f20:	ff 4f       	sbci	r31, 0xFF	; 255
    4f22:	10 82       	st	Z, r1
    4f24:	37 c0       	rjmp	.+110    	; 0x4f94 <main+0x1e44>
				{
					EEPROM_u8ReadDataByte(i+4,&Local_u8ReadingByte);
    4f26:	fe 01       	movw	r30, r28
    4f28:	ee 51       	subi	r30, 0x1E	; 30
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	80 81       	ld	r24, Z
    4f2e:	88 2f       	mov	r24, r24
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	04 96       	adiw	r24, 0x04	; 4
    4f34:	9e 01       	movw	r18, r28
    4f36:	2d 50       	subi	r18, 0x0D	; 13
    4f38:	3f 4f       	sbci	r19, 0xFF	; 255
    4f3a:	b9 01       	movw	r22, r18
    4f3c:	0e 94 ed 0c 	call	0x19da	; 0x19da <EEPROM_u8ReadDataByte>
					if(Local_u8ReadingByte != Local_u8GuestPass[i])
    4f40:	fe 01       	movw	r30, r28
    4f42:	ee 51       	subi	r30, 0x1E	; 30
    4f44:	ff 4f       	sbci	r31, 0xFF	; 255
    4f46:	80 81       	ld	r24, Z
    4f48:	28 2f       	mov	r18, r24
    4f4a:	30 e0       	ldi	r19, 0x00	; 0
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	88 50       	subi	r24, 0x08	; 8
    4f50:	9f 4f       	sbci	r25, 0xFF	; 255
    4f52:	fc 01       	movw	r30, r24
    4f54:	e2 0f       	add	r30, r18
    4f56:	f3 1f       	adc	r31, r19
    4f58:	90 81       	ld	r25, Z
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	ed 50       	subi	r30, 0x0D	; 13
    4f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f60:	80 81       	ld	r24, Z
    4f62:	98 17       	cp	r25, r24
    4f64:	71 f0       	breq	.+28     	; 0x4f82 <main+0x1e32>
					{
						Local_u8PassFlag =0;
    4f66:	fe 01       	movw	r30, r28
    4f68:	ef 50       	subi	r30, 0x0F	; 15
    4f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6c:	10 82       	st	Z, r1
						Local_u8TryNum++;
    4f6e:	de 01       	movw	r26, r28
    4f70:	a0 51       	subi	r26, 0x10	; 16
    4f72:	bf 4f       	sbci	r27, 0xFF	; 255
    4f74:	fe 01       	movw	r30, r28
    4f76:	e0 51       	subi	r30, 0x10	; 16
    4f78:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7a:	80 81       	ld	r24, Z
    4f7c:	8f 5f       	subi	r24, 0xFF	; 255
    4f7e:	8c 93       	st	X, r24
    4f80:	0f c0       	rjmp	.+30     	; 0x4fa0 <main+0x1e50>
					_delay_ms(100);
					LCD_u8GoToXY(1,11+i);
					LCD_voidSendChar('*');
				}

				for(u8 i = 0 ;i < 4 ;i++)
    4f82:	de 01       	movw	r26, r28
    4f84:	ae 51       	subi	r26, 0x1E	; 30
    4f86:	bf 4f       	sbci	r27, 0xFF	; 255
    4f88:	fe 01       	movw	r30, r28
    4f8a:	ee 51       	subi	r30, 0x1E	; 30
    4f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8e:	80 81       	ld	r24, Z
    4f90:	8f 5f       	subi	r24, 0xFF	; 255
    4f92:	8c 93       	st	X, r24
    4f94:	fe 01       	movw	r30, r28
    4f96:	ee 51       	subi	r30, 0x1E	; 30
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	80 81       	ld	r24, Z
    4f9c:	84 30       	cpi	r24, 0x04	; 4
    4f9e:	18 f2       	brcs	.-122    	; 0x4f26 <main+0x1dd6>
						Local_u8TryNum++;
						break;
					}
				}

				if(Local_u8PassFlag == 0 && Local_u8TryNum < 3)
    4fa0:	fe 01       	movw	r30, r28
    4fa2:	ef 50       	subi	r30, 0x0F	; 15
    4fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa6:	80 81       	ld	r24, Z
    4fa8:	88 23       	and	r24, r24
    4faa:	09 f0       	breq	.+2      	; 0x4fae <main+0x1e5e>
    4fac:	a1 c0       	rjmp	.+322    	; 0x50f0 <main+0x1fa0>
    4fae:	fe 01       	movw	r30, r28
    4fb0:	e0 51       	subi	r30, 0x10	; 16
    4fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb4:	80 81       	ld	r24, Z
    4fb6:	83 30       	cpi	r24, 0x03	; 3
    4fb8:	08 f0       	brcs	.+2      	; 0x4fbc <main+0x1e6c>
    4fba:	9a c0       	rjmp	.+308    	; 0x50f0 <main+0x1fa0>
				{
					LCD_voidClearScreen();
    4fbc:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
					LCD_u8GoToXY(1,0);
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	60 e0       	ldi	r22, 0x00	; 0
    4fc4:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendStr("Wrong PassWord");
    4fc8:	85 ef       	ldi	r24, 0xF5	; 245
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
					LCD_u8GoToXY(2,0);
    4fd0:	82 e0       	ldi	r24, 0x02	; 2
    4fd2:	60 e0       	ldi	r22, 0x00	; 0
    4fd4:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendStr("Tries Left:");
    4fd8:	84 e0       	ldi	r24, 0x04	; 4
    4fda:	91 e0       	ldi	r25, 0x01	; 1
    4fdc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
					LCD_u8GoToXY(2,12);
    4fe0:	82 e0       	ldi	r24, 0x02	; 2
    4fe2:	6c e0       	ldi	r22, 0x0C	; 12
    4fe4:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
					LCD_voidSendNum(3-Local_u8TryNum);
    4fe8:	fe 01       	movw	r30, r28
    4fea:	e0 51       	subi	r30, 0x10	; 16
    4fec:	ff 4f       	sbci	r31, 0xFF	; 255
    4fee:	80 81       	ld	r24, Z
    4ff0:	28 2f       	mov	r18, r24
    4ff2:	30 e0       	ldi	r19, 0x00	; 0
    4ff4:	83 e0       	ldi	r24, 0x03	; 3
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	82 1b       	sub	r24, r18
    4ffa:	93 0b       	sbc	r25, r19
    4ffc:	aa 27       	eor	r26, r26
    4ffe:	97 fd       	sbrc	r25, 7
    5000:	a0 95       	com	r26
    5002:	ba 2f       	mov	r27, r26
    5004:	bc 01       	movw	r22, r24
    5006:	cd 01       	movw	r24, r26
    5008:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_voidSendNum>
    500c:	80 e0       	ldi	r24, 0x00	; 0
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	aa e7       	ldi	r26, 0x7A	; 122
    5012:	b4 e4       	ldi	r27, 0x44	; 68
    5014:	8f a3       	std	Y+39, r24	; 0x27
    5016:	98 a7       	std	Y+40, r25	; 0x28
    5018:	a9 a7       	std	Y+41, r26	; 0x29
    501a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    501c:	6f a1       	ldd	r22, Y+39	; 0x27
    501e:	78 a5       	ldd	r23, Y+40	; 0x28
    5020:	89 a5       	ldd	r24, Y+41	; 0x29
    5022:	9a a5       	ldd	r25, Y+42	; 0x2a
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	4a ef       	ldi	r20, 0xFA	; 250
    502a:	54 e4       	ldi	r21, 0x44	; 68
    502c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	8b a3       	std	Y+35, r24	; 0x23
    5036:	9c a3       	std	Y+36, r25	; 0x24
    5038:	ad a3       	std	Y+37, r26	; 0x25
    503a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    503c:	6b a1       	ldd	r22, Y+35	; 0x23
    503e:	7c a1       	ldd	r23, Y+36	; 0x24
    5040:	8d a1       	ldd	r24, Y+37	; 0x25
    5042:	9e a1       	ldd	r25, Y+38	; 0x26
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	40 e8       	ldi	r20, 0x80	; 128
    504a:	5f e3       	ldi	r21, 0x3F	; 63
    504c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5050:	88 23       	and	r24, r24
    5052:	2c f4       	brge	.+10     	; 0x505e <main+0x1f0e>
		__ticks = 1;
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	9a a3       	std	Y+34, r25	; 0x22
    505a:	89 a3       	std	Y+33, r24	; 0x21
    505c:	3f c0       	rjmp	.+126    	; 0x50dc <main+0x1f8c>
	else if (__tmp > 65535)
    505e:	6b a1       	ldd	r22, Y+35	; 0x23
    5060:	7c a1       	ldd	r23, Y+36	; 0x24
    5062:	8d a1       	ldd	r24, Y+37	; 0x25
    5064:	9e a1       	ldd	r25, Y+38	; 0x26
    5066:	20 e0       	ldi	r18, 0x00	; 0
    5068:	3f ef       	ldi	r19, 0xFF	; 255
    506a:	4f e7       	ldi	r20, 0x7F	; 127
    506c:	57 e4       	ldi	r21, 0x47	; 71
    506e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5072:	18 16       	cp	r1, r24
    5074:	4c f5       	brge	.+82     	; 0x50c8 <main+0x1f78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5076:	6f a1       	ldd	r22, Y+39	; 0x27
    5078:	78 a5       	ldd	r23, Y+40	; 0x28
    507a:	89 a5       	ldd	r24, Y+41	; 0x29
    507c:	9a a5       	ldd	r25, Y+42	; 0x2a
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	40 e2       	ldi	r20, 0x20	; 32
    5084:	51 e4       	ldi	r21, 0x41	; 65
    5086:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	bc 01       	movw	r22, r24
    5090:	cd 01       	movw	r24, r26
    5092:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	9a a3       	std	Y+34, r25	; 0x22
    509c:	89 a3       	std	Y+33, r24	; 0x21
    509e:	0f c0       	rjmp	.+30     	; 0x50be <main+0x1f6e>
    50a0:	88 ec       	ldi	r24, 0xC8	; 200
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	98 a3       	std	Y+32, r25	; 0x20
    50a6:	8f 8f       	std	Y+31, r24	; 0x1f
    50a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50aa:	98 a1       	ldd	r25, Y+32	; 0x20
    50ac:	01 97       	sbiw	r24, 0x01	; 1
    50ae:	f1 f7       	brne	.-4      	; 0x50ac <main+0x1f5c>
    50b0:	98 a3       	std	Y+32, r25	; 0x20
    50b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50b4:	89 a1       	ldd	r24, Y+33	; 0x21
    50b6:	9a a1       	ldd	r25, Y+34	; 0x22
    50b8:	01 97       	sbiw	r24, 0x01	; 1
    50ba:	9a a3       	std	Y+34, r25	; 0x22
    50bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50be:	89 a1       	ldd	r24, Y+33	; 0x21
    50c0:	9a a1       	ldd	r25, Y+34	; 0x22
    50c2:	00 97       	sbiw	r24, 0x00	; 0
    50c4:	69 f7       	brne	.-38     	; 0x50a0 <main+0x1f50>
    50c6:	14 c0       	rjmp	.+40     	; 0x50f0 <main+0x1fa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c8:	6b a1       	ldd	r22, Y+35	; 0x23
    50ca:	7c a1       	ldd	r23, Y+36	; 0x24
    50cc:	8d a1       	ldd	r24, Y+37	; 0x25
    50ce:	9e a1       	ldd	r25, Y+38	; 0x26
    50d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	9a a3       	std	Y+34, r25	; 0x22
    50da:	89 a3       	std	Y+33, r24	; 0x21
    50dc:	89 a1       	ldd	r24, Y+33	; 0x21
    50de:	9a a1       	ldd	r25, Y+34	; 0x22
    50e0:	9e 8f       	std	Y+30, r25	; 0x1e
    50e2:	8d 8f       	std	Y+29, r24	; 0x1d
    50e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50e8:	01 97       	sbiw	r24, 0x01	; 1
    50ea:	f1 f7       	brne	.-4      	; 0x50e8 <main+0x1f98>
    50ec:	9e 8f       	std	Y+30, r25	; 0x1e
    50ee:	8d 8f       	std	Y+29, r24	; 0x1d
	/********************************************************************************************************/
	/********************************guest Mood**************************************************************/
	   else if(Local_u8KeyValue == '2')
		{
		   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
		   while(Local_u8PassFlag == 0 && Local_u8TryNum < 3)
    50f0:	fe 01       	movw	r30, r28
    50f2:	ef 50       	subi	r30, 0x0F	; 15
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	80 81       	ld	r24, Z
    50f8:	88 23       	and	r24, r24
    50fa:	39 f4       	brne	.+14     	; 0x510a <main+0x1fba>
    50fc:	fe 01       	movw	r30, r28
    50fe:	e0 51       	subi	r30, 0x10	; 16
    5100:	ff 4f       	sbci	r31, 0xFF	; 255
    5102:	80 81       	ld	r24, Z
    5104:	83 30       	cpi	r24, 0x03	; 3
    5106:	08 f4       	brcc	.+2      	; 0x510a <main+0x1fba>
    5108:	38 ce       	rjmp	.-912    	; 0x4d7a <main+0x1c2a>
					LCD_voidSendNum(3-Local_u8TryNum);
					_delay_ms(1000);
				}
		   }

		   if(Local_u8TryNum == 3)
    510a:	fe 01       	movw	r30, r28
    510c:	e0 51       	subi	r30, 0x10	; 16
    510e:	ff 4f       	sbci	r31, 0xFF	; 255
    5110:	80 81       	ld	r24, Z
    5112:	83 30       	cpi	r24, 0x03	; 3
    5114:	09 f0       	breq	.+2      	; 0x5118 <main+0x1fc8>
    5116:	ae c0       	rjmp	.+348    	; 0x5274 <main+0x2124>
		   {
			   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    5118:	82 e0       	ldi	r24, 0x02	; 2
    511a:	63 e0       	ldi	r22, 0x03	; 3
    511c:	40 e0       	ldi	r20, 0x00	; 0
    511e:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    5122:	82 e0       	ldi	r24, 0x02	; 2
    5124:	64 e0       	ldi	r22, 0x04	; 4
    5126:	41 e0       	ldi	r20, 0x01	; 1
    5128:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			   Local_u8TryNum = 0;
    512c:	fe 01       	movw	r30, r28
    512e:	e0 51       	subi	r30, 0x10	; 16
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	10 82       	st	Z, r1
			   LCD_voidClearScreen();
    5134:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
			   LCD_voidSendStr("Waiting For   S");
    5138:	80 e1       	ldi	r24, 0x10	; 16
    513a:	91 e0       	ldi	r25, 0x01	; 1
    513c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
			   for( u8 i = 5; i > 0; i--)
    5140:	fe 01       	movw	r30, r28
    5142:	ef 51       	subi	r30, 0x1F	; 31
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	85 e0       	ldi	r24, 0x05	; 5
    5148:	80 83       	st	Z, r24
    514a:	8b c0       	rjmp	.+278    	; 0x5262 <main+0x2112>
			   {
				   LCD_u8GoToXY(1,12);
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	6c e0       	ldi	r22, 0x0C	; 12
    5150:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				   LCD_voidSendNum(i);
    5154:	fe 01       	movw	r30, r28
    5156:	ef 51       	subi	r30, 0x1F	; 31
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	80 81       	ld	r24, Z
    515c:	88 2f       	mov	r24, r24
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	a0 e0       	ldi	r26, 0x00	; 0
    5162:	b0 e0       	ldi	r27, 0x00	; 0
    5164:	bc 01       	movw	r22, r24
    5166:	cd 01       	movw	r24, r26
    5168:	0e 94 9c 13 	call	0x2738	; 0x2738 <LCD_voidSendNum>
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	aa e7       	ldi	r26, 0x7A	; 122
    5172:	b4 e4       	ldi	r27, 0x44	; 68
    5174:	89 8f       	std	Y+25, r24	; 0x19
    5176:	9a 8f       	std	Y+26, r25	; 0x1a
    5178:	ab 8f       	std	Y+27, r26	; 0x1b
    517a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    517c:	69 8d       	ldd	r22, Y+25	; 0x19
    517e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	4a ef       	ldi	r20, 0xFA	; 250
    518a:	54 e4       	ldi	r21, 0x44	; 68
    518c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22
    5194:	8d 8b       	std	Y+21, r24	; 0x15
    5196:	9e 8b       	std	Y+22, r25	; 0x16
    5198:	af 8b       	std	Y+23, r26	; 0x17
    519a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    519c:	6d 89       	ldd	r22, Y+21	; 0x15
    519e:	7e 89       	ldd	r23, Y+22	; 0x16
    51a0:	8f 89       	ldd	r24, Y+23	; 0x17
    51a2:	98 8d       	ldd	r25, Y+24	; 0x18
    51a4:	20 e0       	ldi	r18, 0x00	; 0
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	40 e8       	ldi	r20, 0x80	; 128
    51aa:	5f e3       	ldi	r21, 0x3F	; 63
    51ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    51b0:	88 23       	and	r24, r24
    51b2:	2c f4       	brge	.+10     	; 0x51be <main+0x206e>
		__ticks = 1;
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	9c 8b       	std	Y+20, r25	; 0x14
    51ba:	8b 8b       	std	Y+19, r24	; 0x13
    51bc:	3f c0       	rjmp	.+126    	; 0x523c <main+0x20ec>
	else if (__tmp > 65535)
    51be:	6d 89       	ldd	r22, Y+21	; 0x15
    51c0:	7e 89       	ldd	r23, Y+22	; 0x16
    51c2:	8f 89       	ldd	r24, Y+23	; 0x17
    51c4:	98 8d       	ldd	r25, Y+24	; 0x18
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	3f ef       	ldi	r19, 0xFF	; 255
    51ca:	4f e7       	ldi	r20, 0x7F	; 127
    51cc:	57 e4       	ldi	r21, 0x47	; 71
    51ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    51d2:	18 16       	cp	r1, r24
    51d4:	4c f5       	brge	.+82     	; 0x5228 <main+0x20d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d6:	69 8d       	ldd	r22, Y+25	; 0x19
    51d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51de:	20 e0       	ldi	r18, 0x00	; 0
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	40 e2       	ldi	r20, 0x20	; 32
    51e4:	51 e4       	ldi	r21, 0x41	; 65
    51e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	bc 01       	movw	r22, r24
    51f0:	cd 01       	movw	r24, r26
    51f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    51f6:	dc 01       	movw	r26, r24
    51f8:	cb 01       	movw	r24, r22
    51fa:	9c 8b       	std	Y+20, r25	; 0x14
    51fc:	8b 8b       	std	Y+19, r24	; 0x13
    51fe:	0f c0       	rjmp	.+30     	; 0x521e <main+0x20ce>
    5200:	88 ec       	ldi	r24, 0xC8	; 200
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	9a 8b       	std	Y+18, r25	; 0x12
    5206:	89 8b       	std	Y+17, r24	; 0x11
    5208:	89 89       	ldd	r24, Y+17	; 0x11
    520a:	9a 89       	ldd	r25, Y+18	; 0x12
    520c:	01 97       	sbiw	r24, 0x01	; 1
    520e:	f1 f7       	brne	.-4      	; 0x520c <main+0x20bc>
    5210:	9a 8b       	std	Y+18, r25	; 0x12
    5212:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5214:	8b 89       	ldd	r24, Y+19	; 0x13
    5216:	9c 89       	ldd	r25, Y+20	; 0x14
    5218:	01 97       	sbiw	r24, 0x01	; 1
    521a:	9c 8b       	std	Y+20, r25	; 0x14
    521c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    521e:	8b 89       	ldd	r24, Y+19	; 0x13
    5220:	9c 89       	ldd	r25, Y+20	; 0x14
    5222:	00 97       	sbiw	r24, 0x00	; 0
    5224:	69 f7       	brne	.-38     	; 0x5200 <main+0x20b0>
    5226:	14 c0       	rjmp	.+40     	; 0x5250 <main+0x2100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5228:	6d 89       	ldd	r22, Y+21	; 0x15
    522a:	7e 89       	ldd	r23, Y+22	; 0x16
    522c:	8f 89       	ldd	r24, Y+23	; 0x17
    522e:	98 8d       	ldd	r25, Y+24	; 0x18
    5230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5234:	dc 01       	movw	r26, r24
    5236:	cb 01       	movw	r24, r22
    5238:	9c 8b       	std	Y+20, r25	; 0x14
    523a:	8b 8b       	std	Y+19, r24	; 0x13
    523c:	8b 89       	ldd	r24, Y+19	; 0x13
    523e:	9c 89       	ldd	r25, Y+20	; 0x14
    5240:	98 8b       	std	Y+16, r25	; 0x10
    5242:	8f 87       	std	Y+15, r24	; 0x0f
    5244:	8f 85       	ldd	r24, Y+15	; 0x0f
    5246:	98 89       	ldd	r25, Y+16	; 0x10
    5248:	01 97       	sbiw	r24, 0x01	; 1
    524a:	f1 f7       	brne	.-4      	; 0x5248 <main+0x20f8>
    524c:	98 8b       	std	Y+16, r25	; 0x10
    524e:	8f 87       	std	Y+15, r24	; 0x0f
			   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
			   DIO_u8SetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
			   Local_u8TryNum = 0;
			   LCD_voidClearScreen();
			   LCD_voidSendStr("Waiting For   S");
			   for( u8 i = 5; i > 0; i--)
    5250:	de 01       	movw	r26, r28
    5252:	af 51       	subi	r26, 0x1F	; 31
    5254:	bf 4f       	sbci	r27, 0xFF	; 255
    5256:	fe 01       	movw	r30, r28
    5258:	ef 51       	subi	r30, 0x1F	; 31
    525a:	ff 4f       	sbci	r31, 0xFF	; 255
    525c:	80 81       	ld	r24, Z
    525e:	81 50       	subi	r24, 0x01	; 1
    5260:	8c 93       	st	X, r24
    5262:	fe 01       	movw	r30, r28
    5264:	ef 51       	subi	r30, 0x1F	; 31
    5266:	ff 4f       	sbci	r31, 0xFF	; 255
    5268:	80 81       	ld	r24, Z
    526a:	88 23       	and	r24, r24
    526c:	09 f0       	breq	.+2      	; 0x5270 <main+0x2120>
    526e:	6e cf       	rjmp	.-292    	; 0x514c <main+0x1ffc>
    5270:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <main+0xad0>
				   LCD_voidSendNum(i);
				   _delay_ms(1000);
			   }
		   }

		   else if(Local_u8PassFlag == 1)
    5274:	fe 01       	movw	r30, r28
    5276:	ef 50       	subi	r30, 0x0F	; 15
    5278:	ff 4f       	sbci	r31, 0xFF	; 255
    527a:	80 81       	ld	r24, Z
    527c:	81 30       	cpi	r24, 0x01	; 1
    527e:	11 f0       	breq	.+4      	; 0x5284 <main+0x2134>
    5280:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <main+0xad0>
		   {

			  Local_u8TryNum = 0;
    5284:	fe 01       	movw	r30, r28
    5286:	e0 51       	subi	r30, 0x10	; 16
    5288:	ff 4f       	sbci	r31, 0xFF	; 255
    528a:	10 82       	st	Z, r1
			  LCD_voidClearScreen();
    528c:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
			  LCD_u8GoToXY(1,2);
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	62 e0       	ldi	r22, 0x02	; 2
    5294:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
			  LCD_voidSendStr("Welcome Guest");
    5298:	88 ef       	ldi	r24, 0xF8	; 248
    529a:	91 e0       	ldi	r25, 0x01	; 1
    529c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
    52a0:	80 e0       	ldi	r24, 0x00	; 0
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	aa ef       	ldi	r26, 0xFA	; 250
    52a6:	b3 e4       	ldi	r27, 0x43	; 67
    52a8:	8b 87       	std	Y+11, r24	; 0x0b
    52aa:	9c 87       	std	Y+12, r25	; 0x0c
    52ac:	ad 87       	std	Y+13, r26	; 0x0d
    52ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    52b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    52b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52b8:	20 e0       	ldi	r18, 0x00	; 0
    52ba:	30 e0       	ldi	r19, 0x00	; 0
    52bc:	4a ef       	ldi	r20, 0xFA	; 250
    52be:	54 e4       	ldi	r21, 0x44	; 68
    52c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    52c4:	dc 01       	movw	r26, r24
    52c6:	cb 01       	movw	r24, r22
    52c8:	8f 83       	std	Y+7, r24	; 0x07
    52ca:	98 87       	std	Y+8, r25	; 0x08
    52cc:	a9 87       	std	Y+9, r26	; 0x09
    52ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52d0:	6f 81       	ldd	r22, Y+7	; 0x07
    52d2:	78 85       	ldd	r23, Y+8	; 0x08
    52d4:	89 85       	ldd	r24, Y+9	; 0x09
    52d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	30 e0       	ldi	r19, 0x00	; 0
    52dc:	40 e8       	ldi	r20, 0x80	; 128
    52de:	5f e3       	ldi	r21, 0x3F	; 63
    52e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    52e4:	88 23       	and	r24, r24
    52e6:	2c f4       	brge	.+10     	; 0x52f2 <main+0x21a2>
		__ticks = 1;
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	90 e0       	ldi	r25, 0x00	; 0
    52ec:	9e 83       	std	Y+6, r25	; 0x06
    52ee:	8d 83       	std	Y+5, r24	; 0x05
    52f0:	3f c0       	rjmp	.+126    	; 0x5370 <main+0x2220>
	else if (__tmp > 65535)
    52f2:	6f 81       	ldd	r22, Y+7	; 0x07
    52f4:	78 85       	ldd	r23, Y+8	; 0x08
    52f6:	89 85       	ldd	r24, Y+9	; 0x09
    52f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52fa:	20 e0       	ldi	r18, 0x00	; 0
    52fc:	3f ef       	ldi	r19, 0xFF	; 255
    52fe:	4f e7       	ldi	r20, 0x7F	; 127
    5300:	57 e4       	ldi	r21, 0x47	; 71
    5302:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5306:	18 16       	cp	r1, r24
    5308:	4c f5       	brge	.+82     	; 0x535c <main+0x220c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    530a:	6b 85       	ldd	r22, Y+11	; 0x0b
    530c:	7c 85       	ldd	r23, Y+12	; 0x0c
    530e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5310:	9e 85       	ldd	r25, Y+14	; 0x0e
    5312:	20 e0       	ldi	r18, 0x00	; 0
    5314:	30 e0       	ldi	r19, 0x00	; 0
    5316:	40 e2       	ldi	r20, 0x20	; 32
    5318:	51 e4       	ldi	r21, 0x41	; 65
    531a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    531e:	dc 01       	movw	r26, r24
    5320:	cb 01       	movw	r24, r22
    5322:	bc 01       	movw	r22, r24
    5324:	cd 01       	movw	r24, r26
    5326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    532a:	dc 01       	movw	r26, r24
    532c:	cb 01       	movw	r24, r22
    532e:	9e 83       	std	Y+6, r25	; 0x06
    5330:	8d 83       	std	Y+5, r24	; 0x05
    5332:	0f c0       	rjmp	.+30     	; 0x5352 <main+0x2202>
    5334:	88 ec       	ldi	r24, 0xC8	; 200
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	9c 83       	std	Y+4, r25	; 0x04
    533a:	8b 83       	std	Y+3, r24	; 0x03
    533c:	8b 81       	ldd	r24, Y+3	; 0x03
    533e:	9c 81       	ldd	r25, Y+4	; 0x04
    5340:	01 97       	sbiw	r24, 0x01	; 1
    5342:	f1 f7       	brne	.-4      	; 0x5340 <main+0x21f0>
    5344:	9c 83       	std	Y+4, r25	; 0x04
    5346:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5348:	8d 81       	ldd	r24, Y+5	; 0x05
    534a:	9e 81       	ldd	r25, Y+6	; 0x06
    534c:	01 97       	sbiw	r24, 0x01	; 1
    534e:	9e 83       	std	Y+6, r25	; 0x06
    5350:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5352:	8d 81       	ldd	r24, Y+5	; 0x05
    5354:	9e 81       	ldd	r25, Y+6	; 0x06
    5356:	00 97       	sbiw	r24, 0x00	; 0
    5358:	69 f7       	brne	.-38     	; 0x5334 <main+0x21e4>
    535a:	14 c0       	rjmp	.+40     	; 0x5384 <main+0x2234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    535c:	6f 81       	ldd	r22, Y+7	; 0x07
    535e:	78 85       	ldd	r23, Y+8	; 0x08
    5360:	89 85       	ldd	r24, Y+9	; 0x09
    5362:	9a 85       	ldd	r25, Y+10	; 0x0a
    5364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5368:	dc 01       	movw	r26, r24
    536a:	cb 01       	movw	r24, r22
    536c:	9e 83       	std	Y+6, r25	; 0x06
    536e:	8d 83       	std	Y+5, r24	; 0x05
    5370:	8d 81       	ldd	r24, Y+5	; 0x05
    5372:	9e 81       	ldd	r25, Y+6	; 0x06
    5374:	9a 83       	std	Y+2, r25	; 0x02
    5376:	89 83       	std	Y+1, r24	; 0x01
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	9a 81       	ldd	r25, Y+2	; 0x02
    537c:	01 97       	sbiw	r24, 0x01	; 1
    537e:	f1 f7       	brne	.-4      	; 0x537c <main+0x222c>
    5380:	9a 83       	std	Y+2, r25	; 0x02
    5382:	89 83       	std	Y+1, r24	; 0x01
			  _delay_ms(500);
			  KPD_u8GetKeyState(&Local_u8KeyValue);
    5384:	ce 01       	movw	r24, r28
    5386:	8e 50       	subi	r24, 0x0E	; 14
    5388:	9f 4f       	sbci	r25, 0xFF	; 255
    538a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    538e:	5a c1       	rjmp	.+692    	; 0x5644 <main+0x24f4>
			  while(Local_u32Time_Out < MAX_TIME && Local_u8KeyValue != '4')
			  {
				  LCD_voidClearScreen();
    5390:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
				  LCD_voidSendStr("1:Room1");
    5394:	8e e2       	ldi	r24, 0x2E	; 46
    5396:	91 e0       	ldi	r25, 0x01	; 1
    5398:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				  LCD_u8GoToXY(1,9);
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	69 e0       	ldi	r22, 0x09	; 9
    53a0:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				  LCD_voidSendStr("2:Room2");
    53a4:	86 e3       	ldi	r24, 0x36	; 54
    53a6:	91 e0       	ldi	r25, 0x01	; 1
    53a8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				  LCD_u8GoToXY(2,0);
    53ac:	82 e0       	ldi	r24, 0x02	; 2
    53ae:	60 e0       	ldi	r22, 0x00	; 0
    53b0:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				  LCD_voidSendStr("3:Room3");
    53b4:	8e e3       	ldi	r24, 0x3E	; 62
    53b6:	91 e0       	ldi	r25, 0x01	; 1
    53b8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				  LCD_u8GoToXY(2,9);
    53bc:	82 e0       	ldi	r24, 0x02	; 2
    53be:	69 e0       	ldi	r22, 0x09	; 9
    53c0:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
				  LCD_voidSendStr("4:Back");
    53c4:	86 e0       	ldi	r24, 0x06	; 6
    53c6:	92 e0       	ldi	r25, 0x02	; 2
    53c8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
				  KPD_u8GetKeyState(&Local_u8KeyValue);
    53cc:	ce 01       	movw	r24, r28
    53ce:	8e 50       	subi	r24, 0x0E	; 14
    53d0:	9f 4f       	sbci	r25, 0xFF	; 255
    53d2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    53d6:	17 c0       	rjmp	.+46     	; 0x5406 <main+0x22b6>
				  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED  && Local_u32Time_Out < MAX_TIME)
				  {
					  KPD_u8GetKeyState(&Local_u8KeyValue);
    53d8:	ce 01       	movw	r24, r28
    53da:	8e 50       	subi	r24, 0x0E	; 14
    53dc:	9f 4f       	sbci	r25, 0xFF	; 255
    53de:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
					  Local_u32Time_Out++;
    53e2:	9e 01       	movw	r18, r28
    53e4:	26 51       	subi	r18, 0x16	; 22
    53e6:	3f 4f       	sbci	r19, 0xFF	; 255
    53e8:	fe 01       	movw	r30, r28
    53ea:	e6 51       	subi	r30, 0x16	; 22
    53ec:	ff 4f       	sbci	r31, 0xFF	; 255
    53ee:	80 81       	ld	r24, Z
    53f0:	91 81       	ldd	r25, Z+1	; 0x01
    53f2:	a2 81       	ldd	r26, Z+2	; 0x02
    53f4:	b3 81       	ldd	r27, Z+3	; 0x03
    53f6:	01 96       	adiw	r24, 0x01	; 1
    53f8:	a1 1d       	adc	r26, r1
    53fa:	b1 1d       	adc	r27, r1
    53fc:	f9 01       	movw	r30, r18
    53fe:	80 83       	st	Z, r24
    5400:	91 83       	std	Z+1, r25	; 0x01
    5402:	a2 83       	std	Z+2, r26	; 0x02
    5404:	b3 83       	std	Z+3, r27	; 0x03
				  LCD_u8GoToXY(2,0);
				  LCD_voidSendStr("3:Room3");
				  LCD_u8GoToXY(2,9);
				  LCD_voidSendStr("4:Back");
				  KPD_u8GetKeyState(&Local_u8KeyValue);
				  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED  && Local_u32Time_Out < MAX_TIME)
    5406:	fe 01       	movw	r30, r28
    5408:	ee 50       	subi	r30, 0x0E	; 14
    540a:	ff 4f       	sbci	r31, 0xFF	; 255
    540c:	80 81       	ld	r24, Z
    540e:	8f 3f       	cpi	r24, 0xFF	; 255
    5410:	79 f4       	brne	.+30     	; 0x5430 <main+0x22e0>
    5412:	fe 01       	movw	r30, r28
    5414:	e6 51       	subi	r30, 0x16	; 22
    5416:	ff 4f       	sbci	r31, 0xFF	; 255
    5418:	80 81       	ld	r24, Z
    541a:	91 81       	ldd	r25, Z+1	; 0x01
    541c:	a2 81       	ldd	r26, Z+2	; 0x02
    541e:	b3 81       	ldd	r27, Z+3	; 0x03
    5420:	88 38       	cpi	r24, 0x88	; 136
    5422:	f3 e1       	ldi	r31, 0x13	; 19
    5424:	9f 07       	cpc	r25, r31
    5426:	f0 e0       	ldi	r31, 0x00	; 0
    5428:	af 07       	cpc	r26, r31
    542a:	f0 e0       	ldi	r31, 0x00	; 0
    542c:	bf 07       	cpc	r27, r31
    542e:	a0 f2       	brcs	.-88     	; 0x53d8 <main+0x2288>
				  {
					  KPD_u8GetKeyState(&Local_u8KeyValue);
					  Local_u32Time_Out++;
				  }
				  if(Local_u8KeyValue == '1')
    5430:	fe 01       	movw	r30, r28
    5432:	ee 50       	subi	r30, 0x0E	; 14
    5434:	ff 4f       	sbci	r31, 0xFF	; 255
    5436:	80 81       	ld	r24, Z
    5438:	81 33       	cpi	r24, 0x31	; 49
    543a:	09 f0       	breq	.+2      	; 0x543e <main+0x22ee>
    543c:	52 c0       	rjmp	.+164    	; 0x54e2 <main+0x2392>
    543e:	42 c0       	rjmp	.+132    	; 0x54c4 <main+0x2374>
				  {
					  while(Local_u8KeyValue != '0')
					  {
						  LCD_voidClearScreen();
    5440:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
						  LCD_voidSendStr("Room1");
    5444:	8a ed       	ldi	r24, 0xDA	; 218
    5446:	91 e0       	ldi	r25, 0x01	; 1
    5448:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,0);
    544c:	82 e0       	ldi	r24, 0x02	; 2
    544e:	60 e0       	ldi	r22, 0x00	; 0
    5450:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("1-On");
    5454:	8d eb       	ldi	r24, 0xBD	; 189
    5456:	91 e0       	ldi	r25, 0x01	; 1
    5458:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,5);
    545c:	82 e0       	ldi	r24, 0x02	; 2
    545e:	65 e0       	ldi	r22, 0x05	; 5
    5460:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("2-Off");
    5464:	82 ec       	ldi	r24, 0xC2	; 194
    5466:	91 e0       	ldi	r25, 0x01	; 1
    5468:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,11);
    546c:	82 e0       	ldi	r24, 0x02	; 2
    546e:	6b e0       	ldi	r22, 0x0B	; 11
    5470:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("0-Back");
    5474:	88 ec       	ldi	r24, 0xC8	; 200
    5476:	91 e0       	ldi	r25, 0x01	; 1
    5478:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  KPD_u8GetKeyState(&Local_u8KeyValue);
    547c:	ce 01       	movw	r24, r28
    547e:	8e 50       	subi	r24, 0x0E	; 14
    5480:	9f 4f       	sbci	r25, 0xFF	; 255
    5482:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    5486:	05 c0       	rjmp	.+10     	; 0x5492 <main+0x2342>
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
    5488:	ce 01       	movw	r24, r28
    548a:	8e 50       	subi	r24, 0x0E	; 14
    548c:	9f 4f       	sbci	r25, 0xFF	; 255
    548e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
						  LCD_u8GoToXY(2,5);
						  LCD_voidSendStr("2-Off");
						  LCD_u8GoToXY(2,11);
						  LCD_voidSendStr("0-Back");
						  KPD_u8GetKeyState(&Local_u8KeyValue);
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    5492:	fe 01       	movw	r30, r28
    5494:	ee 50       	subi	r30, 0x0E	; 14
    5496:	ff 4f       	sbci	r31, 0xFF	; 255
    5498:	80 81       	ld	r24, Z
    549a:	8f 3f       	cpi	r24, 0xFF	; 255
    549c:	a9 f3       	breq	.-22     	; 0x5488 <main+0x2338>
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
						  }
						  if(Local_u8KeyValue == '1')
    549e:	fe 01       	movw	r30, r28
    54a0:	ee 50       	subi	r30, 0x0E	; 14
    54a2:	ff 4f       	sbci	r31, 0xFF	; 255
    54a4:	80 81       	ld	r24, Z
    54a6:	81 33       	cpi	r24, 0x31	; 49
    54a8:	21 f4       	brne	.+8      	; 0x54b2 <main+0x2362>
						  {
							 SPI_voidSendSlaveByte(ROOM_1_TURN_ON);
    54aa:	8f ef       	ldi	r24, 0xFF	; 255
    54ac:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    54b0:	09 c0       	rjmp	.+18     	; 0x54c4 <main+0x2374>
						  }
						  else if(Local_u8KeyValue == '2')
    54b2:	fe 01       	movw	r30, r28
    54b4:	ee 50       	subi	r30, 0x0E	; 14
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	80 81       	ld	r24, Z
    54ba:	82 33       	cpi	r24, 0x32	; 50
    54bc:	19 f4       	brne	.+6      	; 0x54c4 <main+0x2374>
						  {
							  SPI_voidSendSlaveByte(ROOM_1_TURN_OFF);
    54be:	8e ef       	ldi	r24, 0xFE	; 254
    54c0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
					  KPD_u8GetKeyState(&Local_u8KeyValue);
					  Local_u32Time_Out++;
				  }
				  if(Local_u8KeyValue == '1')
				  {
					  while(Local_u8KeyValue != '0')
    54c4:	fe 01       	movw	r30, r28
    54c6:	ee 50       	subi	r30, 0x0E	; 14
    54c8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ca:	80 81       	ld	r24, Z
    54cc:	80 33       	cpi	r24, 0x30	; 48
    54ce:	09 f0       	breq	.+2      	; 0x54d2 <main+0x2382>
    54d0:	b7 cf       	rjmp	.-146    	; 0x5440 <main+0x22f0>
						  else if(Local_u8KeyValue == '2')
						  {
							  SPI_voidSendSlaveByte(ROOM_1_TURN_OFF);
						  }
					  }
					  Local_u32Time_Out = 0;
    54d2:	fe 01       	movw	r30, r28
    54d4:	e6 51       	subi	r30, 0x16	; 22
    54d6:	ff 4f       	sbci	r31, 0xFF	; 255
    54d8:	10 82       	st	Z, r1
    54da:	11 82       	std	Z+1, r1	; 0x01
    54dc:	12 82       	std	Z+2, r1	; 0x02
    54de:	13 82       	std	Z+3, r1	; 0x03
    54e0:	b1 c0       	rjmp	.+354    	; 0x5644 <main+0x24f4>
				  }

				  else if(Local_u8KeyValue == '2')
    54e2:	fe 01       	movw	r30, r28
    54e4:	ee 50       	subi	r30, 0x0E	; 14
    54e6:	ff 4f       	sbci	r31, 0xFF	; 255
    54e8:	80 81       	ld	r24, Z
    54ea:	82 33       	cpi	r24, 0x32	; 50
    54ec:	09 f0       	breq	.+2      	; 0x54f0 <main+0x23a0>
    54ee:	52 c0       	rjmp	.+164    	; 0x5594 <main+0x2444>
    54f0:	42 c0       	rjmp	.+132    	; 0x5576 <main+0x2426>
				  {
					  while(Local_u8KeyValue != '0')
					  {
						  LCD_voidClearScreen();
    54f2:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
						  LCD_voidSendStr("Room2");
    54f6:	80 ee       	ldi	r24, 0xE0	; 224
    54f8:	91 e0       	ldi	r25, 0x01	; 1
    54fa:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,0);
    54fe:	82 e0       	ldi	r24, 0x02	; 2
    5500:	60 e0       	ldi	r22, 0x00	; 0
    5502:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("1-On");
    5506:	8d eb       	ldi	r24, 0xBD	; 189
    5508:	91 e0       	ldi	r25, 0x01	; 1
    550a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,5);
    550e:	82 e0       	ldi	r24, 0x02	; 2
    5510:	65 e0       	ldi	r22, 0x05	; 5
    5512:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("2-Off");
    5516:	82 ec       	ldi	r24, 0xC2	; 194
    5518:	91 e0       	ldi	r25, 0x01	; 1
    551a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,11);
    551e:	82 e0       	ldi	r24, 0x02	; 2
    5520:	6b e0       	ldi	r22, 0x0B	; 11
    5522:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("0-Back");
    5526:	88 ec       	ldi	r24, 0xC8	; 200
    5528:	91 e0       	ldi	r25, 0x01	; 1
    552a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  KPD_u8GetKeyState(&Local_u8KeyValue);
    552e:	ce 01       	movw	r24, r28
    5530:	8e 50       	subi	r24, 0x0E	; 14
    5532:	9f 4f       	sbci	r25, 0xFF	; 255
    5534:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    5538:	05 c0       	rjmp	.+10     	; 0x5544 <main+0x23f4>
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
    553a:	ce 01       	movw	r24, r28
    553c:	8e 50       	subi	r24, 0x0E	; 14
    553e:	9f 4f       	sbci	r25, 0xFF	; 255
    5540:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
						  LCD_u8GoToXY(2,5);
						  LCD_voidSendStr("2-Off");
						  LCD_u8GoToXY(2,11);
						  LCD_voidSendStr("0-Back");
						  KPD_u8GetKeyState(&Local_u8KeyValue);
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    5544:	fe 01       	movw	r30, r28
    5546:	ee 50       	subi	r30, 0x0E	; 14
    5548:	ff 4f       	sbci	r31, 0xFF	; 255
    554a:	80 81       	ld	r24, Z
    554c:	8f 3f       	cpi	r24, 0xFF	; 255
    554e:	a9 f3       	breq	.-22     	; 0x553a <main+0x23ea>
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
						  }
						  if(Local_u8KeyValue == '1')
    5550:	fe 01       	movw	r30, r28
    5552:	ee 50       	subi	r30, 0x0E	; 14
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	80 81       	ld	r24, Z
    5558:	81 33       	cpi	r24, 0x31	; 49
    555a:	21 f4       	brne	.+8      	; 0x5564 <main+0x2414>
						  {
							  SPI_voidSendSlaveByte(ROOM_2_TURN_ON);
    555c:	8d ef       	ldi	r24, 0xFD	; 253
    555e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    5562:	09 c0       	rjmp	.+18     	; 0x5576 <main+0x2426>
						  }
						  else if(Local_u8KeyValue == '2')
    5564:	fe 01       	movw	r30, r28
    5566:	ee 50       	subi	r30, 0x0E	; 14
    5568:	ff 4f       	sbci	r31, 0xFF	; 255
    556a:	80 81       	ld	r24, Z
    556c:	82 33       	cpi	r24, 0x32	; 50
    556e:	19 f4       	brne	.+6      	; 0x5576 <main+0x2426>
						  {
							  SPI_voidSendSlaveByte(ROOM_2_TURN_OFF);
    5570:	8c ef       	ldi	r24, 0xFC	; 252
    5572:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
					  Local_u32Time_Out = 0;
				  }

				  else if(Local_u8KeyValue == '2')
				  {
					  while(Local_u8KeyValue != '0')
    5576:	fe 01       	movw	r30, r28
    5578:	ee 50       	subi	r30, 0x0E	; 14
    557a:	ff 4f       	sbci	r31, 0xFF	; 255
    557c:	80 81       	ld	r24, Z
    557e:	80 33       	cpi	r24, 0x30	; 48
    5580:	09 f0       	breq	.+2      	; 0x5584 <main+0x2434>
    5582:	b7 cf       	rjmp	.-146    	; 0x54f2 <main+0x23a2>
						  else if(Local_u8KeyValue == '2')
						  {
							  SPI_voidSendSlaveByte(ROOM_2_TURN_OFF);
						  }
					  }
					  Local_u32Time_Out = 0;
    5584:	fe 01       	movw	r30, r28
    5586:	e6 51       	subi	r30, 0x16	; 22
    5588:	ff 4f       	sbci	r31, 0xFF	; 255
    558a:	10 82       	st	Z, r1
    558c:	11 82       	std	Z+1, r1	; 0x01
    558e:	12 82       	std	Z+2, r1	; 0x02
    5590:	13 82       	std	Z+3, r1	; 0x03
    5592:	58 c0       	rjmp	.+176    	; 0x5644 <main+0x24f4>
				  }

				  else if(Local_u8KeyValue == '3')
    5594:	fe 01       	movw	r30, r28
    5596:	ee 50       	subi	r30, 0x0E	; 14
    5598:	ff 4f       	sbci	r31, 0xFF	; 255
    559a:	80 81       	ld	r24, Z
    559c:	83 33       	cpi	r24, 0x33	; 51
    559e:	09 f0       	breq	.+2      	; 0x55a2 <main+0x2452>
    55a0:	51 c0       	rjmp	.+162    	; 0x5644 <main+0x24f4>
    55a2:	42 c0       	rjmp	.+132    	; 0x5628 <main+0x24d8>
				  {
					  while(Local_u8KeyValue != '0')
					  {
						  LCD_voidClearScreen();
    55a4:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidClearScreen>
						  LCD_voidSendStr("Room3");
    55a8:	86 ee       	ldi	r24, 0xE6	; 230
    55aa:	91 e0       	ldi	r25, 0x01	; 1
    55ac:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,0);
    55b0:	82 e0       	ldi	r24, 0x02	; 2
    55b2:	60 e0       	ldi	r22, 0x00	; 0
    55b4:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("1-On");
    55b8:	8d eb       	ldi	r24, 0xBD	; 189
    55ba:	91 e0       	ldi	r25, 0x01	; 1
    55bc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,5);
    55c0:	82 e0       	ldi	r24, 0x02	; 2
    55c2:	65 e0       	ldi	r22, 0x05	; 5
    55c4:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("2-Off");
    55c8:	82 ec       	ldi	r24, 0xC2	; 194
    55ca:	91 e0       	ldi	r25, 0x01	; 1
    55cc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  LCD_u8GoToXY(2,11);
    55d0:	82 e0       	ldi	r24, 0x02	; 2
    55d2:	6b e0       	ldi	r22, 0x0B	; 11
    55d4:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_u8GoToXY>
						  LCD_voidSendStr("0-Back");
    55d8:	88 ec       	ldi	r24, 0xC8	; 200
    55da:	91 e0       	ldi	r25, 0x01	; 1
    55dc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_voidSendStr>
						  KPD_u8GetKeyState(&Local_u8KeyValue);
    55e0:	ce 01       	movw	r24, r28
    55e2:	8e 50       	subi	r24, 0x0E	; 14
    55e4:	9f 4f       	sbci	r25, 0xFF	; 255
    55e6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
    55ea:	05 c0       	rjmp	.+10     	; 0x55f6 <main+0x24a6>
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
    55ec:	ce 01       	movw	r24, r28
    55ee:	8e 50       	subi	r24, 0x0E	; 14
    55f0:	9f 4f       	sbci	r25, 0xFF	; 255
    55f2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <KPD_u8GetKeyState>
						  LCD_u8GoToXY(2,5);
						  LCD_voidSendStr("2-Off");
						  LCD_u8GoToXY(2,11);
						  LCD_voidSendStr("0-Back");
						  KPD_u8GetKeyState(&Local_u8KeyValue);
						  while(Local_u8KeyValue == KPD_u8_KEY_NOT_PRESSED)
    55f6:	fe 01       	movw	r30, r28
    55f8:	ee 50       	subi	r30, 0x0E	; 14
    55fa:	ff 4f       	sbci	r31, 0xFF	; 255
    55fc:	80 81       	ld	r24, Z
    55fe:	8f 3f       	cpi	r24, 0xFF	; 255
    5600:	a9 f3       	breq	.-22     	; 0x55ec <main+0x249c>
						  {
							  KPD_u8GetKeyState(&Local_u8KeyValue);
						  }
						  if(Local_u8KeyValue == '1')
    5602:	fe 01       	movw	r30, r28
    5604:	ee 50       	subi	r30, 0x0E	; 14
    5606:	ff 4f       	sbci	r31, 0xFF	; 255
    5608:	80 81       	ld	r24, Z
    560a:	81 33       	cpi	r24, 0x31	; 49
    560c:	21 f4       	brne	.+8      	; 0x5616 <main+0x24c6>
						  {
							  SPI_voidSendSlaveByte(ROOM_3_TURN_ON);
    560e:	8b ef       	ldi	r24, 0xFB	; 251
    5610:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
    5614:	09 c0       	rjmp	.+18     	; 0x5628 <main+0x24d8>
						  }
						  else if(Local_u8KeyValue == '2')
    5616:	fe 01       	movw	r30, r28
    5618:	ee 50       	subi	r30, 0x0E	; 14
    561a:	ff 4f       	sbci	r31, 0xFF	; 255
    561c:	80 81       	ld	r24, Z
    561e:	82 33       	cpi	r24, 0x32	; 50
    5620:	19 f4       	brne	.+6      	; 0x5628 <main+0x24d8>
						  {
							  SPI_voidSendSlaveByte(ROOM_3_TURN_OFF);
    5622:	8a ef       	ldi	r24, 0xFA	; 250
    5624:	0e 94 d5 16 	call	0x2daa	; 0x2daa <SPI_voidSendSlaveByte>
					  Local_u32Time_Out = 0;
				  }

				  else if(Local_u8KeyValue == '3')
				  {
					  while(Local_u8KeyValue != '0')
    5628:	fe 01       	movw	r30, r28
    562a:	ee 50       	subi	r30, 0x0E	; 14
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	80 81       	ld	r24, Z
    5630:	80 33       	cpi	r24, 0x30	; 48
    5632:	09 f0       	breq	.+2      	; 0x5636 <main+0x24e6>
    5634:	b7 cf       	rjmp	.-146    	; 0x55a4 <main+0x2454>
						  else if(Local_u8KeyValue == '2')
						  {
							  SPI_voidSendSlaveByte(ROOM_3_TURN_OFF);
						  }
					  }
					  Local_u32Time_Out = 0;
    5636:	fe 01       	movw	r30, r28
    5638:	e6 51       	subi	r30, 0x16	; 22
    563a:	ff 4f       	sbci	r31, 0xFF	; 255
    563c:	10 82       	st	Z, r1
    563e:	11 82       	std	Z+1, r1	; 0x01
    5640:	12 82       	std	Z+2, r1	; 0x02
    5642:	13 82       	std	Z+3, r1	; 0x03
			  LCD_voidClearScreen();
			  LCD_u8GoToXY(1,2);
			  LCD_voidSendStr("Welcome Guest");
			  _delay_ms(500);
			  KPD_u8GetKeyState(&Local_u8KeyValue);
			  while(Local_u32Time_Out < MAX_TIME && Local_u8KeyValue != '4')
    5644:	fe 01       	movw	r30, r28
    5646:	e6 51       	subi	r30, 0x16	; 22
    5648:	ff 4f       	sbci	r31, 0xFF	; 255
    564a:	80 81       	ld	r24, Z
    564c:	91 81       	ldd	r25, Z+1	; 0x01
    564e:	a2 81       	ldd	r26, Z+2	; 0x02
    5650:	b3 81       	ldd	r27, Z+3	; 0x03
    5652:	88 38       	cpi	r24, 0x88	; 136
    5654:	23 e1       	ldi	r18, 0x13	; 19
    5656:	92 07       	cpc	r25, r18
    5658:	20 e0       	ldi	r18, 0x00	; 0
    565a:	a2 07       	cpc	r26, r18
    565c:	20 e0       	ldi	r18, 0x00	; 0
    565e:	b2 07       	cpc	r27, r18
    5660:	10 f0       	brcs	.+4      	; 0x5666 <main+0x2516>
    5662:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <main+0xad0>
    5666:	fe 01       	movw	r30, r28
    5668:	ee 50       	subi	r30, 0x0E	; 14
    566a:	ff 4f       	sbci	r31, 0xFF	; 255
    566c:	80 81       	ld	r24, Z
    566e:	84 33       	cpi	r24, 0x34	; 52
    5670:	09 f0       	breq	.+2      	; 0x5674 <main+0x2524>
    5672:	8e ce       	rjmp	.-740    	; 0x5390 <main+0x2240>
    5674:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <main+0xad0>

00005678 <__udivmodsi4>:
    5678:	a1 e2       	ldi	r26, 0x21	; 33
    567a:	1a 2e       	mov	r1, r26
    567c:	aa 1b       	sub	r26, r26
    567e:	bb 1b       	sub	r27, r27
    5680:	fd 01       	movw	r30, r26
    5682:	0d c0       	rjmp	.+26     	; 0x569e <__udivmodsi4_ep>

00005684 <__udivmodsi4_loop>:
    5684:	aa 1f       	adc	r26, r26
    5686:	bb 1f       	adc	r27, r27
    5688:	ee 1f       	adc	r30, r30
    568a:	ff 1f       	adc	r31, r31
    568c:	a2 17       	cp	r26, r18
    568e:	b3 07       	cpc	r27, r19
    5690:	e4 07       	cpc	r30, r20
    5692:	f5 07       	cpc	r31, r21
    5694:	20 f0       	brcs	.+8      	; 0x569e <__udivmodsi4_ep>
    5696:	a2 1b       	sub	r26, r18
    5698:	b3 0b       	sbc	r27, r19
    569a:	e4 0b       	sbc	r30, r20
    569c:	f5 0b       	sbc	r31, r21

0000569e <__udivmodsi4_ep>:
    569e:	66 1f       	adc	r22, r22
    56a0:	77 1f       	adc	r23, r23
    56a2:	88 1f       	adc	r24, r24
    56a4:	99 1f       	adc	r25, r25
    56a6:	1a 94       	dec	r1
    56a8:	69 f7       	brne	.-38     	; 0x5684 <__udivmodsi4_loop>
    56aa:	60 95       	com	r22
    56ac:	70 95       	com	r23
    56ae:	80 95       	com	r24
    56b0:	90 95       	com	r25
    56b2:	9b 01       	movw	r18, r22
    56b4:	ac 01       	movw	r20, r24
    56b6:	bd 01       	movw	r22, r26
    56b8:	cf 01       	movw	r24, r30
    56ba:	08 95       	ret

000056bc <__prologue_saves__>:
    56bc:	2f 92       	push	r2
    56be:	3f 92       	push	r3
    56c0:	4f 92       	push	r4
    56c2:	5f 92       	push	r5
    56c4:	6f 92       	push	r6
    56c6:	7f 92       	push	r7
    56c8:	8f 92       	push	r8
    56ca:	9f 92       	push	r9
    56cc:	af 92       	push	r10
    56ce:	bf 92       	push	r11
    56d0:	cf 92       	push	r12
    56d2:	df 92       	push	r13
    56d4:	ef 92       	push	r14
    56d6:	ff 92       	push	r15
    56d8:	0f 93       	push	r16
    56da:	1f 93       	push	r17
    56dc:	cf 93       	push	r28
    56de:	df 93       	push	r29
    56e0:	cd b7       	in	r28, 0x3d	; 61
    56e2:	de b7       	in	r29, 0x3e	; 62
    56e4:	ca 1b       	sub	r28, r26
    56e6:	db 0b       	sbc	r29, r27
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	f8 94       	cli
    56ec:	de bf       	out	0x3e, r29	; 62
    56ee:	0f be       	out	0x3f, r0	; 63
    56f0:	cd bf       	out	0x3d, r28	; 61
    56f2:	09 94       	ijmp

000056f4 <__epilogue_restores__>:
    56f4:	2a 88       	ldd	r2, Y+18	; 0x12
    56f6:	39 88       	ldd	r3, Y+17	; 0x11
    56f8:	48 88       	ldd	r4, Y+16	; 0x10
    56fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    56fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    56fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    5700:	8c 84       	ldd	r8, Y+12	; 0x0c
    5702:	9b 84       	ldd	r9, Y+11	; 0x0b
    5704:	aa 84       	ldd	r10, Y+10	; 0x0a
    5706:	b9 84       	ldd	r11, Y+9	; 0x09
    5708:	c8 84       	ldd	r12, Y+8	; 0x08
    570a:	df 80       	ldd	r13, Y+7	; 0x07
    570c:	ee 80       	ldd	r14, Y+6	; 0x06
    570e:	fd 80       	ldd	r15, Y+5	; 0x05
    5710:	0c 81       	ldd	r16, Y+4	; 0x04
    5712:	1b 81       	ldd	r17, Y+3	; 0x03
    5714:	aa 81       	ldd	r26, Y+2	; 0x02
    5716:	b9 81       	ldd	r27, Y+1	; 0x01
    5718:	ce 0f       	add	r28, r30
    571a:	d1 1d       	adc	r29, r1
    571c:	0f b6       	in	r0, 0x3f	; 63
    571e:	f8 94       	cli
    5720:	de bf       	out	0x3e, r29	; 62
    5722:	0f be       	out	0x3f, r0	; 63
    5724:	cd bf       	out	0x3d, r28	; 61
    5726:	ed 01       	movw	r28, r26
    5728:	08 95       	ret

0000572a <_exit>:
    572a:	f8 94       	cli

0000572c <__stop_program>:
    572c:	ff cf       	rjmp	.-2      	; 0x572c <__stop_program>
