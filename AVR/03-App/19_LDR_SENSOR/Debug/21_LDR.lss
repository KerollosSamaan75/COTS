
21_LDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aa0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002aa0  00002b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800080  00800080  00002b54  2**0
                  ALLOC
  3 .stab         00001fe0  00000000  00000000  00002b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c17  00000000  00000000  00004b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000574b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000058ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 13 	call	0x2736	; 0x2736 <main>
      8a:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e7       	ldi	r22, 0x78	; 120
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
static void (*ADC_pfNotification)(u16) = NULL;
/*ADC Busy Flag*/
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	//1-Select Vref = AVCC
		CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
	//2-Right Adjust
		CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	//3-Disable Auto Trigger
		CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
	//4-Select CLK/64
		CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADCSRA_REG,2);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
	//5-Enable ADC
		SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSyncNonBlocking>:
u8 ADC_u8GetDigitalValueSyncNonBlocking(u8 Copy_u8ChannelNum,u16 *Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNum < 32)&&(Copy_pu16DigitalValue != NULL))
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSyncNonBlocking+0x2e>
     d48:	5b c0       	rjmp	.+182    	; 0xe00 <ADC_u8GetDigitalValueSyncNonBlocking+0xe4>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSyncNonBlocking+0x38>
     d52:	56 c0       	rjmp	.+172    	; 0xe00 <ADC_u8GetDigitalValueSyncNonBlocking+0xe4>
	{
		//Clear MUX4...0
		ADC_u8_ADMUX_REG &= 0b11100000;
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 7e       	andi	r24, 0xE0	; 224
     d60:	8c 93       	st	X, r24
		//Select Channel
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNum;  
     d62:	a7 e2       	ldi	r26, 0x27	; 39
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e2       	ldi	r30, 0x27	; 39
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	90 81       	ld	r25, Z
     d6c:	8e 81       	ldd	r24, Y+6	; 0x06
     d6e:	89 2b       	or	r24, r25
     d70:	8c 93       	st	X, r24
		//Start Conversion
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d72:	a6 e2       	ldi	r26, 0x26	; 38
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e6 e2       	ldi	r30, 0x26	; 38
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	8c 93       	st	X, r24
     d80:	0b c0       	rjmp	.+22     	; 0xd98 <ADC_u8GetDigitalValueSyncNonBlocking+0x7c>
		//Wait flag =1
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0)&&(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	ab 81       	ldd	r26, Y+3	; 0x03
     d88:	bc 81       	ldd	r27, Y+4	; 0x04
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	ab 83       	std	Y+3, r26	; 0x03
     d96:	bc 83       	std	Y+4, r27	; 0x04
		//Select Channel
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNum;  
		//Start Conversion
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		//Wait flag =1
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0)&&(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     d98:	e6 e2       	ldi	r30, 0x26	; 38
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 95       	swap	r24
     da0:	8f 70       	andi	r24, 0x0F	; 15
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	81 70       	andi	r24, 0x01	; 1
     da8:	90 70       	andi	r25, 0x00	; 0
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	61 f4       	brne	.+24     	; 0xdc6 <ADC_u8GetDigitalValueSyncNonBlocking+0xaa>
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	ab 81       	ldd	r26, Y+3	; 0x03
     db4:	bc 81       	ldd	r27, Y+4	; 0x04
     db6:	88 38       	cpi	r24, 0x88	; 136
     db8:	23 e1       	ldi	r18, 0x13	; 19
     dba:	92 07       	cpc	r25, r18
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	a2 07       	cpc	r26, r18
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	b2 07       	cpc	r27, r18
     dc4:	f0 f2       	brcs	.-68     	; 0xd82 <ADC_u8GetDigitalValueSyncNonBlocking+0x66>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4) == 1)
     dc6:	e6 e2       	ldi	r30, 0x26	; 38
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	82 95       	swap	r24
     dce:	8f 70       	andi	r24, 0x0F	; 15
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	81 70       	andi	r24, 0x01	; 1
     dd6:	90 70       	andi	r25, 0x00	; 0
     dd8:	88 23       	and	r24, r24
     dda:	81 f0       	breq	.+32     	; 0xdfc <ADC_u8GetDigitalValueSyncNonBlocking+0xe0>
		{
			//Clear Flag
		    SET_BIT(ADC_u8_ADCSRA_REG,4);
     ddc:	a6 e2       	ldi	r26, 0x26	; 38
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e6 e2       	ldi	r30, 0x26	; 38
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	8c 93       	st	X, r24
		    //Read Digital Value
		    *Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     dea:	e4 e2       	ldi	r30, 0x24	; 36
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	ef 81       	ldd	r30, Y+7	; 0x07
     df4:	f8 85       	ldd	r31, Y+8	; 0x08
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <ADC_u8GetDigitalValueSyncNonBlocking+0xe6>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     dfc:	1d 82       	std	Y+5, r1	; 0x05
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <ADC_u8GetDigitalValueSyncNonBlocking+0xe6>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e00:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e04:	28 96       	adiw	r28, 0x08	; 8
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <ADC_u8GetDigitalValueAsync>:

u8 ADC_u8GetDigitalValueAsync(u8 Copy_u8ChannelNum,void(*Copy_pfNotification)(u16))
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <ADC_u8GetDigitalValueAsync+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <ADC_u8GetDigitalValueAsync+0x8>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	8a 83       	std	Y+2, r24	; 0x02
     e24:	7c 83       	std	Y+4, r23	; 0x04
     e26:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNum < 32)&&(Copy_pfNotification != NULL)&&(ADC_u8BusyFlag == 0))
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	80 32       	cpi	r24, 0x20	; 32
     e30:	78 f5       	brcc	.+94     	; 0xe90 <ADC_u8GetDigitalValueAsync+0x7a>
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	59 f1       	breq	.+86     	; 0xe90 <ADC_u8GetDigitalValueAsync+0x7a>
     e3a:	80 91 82 00 	lds	r24, 0x0082
     e3e:	88 23       	and	r24, r24
     e40:	39 f5       	brne	.+78     	; 0xe90 <ADC_u8GetDigitalValueAsync+0x7a>
	{
		/*Set ADC_u8BusyFlag*/
		ADC_u8BusyFlag = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 82 00 	sts	0x0082, r24
		/*Update Global Pointer to Function*/
		ADC_pfNotification = Copy_pfNotification;
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	90 93 81 00 	sts	0x0081, r25
     e50:	80 93 80 00 	sts	0x0080, r24
		/*Enable ADC Interrupt*/
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e54:	a6 e2       	ldi	r26, 0x26	; 38
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e6 e2       	ldi	r30, 0x26	; 38
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 60       	ori	r24, 0x08	; 8
     e60:	8c 93       	st	X, r24
		//Clear MUX4...0
		ADC_u8_ADMUX_REG &= 0b11100000;
     e62:	a7 e2       	ldi	r26, 0x27	; 39
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e2       	ldi	r30, 0x27	; 39
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 7e       	andi	r24, 0xE0	; 224
     e6e:	8c 93       	st	X, r24
		//Select Channel
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNum;  
     e70:	a7 e2       	ldi	r26, 0x27	; 39
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e7 e2       	ldi	r30, 0x27	; 39
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	90 81       	ld	r25, Z
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	89 2b       	or	r24, r25
     e7e:	8c 93       	st	X, r24
		//Start Conversion
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e80:	a6 e2       	ldi	r26, 0x26	; 38
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e6 e2       	ldi	r30, 0x26	; 38
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 64       	ori	r24, 0x40	; 64
     e8c:	8c 93       	st	X, r24
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <ADC_u8GetDigitalValueAsync+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e90:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
}
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <__vector_16>:

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     ecc:	80 91 80 00 	lds	r24, 0x0080
     ed0:	90 91 81 00 	lds	r25, 0x0081
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	99 f0       	breq	.+38     	; 0xefe <__vector_16+0x5c>
	{
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     ed8:	a6 e2       	ldi	r26, 0x26	; 38
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	87 7f       	andi	r24, 0xF7	; 247
     ee4:	8c 93       	st	X, r24
		ADC_pfNotification(ADC_u16_ADC_REG);
     ee6:	20 91 80 00 	lds	r18, 0x0080
     eea:	30 91 81 00 	lds	r19, 0x0081
     eee:	e4 e2       	ldi	r30, 0x24	; 36
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	f9 01       	movw	r30, r18
     ef8:	09 95       	icall
		ADC_u8BusyFlag =0;
     efa:	10 92 82 00 	sts	0x0082, r1
	}
}
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	ff 91       	pop	r31
     f04:	ef 91       	pop	r30
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	7f 91       	pop	r23
     f10:	6f 91       	pop	r22
     f12:	5f 91       	pop	r21
     f14:	4f 91       	pop	r20
     f16:	3f 91       	pop	r19
     f18:	2f 91       	pop	r18
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	/*Intial PINS Direction*/ 
	DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION , DIO_u8_PA6_INTIAL_DIRECTION , DIO_u8_PA5_INTIAL_DIRECTION ,  DIO_u8_PA4_INTIAL_DIRECTION, 
     f2c:	ea e3       	ldi	r30, 0x3A	; 58
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	10 82       	st	Z, r1
	                       DIO_u8_PA3_INTIAL_DIRECTION , DIO_u8_PA2_INTIAL_DIRECTION , DIO_u8_PA1_INTIAL_DIRECTION ,  DIO_u8_PA0_INTIAL_DIRECTION );
    
	DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION , DIO_u8_PB6_INTIAL_DIRECTION , DIO_u8_PB5_INTIAL_DIRECTION ,  DIO_u8_PB4_INTIAL_DIRECTION , 
     f32:	e7 e3       	ldi	r30, 0x37	; 55
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	80 83       	st	Z, r24
			       DIO_u8_PB3_INTIAL_DIRECTION , DIO_u8_PB2_INTIAL_DIRECTION , DIO_u8_PB1_INTIAL_DIRECTION ,  DIO_u8_PB0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION , DIO_u8_PC6_INTIAL_DIRECTION , DIO_u8_PC5_INTIAL_DIRECTION ,  DIO_u8_PC4_INTIAL_DIRECTION ,
     f3a:	e4 e3       	ldi	r30, 0x34	; 52
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	80 83       	st	Z, r24
			       DIO_u8_PC3_INTIAL_DIRECTION , DIO_u8_PC2_INTIAL_DIRECTION , DIO_u8_PC1_INTIAL_DIRECTION ,  DIO_u8_PC0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION , DIO_u8_PD6_INTIAL_DIRECTION , DIO_u8_PD5_INTIAL_DIRECTION ,  DIO_u8_PD4_INTIAL_DIRECTION , 
     f42:	e1 e3       	ldi	r30, 0x31	; 49
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	87 e0       	ldi	r24, 0x07	; 7
     f48:	80 83       	st	Z, r24
			       DIO_u8_PD3_INTIAL_DIRECTION , DIO_u8_PD2_INTIAL_DIRECTION , DIO_u8_PD1_INTIAL_DIRECTION ,  DIO_u8_PD0_INTIAL_DIRECTION );
						  
						  
	/*Intial PINS Value*/
        DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE     , DIO_u8_PA6_INTIAL_VALUE     , DIO_u8_PA5_INTIAL_VALUE ,      DIO_u8_PA4_INTIAL_VALUE , 
     f4a:	eb e3       	ldi	r30, 0x3B	; 59
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	10 82       	st	Z, r1
				DIO_u8_PA3_INTIAL_VALUE     , DIO_u8_PA2_INTIAL_VALUE     , DIO_u8_PA1_INTIAL_VALUE ,      DIO_u8_PA0_INTIAL_VALUE);                  
                                                                                   
	DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE     , DIO_u8_PB6_INTIAL_VALUE     , DIO_u8_PB5_INTIAL_VALUE ,      DIO_u8_PB4_INTIAL_VALUE ,
     f50:	e8 e3       	ldi	r30, 0x38	; 56
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	10 82       	st	Z, r1
				DIO_u8_PB3_INTIAL_VALUE     , DIO_u8_PB2_INTIAL_VALUE     , DIO_u8_PB1_INTIAL_VALUE ,      DIO_u8_PB0_INTIAL_VALUE);                  
					                                                                  
	DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE     , DIO_u8_PC6_INTIAL_VALUE     , DIO_u8_PC5_INTIAL_VALUE ,      DIO_u8_PC4_INTIAL_VALUE , 
     f56:	e5 e3       	ldi	r30, 0x35	; 53
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	10 82       	st	Z, r1
				DIO_u8_PC3_INTIAL_VALUE     , DIO_u8_PC2_INTIAL_VALUE     , DIO_u8_PC1_INTIAL_VALUE ,      DIO_u8_PC0_INTIAL_VALUE);                  
					                                                                 
	DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE     , DIO_u8_PD6_INTIAL_VALUE     , DIO_u8_PD5_INTIAL_VALUE ,      DIO_u8_PD4_INTIAL_VALUE , 
     f5c:	e2 e3       	ldi	r30, 0x32	; 50
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	10 82       	st	Z, r1
				DIO_u8_PD3_INTIAL_VALUE     , DIO_u8_PD2_INTIAL_VALUE     , DIO_u8_PD1_INTIAL_VALUE  ,      DIO_u8_PD0_INTIAL_VALUE);
						                                               
						   
}
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection   (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinDirection)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	2e 97       	sbiw	r28, 0x0e	; 14
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	6b 83       	std	Y+3, r22	; 0x03
     f80:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_PinDirection == DIO_u8_OUTPUT)||(Copy_PinDirection == DIO_u8_INPUT)))
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	84 30       	cpi	r24, 0x04	; 4
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <DIO_u8SetPinDirection+0x26>
     f8c:	0c c1       	rjmp	.+536    	; 0x11a6 <DIO_u8SetPinDirection+0x23e>
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 30       	cpi	r24, 0x08	; 8
     f92:	08 f0       	brcs	.+2      	; 0xf96 <DIO_u8SetPinDirection+0x2e>
     f94:	08 c1       	rjmp	.+528    	; 0x11a6 <DIO_u8SetPinDirection+0x23e>
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	21 f0       	breq	.+8      	; 0xfa4 <DIO_u8SetPinDirection+0x3c>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	88 23       	and	r24, r24
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <DIO_u8SetPinDirection+0x3c>
     fa2:	01 c1       	rjmp	.+514    	; 0x11a6 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3e 87       	std	Y+14, r19	; 0x0e
     fac:	2d 87       	std	Y+13, r18	; 0x0d
     fae:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	91 05       	cpc	r25, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <DIO_u8SetPinDirection+0x52>
     fb8:	4f c0       	rjmp	.+158    	; 0x1058 <DIO_u8SetPinDirection+0xf0>
     fba:	2d 85       	ldd	r18, Y+13	; 0x0d
     fbc:	3e 85       	ldd	r19, Y+14	; 0x0e
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	31 05       	cpc	r19, r1
     fc2:	2c f4       	brge	.+10     	; 0xfce <DIO_u8SetPinDirection+0x66>
     fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	71 f0       	breq	.+28     	; 0xfe8 <DIO_u8SetPinDirection+0x80>
     fcc:	ed c0       	rjmp	.+474    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
     fce:	2d 85       	ldd	r18, Y+13	; 0x0d
     fd0:	3e 85       	ldd	r19, Y+14	; 0x0e
     fd2:	22 30       	cpi	r18, 0x02	; 2
     fd4:	31 05       	cpc	r19, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <DIO_u8SetPinDirection+0x72>
     fd8:	77 c0       	rjmp	.+238    	; 0x10c8 <DIO_u8SetPinDirection+0x160>
     fda:	8d 85       	ldd	r24, Y+13	; 0x0d
     fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <DIO_u8SetPinDirection+0x7e>
     fe4:	a9 c0       	rjmp	.+338    	; 0x1138 <DIO_u8SetPinDirection+0x1d0>
     fe6:	e0 c0       	rjmp	.+448    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch(Copy_PinDirection)
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	3c 87       	std	Y+12, r19	; 0x0c
     ff0:	2b 87       	std	Y+11, r18	; 0x0b
     ff2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ff4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	d1 f0       	breq	.+52     	; 0x102e <DIO_u8SetPinDirection+0xc6>
     ffa:	2b 85       	ldd	r18, Y+11	; 0x0b
     ffc:	3c 85       	ldd	r19, Y+12	; 0x0c
     ffe:	21 30       	cpi	r18, 0x01	; 1
    1000:	31 05       	cpc	r19, r1
    1002:	09 f0       	breq	.+2      	; 0x1006 <DIO_u8SetPinDirection+0x9e>
    1004:	d1 c0       	rjmp	.+418    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
    1006:	aa e3       	ldi	r26, 0x3A	; 58
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ea e3       	ldi	r30, 0x3A	; 58
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_u8SetPinDirection+0xbc>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_u8SetPinDirection+0xb8>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	bd c0       	rjmp	.+378    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
    102e:	aa e3       	ldi	r26, 0x3A	; 58
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ea e3       	ldi	r30, 0x3A	; 58
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8SetPinDirection+0xe4>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_u8SetPinDirection+0xe0>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	a8 c0       	rjmp	.+336    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTB:
				switch(Copy_PinDirection)
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3a 87       	std	Y+10, r19	; 0x0a
    1060:	29 87       	std	Y+9, r18	; 0x09
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	9a 85       	ldd	r25, Y+10	; 0x0a
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	d1 f0       	breq	.+52     	; 0x109e <DIO_u8SetPinDirection+0x136>
    106a:	29 85       	ldd	r18, Y+9	; 0x09
    106c:	3a 85       	ldd	r19, Y+10	; 0x0a
    106e:	21 30       	cpi	r18, 0x01	; 1
    1070:	31 05       	cpc	r19, r1
    1072:	09 f0       	breq	.+2      	; 0x1076 <DIO_u8SetPinDirection+0x10e>
    1074:	99 c0       	rjmp	.+306    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
    1076:	a7 e3       	ldi	r26, 0x37	; 55
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e3       	ldi	r30, 0x37	; 55
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_u8SetPinDirection+0x12c>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_u8SetPinDirection+0x128>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	85 c0       	rjmp	.+266    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
    109e:	a7 e3       	ldi	r26, 0x37	; 55
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e7 e3       	ldi	r30, 0x37	; 55
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_u8SetPinDirection+0x154>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_u8SetPinDirection+0x150>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	70 c0       	rjmp	.+224    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTC:
				switch(Copy_PinDirection)
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	38 87       	std	Y+8, r19	; 0x08
    10d0:	2f 83       	std	Y+7, r18	; 0x07
    10d2:	8f 81       	ldd	r24, Y+7	; 0x07
    10d4:	98 85       	ldd	r25, Y+8	; 0x08
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	d1 f0       	breq	.+52     	; 0x110e <DIO_u8SetPinDirection+0x1a6>
    10da:	2f 81       	ldd	r18, Y+7	; 0x07
    10dc:	38 85       	ldd	r19, Y+8	; 0x08
    10de:	21 30       	cpi	r18, 0x01	; 1
    10e0:	31 05       	cpc	r19, r1
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <DIO_u8SetPinDirection+0x17e>
    10e4:	61 c0       	rjmp	.+194    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
    10e6:	a4 e3       	ldi	r26, 0x34	; 52
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e4 e3       	ldi	r30, 0x34	; 52
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_u8SetPinDirection+0x19c>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_u8SetPinDirection+0x198>
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	4d c0       	rjmp	.+154    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
    110e:	a4 e3       	ldi	r26, 0x34	; 52
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e4 e3       	ldi	r30, 0x34	; 52
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_u8SetPinDirection+0x1c4>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_u8SetPinDirection+0x1c0>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	38 c0       	rjmp	.+112    	; 0x11a8 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTD:
				switch(Copy_PinDirection)
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3e 83       	std	Y+6, r19	; 0x06
    1140:	2d 83       	std	Y+5, r18	; 0x05
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	c9 f0       	breq	.+50     	; 0x117c <DIO_u8SetPinDirection+0x214>
    114a:	2d 81       	ldd	r18, Y+5	; 0x05
    114c:	3e 81       	ldd	r19, Y+6	; 0x06
    114e:	21 30       	cpi	r18, 0x01	; 1
    1150:	31 05       	cpc	r19, r1
    1152:	51 f5       	brne	.+84     	; 0x11a8 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
    1154:	a1 e3       	ldi	r26, 0x31	; 49
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e1 e3       	ldi	r30, 0x31	; 49
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8SetPinDirection+0x20a>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8SetPinDirection+0x206>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
    117c:	a1 e3       	ldi	r26, 0x31	; 49
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e1 e3       	ldi	r30, 0x31	; 49
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_u8SetPinDirection+0x232>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_u8SetPinDirection+0x22e>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <DIO_u8SetPinDirection+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    11a6:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11aa:	2e 96       	adiw	r28, 0x0e	; 14
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinValue)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	2e 97       	sbiw	r28, 0x0e	; 14
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	6b 83       	std	Y+3, r22	; 0x03
    11d4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 30       	cpi	r24, 0x08	; 8
    11de:	08 f0       	brcs	.+2      	; 0x11e2 <DIO_u8SetPinValue+0x26>
    11e0:	08 c1       	rjmp	.+528    	; 0x13f2 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3e 87       	std	Y+14, r19	; 0x0e
    11ea:	2d 87       	std	Y+13, r18	; 0x0d
    11ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_u8SetPinValue+0x3c>
    11f6:	50 c0       	rjmp	.+160    	; 0x1298 <DIO_u8SetPinValue+0xdc>
    11f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    11fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	2c f4       	brge	.+10     	; 0x120c <DIO_u8SetPinValue+0x50>
    1202:	8d 85       	ldd	r24, Y+13	; 0x0d
    1204:	9e 85       	ldd	r25, Y+14	; 0x0e
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	71 f0       	breq	.+28     	; 0x1226 <DIO_u8SetPinValue+0x6a>
    120a:	f1 c0       	rjmp	.+482    	; 0x13ee <DIO_u8SetPinValue+0x232>
    120c:	2d 85       	ldd	r18, Y+13	; 0x0d
    120e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	31 05       	cpc	r19, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <DIO_u8SetPinValue+0x5c>
    1216:	79 c0       	rjmp	.+242    	; 0x130a <DIO_u8SetPinValue+0x14e>
    1218:	8d 85       	ldd	r24, Y+13	; 0x0d
    121a:	9e 85       	ldd	r25, Y+14	; 0x0e
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <DIO_u8SetPinValue+0x68>
    1222:	ac c0       	rjmp	.+344    	; 0x137c <DIO_u8SetPinValue+0x1c0>
    1224:	e4 c0       	rjmp	.+456    	; 0x13ee <DIO_u8SetPinValue+0x232>
			{
				case DIO_u8_PORTA:
					switch (Copy_PinValue)
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3c 87       	std	Y+12, r19	; 0x0c
    122e:	2b 87       	std	Y+11, r18	; 0x0b
    1230:	8b 85       	ldd	r24, Y+11	; 0x0b
    1232:	9c 85       	ldd	r25, Y+12	; 0x0c
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	c9 f0       	breq	.+50     	; 0x126a <DIO_u8SetPinValue+0xae>
    1238:	2b 85       	ldd	r18, Y+11	; 0x0b
    123a:	3c 85       	ldd	r19, Y+12	; 0x0c
    123c:	21 30       	cpi	r18, 0x01	; 1
    123e:	31 05       	cpc	r19, r1
    1240:	49 f5       	brne	.+82     	; 0x1294 <DIO_u8SetPinValue+0xd8>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
    1242:	ab e3       	ldi	r26, 0x3B	; 59
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e3       	ldi	r30, 0x3B	; 59
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8SetPinValue+0xa4>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8SetPinValue+0xa0>
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	c5 c0       	rjmp	.+394    	; 0x13f4 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
    126a:	ab e3       	ldi	r26, 0x3B	; 59
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_u8SetPinValue+0xcc>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_u8SetPinValue+0xc8>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	b0 c0       	rjmp	.+352    	; 0x13f4 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1294:	19 82       	std	Y+1, r1	; 0x01
    1296:	ae c0       	rjmp	.+348    	; 0x13f4 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTB:
					switch (Copy_PinValue)
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3a 87       	std	Y+10, r19	; 0x0a
    12a0:	29 87       	std	Y+9, r18	; 0x09
    12a2:	89 85       	ldd	r24, Y+9	; 0x09
    12a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	c9 f0       	breq	.+50     	; 0x12dc <DIO_u8SetPinValue+0x120>
    12aa:	29 85       	ldd	r18, Y+9	; 0x09
    12ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ae:	21 30       	cpi	r18, 0x01	; 1
    12b0:	31 05       	cpc	r19, r1
    12b2:	49 f5       	brne	.+82     	; 0x1306 <DIO_u8SetPinValue+0x14a>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    12b4:	a8 e3       	ldi	r26, 0x38	; 56
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8SetPinValue+0x116>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_u8SetPinValue+0x112>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	8c c0       	rjmp	.+280    	; 0x13f4 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    12dc:	a8 e3       	ldi	r26, 0x38	; 56
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_u8SetPinValue+0x13e>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_u8SetPinValue+0x13a>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	77 c0       	rjmp	.+238    	; 0x13f4 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1306:	19 82       	std	Y+1, r1	; 0x01
    1308:	75 c0       	rjmp	.+234    	; 0x13f4 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTC:
					switch (Copy_PinValue)
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	38 87       	std	Y+8, r19	; 0x08
    1312:	2f 83       	std	Y+7, r18	; 0x07
    1314:	8f 81       	ldd	r24, Y+7	; 0x07
    1316:	98 85       	ldd	r25, Y+8	; 0x08
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	c9 f0       	breq	.+50     	; 0x134e <DIO_u8SetPinValue+0x192>
    131c:	2f 81       	ldd	r18, Y+7	; 0x07
    131e:	38 85       	ldd	r19, Y+8	; 0x08
    1320:	21 30       	cpi	r18, 0x01	; 1
    1322:	31 05       	cpc	r19, r1
    1324:	49 f5       	brne	.+82     	; 0x1378 <DIO_u8SetPinValue+0x1bc>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    1326:	a5 e3       	ldi	r26, 0x35	; 53
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e5 e3       	ldi	r30, 0x35	; 53
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_u8SetPinValue+0x188>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_u8SetPinValue+0x184>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	53 c0       	rjmp	.+166    	; 0x13f4 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    134e:	a5 e3       	ldi	r26, 0x35	; 53
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e5 e3       	ldi	r30, 0x35	; 53
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_u8SetPinValue+0x1b0>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_u8SetPinValue+0x1ac>
    1370:	80 95       	com	r24
    1372:	84 23       	and	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	3e c0       	rjmp	.+124    	; 0x13f4 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1378:	19 82       	std	Y+1, r1	; 0x01
    137a:	3c c0       	rjmp	.+120    	; 0x13f4 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTD:
					switch (Copy_PinValue)
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3e 83       	std	Y+6, r19	; 0x06
    1384:	2d 83       	std	Y+5, r18	; 0x05
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	c9 f0       	breq	.+50     	; 0x13c0 <DIO_u8SetPinValue+0x204>
    138e:	2d 81       	ldd	r18, Y+5	; 0x05
    1390:	3e 81       	ldd	r19, Y+6	; 0x06
    1392:	21 30       	cpi	r18, 0x01	; 1
    1394:	31 05       	cpc	r19, r1
    1396:	49 f5       	brne	.+82     	; 0x13ea <DIO_u8SetPinValue+0x22e>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    1398:	a2 e3       	ldi	r26, 0x32	; 50
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_u8SetPinValue+0x1fa>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_u8SetPinValue+0x1f6>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	1a c0       	rjmp	.+52     	; 0x13f4 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    13c0:	a2 e3       	ldi	r26, 0x32	; 50
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_u8SetPinValue+0x222>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_u8SetPinValue+0x21e>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    13ea:	19 82       	std	Y+1, r1	; 0x01
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				default:Local_u8ErrorState = STD_TYPES_NOK;
    13ee:	19 82       	std	Y+1, r1	; 0x01
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <DIO_u8SetPinValue+0x238>
				
			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    13f2:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	2e 96       	adiw	r28, 0x0e	; 14
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 * Copy_pu8ReturnedPinValue )
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	28 97       	sbiw	r28, 0x08	; 8
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	8b 83       	std	Y+3, r24	; 0x03
    141e:	6c 83       	std	Y+4, r22	; 0x04
    1420:	5e 83       	std	Y+6, r21	; 0x06
    1422:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	08 f0       	brcs	.+2      	; 0x1430 <DIO_u8GetPinValue+0x28>
    142e:	9f c0       	rjmp	.+318    	; 0x156e <DIO_u8GetPinValue+0x166>
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	08 f0       	brcs	.+2      	; 0x1438 <DIO_u8GetPinValue+0x30>
    1436:	9b c0       	rjmp	.+310    	; 0x156e <DIO_u8GetPinValue+0x166>
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	09 f4       	brne	.+2      	; 0x1442 <DIO_u8GetPinValue+0x3a>
    1440:	96 c0       	rjmp	.+300    	; 0x156e <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	38 87       	std	Y+8, r19	; 0x08
    144a:	2f 83       	std	Y+7, r18	; 0x07
    144c:	4f 81       	ldd	r20, Y+7	; 0x07
    144e:	58 85       	ldd	r21, Y+8	; 0x08
    1450:	41 30       	cpi	r20, 0x01	; 1
    1452:	51 05       	cpc	r21, r1
    1454:	a9 f1       	breq	.+106    	; 0x14c0 <DIO_u8GetPinValue+0xb8>
    1456:	8f 81       	ldd	r24, Y+7	; 0x07
    1458:	98 85       	ldd	r25, Y+8	; 0x08
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	91 05       	cpc	r25, r1
    145e:	34 f4       	brge	.+12     	; 0x146c <DIO_u8GetPinValue+0x64>
    1460:	2f 81       	ldd	r18, Y+7	; 0x07
    1462:	38 85       	ldd	r19, Y+8	; 0x08
    1464:	21 15       	cp	r18, r1
    1466:	31 05       	cpc	r19, r1
    1468:	71 f0       	breq	.+28     	; 0x1486 <DIO_u8GetPinValue+0x7e>
    146a:	82 c0       	rjmp	.+260    	; 0x1570 <DIO_u8GetPinValue+0x168>
    146c:	4f 81       	ldd	r20, Y+7	; 0x07
    146e:	58 85       	ldd	r21, Y+8	; 0x08
    1470:	42 30       	cpi	r20, 0x02	; 2
    1472:	51 05       	cpc	r21, r1
    1474:	09 f4       	brne	.+2      	; 0x1478 <DIO_u8GetPinValue+0x70>
    1476:	41 c0       	rjmp	.+130    	; 0x14fa <DIO_u8GetPinValue+0xf2>
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	98 85       	ldd	r25, Y+8	; 0x08
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <DIO_u8GetPinValue+0x7c>
    1482:	58 c0       	rjmp	.+176    	; 0x1534 <DIO_u8GetPinValue+0x12c>
    1484:	75 c0       	rjmp	.+234    	; 0x1570 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA : 
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);
    1486:	e9 e3       	ldi	r30, 0x39	; 57
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a9 01       	movw	r20, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_u8GetPinValue+0x96>
    149a:	55 95       	asr	r21
    149c:	47 95       	ror	r20
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_u8GetPinValue+0x92>
    14a2:	ca 01       	movw	r24, r20
    14a4:	81 70       	andi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	88 23       	and	r24, r24
    14ac:	21 f4       	brne	.+8      	; 0x14b6 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    14ae:	ed 81       	ldd	r30, Y+5	; 0x05
    14b0:	fe 81       	ldd	r31, Y+6	; 0x06
    14b2:	10 82       	st	Z, r1
    14b4:	5d c0       	rjmp	.+186    	; 0x1570 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    14b6:	ed 81       	ldd	r30, Y+5	; 0x05
    14b8:	fe 81       	ldd	r31, Y+6	; 0x06
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	80 83       	st	Z, r24
    14be:	58 c0       	rjmp	.+176    	; 0x1570 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    14c0:	e6 e3       	ldi	r30, 0x36	; 54
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a9 01       	movw	r20, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_u8GetPinValue+0xd0>
    14d4:	55 95       	asr	r21
    14d6:	47 95       	ror	r20
    14d8:	8a 95       	dec	r24
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_u8GetPinValue+0xcc>
    14dc:	ca 01       	movw	r24, r20
    14de:	81 70       	andi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	88 23       	and	r24, r24
    14e6:	21 f4       	brne	.+8      	; 0x14f0 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    14e8:	ed 81       	ldd	r30, Y+5	; 0x05
    14ea:	fe 81       	ldd	r31, Y+6	; 0x06
    14ec:	10 82       	st	Z, r1
    14ee:	40 c0       	rjmp	.+128    	; 0x1570 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    14f0:	ed 81       	ldd	r30, Y+5	; 0x05
    14f2:	fe 81       	ldd	r31, Y+6	; 0x06
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 83       	st	Z, r24
    14f8:	3b c0       	rjmp	.+118    	; 0x1570 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    14fa:	e3 e3       	ldi	r30, 0x33	; 51
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a9 01       	movw	r20, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_u8GetPinValue+0x10a>
    150e:	55 95       	asr	r21
    1510:	47 95       	ror	r20
    1512:	8a 95       	dec	r24
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_u8GetPinValue+0x106>
    1516:	ca 01       	movw	r24, r20
    1518:	81 70       	andi	r24, 0x01	; 1
    151a:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	88 23       	and	r24, r24
    1520:	21 f4       	brne	.+8      	; 0x152a <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1522:	ed 81       	ldd	r30, Y+5	; 0x05
    1524:	fe 81       	ldd	r31, Y+6	; 0x06
    1526:	10 82       	st	Z, r1
    1528:	23 c0       	rjmp	.+70     	; 0x1570 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    152a:	ed 81       	ldd	r30, Y+5	; 0x05
    152c:	fe 81       	ldd	r31, Y+6	; 0x06
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 83       	st	Z, r24
    1532:	1e c0       	rjmp	.+60     	; 0x1570 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    1534:	e0 e3       	ldi	r30, 0x30	; 48
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a9 01       	movw	r20, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_u8GetPinValue+0x144>
    1548:	55 95       	asr	r21
    154a:	47 95       	ror	r20
    154c:	8a 95       	dec	r24
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_u8GetPinValue+0x140>
    1550:	ca 01       	movw	r24, r20
    1552:	81 70       	andi	r24, 0x01	; 1
    1554:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	88 23       	and	r24, r24
    155a:	21 f4       	brne	.+8      	; 0x1564 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    155c:	ed 81       	ldd	r30, Y+5	; 0x05
    155e:	fe 81       	ldd	r31, Y+6	; 0x06
    1560:	10 82       	st	Z, r1
    1562:	06 c0       	rjmp	.+12     	; 0x1570 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1564:	ed 81       	ldd	r30, Y+5	; 0x05
    1566:	fe 81       	ldd	r31, Y+6	; 0x06
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	80 83       	st	Z, r24
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    156e:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    1572:	28 96       	adiw	r28, 0x08	; 8
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <DIO_u8SetPortDirection>:
 
u8 DIO_u8SetPortDirection  (u8 Copy_u8PortId, u8 Copy_PortDirection)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	2d 97       	sbiw	r28, 0x0d	; 13
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_PortDirection == DIO_u8_OUTPUT  )||(Copy_PortDirection == DIO_u8_INPUT))
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	21 f0       	breq	.+8      	; 0x15ae <DIO_u8SetPortDirection+0x2a>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	88 23       	and	r24, r24
    15aa:	09 f0       	breq	.+2      	; 0x15ae <DIO_u8SetPortDirection+0x2a>
    15ac:	7f c0       	rjmp	.+254    	; 0x16ac <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3d 87       	std	Y+13, r19	; 0x0d
    15b6:	2c 87       	std	Y+12, r18	; 0x0c
    15b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	71 f1       	breq	.+92     	; 0x161e <DIO_u8SetPortDirection+0x9a>
    15c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <DIO_u8SetPortDirection+0x52>
    15cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	69 f0       	breq	.+26     	; 0x15ee <DIO_u8SetPortDirection+0x6a>
    15d4:	69 c0       	rjmp	.+210    	; 0x16a8 <DIO_u8SetPortDirection+0x124>
    15d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    15d8:	3d 85       	ldd	r19, Y+13	; 0x0d
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	b1 f1       	breq	.+108    	; 0x164c <DIO_u8SetPortDirection+0xc8>
    15e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <DIO_u8SetPortDirection+0x68>
    15ea:	47 c0       	rjmp	.+142    	; 0x167a <DIO_u8SetPortDirection+0xf6>
    15ec:	5d c0       	rjmp	.+186    	; 0x16a8 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA : 
				switch (Copy_PortDirection)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3b 87       	std	Y+11, r19	; 0x0b
    15f6:	2a 87       	std	Y+10, r18	; 0x0a
    15f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	59 f0       	breq	.+22     	; 0x1616 <DIO_u8SetPortDirection+0x92>
    1600:	2a 85       	ldd	r18, Y+10	; 0x0a
    1602:	3b 85       	ldd	r19, Y+11	; 0x0b
    1604:	21 30       	cpi	r18, 0x01	; 1
    1606:	31 05       	cpc	r19, r1
    1608:	09 f0       	breq	.+2      	; 0x160c <DIO_u8SetPortDirection+0x88>
    160a:	51 c0       	rjmp	.+162    	; 0x16ae <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRA_REG = 0xff; break;
    160c:	ea e3       	ldi	r30, 0x3A	; 58
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8f ef       	ldi	r24, 0xFF	; 255
    1612:	80 83       	st	Z, r24
    1614:	4c c0       	rjmp	.+152    	; 0x16ae <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRA_REG = 0x00; break;
    1616:	ea e3       	ldi	r30, 0x3A	; 58
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	10 82       	st	Z, r1
    161c:	48 c0       	rjmp	.+144    	; 0x16ae <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTB :
				switch (Copy_PortDirection)
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	39 87       	std	Y+9, r19	; 0x09
    1626:	28 87       	std	Y+8, r18	; 0x08
    1628:	88 85       	ldd	r24, Y+8	; 0x08
    162a:	99 85       	ldd	r25, Y+9	; 0x09
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	51 f0       	breq	.+20     	; 0x1644 <DIO_u8SetPortDirection+0xc0>
    1630:	28 85       	ldd	r18, Y+8	; 0x08
    1632:	39 85       	ldd	r19, Y+9	; 0x09
    1634:	21 30       	cpi	r18, 0x01	; 1
    1636:	31 05       	cpc	r19, r1
    1638:	d1 f5       	brne	.+116    	; 0x16ae <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRB_REG = 0xff; break;
    163a:	e7 e3       	ldi	r30, 0x37	; 55
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	80 83       	st	Z, r24
    1642:	35 c0       	rjmp	.+106    	; 0x16ae <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRB_REG = 0x00; break;
    1644:	e7 e3       	ldi	r30, 0x37	; 55
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	10 82       	st	Z, r1
    164a:	31 c0       	rjmp	.+98     	; 0x16ae <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTC :
				switch (Copy_PortDirection)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3f 83       	std	Y+7, r19	; 0x07
    1654:	2e 83       	std	Y+6, r18	; 0x06
    1656:	8e 81       	ldd	r24, Y+6	; 0x06
    1658:	9f 81       	ldd	r25, Y+7	; 0x07
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	51 f0       	breq	.+20     	; 0x1672 <DIO_u8SetPortDirection+0xee>
    165e:	2e 81       	ldd	r18, Y+6	; 0x06
    1660:	3f 81       	ldd	r19, Y+7	; 0x07
    1662:	21 30       	cpi	r18, 0x01	; 1
    1664:	31 05       	cpc	r19, r1
    1666:	19 f5       	brne	.+70     	; 0x16ae <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRC_REG = 0xff; break;
    1668:	e4 e3       	ldi	r30, 0x34	; 52
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	80 83       	st	Z, r24
    1670:	1e c0       	rjmp	.+60     	; 0x16ae <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRC_REG = 0x00; break;
    1672:	e4 e3       	ldi	r30, 0x34	; 52
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	10 82       	st	Z, r1
    1678:	1a c0       	rjmp	.+52     	; 0x16ae <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTD :
				switch (Copy_PortDirection)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3d 83       	std	Y+5, r19	; 0x05
    1682:	2c 83       	std	Y+4, r18	; 0x04
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	51 f0       	breq	.+20     	; 0x16a0 <DIO_u8SetPortDirection+0x11c>
    168c:	2c 81       	ldd	r18, Y+4	; 0x04
    168e:	3d 81       	ldd	r19, Y+5	; 0x05
    1690:	21 30       	cpi	r18, 0x01	; 1
    1692:	31 05       	cpc	r19, r1
    1694:	61 f4       	brne	.+24     	; 0x16ae <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRD_REG = 0xff; break;
    1696:	e1 e3       	ldi	r30, 0x31	; 49
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	80 83       	st	Z, r24
    169e:	07 c0       	rjmp	.+14     	; 0x16ae <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRD_REG = 0x00; break;
    16a0:	e1 e3       	ldi	r30, 0x31	; 49
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	10 82       	st	Z, r1
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			default      :Local_u8ErrorState =STD_TYPES_NOK;
    16a8:	19 82       	std	Y+1, r1	; 0x01
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <DIO_u8SetPortDirection+0x12a>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    16ac:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b0:	2d 96       	adiw	r28, 0x0d	; 13
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue       (u8 Copy_u8PortId, u8 Copy_PortValue)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <DIO_u8SetPortValue+0x6>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <DIO_u8SetPortValue+0x8>
    16ca:	0f 92       	push	r0
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	8a 83       	std	Y+2, r24	; 0x02
    16d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3d 83       	std	Y+5, r19	; 0x05
    16e0:	2c 83       	std	Y+4, r18	; 0x04
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	d1 f0       	breq	.+52     	; 0x1720 <DIO_u8SetPortValue+0x5e>
    16ec:	2c 81       	ldd	r18, Y+4	; 0x04
    16ee:	3d 81       	ldd	r19, Y+5	; 0x05
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <DIO_u8SetPortValue+0x3e>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <DIO_u8SetPortValue+0x54>
    16fe:	1f c0       	rjmp	.+62     	; 0x173e <DIO_u8SetPortValue+0x7c>
    1700:	2c 81       	ldd	r18, Y+4	; 0x04
    1702:	3d 81       	ldd	r19, Y+5	; 0x05
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	81 f0       	breq	.+32     	; 0x172a <DIO_u8SetPortValue+0x68>
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	81 f0       	breq	.+32     	; 0x1734 <DIO_u8SetPortValue+0x72>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_PortValue; break;
    1716:	eb e3       	ldi	r30, 0x3B	; 59
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	80 83       	st	Z, r24
    171e:	10 c0       	rjmp	.+32     	; 0x1740 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_PortValue; break;
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	80 83       	st	Z, r24
    1728:	0b c0       	rjmp	.+22     	; 0x1740 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_PortValue; break;
    172a:	e5 e3       	ldi	r30, 0x35	; 53
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	80 83       	st	Z, r24
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_PortValue; break;
    1734:	e2 e3       	ldi	r30, 0x32	; 50
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	80 83       	st	Z, r24
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <DIO_u8SetPortValue+0x7e>
		default           :Local_u8ErrorState = STD_TYPES_NOK;
    173e:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return Local_u8ErrorState;
    1740:	89 81       	ldd	r24, Y+1	; 0x01
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue       (u8 Copy_u8PortId , u8 * Copy_pu8ReturnedPortValue )
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <DIO_u8GetPortValue+0x6>
    1758:	00 d0       	rcall	.+0      	; 0x175a <DIO_u8GetPortValue+0x8>
    175a:	00 d0       	rcall	.+0      	; 0x175c <DIO_u8GetPortValue+0xa>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	8a 83       	std	Y+2, r24	; 0x02
    1762:	7c 83       	std	Y+4, r23	; 0x04
    1764:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	e9 f1       	breq	.+122    	; 0x17ec <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3e 83       	std	Y+6, r19	; 0x06
    177a:	2d 83       	std	Y+5, r18	; 0x05
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	e1 f0       	breq	.+56     	; 0x17be <DIO_u8GetPortValue+0x6c>
    1786:	2d 81       	ldd	r18, Y+5	; 0x05
    1788:	3e 81       	ldd	r19, Y+6	; 0x06
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	2c f4       	brge	.+10     	; 0x179a <DIO_u8GetPortValue+0x48>
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	61 f0       	breq	.+24     	; 0x17b0 <DIO_u8GetPortValue+0x5e>
    1798:	27 c0       	rjmp	.+78     	; 0x17e8 <DIO_u8GetPortValue+0x96>
    179a:	2d 81       	ldd	r18, Y+5	; 0x05
    179c:	3e 81       	ldd	r19, Y+6	; 0x06
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	a1 f0       	breq	.+40     	; 0x17cc <DIO_u8GetPortValue+0x7a>
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	b1 f0       	breq	.+44     	; 0x17da <DIO_u8GetPortValue+0x88>
    17ae:	1c c0       	rjmp	.+56     	; 0x17e8 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA : *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG; break;
    17b0:	e9 e3       	ldi	r30, 0x39	; 57
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	eb 81       	ldd	r30, Y+3	; 0x03
    17b8:	fc 81       	ldd	r31, Y+4	; 0x04
    17ba:	80 83       	st	Z, r24
    17bc:	18 c0       	rjmp	.+48     	; 0x17ee <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB : *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG; break;
    17be:	e6 e3       	ldi	r30, 0x36	; 54
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	eb 81       	ldd	r30, Y+3	; 0x03
    17c6:	fc 81       	ldd	r31, Y+4	; 0x04
    17c8:	80 83       	st	Z, r24
    17ca:	11 c0       	rjmp	.+34     	; 0x17ee <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC : *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG; break; 
    17cc:	e3 e3       	ldi	r30, 0x33	; 51
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	eb 81       	ldd	r30, Y+3	; 0x03
    17d4:	fc 81       	ldd	r31, Y+4	; 0x04
    17d6:	80 83       	st	Z, r24
    17d8:	0a c0       	rjmp	.+20     	; 0x17ee <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD : *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG; break;
    17da:	e0 e3       	ldi	r30, 0x30	; 48
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	eb 81       	ldd	r30, Y+3	; 0x03
    17e2:	fc 81       	ldd	r31, Y+4	; 0x04
    17e4:	80 83       	st	Z, r24
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <DIO_u8GetPortValue+0x9c>
			default           : Local_u8ErrorState = STD_TYPES_NOK;
    17e8:	19 82       	std	Y+1, r1	; 0x01
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    17ec:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	26 96       	adiw	r28, 0x06	; 6
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <LCD_voidInit>:
/*HAL*/
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"
void LCD_voidInit(void)
{
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	cc 54       	subi	r28, 0x4C	; 76
    1810:	d0 40       	sbci	r29, 0x00	; 0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	fe 01       	movw	r30, r28
    181e:	e7 5b       	subi	r30, 0xB7	; 183
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	ac e0       	ldi	r26, 0x0C	; 12
    1828:	b2 e4       	ldi	r27, 0x42	; 66
    182a:	80 83       	st	Z, r24
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	a2 83       	std	Z+2, r26	; 0x02
    1830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	8e 01       	movw	r16, r28
    1834:	0b 5b       	subi	r16, 0xBB	; 187
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	e7 5b       	subi	r30, 0xB7	; 183
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a ef       	ldi	r20, 0xFA	; 250
    184c:	54 e4       	ldi	r21, 0x44	; 68
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	80 83       	st	Z, r24
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	a2 83       	std	Z+2, r26	; 0x02
    185e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1860:	fe 01       	movw	r30, r28
    1862:	eb 5b       	subi	r30, 0xBB	; 187
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e8       	ldi	r20, 0x80	; 128
    1874:	5f e3       	ldi	r21, 0x3F	; 63
    1876:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    187a:	88 23       	and	r24, r24
    187c:	44 f4       	brge	.+16     	; 0x188e <LCD_voidInit+0x8c>
		__ticks = 1;
    187e:	fe 01       	movw	r30, r28
    1880:	ed 5b       	subi	r30, 0xBD	; 189
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	64 c0       	rjmp	.+200    	; 0x1956 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    188e:	fe 01       	movw	r30, r28
    1890:	eb 5b       	subi	r30, 0xBB	; 187
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <LCD_voidInit+0xac>
    18ac:	43 c0       	rjmp	.+134    	; 0x1934 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	fe 01       	movw	r30, r28
    18b0:	e7 5b       	subi	r30, 0xB7	; 183
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8e 01       	movw	r16, r28
    18ce:	0d 5b       	subi	r16, 0xBD	; 189
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	f8 01       	movw	r30, r16
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <LCD_voidInit+0x122>
    18e6:	fe 01       	movw	r30, r28
    18e8:	ef 5b       	subi	r30, 0xBF	; 191
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f4:	fe 01       	movw	r30, r28
    18f6:	ef 5b       	subi	r30, 0xBF	; 191
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_voidInit+0xfc>
    1902:	fe 01       	movw	r30, r28
    1904:	ef 5b       	subi	r30, 0xBF	; 191
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	de 01       	movw	r26, r28
    190e:	ad 5b       	subi	r26, 0xBD	; 189
    1910:	bf 4f       	sbci	r27, 0xFF	; 255
    1912:	fe 01       	movw	r30, r28
    1914:	ed 5b       	subi	r30, 0xBD	; 189
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	fe 01       	movw	r30, r28
    1926:	ed 5b       	subi	r30, 0xBD	; 189
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	d1 f6       	brne	.-76     	; 0x18e6 <LCD_voidInit+0xe4>
    1932:	24 c0       	rjmp	.+72     	; 0x197c <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	8e 01       	movw	r16, r28
    1936:	0d 5b       	subi	r16, 0xBD	; 189
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	fe 01       	movw	r30, r28
    193c:	eb 5b       	subi	r30, 0xBB	; 187
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	60 81       	ld	r22, Z
    1942:	71 81       	ldd	r23, Z+1	; 0x01
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	f8 01       	movw	r30, r16
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
    1956:	fe 01       	movw	r30, r28
    1958:	ed 5b       	subi	r30, 0xBD	; 189
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	fe 01       	movw	r30, r28
    1962:	ff 96       	adiw	r30, 0x3f	; 63
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
    1968:	fe 01       	movw	r30, r28
    196a:	ff 96       	adiw	r30, 0x3f	; 63
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_voidInit+0x16e>
    1974:	fe 01       	movw	r30, r28
    1976:	ff 96       	adiw	r30, 0x3f	; 63
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set CMND*/
	LCD_voidSendCmnd(CONC(0,0,1,LCD_u8_MODE,LCD_u8_INTIAL_LINE_NUM,LCD_u8_INTIAL_FONT,0,0));
    197c:	88 e3       	ldi	r24, 0x38	; 56
    197e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e2       	ldi	r26, 0x20	; 32
    1988:	b2 e4       	ldi	r27, 0x42	; 66
    198a:	8b af       	std	Y+59, r24	; 0x3b
    198c:	9c af       	std	Y+60, r25	; 0x3c
    198e:	ad af       	std	Y+61, r26	; 0x3d
    1990:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1992:	6b ad       	ldd	r22, Y+59	; 0x3b
    1994:	7c ad       	ldd	r23, Y+60	; 0x3c
    1996:	8d ad       	ldd	r24, Y+61	; 0x3d
    1998:	9e ad       	ldd	r25, Y+62	; 0x3e
    199a:	2b ea       	ldi	r18, 0xAB	; 171
    199c:	3a ea       	ldi	r19, 0xAA	; 170
    199e:	4a e2       	ldi	r20, 0x2A	; 42
    19a0:	50 e4       	ldi	r21, 0x40	; 64
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8f ab       	std	Y+55, r24	; 0x37
    19ac:	98 af       	std	Y+56, r25	; 0x38
    19ae:	a9 af       	std	Y+57, r26	; 0x39
    19b0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19b2:	6f a9       	ldd	r22, Y+55	; 0x37
    19b4:	78 ad       	ldd	r23, Y+56	; 0x38
    19b6:	89 ad       	ldd	r24, Y+57	; 0x39
    19b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	1c f4       	brge	.+6      	; 0x19d0 <LCD_voidInit+0x1ce>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	8e ab       	std	Y+54, r24	; 0x36
    19ce:	91 c0       	rjmp	.+290    	; 0x1af2 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    19d0:	6f a9       	ldd	r22, Y+55	; 0x37
    19d2:	78 ad       	ldd	r23, Y+56	; 0x38
    19d4:	89 ad       	ldd	r24, Y+57	; 0x39
    19d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	53 e4       	ldi	r21, 0x43	; 67
    19e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	0c f0       	brlt	.+2      	; 0x19ea <LCD_voidInit+0x1e8>
    19e8:	7b c0       	rjmp	.+246    	; 0x1ae0 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    19ea:	6b ad       	ldd	r22, Y+59	; 0x3b
    19ec:	7c ad       	ldd	r23, Y+60	; 0x3c
    19ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    19f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a e7       	ldi	r20, 0x7A	; 122
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8a ab       	std	Y+50, r24	; 0x32
    1a04:	9b ab       	std	Y+51, r25	; 0x33
    1a06:	ac ab       	std	Y+52, r26	; 0x34
    1a08:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	6a a9       	ldd	r22, Y+50	; 0x32
    1a0c:	7b a9       	ldd	r23, Y+51	; 0x33
    1a0e:	8c a9       	ldd	r24, Y+52	; 0x34
    1a10:	9d a9       	ldd	r25, Y+53	; 0x35
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a ef       	ldi	r20, 0xFA	; 250
    1a18:	54 e4       	ldi	r21, 0x44	; 68
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8e a7       	std	Y+46, r24	; 0x2e
    1a24:	9f a7       	std	Y+47, r25	; 0x2f
    1a26:	a8 ab       	std	Y+48, r26	; 0x30
    1a28:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a2e:	88 a9       	ldd	r24, Y+48	; 0x30
    1a30:	99 a9       	ldd	r25, Y+49	; 0x31
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <LCD_voidInit+0x24a>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9d a7       	std	Y+45, r25	; 0x2d
    1a48:	8c a7       	std	Y+44, r24	; 0x2c
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1a4c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a4e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a50:	88 a9       	ldd	r24, Y+48	; 0x30
    1a52:	99 a9       	ldd	r25, Y+49	; 0x31
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	3f ef       	ldi	r19, 0xFF	; 255
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	57 e4       	ldi	r21, 0x47	; 71
    1a5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	6a a9       	ldd	r22, Y+50	; 0x32
    1a66:	7b a9       	ldd	r23, Y+51	; 0x33
    1a68:	8c a9       	ldd	r24, Y+52	; 0x34
    1a6a:	9d a9       	ldd	r25, Y+53	; 0x35
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9d a7       	std	Y+45, r25	; 0x2d
    1a8a:	8c a7       	std	Y+44, r24	; 0x2c
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <LCD_voidInit+0x2aa>
    1a8e:	88 ec       	ldi	r24, 0xC8	; 200
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9b a7       	std	Y+43, r25	; 0x2b
    1a94:	8a a7       	std	Y+42, r24	; 0x2a
    1a96:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a98:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_voidInit+0x298>
    1a9e:	9b a7       	std	Y+43, r25	; 0x2b
    1aa0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aa4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	9d a7       	std	Y+45, r25	; 0x2d
    1aaa:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aae:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <LCD_voidInit+0x28c>
    1ab4:	24 c0       	rjmp	.+72     	; 0x1afe <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ab8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aba:	88 a9       	ldd	r24, Y+48	; 0x30
    1abc:	99 a9       	ldd	r25, Y+49	; 0x31
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9d a7       	std	Y+45, r25	; 0x2d
    1ac8:	8c a7       	std	Y+44, r24	; 0x2c
    1aca:	8c a5       	ldd	r24, Y+44	; 0x2c
    1acc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ace:	99 a7       	std	Y+41, r25	; 0x29
    1ad0:	88 a7       	std	Y+40, r24	; 0x28
    1ad2:	88 a5       	ldd	r24, Y+40	; 0x28
    1ad4:	99 a5       	ldd	r25, Y+41	; 0x29
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_voidInit+0x2d4>
    1ada:	99 a7       	std	Y+41, r25	; 0x29
    1adc:	88 a7       	std	Y+40, r24	; 0x28
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ae0:	6f a9       	ldd	r22, Y+55	; 0x37
    1ae2:	78 ad       	ldd	r23, Y+56	; 0x38
    1ae4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ae6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8e ab       	std	Y+54, r24	; 0x36
    1af2:	8e a9       	ldd	r24, Y+54	; 0x36
    1af4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1af6:	8f a1       	ldd	r24, Y+39	; 0x27
    1af8:	8a 95       	dec	r24
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_voidInit+0x2f6>
    1afc:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/* Display NO/OFF Control */
	LCD_voidSendCmnd(CONC(0,0,0,0,1,1,LCD_u8_INTIAL_CURSOR_DISPLAY,LCD_u8_INTIAL_CURSOR_BLINK));
    1afe:	8c e0       	ldi	r24, 0x0C	; 12
    1b00:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a0 e2       	ldi	r26, 0x20	; 32
    1b0a:	b2 e4       	ldi	r27, 0x42	; 66
    1b0c:	8b a3       	std	Y+35, r24	; 0x23
    1b0e:	9c a3       	std	Y+36, r25	; 0x24
    1b10:	ad a3       	std	Y+37, r26	; 0x25
    1b12:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b14:	6b a1       	ldd	r22, Y+35	; 0x23
    1b16:	7c a1       	ldd	r23, Y+36	; 0x24
    1b18:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1c:	2b ea       	ldi	r18, 0xAB	; 171
    1b1e:	3a ea       	ldi	r19, 0xAA	; 170
    1b20:	4a e2       	ldi	r20, 0x2A	; 42
    1b22:	50 e4       	ldi	r21, 0x40	; 64
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b2e:	98 a3       	std	Y+32, r25	; 0x20
    1b30:	a9 a3       	std	Y+33, r26	; 0x21
    1b32:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b34:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b36:	78 a1       	ldd	r23, Y+32	; 0x20
    1b38:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	1c f4       	brge	.+6      	; 0x1b52 <LCD_voidInit+0x350>
		__ticks = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b50:	91 c0       	rjmp	.+290    	; 0x1c74 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1b52:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b54:	78 a1       	ldd	r23, Y+32	; 0x20
    1b56:	89 a1       	ldd	r24, Y+33	; 0x21
    1b58:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	53 e4       	ldi	r21, 0x43	; 67
    1b62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	0c f0       	brlt	.+2      	; 0x1b6c <LCD_voidInit+0x36a>
    1b6a:	7b c0       	rjmp	.+246    	; 0x1c62 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b70:	8d a1       	ldd	r24, Y+37	; 0x25
    1b72:	9e a1       	ldd	r25, Y+38	; 0x26
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a e7       	ldi	r20, 0x7A	; 122
    1b7a:	54 e4       	ldi	r21, 0x44	; 68
    1b7c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8a 8f       	std	Y+26, r24	; 0x1a
    1b86:	9b 8f       	std	Y+27, r25	; 0x1b
    1b88:	ac 8f       	std	Y+28, r26	; 0x1c
    1b8a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b8e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b92:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a ef       	ldi	r20, 0xFA	; 250
    1b9a:	54 e4       	ldi	r21, 0x44	; 68
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8e 8b       	std	Y+22, r24	; 0x16
    1ba6:	9f 8b       	std	Y+23, r25	; 0x17
    1ba8:	a8 8f       	std	Y+24, r26	; 0x18
    1baa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1bac:	6e 89       	ldd	r22, Y+22	; 0x16
    1bae:	7f 89       	ldd	r23, Y+23	; 0x17
    1bb0:	88 8d       	ldd	r24, Y+24	; 0x18
    1bb2:	99 8d       	ldd	r25, Y+25	; 0x19
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <LCD_voidInit+0x3cc>
		__ticks = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9d 8b       	std	Y+21, r25	; 0x15
    1bca:	8c 8b       	std	Y+20, r24	; 0x14
    1bcc:	3f c0       	rjmp	.+126    	; 0x1c4c <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1bce:	6e 89       	ldd	r22, Y+22	; 0x16
    1bd0:	7f 89       	ldd	r23, Y+23	; 0x17
    1bd2:	88 8d       	ldd	r24, Y+24	; 0x18
    1bd4:	99 8d       	ldd	r25, Y+25	; 0x19
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	4c f5       	brge	.+82     	; 0x1c38 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1be8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9d 8b       	std	Y+21, r25	; 0x15
    1c0c:	8c 8b       	std	Y+20, r24	; 0x14
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <LCD_voidInit+0x42c>
    1c10:	88 ec       	ldi	r24, 0xC8	; 200
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9b 8b       	std	Y+19, r25	; 0x13
    1c16:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c18:	8a 89       	ldd	r24, Y+18	; 0x12
    1c1a:	9b 89       	ldd	r25, Y+19	; 0x13
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_voidInit+0x41a>
    1c20:	9b 8b       	std	Y+19, r25	; 0x13
    1c22:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c24:	8c 89       	ldd	r24, Y+20	; 0x14
    1c26:	9d 89       	ldd	r25, Y+21	; 0x15
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	9d 8b       	std	Y+21, r25	; 0x15
    1c2c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c30:	9d 89       	ldd	r25, Y+21	; 0x15
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	69 f7       	brne	.-38     	; 0x1c10 <LCD_voidInit+0x40e>
    1c36:	24 c0       	rjmp	.+72     	; 0x1c80 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c38:	6e 89       	ldd	r22, Y+22	; 0x16
    1c3a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c3c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c3e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9d 8b       	std	Y+21, r25	; 0x15
    1c4a:	8c 8b       	std	Y+20, r24	; 0x14
    1c4c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c4e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c50:	99 8b       	std	Y+17, r25	; 0x11
    1c52:	88 8b       	std	Y+16, r24	; 0x10
    1c54:	88 89       	ldd	r24, Y+16	; 0x10
    1c56:	99 89       	ldd	r25, Y+17	; 0x11
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_voidInit+0x456>
    1c5c:	99 8b       	std	Y+17, r25	; 0x11
    1c5e:	88 8b       	std	Y+16, r24	; 0x10
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c62:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c64:	78 a1       	ldd	r23, Y+32	; 0x20
    1c66:	89 a1       	ldd	r24, Y+33	; 0x21
    1c68:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	8e 8f       	std	Y+30, r24	; 0x1e
    1c74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c76:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7a:	8a 95       	dec	r24
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_voidInit+0x478>
    1c7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/* Display Clear */
	LCD_voidSendCmnd(0b00000001);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a0 e0       	ldi	r26, 0x00	; 0
    1c8c:	b0 e4       	ldi	r27, 0x40	; 64
    1c8e:	8b 87       	std	Y+11, r24	; 0x0b
    1c90:	9c 87       	std	Y+12, r25	; 0x0c
    1c92:	ad 87       	std	Y+13, r26	; 0x0d
    1c94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	4a ef       	ldi	r20, 0xFA	; 250
    1ca4:	54 e4       	ldi	r21, 0x44	; 68
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	8f 83       	std	Y+7, r24	; 0x07
    1cb0:	98 87       	std	Y+8, r25	; 0x08
    1cb2:	a9 87       	std	Y+9, r26	; 0x09
    1cb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb8:	78 85       	ldd	r23, Y+8	; 0x08
    1cba:	89 85       	ldd	r24, Y+9	; 0x09
    1cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e8       	ldi	r20, 0x80	; 128
    1cc4:	5f e3       	ldi	r21, 0x3F	; 63
    1cc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cca:	88 23       	and	r24, r24
    1ccc:	2c f4       	brge	.+10     	; 0x1cd8 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
    1cd6:	3f c0       	rjmp	.+126    	; 0x1d56 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cda:	78 85       	ldd	r23, Y+8	; 0x08
    1cdc:	89 85       	ldd	r24, Y+9	; 0x09
    1cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	3f ef       	ldi	r19, 0xFF	; 255
    1ce4:	4f e7       	ldi	r20, 0x7F	; 127
    1ce6:	57 e4       	ldi	r21, 0x47	; 71
    1ce8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cec:	18 16       	cp	r1, r24
    1cee:	4c f5       	brge	.+82     	; 0x1d42 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e2       	ldi	r20, 0x20	; 32
    1cfe:	51 e4       	ldi	r21, 0x41	; 65
    1d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <LCD_voidInit+0x536>
    1d1a:	88 ec       	ldi	r24, 0xC8	; 200
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_voidInit+0x524>
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	69 f7       	brne	.-38     	; 0x1d1a <LCD_voidInit+0x518>
    1d40:	14 c0       	rjmp	.+40     	; 0x1d6a <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d42:	6f 81       	ldd	r22, Y+7	; 0x07
    1d44:	78 85       	ldd	r23, Y+8	; 0x08
    1d46:	89 85       	ldd	r24, Y+9	; 0x09
    1d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9e 83       	std	Y+6, r25	; 0x06
    1d54:	8d 83       	std	Y+5, r24	; 0x05
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_voidInit+0x560>
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* Entry Mood Set */
	LCD_voidSendCmnd(0b00000110);
    1d6a:	86 e0       	ldi	r24, 0x06	; 6
    1d6c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
	
}
    1d70:	c4 5b       	subi	r28, 0xB4	; 180
    1d72:	df 4f       	sbci	r29, 0xFF	; 255
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	08 95       	ret

00001d88 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	69 97       	sbiw	r28, 0x19	; 25
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	89 8f       	std	Y+25, r24	; 0x19
	#if LCD_u8_MODE == BIT_LENGTH_8
	/* step-1:Rs = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_LOW);
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    1da8:	83 e0       	ldi	r24, 0x03	; 3
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
	/* Write command */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Cmnd  );
    1db2:	82 e0       	ldi	r24, 0x02	; 2
    1db4:	69 8d       	ldd	r22, Y+25	; 0x19
    1db6:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	41 e0       	ldi	r20, 0x01	; 1
    1dc0:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e8       	ldi	r26, 0x80	; 128
    1dca:	bf e3       	ldi	r27, 0x3F	; 63
    1dcc:	8d 8b       	std	Y+21, r24	; 0x15
    1dce:	9e 8b       	std	Y+22, r25	; 0x16
    1dd0:	af 8b       	std	Y+23, r26	; 0x17
    1dd2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dda:	98 8d       	ldd	r25, Y+24	; 0x18
    1ddc:	2b ea       	ldi	r18, 0xAB	; 171
    1dde:	3a ea       	ldi	r19, 0xAA	; 170
    1de0:	4a e2       	ldi	r20, 0x2A	; 42
    1de2:	50 e4       	ldi	r21, 0x40	; 64
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	89 8b       	std	Y+17, r24	; 0x11
    1dee:	9a 8b       	std	Y+18, r25	; 0x12
    1df0:	ab 8b       	std	Y+19, r26	; 0x13
    1df2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1df4:	69 89       	ldd	r22, Y+17	; 0x11
    1df6:	7a 89       	ldd	r23, Y+18	; 0x12
    1df8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	1c f4       	brge	.+6      	; 0x1e12 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	88 8b       	std	Y+16, r24	; 0x10
    1e10:	91 c0       	rjmp	.+290    	; 0x1f34 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1e12:	69 89       	ldd	r22, Y+17	; 0x11
    1e14:	7a 89       	ldd	r23, Y+18	; 0x12
    1e16:	8b 89       	ldd	r24, Y+19	; 0x13
    1e18:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	53 e4       	ldi	r21, 0x43	; 67
    1e22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	0c f0       	brlt	.+2      	; 0x1e2c <LCD_voidSendCmnd+0xa4>
    1e2a:	7b c0       	rjmp	.+246    	; 0x1f22 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e30:	8f 89       	ldd	r24, Y+23	; 0x17
    1e32:	98 8d       	ldd	r25, Y+24	; 0x18
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a e7       	ldi	r20, 0x7A	; 122
    1e3a:	54 e4       	ldi	r21, 0x44	; 68
    1e3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	8c 87       	std	Y+12, r24	; 0x0c
    1e46:	9d 87       	std	Y+13, r25	; 0x0d
    1e48:	ae 87       	std	Y+14, r26	; 0x0e
    1e4a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e50:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e52:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	88 87       	std	Y+8, r24	; 0x08
    1e66:	99 87       	std	Y+9, r25	; 0x09
    1e68:	aa 87       	std	Y+10, r26	; 0x0a
    1e6a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e6c:	68 85       	ldd	r22, Y+8	; 0x08
    1e6e:	79 85       	ldd	r23, Y+9	; 0x09
    1e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9f 83       	std	Y+7, r25	; 0x07
    1e8a:	8e 83       	std	Y+6, r24	; 0x06
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1e8e:	68 85       	ldd	r22, Y+8	; 0x08
    1e90:	79 85       	ldd	r23, Y+9	; 0x09
    1e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ea8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eaa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eac:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9f 83       	std	Y+7, r25	; 0x07
    1ecc:	8e 83       	std	Y+6, r24	; 0x06
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <LCD_voidSendCmnd+0x166>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9d 83       	std	Y+5, r25	; 0x05
    1ed6:	8c 83       	std	Y+4, r24	; 0x04
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_voidSendCmnd+0x154>
    1ee0:	9d 83       	std	Y+5, r25	; 0x05
    1ee2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9f 83       	std	Y+7, r25	; 0x07
    1eec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <LCD_voidSendCmnd+0x148>
    1ef6:	24 c0       	rjmp	.+72     	; 0x1f40 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	68 85       	ldd	r22, Y+8	; 0x08
    1efa:	79 85       	ldd	r23, Y+9	; 0x09
    1efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9f 83       	std	Y+7, r25	; 0x07
    1f0a:	8e 83       	std	Y+6, r24	; 0x06
    1f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f10:	9b 83       	std	Y+3, r25	; 0x03
    1f12:	8a 83       	std	Y+2, r24	; 0x02
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_voidSendCmnd+0x190>
    1f1c:	9b 83       	std	Y+3, r25	; 0x03
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f22:	69 89       	ldd	r22, Y+17	; 0x11
    1f24:	7a 89       	ldd	r23, Y+18	; 0x12
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	88 8b       	std	Y+16, r24	; 0x10
    1f34:	88 89       	ldd	r24, Y+16	; 0x10
    1f36:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	8a 95       	dec	r24
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <LCD_voidSendCmnd+0x1b2>
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    1f40:	83 e0       	ldi	r24, 0x03	; 3
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
	
	
	
	
	#endif
}
    1f4a:	69 96       	adiw	r28, 0x19	; 25
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	69 97       	sbiw	r28, 0x19	; 25
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	89 8f       	std	Y+25, r24	; 0x19
	/* step-1:Rs = 1 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_HIGH);
    1f72:	83 e0       	ldi	r24, 0x03	; 3
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
    1f7e:	61 e0       	ldi	r22, 0x01	; 1
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
	/* Write char */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Char  );
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8a:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	62 e0       	ldi	r22, 0x02	; 2
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a0 e8       	ldi	r26, 0x80	; 128
    1f9e:	bf e3       	ldi	r27, 0x3F	; 63
    1fa0:	8d 8b       	std	Y+21, r24	; 0x15
    1fa2:	9e 8b       	std	Y+22, r25	; 0x16
    1fa4:	af 8b       	std	Y+23, r26	; 0x17
    1fa6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	2b ea       	ldi	r18, 0xAB	; 171
    1fb2:	3a ea       	ldi	r19, 0xAA	; 170
    1fb4:	4a e2       	ldi	r20, 0x2A	; 42
    1fb6:	50 e4       	ldi	r21, 0x40	; 64
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	89 8b       	std	Y+17, r24	; 0x11
    1fc2:	9a 8b       	std	Y+18, r25	; 0x12
    1fc4:	ab 8b       	std	Y+19, r26	; 0x13
    1fc6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fc8:	69 89       	ldd	r22, Y+17	; 0x11
    1fca:	7a 89       	ldd	r23, Y+18	; 0x12
    1fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fce:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	1c f4       	brge	.+6      	; 0x1fe6 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	88 8b       	std	Y+16, r24	; 0x10
    1fe4:	91 c0       	rjmp	.+290    	; 0x2108 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1fe6:	69 89       	ldd	r22, Y+17	; 0x11
    1fe8:	7a 89       	ldd	r23, Y+18	; 0x12
    1fea:	8b 89       	ldd	r24, Y+19	; 0x13
    1fec:	9c 89       	ldd	r25, Y+20	; 0x14
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	53 e4       	ldi	r21, 0x43	; 67
    1ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	0c f0       	brlt	.+2      	; 0x2000 <LCD_voidSendChar+0xa4>
    1ffe:	7b c0       	rjmp	.+246    	; 0x20f6 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2000:	6d 89       	ldd	r22, Y+21	; 0x15
    2002:	7e 89       	ldd	r23, Y+22	; 0x16
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	54 e4       	ldi	r21, 0x44	; 68
    2010:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8c 87       	std	Y+12, r24	; 0x0c
    201a:	9d 87       	std	Y+13, r25	; 0x0d
    201c:	ae 87       	std	Y+14, r26	; 0x0e
    201e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	6c 85       	ldd	r22, Y+12	; 0x0c
    2022:	7d 85       	ldd	r23, Y+13	; 0x0d
    2024:	8e 85       	ldd	r24, Y+14	; 0x0e
    2026:	9f 85       	ldd	r25, Y+15	; 0x0f
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a ef       	ldi	r20, 0xFA	; 250
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	88 87       	std	Y+8, r24	; 0x08
    203a:	99 87       	std	Y+9, r25	; 0x09
    203c:	aa 87       	std	Y+10, r26	; 0x0a
    203e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2040:	68 85       	ldd	r22, Y+8	; 0x08
    2042:	79 85       	ldd	r23, Y+9	; 0x09
    2044:	8a 85       	ldd	r24, Y+10	; 0x0a
    2046:	9b 85       	ldd	r25, Y+11	; 0x0b
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9f 83       	std	Y+7, r25	; 0x07
    205e:	8e 83       	std	Y+6, r24	; 0x06
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2062:	68 85       	ldd	r22, Y+8	; 0x08
    2064:	79 85       	ldd	r23, Y+9	; 0x09
    2066:	8a 85       	ldd	r24, Y+10	; 0x0a
    2068:	9b 85       	ldd	r25, Y+11	; 0x0b
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	6c 85       	ldd	r22, Y+12	; 0x0c
    207c:	7d 85       	ldd	r23, Y+13	; 0x0d
    207e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2080:	9f 85       	ldd	r25, Y+15	; 0x0f
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9f 83       	std	Y+7, r25	; 0x07
    20a0:	8e 83       	std	Y+6, r24	; 0x06
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <LCD_voidSendChar+0x166>
    20a4:	88 ec       	ldi	r24, 0xC8	; 200
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9d 83       	std	Y+5, r25	; 0x05
    20aa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_voidSendChar+0x154>
    20b4:	9d 83       	std	Y+5, r25	; 0x05
    20b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ba:	9f 81       	ldd	r25, Y+7	; 0x07
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9f 83       	std	Y+7, r25	; 0x07
    20c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	8e 81       	ldd	r24, Y+6	; 0x06
    20c4:	9f 81       	ldd	r25, Y+7	; 0x07
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <LCD_voidSendChar+0x148>
    20ca:	24 c0       	rjmp	.+72     	; 0x2114 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	68 85       	ldd	r22, Y+8	; 0x08
    20ce:	79 85       	ldd	r23, Y+9	; 0x09
    20d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9f 83       	std	Y+7, r25	; 0x07
    20de:	8e 83       	std	Y+6, r24	; 0x06
    20e0:	8e 81       	ldd	r24, Y+6	; 0x06
    20e2:	9f 81       	ldd	r25, Y+7	; 0x07
    20e4:	9b 83       	std	Y+3, r25	; 0x03
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_voidSendChar+0x190>
    20f0:	9b 83       	std	Y+3, r25	; 0x03
    20f2:	8a 83       	std	Y+2, r24	; 0x02
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20f6:	69 89       	ldd	r22, Y+17	; 0x11
    20f8:	7a 89       	ldd	r23, Y+18	; 0x12
    20fa:	8b 89       	ldd	r24, Y+19	; 0x13
    20fc:	9c 89       	ldd	r25, Y+20	; 0x14
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	88 8b       	std	Y+16, r24	; 0x10
    2108:	88 89       	ldd	r24, Y+16	; 0x10
    210a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	8a 95       	dec	r24
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_voidSendChar+0x1b2>
    2112:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	62 e0       	ldi	r22, 0x02	; 2
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
}
    211e:	69 96       	adiw	r28, 0x19	; 25
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <LCD_voidSendStr>:

void LCD_voidSendStr(u8* Copy_pu8Str )
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <LCD_voidSendStr+0x6>
    2136:	0f 92       	push	r0
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	9b 83       	std	Y+3, r25	; 0x03
    213e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StrLen = 0;
    2140:	19 82       	std	Y+1, r1	; 0x01
    2142:	0e c0       	rjmp	.+28     	; 0x2160 <LCD_voidSendStr+0x30>
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	fc 01       	movw	r30, r24
    2150:	e2 0f       	add	r30, r18
    2152:	f3 1f       	adc	r31, r19
    2154:	80 81       	ld	r24, Z
    2156:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_voidSendChar>
		Local_u8StrLen++;
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	8f 5f       	subi	r24, 0xFF	; 255
    215e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendStr(u8* Copy_pu8Str )
{
	u8 Local_u8StrLen = 0;
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	9b 81       	ldd	r25, Y+3	; 0x03
    216a:	fc 01       	movw	r30, r24
    216c:	e2 0f       	add	r30, r18
    216e:	f3 1f       	adc	r31, r19
    2170:	80 81       	ld	r24, Z
    2172:	88 23       	and	r24, r24
    2174:	39 f7       	brne	.-50     	; 0x2144 <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
		Local_u8StrLen++;
	}
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <LCD_voidSendNum>:

void LCD_voidSendNum (u32  Copy_u32Num )
{
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	61 97       	sbiw	r28, 0x11	; 17
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	6e 87       	std	Y+14, r22	; 0x0e
    219c:	7f 87       	std	Y+15, r23	; 0x0f
    219e:	88 8b       	std	Y+16, r24	; 0x10
    21a0:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8NumArr[10]= {0};
    21a2:	8a e0       	ldi	r24, 0x0A	; 10
    21a4:	fe 01       	movw	r30, r28
    21a6:	34 96       	adiw	r30, 0x04	; 4
    21a8:	df 01       	movw	r26, r30
    21aa:	98 2f       	mov	r25, r24
    21ac:	1d 92       	st	X+, r1
    21ae:	9a 95       	dec	r25
    21b0:	e9 f7       	brne	.-6      	; 0x21ac <LCD_voidSendNum+0x2a>
	u8 Local_u8ArrIndex = 0;
    21b2:	1b 82       	std	Y+3, r1	; 0x03
    21b4:	2d c0       	rjmp	.+90     	; 0x2210 <LCD_voidSendNum+0x8e>
	while(Copy_u32Num > 0)
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	08 2f       	mov	r16, r24
    21ba:	10 e0       	ldi	r17, 0x00	; 0
    21bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    21be:	9f 85       	ldd	r25, Y+15	; 0x0f
    21c0:	a8 89       	ldd	r26, Y+16	; 0x10
    21c2:	b9 89       	ldd	r27, Y+17	; 0x11
    21c4:	2a e0       	ldi	r18, 0x0A	; 10
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__udivmodsi4>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	28 2f       	mov	r18, r24
    21da:	ce 01       	movw	r24, r28
    21dc:	04 96       	adiw	r24, 0x04	; 4
    21de:	fc 01       	movw	r30, r24
    21e0:	e0 0f       	add	r30, r16
    21e2:	f1 1f       	adc	r31, r17
    21e4:	20 83       	st	Z, r18
		Copy_u32Num /=10;
    21e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    21e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    21ea:	a8 89       	ldd	r26, Y+16	; 0x10
    21ec:	b9 89       	ldd	r27, Y+17	; 0x11
    21ee:	2a e0       	ldi	r18, 0x0A	; 10
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__udivmodsi4>
    21fe:	da 01       	movw	r26, r20
    2200:	c9 01       	movw	r24, r18
    2202:	8e 87       	std	Y+14, r24	; 0x0e
    2204:	9f 87       	std	Y+15, r25	; 0x0f
    2206:	a8 8b       	std	Y+16, r26	; 0x10
    2208:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ArrIndex++;
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	8f 5f       	subi	r24, 0xFF	; 255
    220e:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidSendNum (u32  Copy_u32Num )
{
    u8 Local_u8NumArr[10]= {0};
	u8 Local_u8ArrIndex = 0;
	while(Copy_u32Num > 0)
    2210:	8e 85       	ldd	r24, Y+14	; 0x0e
    2212:	9f 85       	ldd	r25, Y+15	; 0x0f
    2214:	a8 89       	ldd	r26, Y+16	; 0x10
    2216:	b9 89       	ldd	r27, Y+17	; 0x11
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	a1 05       	cpc	r26, r1
    221c:	b1 05       	cpc	r27, r1
    221e:	59 f6       	brne	.-106    	; 0x21b6 <LCD_voidSendNum+0x34>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	10 c0       	rjmp	.+32     	; 0x224e <LCD_voidSendNum+0xcc>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
    222e:	29 81       	ldd	r18, Y+1	; 0x01
    2230:	3a 81       	ldd	r19, Y+2	; 0x02
    2232:	ce 01       	movw	r24, r28
    2234:	04 96       	adiw	r24, 0x04	; 4
    2236:	fc 01       	movw	r30, r24
    2238:	e2 0f       	add	r30, r18
    223a:	f3 1f       	adc	r31, r19
    223c:	80 81       	ld	r24, Z
    223e:	80 5d       	subi	r24, 0xD0	; 208
    2240:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_voidSendChar>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	9a 81       	ldd	r25, Y+2	; 0x02
    2252:	99 23       	and	r25, r25
    2254:	64 f7       	brge	.-40     	; 0x222e <LCD_voidSendNum+0xac>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
	}
} 
    2256:	61 96       	adiw	r28, 0x11	; 17
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	08 95       	ret

0000226c <LCD_u8GoToXY>:

u8 LCD_u8GoToXY (u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <LCD_u8GoToXY+0x6>
    2272:	00 d0       	rcall	.+0      	; 0x2274 <LCD_u8GoToXY+0x8>
    2274:	0f 92       	push	r0
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	8a 83       	std	Y+2, r24	; 0x02
    227c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Location <= 39)
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	88 32       	cpi	r24, 0x28	; 40
    2286:	e0 f4       	brcc	.+56     	; 0x22c0 <LCD_u8GoToXY+0x54>
	{
			switch (Copy_u8LineNum)
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	3d 83       	std	Y+5, r19	; 0x05
    2290:	2c 83       	std	Y+4, r18	; 0x04
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	9d 81       	ldd	r25, Y+5	; 0x05
    2296:	81 30       	cpi	r24, 0x01	; 1
    2298:	91 05       	cpc	r25, r1
    229a:	31 f0       	breq	.+12     	; 0x22a8 <LCD_u8GoToXY+0x3c>
    229c:	2c 81       	ldd	r18, Y+4	; 0x04
    229e:	3d 81       	ldd	r19, Y+5	; 0x05
    22a0:	22 30       	cpi	r18, 0x02	; 2
    22a2:	31 05       	cpc	r19, r1
    22a4:	31 f0       	breq	.+12     	; 0x22b2 <LCD_u8GoToXY+0x46>
    22a6:	0a c0       	rjmp	.+20     	; 0x22bc <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE_1   : LCD_voidSendCmnd (0x80 + Copy_u8Location); break;
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	80 58       	subi	r24, 0x80	; 128
    22ac:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    22b0:	08 c0       	rjmp	.+16     	; 0x22c2 <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE_2   : LCD_voidSendCmnd (0xC0 + Copy_u8Location); break;
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	80 54       	subi	r24, 0x40	; 64
    22b6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <LCD_u8GoToXY+0x56>
			default              : Local_u8ErrorState = STD_TYPES_NOK;
    22bc:	19 82       	std	Y+1, r1	; 0x01
    22be:	01 c0       	rjmp	.+2      	; 0x22c2 <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    22c0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <LCD_voidClearScreen>:

void LCD_voidClearScreen (void)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	2e 97       	sbiw	r28, 0x0e	; 14
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd (0x01);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a0 e0       	ldi	r26, 0x00	; 0
    22f4:	b0 e4       	ldi	r27, 0x40	; 64
    22f6:	8b 87       	std	Y+11, r24	; 0x0b
    22f8:	9c 87       	std	Y+12, r25	; 0x0c
    22fa:	ad 87       	std	Y+13, r26	; 0x0d
    22fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2300:	7c 85       	ldd	r23, Y+12	; 0x0c
    2302:	8d 85       	ldd	r24, Y+13	; 0x0d
    2304:	9e 85       	ldd	r25, Y+14	; 0x0e
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4a ef       	ldi	r20, 0xFA	; 250
    230c:	54 e4       	ldi	r21, 0x44	; 68
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	8f 83       	std	Y+7, r24	; 0x07
    2318:	98 87       	std	Y+8, r25	; 0x08
    231a:	a9 87       	std	Y+9, r26	; 0x09
    231c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	5f e3       	ldi	r21, 0x3F	; 63
    232e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2332:	88 23       	and	r24, r24
    2334:	2c f4       	brge	.+10     	; 0x2340 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	3f c0       	rjmp	.+126    	; 0x23be <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	57 e4       	ldi	r21, 0x47	; 71
    2350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	4c f5       	brge	.+82     	; 0x23aa <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	6b 85       	ldd	r22, Y+11	; 0x0b
    235a:	7c 85       	ldd	r23, Y+12	; 0x0c
    235c:	8d 85       	ldd	r24, Y+13	; 0x0d
    235e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e2       	ldi	r20, 0x20	; 32
    2366:	51 e4       	ldi	r21, 0x41	; 65
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
    2380:	0f c0       	rjmp	.+30     	; 0x23a0 <LCD_voidClearScreen+0xcc>
    2382:	88 ec       	ldi	r24, 0xC8	; 200
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9c 83       	std	Y+4, r25	; 0x04
    2388:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <LCD_voidClearScreen+0xba>
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	9e 83       	std	Y+6, r25	; 0x06
    239e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	69 f7       	brne	.-38     	; 0x2382 <LCD_voidClearScreen+0xae>
    23a8:	14 c0       	rjmp	.+40     	; 0x23d2 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23aa:	6f 81       	ldd	r22, Y+7	; 0x07
    23ac:	78 85       	ldd	r23, Y+8	; 0x08
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	8d 81       	ldd	r24, Y+5	; 0x05
    23c0:	9e 81       	ldd	r25, Y+6	; 0x06
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_voidClearScreen+0xf6>
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    23d2:	2e 96       	adiw	r28, 0x0e	; 14
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <LCD_u8SendSpecialChar>:

u8 LCD_u8SendSpecialChar    (u8 Copy_u8CharNum , u8* Copy_pu8CharShape ,u8  Copy_u8LineNum , u8 Copy_u8Location )
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	2a 97       	sbiw	r28, 0x0a	; 10
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	8c 83       	std	Y+4, r24	; 0x04
    23fa:	7e 83       	std	Y+6, r23	; 0x06
    23fc:	6d 83       	std	Y+5, r22	; 0x05
    23fe:	4f 83       	std	Y+7, r20	; 0x07
    2400:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	8b 83       	std	Y+3, r24	; 0x03
	if((Copy_u8CharNum <= 7)&&(Copy_u8Location <= 39)&&(Copy_u8LineNum <=2)) 
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	88 30       	cpi	r24, 0x08	; 8
    240a:	08 f0       	brcs	.+2      	; 0x240e <LCD_u8SendSpecialChar+0x2a>
    240c:	79 c0       	rjmp	.+242    	; 0x2500 <LCD_u8SendSpecialChar+0x11c>
    240e:	88 85       	ldd	r24, Y+8	; 0x08
    2410:	88 32       	cpi	r24, 0x28	; 40
    2412:	08 f0       	brcs	.+2      	; 0x2416 <LCD_u8SendSpecialChar+0x32>
    2414:	75 c0       	rjmp	.+234    	; 0x2500 <LCD_u8SendSpecialChar+0x11c>
    2416:	8f 81       	ldd	r24, Y+7	; 0x07
    2418:	83 30       	cpi	r24, 0x03	; 3
    241a:	08 f0       	brcs	.+2      	; 0x241e <LCD_u8SendSpecialChar+0x3a>
    241c:	71 c0       	rjmp	.+226    	; 0x2500 <LCD_u8SendSpecialChar+0x11c>
	{
		switch(Copy_u8CharNum)
    241e:	8c 81       	ldd	r24, Y+4	; 0x04
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	3a 87       	std	Y+10, r19	; 0x0a
    2426:	29 87       	std	Y+9, r18	; 0x09
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	83 30       	cpi	r24, 0x03	; 3
    242e:	91 05       	cpc	r25, r1
    2430:	a9 f1       	breq	.+106    	; 0x249c <LCD_u8SendSpecialChar+0xb8>
    2432:	29 85       	ldd	r18, Y+9	; 0x09
    2434:	3a 85       	ldd	r19, Y+10	; 0x0a
    2436:	24 30       	cpi	r18, 0x04	; 4
    2438:	31 05       	cpc	r19, r1
    243a:	7c f4       	brge	.+30     	; 0x245a <LCD_u8SendSpecialChar+0x76>
    243c:	89 85       	ldd	r24, Y+9	; 0x09
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	91 05       	cpc	r25, r1
    2444:	19 f1       	breq	.+70     	; 0x248c <LCD_u8SendSpecialChar+0xa8>
    2446:	29 85       	ldd	r18, Y+9	; 0x09
    2448:	3a 85       	ldd	r19, Y+10	; 0x0a
    244a:	22 30       	cpi	r18, 0x02	; 2
    244c:	31 05       	cpc	r19, r1
    244e:	14 f5       	brge	.+68     	; 0x2494 <LCD_u8SendSpecialChar+0xb0>
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	b1 f0       	breq	.+44     	; 0x2484 <LCD_u8SendSpecialChar+0xa0>
    2458:	34 c0       	rjmp	.+104    	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
    245a:	29 85       	ldd	r18, Y+9	; 0x09
    245c:	3a 85       	ldd	r19, Y+10	; 0x0a
    245e:	25 30       	cpi	r18, 0x05	; 5
    2460:	31 05       	cpc	r19, r1
    2462:	21 f1       	breq	.+72     	; 0x24ac <LCD_u8SendSpecialChar+0xc8>
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	85 30       	cpi	r24, 0x05	; 5
    246a:	91 05       	cpc	r25, r1
    246c:	dc f0       	brlt	.+54     	; 0x24a4 <LCD_u8SendSpecialChar+0xc0>
    246e:	29 85       	ldd	r18, Y+9	; 0x09
    2470:	3a 85       	ldd	r19, Y+10	; 0x0a
    2472:	26 30       	cpi	r18, 0x06	; 6
    2474:	31 05       	cpc	r19, r1
    2476:	f1 f0       	breq	.+60     	; 0x24b4 <LCD_u8SendSpecialChar+0xd0>
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	9a 85       	ldd	r25, Y+10	; 0x0a
    247c:	87 30       	cpi	r24, 0x07	; 7
    247e:	91 05       	cpc	r25, r1
    2480:	e9 f0       	breq	.+58     	; 0x24bc <LCD_u8SendSpecialChar+0xd8>
    2482:	1f c0       	rjmp	.+62     	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
		{
			case 0:LCD_voidSendCmnd(0b01000000); break; //0
    2484:	80 e4       	ldi	r24, 0x40	; 64
    2486:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    248a:	1b c0       	rjmp	.+54     	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
			case 1:LCD_voidSendCmnd(0b01001000); break; //8
    248c:	88 e4       	ldi	r24, 0x48	; 72
    248e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    2492:	17 c0       	rjmp	.+46     	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
			case 2:LCD_voidSendCmnd(0b01010000); break; //16
    2494:	80 e5       	ldi	r24, 0x50	; 80
    2496:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    249a:	13 c0       	rjmp	.+38     	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
			case 3:LCD_voidSendCmnd(0b01011000); break; //24
    249c:	88 e5       	ldi	r24, 0x58	; 88
    249e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
    24a4:	80 e6       	ldi	r24, 0x60	; 96
    24a6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    24aa:	0b c0       	rjmp	.+22     	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
    24ac:	88 e6       	ldi	r24, 0x68	; 104
    24ae:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    24b2:	07 c0       	rjmp	.+14     	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
    24b4:	80 e7       	ldi	r24, 0x70	; 112
    24b6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <LCD_u8SendSpecialChar+0xde>
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
    24bc:	88 e7       	ldi	r24, 0x78	; 120
    24be:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
		}
		for(int i=0 ;i <8 ;i++)
    24c2:	1a 82       	std	Y+2, r1	; 0x02
    24c4:	19 82       	std	Y+1, r1	; 0x01
    24c6:	0f c0       	rjmp	.+30     	; 0x24e6 <LCD_u8SendSpecialChar+0x102>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
    24c8:	29 81       	ldd	r18, Y+1	; 0x01
    24ca:	3a 81       	ldd	r19, Y+2	; 0x02
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	9e 81       	ldd	r25, Y+6	; 0x06
    24d0:	fc 01       	movw	r30, r24
    24d2:	e2 0f       	add	r30, r18
    24d4:	f3 1f       	adc	r31, r19
    24d6:	80 81       	ld	r24, Z
    24d8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_voidSendChar>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
		}
		for(int i=0 ;i <8 ;i++)
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	01 96       	adiw	r24, 0x01	; 1
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	88 30       	cpi	r24, 0x08	; 8
    24ec:	91 05       	cpc	r25, r1
    24ee:	64 f3       	brlt	.-40     	; 0x24c8 <LCD_u8SendSpecialChar+0xe4>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
		}
	    LCD_u8GoToXY(Copy_u8LineNum ,Copy_u8Location );	
    24f0:	8f 81       	ldd	r24, Y+7	; 0x07
    24f2:	68 85       	ldd	r22, Y+8	; 0x08
    24f4:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    24f8:	8c 81       	ldd	r24, Y+4	; 0x04
    24fa:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_voidSendChar>
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <LCD_u8SendSpecialChar+0x11e>
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    2500:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2504:	2a 96       	adiw	r28, 0x0a	; 10
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <LCD_voidShiftRight>:

void LCD_voidShiftRight(void)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	2e 97       	sbiw	r28, 0x0e	; 14
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011100);
    252a:	8c e1       	ldi	r24, 0x1C	; 28
    252c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	a8 ec       	ldi	r26, 0xC8	; 200
    2536:	b2 e4       	ldi	r27, 0x42	; 66
    2538:	8b 87       	std	Y+11, r24	; 0x0b
    253a:	9c 87       	std	Y+12, r25	; 0x0c
    253c:	ad 87       	std	Y+13, r26	; 0x0d
    253e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2540:	6b 85       	ldd	r22, Y+11	; 0x0b
    2542:	7c 85       	ldd	r23, Y+12	; 0x0c
    2544:	8d 85       	ldd	r24, Y+13	; 0x0d
    2546:	9e 85       	ldd	r25, Y+14	; 0x0e
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a ef       	ldi	r20, 0xFA	; 250
    254e:	54 e4       	ldi	r21, 0x44	; 68
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	8f 83       	std	Y+7, r24	; 0x07
    255a:	98 87       	std	Y+8, r25	; 0x08
    255c:	a9 87       	std	Y+9, r26	; 0x09
    255e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e8       	ldi	r20, 0x80	; 128
    256e:	5f e3       	ldi	r21, 0x3F	; 63
    2570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2574:	88 23       	and	r24, r24
    2576:	2c f4       	brge	.+10     	; 0x2582 <LCD_voidShiftRight+0x6c>
		__ticks = 1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	3f c0       	rjmp	.+126    	; 0x2600 <LCD_voidShiftRight+0xea>
	else if (__tmp > 65535)
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2596:	18 16       	cp	r1, r24
    2598:	4c f5       	brge	.+82     	; 0x25ec <LCD_voidShiftRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259a:	6b 85       	ldd	r22, Y+11	; 0x0b
    259c:	7c 85       	ldd	r23, Y+12	; 0x0c
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <LCD_voidShiftRight+0xcc>
    25c4:	88 ec       	ldi	r24, 0xC8	; 200
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_voidShiftRight+0xba>
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	69 f7       	brne	.-38     	; 0x25c4 <LCD_voidShiftRight+0xae>
    25ea:	14 c0       	rjmp	.+40     	; 0x2614 <LCD_voidShiftRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <LCD_voidShiftRight+0xf6>
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    2614:	2e 96       	adiw	r28, 0x0e	; 14
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <LCD_voidShiftLeft>:

void LCD_voidShiftLeft(void)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	2e 97       	sbiw	r28, 0x0e	; 14
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011000);
    263a:	88 e1       	ldi	r24, 0x18	; 24
    263c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCmnd>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a8 ec       	ldi	r26, 0xC8	; 200
    2646:	b2 e4       	ldi	r27, 0x42	; 66
    2648:	8b 87       	std	Y+11, r24	; 0x0b
    264a:	9c 87       	std	Y+12, r25	; 0x0c
    264c:	ad 87       	std	Y+13, r26	; 0x0d
    264e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a ef       	ldi	r20, 0xFA	; 250
    265e:	54 e4       	ldi	r21, 0x44	; 68
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	8f 83       	std	Y+7, r24	; 0x07
    266a:	98 87       	std	Y+8, r25	; 0x08
    266c:	a9 87       	std	Y+9, r26	; 0x09
    266e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2670:	6f 81       	ldd	r22, Y+7	; 0x07
    2672:	78 85       	ldd	r23, Y+8	; 0x08
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	9a 85       	ldd	r25, Y+10	; 0x0a
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	2c f4       	brge	.+10     	; 0x2692 <LCD_voidShiftLeft+0x6c>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
    2690:	3f c0       	rjmp	.+126    	; 0x2710 <LCD_voidShiftLeft+0xea>
	else if (__tmp > 65535)
    2692:	6f 81       	ldd	r22, Y+7	; 0x07
    2694:	78 85       	ldd	r23, Y+8	; 0x08
    2696:	89 85       	ldd	r24, Y+9	; 0x09
    2698:	9a 85       	ldd	r25, Y+10	; 0x0a
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	3f ef       	ldi	r19, 0xFF	; 255
    269e:	4f e7       	ldi	r20, 0x7F	; 127
    26a0:	57 e4       	ldi	r21, 0x47	; 71
    26a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a6:	18 16       	cp	r1, r24
    26a8:	4c f5       	brge	.+82     	; 0x26fc <LCD_voidShiftLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e2       	ldi	r20, 0x20	; 32
    26b8:	51 e4       	ldi	r21, 0x41	; 65
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <LCD_voidShiftLeft+0xcc>
    26d4:	88 ec       	ldi	r24, 0xC8	; 200
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	8b 83       	std	Y+3, r24	; 0x03
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_voidShiftLeft+0xba>
    26e4:	9c 83       	std	Y+4, r25	; 0x04
    26e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	69 f7       	brne	.-38     	; 0x26d4 <LCD_voidShiftLeft+0xae>
    26fa:	14 c0       	rjmp	.+40     	; 0x2724 <LCD_voidShiftLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	6f 81       	ldd	r22, Y+7	; 0x07
    26fe:	78 85       	ldd	r23, Y+8	; 0x08
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	9a 85       	ldd	r25, Y+10	; 0x0a
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_voidShiftLeft+0xf6>
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
    2724:	2e 96       	adiw	r28, 0x0e	; 14
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <main>:
#include "ADC_interface.h"

#include "LCD_interface.h"

int main(void)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	a0 97       	sbiw	r28, 0x20	; 32
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
	u16 App_u16DigitalValue;
	u16 Local_u16AnalogValue;
	DIO_voidInit();
    274a:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_voidInit>
	ADC_voidInit();
    274e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	LCD_voidInit();
    2752:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCD_voidInit>
	while(1)
	{
		ADC_u8GetDigitalValueSyncNonBlocking(ADC_u8_CHANNEL_0 ,&App_u16DigitalValue);
    2756:	9e 01       	movw	r18, r28
    2758:	21 5e       	subi	r18, 0xE1	; 225
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	b9 01       	movw	r22, r18
    2760:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValueSyncNonBlocking>
		Local_u16AnalogValue = (App_u16DigitalValue * 5000UL) / 1024;
    2764:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2766:	98 a1       	ldd	r25, Y+32	; 0x20
    2768:	cc 01       	movw	r24, r24
    276a:	a0 e0       	ldi	r26, 0x00	; 0
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	28 e8       	ldi	r18, 0x88	; 136
    2770:	33 e1       	ldi	r19, 0x13	; 19
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__mulsi3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	07 2e       	mov	r0, r23
    2784:	7a e0       	ldi	r23, 0x0A	; 10
    2786:	b6 95       	lsr	r27
    2788:	a7 95       	ror	r26
    278a:	97 95       	ror	r25
    278c:	87 95       	ror	r24
    278e:	7a 95       	dec	r23
    2790:	d1 f7       	brne	.-12     	; 0x2786 <main+0x50>
    2792:	70 2d       	mov	r23, r0
    2794:	9e 8f       	std	Y+30, r25	; 0x1e
    2796:	8d 8f       	std	Y+29, r24	; 0x1d
		if(Local_u16AnalogValue <= 3000 )
    2798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    279c:	2b e0       	ldi	r18, 0x0B	; 11
    279e:	89 3b       	cpi	r24, 0xB9	; 185
    27a0:	92 07       	cpc	r25, r18
    27a2:	08 f0       	brcs	.+2      	; 0x27a6 <main+0x70>
    27a4:	7e c0       	rjmp	.+252    	; 0x28a2 <main+0x16c>
		{

			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
			LCD_voidClearScreen();
    27b0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_voidClearScreen>
			LCD_voidSendStr("Good Morning");
    27b4:	80 e6       	ldi	r24, 0x60	; 96
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 98 10 	call	0x2130	; 0x2130 <LCD_voidSendStr>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	aa ef       	ldi	r26, 0xFA	; 250
    27c2:	b3 e4       	ldi	r27, 0x43	; 67
    27c4:	89 8f       	std	Y+25, r24	; 0x19
    27c6:	9a 8f       	std	Y+26, r25	; 0x1a
    27c8:	ab 8f       	std	Y+27, r26	; 0x1b
    27ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	69 8d       	ldd	r22, Y+25	; 0x19
    27ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	54 e4       	ldi	r21, 0x44	; 68
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8d 8b       	std	Y+21, r24	; 0x15
    27e6:	9e 8b       	std	Y+22, r25	; 0x16
    27e8:	af 8b       	std	Y+23, r26	; 0x17
    27ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ec:	6d 89       	ldd	r22, Y+21	; 0x15
    27ee:	7e 89       	ldd	r23, Y+22	; 0x16
    27f0:	8f 89       	ldd	r24, Y+23	; 0x17
    27f2:	98 8d       	ldd	r25, Y+24	; 0x18
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <main+0xd8>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9c 8b       	std	Y+20, r25	; 0x14
    280a:	8b 8b       	std	Y+19, r24	; 0x13
    280c:	3f c0       	rjmp	.+126    	; 0x288c <main+0x156>
	else if (__tmp > 65535)
    280e:	6d 89       	ldd	r22, Y+21	; 0x15
    2810:	7e 89       	ldd	r23, Y+22	; 0x16
    2812:	8f 89       	ldd	r24, Y+23	; 0x17
    2814:	98 8d       	ldd	r25, Y+24	; 0x18
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	69 8d       	ldd	r22, Y+25	; 0x19
    2828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
    284e:	0f c0       	rjmp	.+30     	; 0x286e <main+0x138>
    2850:	88 ec       	ldi	r24, 0xC8	; 200
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9a 8b       	std	Y+18, r25	; 0x12
    2856:	89 8b       	std	Y+17, r24	; 0x11
    2858:	89 89       	ldd	r24, Y+17	; 0x11
    285a:	9a 89       	ldd	r25, Y+18	; 0x12
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <main+0x126>
    2860:	9a 8b       	std	Y+18, r25	; 0x12
    2862:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8b 89       	ldd	r24, Y+19	; 0x13
    2866:	9c 89       	ldd	r25, Y+20	; 0x14
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9c 8b       	std	Y+20, r25	; 0x14
    286c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8b 89       	ldd	r24, Y+19	; 0x13
    2870:	9c 89       	ldd	r25, Y+20	; 0x14
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <main+0x11a>
    2876:	6f cf       	rjmp	.-290    	; 0x2756 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	6d 89       	ldd	r22, Y+21	; 0x15
    287a:	7e 89       	ldd	r23, Y+22	; 0x16
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9c 8b       	std	Y+20, r25	; 0x14
    288a:	8b 8b       	std	Y+19, r24	; 0x13
    288c:	8b 89       	ldd	r24, Y+19	; 0x13
    288e:	9c 89       	ldd	r25, Y+20	; 0x14
    2890:	98 8b       	std	Y+16, r25	; 0x10
    2892:	8f 87       	std	Y+15, r24	; 0x0f
    2894:	8f 85       	ldd	r24, Y+15	; 0x0f
    2896:	98 89       	ldd	r25, Y+16	; 0x10
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <main+0x162>
    289c:	98 8b       	std	Y+16, r25	; 0x10
    289e:	8f 87       	std	Y+15, r24	; 0x0f
    28a0:	5a cf       	rjmp	.-332    	; 0x2756 <main+0x20>
			_delay_ms(500);

		}
		else if(Local_u16AnalogValue > 300 )
    28a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28a6:	21 e0       	ldi	r18, 0x01	; 1
    28a8:	8d 32       	cpi	r24, 0x2D	; 45
    28aa:	92 07       	cpc	r25, r18
    28ac:	08 f4       	brcc	.+2      	; 0x28b0 <main+0x17a>
    28ae:	53 cf       	rjmp	.-346    	; 0x2756 <main+0x20>
		{
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	60 e0       	ldi	r22, 0x00	; 0
    28b4:	41 e0       	ldi	r20, 0x01	; 1
    28b6:	0e 94 de 08 	call	0x11bc	; 0x11bc <DIO_u8SetPinValue>
			LCD_voidClearScreen();
    28ba:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_voidClearScreen>
			LCD_voidSendStr("Good Night");
    28be:	8d e6       	ldi	r24, 0x6D	; 109
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 98 10 	call	0x2130	; 0x2130 <LCD_voidSendStr>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	aa ef       	ldi	r26, 0xFA	; 250
    28cc:	b3 e4       	ldi	r27, 0x43	; 67
    28ce:	8b 87       	std	Y+11, r24	; 0x0b
    28d0:	9c 87       	std	Y+12, r25	; 0x0c
    28d2:	ad 87       	std	Y+13, r26	; 0x0d
    28d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28da:	8d 85       	ldd	r24, Y+13	; 0x0d
    28dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a ef       	ldi	r20, 0xFA	; 250
    28e4:	54 e4       	ldi	r21, 0x44	; 68
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	8f 83       	std	Y+7, r24	; 0x07
    28f0:	98 87       	std	Y+8, r25	; 0x08
    28f2:	a9 87       	std	Y+9, r26	; 0x09
    28f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f6:	6f 81       	ldd	r22, Y+7	; 0x07
    28f8:	78 85       	ldd	r23, Y+8	; 0x08
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	2c f4       	brge	.+10     	; 0x2918 <main+0x1e2>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9e 83       	std	Y+6, r25	; 0x06
    2914:	8d 83       	std	Y+5, r24	; 0x05
    2916:	3f c0       	rjmp	.+126    	; 0x2996 <main+0x260>
	else if (__tmp > 65535)
    2918:	6f 81       	ldd	r22, Y+7	; 0x07
    291a:	78 85       	ldd	r23, Y+8	; 0x08
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	4c f5       	brge	.+82     	; 0x2982 <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	6b 85       	ldd	r22, Y+11	; 0x0b
    2932:	7c 85       	ldd	r23, Y+12	; 0x0c
    2934:	8d 85       	ldd	r24, Y+13	; 0x0d
    2936:	9e 85       	ldd	r25, Y+14	; 0x0e
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <main+0x242>
    295a:	88 ec       	ldi	r24, 0xC8	; 200
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	9c 83       	std	Y+4, r25	; 0x04
    2960:	8b 83       	std	Y+3, r24	; 0x03
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <main+0x230>
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	69 f7       	brne	.-38     	; 0x295a <main+0x224>
    2980:	ea ce       	rjmp	.-556    	; 0x2756 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2982:	6f 81       	ldd	r22, Y+7	; 0x07
    2984:	78 85       	ldd	r23, Y+8	; 0x08
    2986:	89 85       	ldd	r24, Y+9	; 0x09
    2988:	9a 85       	ldd	r25, Y+10	; 0x0a
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9e 83       	std	Y+6, r25	; 0x06
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	9a 81       	ldd	r25, Y+2	; 0x02
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <main+0x26c>
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	d5 ce       	rjmp	.-598    	; 0x2756 <main+0x20>

000029ac <__mulsi3>:
    29ac:	62 9f       	mul	r22, r18
    29ae:	d0 01       	movw	r26, r0
    29b0:	73 9f       	mul	r23, r19
    29b2:	f0 01       	movw	r30, r0
    29b4:	82 9f       	mul	r24, r18
    29b6:	e0 0d       	add	r30, r0
    29b8:	f1 1d       	adc	r31, r1
    29ba:	64 9f       	mul	r22, r20
    29bc:	e0 0d       	add	r30, r0
    29be:	f1 1d       	adc	r31, r1
    29c0:	92 9f       	mul	r25, r18
    29c2:	f0 0d       	add	r31, r0
    29c4:	83 9f       	mul	r24, r19
    29c6:	f0 0d       	add	r31, r0
    29c8:	74 9f       	mul	r23, r20
    29ca:	f0 0d       	add	r31, r0
    29cc:	65 9f       	mul	r22, r21
    29ce:	f0 0d       	add	r31, r0
    29d0:	99 27       	eor	r25, r25
    29d2:	72 9f       	mul	r23, r18
    29d4:	b0 0d       	add	r27, r0
    29d6:	e1 1d       	adc	r30, r1
    29d8:	f9 1f       	adc	r31, r25
    29da:	63 9f       	mul	r22, r19
    29dc:	b0 0d       	add	r27, r0
    29de:	e1 1d       	adc	r30, r1
    29e0:	f9 1f       	adc	r31, r25
    29e2:	bd 01       	movw	r22, r26
    29e4:	cf 01       	movw	r24, r30
    29e6:	11 24       	eor	r1, r1
    29e8:	08 95       	ret

000029ea <__udivmodsi4>:
    29ea:	a1 e2       	ldi	r26, 0x21	; 33
    29ec:	1a 2e       	mov	r1, r26
    29ee:	aa 1b       	sub	r26, r26
    29f0:	bb 1b       	sub	r27, r27
    29f2:	fd 01       	movw	r30, r26
    29f4:	0d c0       	rjmp	.+26     	; 0x2a10 <__udivmodsi4_ep>

000029f6 <__udivmodsi4_loop>:
    29f6:	aa 1f       	adc	r26, r26
    29f8:	bb 1f       	adc	r27, r27
    29fa:	ee 1f       	adc	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	a2 17       	cp	r26, r18
    2a00:	b3 07       	cpc	r27, r19
    2a02:	e4 07       	cpc	r30, r20
    2a04:	f5 07       	cpc	r31, r21
    2a06:	20 f0       	brcs	.+8      	; 0x2a10 <__udivmodsi4_ep>
    2a08:	a2 1b       	sub	r26, r18
    2a0a:	b3 0b       	sbc	r27, r19
    2a0c:	e4 0b       	sbc	r30, r20
    2a0e:	f5 0b       	sbc	r31, r21

00002a10 <__udivmodsi4_ep>:
    2a10:	66 1f       	adc	r22, r22
    2a12:	77 1f       	adc	r23, r23
    2a14:	88 1f       	adc	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	1a 94       	dec	r1
    2a1a:	69 f7       	brne	.-38     	; 0x29f6 <__udivmodsi4_loop>
    2a1c:	60 95       	com	r22
    2a1e:	70 95       	com	r23
    2a20:	80 95       	com	r24
    2a22:	90 95       	com	r25
    2a24:	9b 01       	movw	r18, r22
    2a26:	ac 01       	movw	r20, r24
    2a28:	bd 01       	movw	r22, r26
    2a2a:	cf 01       	movw	r24, r30
    2a2c:	08 95       	ret

00002a2e <__prologue_saves__>:
    2a2e:	2f 92       	push	r2
    2a30:	3f 92       	push	r3
    2a32:	4f 92       	push	r4
    2a34:	5f 92       	push	r5
    2a36:	6f 92       	push	r6
    2a38:	7f 92       	push	r7
    2a3a:	8f 92       	push	r8
    2a3c:	9f 92       	push	r9
    2a3e:	af 92       	push	r10
    2a40:	bf 92       	push	r11
    2a42:	cf 92       	push	r12
    2a44:	df 92       	push	r13
    2a46:	ef 92       	push	r14
    2a48:	ff 92       	push	r15
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	ca 1b       	sub	r28, r26
    2a58:	db 0b       	sbc	r29, r27
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	09 94       	ijmp

00002a66 <__epilogue_restores__>:
    2a66:	2a 88       	ldd	r2, Y+18	; 0x12
    2a68:	39 88       	ldd	r3, Y+17	; 0x11
    2a6a:	48 88       	ldd	r4, Y+16	; 0x10
    2a6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a70:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a72:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a74:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a76:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a78:	b9 84       	ldd	r11, Y+9	; 0x09
    2a7a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a7c:	df 80       	ldd	r13, Y+7	; 0x07
    2a7e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a80:	fd 80       	ldd	r15, Y+5	; 0x05
    2a82:	0c 81       	ldd	r16, Y+4	; 0x04
    2a84:	1b 81       	ldd	r17, Y+3	; 0x03
    2a86:	aa 81       	ldd	r26, Y+2	; 0x02
    2a88:	b9 81       	ldd	r27, Y+1	; 0x01
    2a8a:	ce 0f       	add	r28, r30
    2a8c:	d1 1d       	adc	r29, r1
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	ed 01       	movw	r28, r26
    2a9a:	08 95       	ret

00002a9c <_exit>:
    2a9c:	f8 94       	cli

00002a9e <__stop_program>:
    2a9e:	ff cf       	rjmp	.-2      	; 0x2a9e <__stop_program>
