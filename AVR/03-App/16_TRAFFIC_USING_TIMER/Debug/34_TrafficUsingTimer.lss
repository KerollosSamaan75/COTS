
34_TrafficUsingTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00002828  000028bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080009c  0080009c  000028f8  2**0
                  ALLOC
  3 .stab         00001fa4  00000000  00000000  000028f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d1b  00000000  00000000  0000489c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000055b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005717  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000058a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000078eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000089ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009970  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <main>
      8a:	0c 94 12 14 	jmp	0x2824	; 0x2824 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e9       	ldi	r22, 0x91	; 145
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 07 14 	jmp	0x280e	; 0x280e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*Intial PINS Direction*/ 
	DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION , DIO_u8_PA6_INTIAL_DIRECTION , DIO_u8_PA5_INTIAL_DIRECTION ,  DIO_u8_PA4_INTIAL_DIRECTION, 
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	80 83       	st	Z, r24
	                       DIO_u8_PA3_INTIAL_DIRECTION , DIO_u8_PA2_INTIAL_DIRECTION , DIO_u8_PA1_INTIAL_DIRECTION ,  DIO_u8_PA0_INTIAL_DIRECTION );
    
	DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION , DIO_u8_PB6_INTIAL_DIRECTION , DIO_u8_PB5_INTIAL_DIRECTION ,  DIO_u8_PB4_INTIAL_DIRECTION , 
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	80 83       	st	Z, r24
			       DIO_u8_PB3_INTIAL_DIRECTION , DIO_u8_PB2_INTIAL_DIRECTION , DIO_u8_PB1_INTIAL_DIRECTION ,  DIO_u8_PB0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION , DIO_u8_PC6_INTIAL_DIRECTION , DIO_u8_PC5_INTIAL_DIRECTION ,  DIO_u8_PC4_INTIAL_DIRECTION ,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
			       DIO_u8_PC3_INTIAL_DIRECTION , DIO_u8_PC2_INTIAL_DIRECTION , DIO_u8_PC1_INTIAL_DIRECTION ,  DIO_u8_PC0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION , DIO_u8_PD6_INTIAL_DIRECTION , DIO_u8_PD5_INTIAL_DIRECTION ,  DIO_u8_PD4_INTIAL_DIRECTION , 
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 ee       	ldi	r24, 0xE0	; 224
     cc4:	80 83       	st	Z, r24
			       DIO_u8_PD3_INTIAL_DIRECTION , DIO_u8_PD2_INTIAL_DIRECTION , DIO_u8_PD1_INTIAL_DIRECTION ,  DIO_u8_PD0_INTIAL_DIRECTION );
						  
						  
	/*Intial PINS Value*/
        DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE     , DIO_u8_PA6_INTIAL_VALUE     , DIO_u8_PA5_INTIAL_VALUE ,      DIO_u8_PA4_INTIAL_VALUE , 
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
				DIO_u8_PA3_INTIAL_VALUE     , DIO_u8_PA2_INTIAL_VALUE     , DIO_u8_PA1_INTIAL_VALUE ,      DIO_u8_PA0_INTIAL_VALUE);                  
                                                                                   
	DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE     , DIO_u8_PB6_INTIAL_VALUE     , DIO_u8_PB5_INTIAL_VALUE ,      DIO_u8_PB4_INTIAL_VALUE ,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
				DIO_u8_PB3_INTIAL_VALUE     , DIO_u8_PB2_INTIAL_VALUE     , DIO_u8_PB1_INTIAL_VALUE ,      DIO_u8_PB0_INTIAL_VALUE);                  
					                                                                  
	DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE     , DIO_u8_PC6_INTIAL_VALUE     , DIO_u8_PC5_INTIAL_VALUE ,      DIO_u8_PC4_INTIAL_VALUE , 
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
				DIO_u8_PC3_INTIAL_VALUE     , DIO_u8_PC2_INTIAL_VALUE     , DIO_u8_PC1_INTIAL_VALUE ,      DIO_u8_PC0_INTIAL_VALUE);                  
					                                                                 
	DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE     , DIO_u8_PD6_INTIAL_VALUE     , DIO_u8_PD5_INTIAL_VALUE ,      DIO_u8_PD4_INTIAL_VALUE , 
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	10 82       	st	Z, r1
				DIO_u8_PD3_INTIAL_VALUE     , DIO_u8_PD2_INTIAL_VALUE     , DIO_u8_PD1_INTIAL_VALUE  ,      DIO_u8_PD0_INTIAL_VALUE);
						                                               
						   
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection   (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinDirection)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	2e 97       	sbiw	r28, 0x0e	; 14
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	8a 83       	std	Y+2, r24	; 0x02
     cfa:	6b 83       	std	Y+3, r22	; 0x03
     cfc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_PinDirection == DIO_u8_OUTPUT)||(Copy_PinDirection == DIO_u8_INPUT)))
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	08 f0       	brcs	.+2      	; 0xd0a <DIO_u8SetPinDirection+0x26>
     d08:	0c c1       	rjmp	.+536    	; 0xf22 <DIO_u8SetPinDirection+0x23e>
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	88 30       	cpi	r24, 0x08	; 8
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <DIO_u8SetPinDirection+0x2e>
     d10:	08 c1       	rjmp	.+528    	; 0xf22 <DIO_u8SetPinDirection+0x23e>
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	21 f0       	breq	.+8      	; 0xd20 <DIO_u8SetPinDirection+0x3c>
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	88 23       	and	r24, r24
     d1c:	09 f0       	breq	.+2      	; 0xd20 <DIO_u8SetPinDirection+0x3c>
     d1e:	01 c1       	rjmp	.+514    	; 0xf22 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	3e 87       	std	Y+14, r19	; 0x0e
     d28:	2d 87       	std	Y+13, r18	; 0x0d
     d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	91 05       	cpc	r25, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <DIO_u8SetPinDirection+0x52>
     d34:	4f c0       	rjmp	.+158    	; 0xdd4 <DIO_u8SetPinDirection+0xf0>
     d36:	2d 85       	ldd	r18, Y+13	; 0x0d
     d38:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	2c f4       	brge	.+10     	; 0xd4a <DIO_u8SetPinDirection+0x66>
     d40:	8d 85       	ldd	r24, Y+13	; 0x0d
     d42:	9e 85       	ldd	r25, Y+14	; 0x0e
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	71 f0       	breq	.+28     	; 0xd64 <DIO_u8SetPinDirection+0x80>
     d48:	ed c0       	rjmp	.+474    	; 0xf24 <DIO_u8SetPinDirection+0x240>
     d4a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_u8SetPinDirection+0x72>
     d54:	77 c0       	rjmp	.+238    	; 0xe44 <DIO_u8SetPinDirection+0x160>
     d56:	8d 85       	ldd	r24, Y+13	; 0x0d
     d58:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <DIO_u8SetPinDirection+0x7e>
     d60:	a9 c0       	rjmp	.+338    	; 0xeb4 <DIO_u8SetPinDirection+0x1d0>
     d62:	e0 c0       	rjmp	.+448    	; 0xf24 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch(Copy_PinDirection)
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	3c 87       	std	Y+12, r19	; 0x0c
     d6c:	2b 87       	std	Y+11, r18	; 0x0b
     d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d70:	9c 85       	ldd	r25, Y+12	; 0x0c
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	d1 f0       	breq	.+52     	; 0xdaa <DIO_u8SetPinDirection+0xc6>
     d76:	2b 85       	ldd	r18, Y+11	; 0x0b
     d78:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7a:	21 30       	cpi	r18, 0x01	; 1
     d7c:	31 05       	cpc	r19, r1
     d7e:	09 f0       	breq	.+2      	; 0xd82 <DIO_u8SetPinDirection+0x9e>
     d80:	d1 c0       	rjmp	.+418    	; 0xf24 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     d82:	aa e3       	ldi	r26, 0x3A	; 58
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e3       	ldi	r30, 0x3A	; 58
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_u8SetPinDirection+0xbc>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_u8SetPinDirection+0xb8>
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	bd c0       	rjmp	.+378    	; 0xf24 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     daa:	aa e3       	ldi	r26, 0x3A	; 58
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ea e3       	ldi	r30, 0x3A	; 58
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_u8SetPinDirection+0xe4>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_u8SetPinDirection+0xe0>
     dcc:	80 95       	com	r24
     dce:	84 23       	and	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	a8 c0       	rjmp	.+336    	; 0xf24 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTB:
				switch(Copy_PinDirection)
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3a 87       	std	Y+10, r19	; 0x0a
     ddc:	29 87       	std	Y+9, r18	; 0x09
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	d1 f0       	breq	.+52     	; 0xe1a <DIO_u8SetPinDirection+0x136>
     de6:	29 85       	ldd	r18, Y+9	; 0x09
     de8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dea:	21 30       	cpi	r18, 0x01	; 1
     dec:	31 05       	cpc	r19, r1
     dee:	09 f0       	breq	.+2      	; 0xdf2 <DIO_u8SetPinDirection+0x10e>
     df0:	99 c0       	rjmp	.+306    	; 0xf24 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     df2:	a7 e3       	ldi	r26, 0x37	; 55
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e7 e3       	ldi	r30, 0x37	; 55
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_u8SetPinDirection+0x12c>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_u8SetPinDirection+0x128>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	85 c0       	rjmp	.+266    	; 0xf24 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     e1a:	a7 e3       	ldi	r26, 0x37	; 55
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e7 e3       	ldi	r30, 0x37	; 55
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_u8SetPinDirection+0x154>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_u8SetPinDirection+0x150>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	70 c0       	rjmp	.+224    	; 0xf24 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTC:
				switch(Copy_PinDirection)
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	38 87       	std	Y+8, r19	; 0x08
     e4c:	2f 83       	std	Y+7, r18	; 0x07
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	d1 f0       	breq	.+52     	; 0xe8a <DIO_u8SetPinDirection+0x1a6>
     e56:	2f 81       	ldd	r18, Y+7	; 0x07
     e58:	38 85       	ldd	r19, Y+8	; 0x08
     e5a:	21 30       	cpi	r18, 0x01	; 1
     e5c:	31 05       	cpc	r19, r1
     e5e:	09 f0       	breq	.+2      	; 0xe62 <DIO_u8SetPinDirection+0x17e>
     e60:	61 c0       	rjmp	.+194    	; 0xf24 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     e62:	a4 e3       	ldi	r26, 0x34	; 52
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e4 e3       	ldi	r30, 0x34	; 52
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_u8SetPinDirection+0x19c>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_u8SetPinDirection+0x198>
     e84:	84 2b       	or	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	4d c0       	rjmp	.+154    	; 0xf24 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     e8a:	a4 e3       	ldi	r26, 0x34	; 52
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e4 e3       	ldi	r30, 0x34	; 52
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_u8SetPinDirection+0x1c4>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_u8SetPinDirection+0x1c0>
     eac:	80 95       	com	r24
     eae:	84 23       	and	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	38 c0       	rjmp	.+112    	; 0xf24 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTD:
				switch(Copy_PinDirection)
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	3e 83       	std	Y+6, r19	; 0x06
     ebc:	2d 83       	std	Y+5, r18	; 0x05
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	c9 f0       	breq	.+50     	; 0xef8 <DIO_u8SetPinDirection+0x214>
     ec6:	2d 81       	ldd	r18, Y+5	; 0x05
     ec8:	3e 81       	ldd	r19, Y+6	; 0x06
     eca:	21 30       	cpi	r18, 0x01	; 1
     ecc:	31 05       	cpc	r19, r1
     ece:	51 f5       	brne	.+84     	; 0xf24 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     ed0:	a1 e3       	ldi	r26, 0x31	; 49
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e1 e3       	ldi	r30, 0x31	; 49
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_u8SetPinDirection+0x20a>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_u8SetPinDirection+0x206>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	16 c0       	rjmp	.+44     	; 0xf24 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     ef8:	a1 e3       	ldi	r26, 0x31	; 49
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e1 e3       	ldi	r30, 0x31	; 49
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_u8SetPinDirection+0x232>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <DIO_u8SetPinDirection+0x22e>
     f1a:	80 95       	com	r24
     f1c:	84 23       	and	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <DIO_u8SetPinDirection+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f22:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
}
     f26:	2e 96       	adiw	r28, 0x0e	; 14
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinValue)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	2e 97       	sbiw	r28, 0x0e	; 14
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	6b 83       	std	Y+3, r22	; 0x03
     f50:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <DIO_u8SetPinValue+0x26>
     f5c:	08 c1       	rjmp	.+528    	; 0x116e <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3e 87       	std	Y+14, r19	; 0x0e
     f66:	2d 87       	std	Y+13, r18	; 0x0d
     f68:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <DIO_u8SetPinValue+0x3c>
     f72:	50 c0       	rjmp	.+160    	; 0x1014 <DIO_u8SetPinValue+0xdc>
     f74:	2d 85       	ldd	r18, Y+13	; 0x0d
     f76:	3e 85       	ldd	r19, Y+14	; 0x0e
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	2c f4       	brge	.+10     	; 0xf88 <DIO_u8SetPinValue+0x50>
     f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f80:	9e 85       	ldd	r25, Y+14	; 0x0e
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	71 f0       	breq	.+28     	; 0xfa2 <DIO_u8SetPinValue+0x6a>
     f86:	f1 c0       	rjmp	.+482    	; 0x116a <DIO_u8SetPinValue+0x232>
     f88:	2d 85       	ldd	r18, Y+13	; 0x0d
     f8a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_u8SetPinValue+0x5c>
     f92:	79 c0       	rjmp	.+242    	; 0x1086 <DIO_u8SetPinValue+0x14e>
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_u8SetPinValue+0x68>
     f9e:	ac c0       	rjmp	.+344    	; 0x10f8 <DIO_u8SetPinValue+0x1c0>
     fa0:	e4 c0       	rjmp	.+456    	; 0x116a <DIO_u8SetPinValue+0x232>
			{
				case DIO_u8_PORTA:
					switch (Copy_PinValue)
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3c 87       	std	Y+12, r19	; 0x0c
     faa:	2b 87       	std	Y+11, r18	; 0x0b
     fac:	8b 85       	ldd	r24, Y+11	; 0x0b
     fae:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	c9 f0       	breq	.+50     	; 0xfe6 <DIO_u8SetPinValue+0xae>
     fb4:	2b 85       	ldd	r18, Y+11	; 0x0b
     fb6:	3c 85       	ldd	r19, Y+12	; 0x0c
     fb8:	21 30       	cpi	r18, 0x01	; 1
     fba:	31 05       	cpc	r19, r1
     fbc:	49 f5       	brne	.+82     	; 0x1010 <DIO_u8SetPinValue+0xd8>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     fbe:	ab e3       	ldi	r26, 0x3B	; 59
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	eb e3       	ldi	r30, 0x3B	; 59
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_u8SetPinValue+0xa4>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_u8SetPinValue+0xa0>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	c5 c0       	rjmp	.+394    	; 0x1170 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     fe6:	ab e3       	ldi	r26, 0x3B	; 59
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	eb e3       	ldi	r30, 0x3B	; 59
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_u8SetPinValue+0xcc>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_u8SetPinValue+0xc8>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	b0 c0       	rjmp	.+352    	; 0x1170 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1010:	19 82       	std	Y+1, r1	; 0x01
    1012:	ae c0       	rjmp	.+348    	; 0x1170 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTB:
					switch (Copy_PinValue)
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	3a 87       	std	Y+10, r19	; 0x0a
    101c:	29 87       	std	Y+9, r18	; 0x09
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	9a 85       	ldd	r25, Y+10	; 0x0a
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	c9 f0       	breq	.+50     	; 0x1058 <DIO_u8SetPinValue+0x120>
    1026:	29 85       	ldd	r18, Y+9	; 0x09
    1028:	3a 85       	ldd	r19, Y+10	; 0x0a
    102a:	21 30       	cpi	r18, 0x01	; 1
    102c:	31 05       	cpc	r19, r1
    102e:	49 f5       	brne	.+82     	; 0x1082 <DIO_u8SetPinValue+0x14a>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    1030:	a8 e3       	ldi	r26, 0x38	; 56
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e8 e3       	ldi	r30, 0x38	; 56
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_u8SetPinValue+0x116>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_u8SetPinValue+0x112>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	8c c0       	rjmp	.+280    	; 0x1170 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    1058:	a8 e3       	ldi	r26, 0x38	; 56
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e8 e3       	ldi	r30, 0x38	; 56
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_u8SetPinValue+0x13e>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_u8SetPinValue+0x13a>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	77 c0       	rjmp	.+238    	; 0x1170 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1082:	19 82       	std	Y+1, r1	; 0x01
    1084:	75 c0       	rjmp	.+234    	; 0x1170 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTC:
					switch (Copy_PinValue)
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	38 87       	std	Y+8, r19	; 0x08
    108e:	2f 83       	std	Y+7, r18	; 0x07
    1090:	8f 81       	ldd	r24, Y+7	; 0x07
    1092:	98 85       	ldd	r25, Y+8	; 0x08
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	c9 f0       	breq	.+50     	; 0x10ca <DIO_u8SetPinValue+0x192>
    1098:	2f 81       	ldd	r18, Y+7	; 0x07
    109a:	38 85       	ldd	r19, Y+8	; 0x08
    109c:	21 30       	cpi	r18, 0x01	; 1
    109e:	31 05       	cpc	r19, r1
    10a0:	49 f5       	brne	.+82     	; 0x10f4 <DIO_u8SetPinValue+0x1bc>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    10a2:	a5 e3       	ldi	r26, 0x35	; 53
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e5 e3       	ldi	r30, 0x35	; 53
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_u8SetPinValue+0x188>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_u8SetPinValue+0x184>
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	53 c0       	rjmp	.+166    	; 0x1170 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    10ca:	a5 e3       	ldi	r26, 0x35	; 53
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e3       	ldi	r30, 0x35	; 53
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_u8SetPinValue+0x1b0>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_u8SetPinValue+0x1ac>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	3e c0       	rjmp	.+124    	; 0x1170 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	3c c0       	rjmp	.+120    	; 0x1170 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTD:
					switch (Copy_PinValue)
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3e 83       	std	Y+6, r19	; 0x06
    1100:	2d 83       	std	Y+5, r18	; 0x05
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	9e 81       	ldd	r25, Y+6	; 0x06
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	c9 f0       	breq	.+50     	; 0x113c <DIO_u8SetPinValue+0x204>
    110a:	2d 81       	ldd	r18, Y+5	; 0x05
    110c:	3e 81       	ldd	r19, Y+6	; 0x06
    110e:	21 30       	cpi	r18, 0x01	; 1
    1110:	31 05       	cpc	r19, r1
    1112:	49 f5       	brne	.+82     	; 0x1166 <DIO_u8SetPinValue+0x22e>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    1114:	a2 e3       	ldi	r26, 0x32	; 50
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_u8SetPinValue+0x1fa>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_u8SetPinValue+0x1f6>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	1a c0       	rjmp	.+52     	; 0x1170 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    113c:	a2 e3       	ldi	r26, 0x32	; 50
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_u8SetPinValue+0x222>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_u8SetPinValue+0x21e>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1166:	19 82       	std	Y+1, r1	; 0x01
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				default:Local_u8ErrorState = STD_TYPES_NOK;
    116a:	19 82       	std	Y+1, r1	; 0x01
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <DIO_u8SetPinValue+0x238>
				
			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    116e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
}
    1172:	2e 96       	adiw	r28, 0x0e	; 14
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 * Copy_pu8ReturnedPinValue )
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	28 97       	sbiw	r28, 0x08	; 8
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	8b 83       	std	Y+3, r24	; 0x03
    119a:	6c 83       	std	Y+4, r22	; 0x04
    119c:	5e 83       	std	Y+6, r21	; 0x06
    119e:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <DIO_u8GetPinValue+0x28>
    11aa:	9f c0       	rjmp	.+318    	; 0x12ea <DIO_u8GetPinValue+0x166>
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	88 30       	cpi	r24, 0x08	; 8
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <DIO_u8GetPinValue+0x30>
    11b2:	9b c0       	rjmp	.+310    	; 0x12ea <DIO_u8GetPinValue+0x166>
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	09 f4       	brne	.+2      	; 0x11be <DIO_u8GetPinValue+0x3a>
    11bc:	96 c0       	rjmp	.+300    	; 0x12ea <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	38 87       	std	Y+8, r19	; 0x08
    11c6:	2f 83       	std	Y+7, r18	; 0x07
    11c8:	4f 81       	ldd	r20, Y+7	; 0x07
    11ca:	58 85       	ldd	r21, Y+8	; 0x08
    11cc:	41 30       	cpi	r20, 0x01	; 1
    11ce:	51 05       	cpc	r21, r1
    11d0:	a9 f1       	breq	.+106    	; 0x123c <DIO_u8GetPinValue+0xb8>
    11d2:	8f 81       	ldd	r24, Y+7	; 0x07
    11d4:	98 85       	ldd	r25, Y+8	; 0x08
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	91 05       	cpc	r25, r1
    11da:	34 f4       	brge	.+12     	; 0x11e8 <DIO_u8GetPinValue+0x64>
    11dc:	2f 81       	ldd	r18, Y+7	; 0x07
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	21 15       	cp	r18, r1
    11e2:	31 05       	cpc	r19, r1
    11e4:	71 f0       	breq	.+28     	; 0x1202 <DIO_u8GetPinValue+0x7e>
    11e6:	82 c0       	rjmp	.+260    	; 0x12ec <DIO_u8GetPinValue+0x168>
    11e8:	4f 81       	ldd	r20, Y+7	; 0x07
    11ea:	58 85       	ldd	r21, Y+8	; 0x08
    11ec:	42 30       	cpi	r20, 0x02	; 2
    11ee:	51 05       	cpc	r21, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <DIO_u8GetPinValue+0x70>
    11f2:	41 c0       	rjmp	.+130    	; 0x1276 <DIO_u8GetPinValue+0xf2>
    11f4:	8f 81       	ldd	r24, Y+7	; 0x07
    11f6:	98 85       	ldd	r25, Y+8	; 0x08
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_u8GetPinValue+0x7c>
    11fe:	58 c0       	rjmp	.+176    	; 0x12b0 <DIO_u8GetPinValue+0x12c>
    1200:	75 c0       	rjmp	.+234    	; 0x12ec <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA : 
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);
    1202:	e9 e3       	ldi	r30, 0x39	; 57
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a9 01       	movw	r20, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_u8GetPinValue+0x96>
    1216:	55 95       	asr	r21
    1218:	47 95       	ror	r20
    121a:	8a 95       	dec	r24
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_u8GetPinValue+0x92>
    121e:	ca 01       	movw	r24, r20
    1220:	81 70       	andi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	88 23       	and	r24, r24
    1228:	21 f4       	brne	.+8      	; 0x1232 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    122a:	ed 81       	ldd	r30, Y+5	; 0x05
    122c:	fe 81       	ldd	r31, Y+6	; 0x06
    122e:	10 82       	st	Z, r1
    1230:	5d c0       	rjmp	.+186    	; 0x12ec <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1232:	ed 81       	ldd	r30, Y+5	; 0x05
    1234:	fe 81       	ldd	r31, Y+6	; 0x06
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 83       	st	Z, r24
    123a:	58 c0       	rjmp	.+176    	; 0x12ec <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    123c:	e6 e3       	ldi	r30, 0x36	; 54
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_u8GetPinValue+0xd0>
    1250:	55 95       	asr	r21
    1252:	47 95       	ror	r20
    1254:	8a 95       	dec	r24
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_u8GetPinValue+0xcc>
    1258:	ca 01       	movw	r24, r20
    125a:	81 70       	andi	r24, 0x01	; 1
    125c:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	88 23       	and	r24, r24
    1262:	21 f4       	brne	.+8      	; 0x126c <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1264:	ed 81       	ldd	r30, Y+5	; 0x05
    1266:	fe 81       	ldd	r31, Y+6	; 0x06
    1268:	10 82       	st	Z, r1
    126a:	40 c0       	rjmp	.+128    	; 0x12ec <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    126c:	ed 81       	ldd	r30, Y+5	; 0x05
    126e:	fe 81       	ldd	r31, Y+6	; 0x06
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 83       	st	Z, r24
    1274:	3b c0       	rjmp	.+118    	; 0x12ec <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    1276:	e3 e3       	ldi	r30, 0x33	; 51
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a9 01       	movw	r20, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_u8GetPinValue+0x10a>
    128a:	55 95       	asr	r21
    128c:	47 95       	ror	r20
    128e:	8a 95       	dec	r24
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_u8GetPinValue+0x106>
    1292:	ca 01       	movw	r24, r20
    1294:	81 70       	andi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	88 23       	and	r24, r24
    129c:	21 f4       	brne	.+8      	; 0x12a6 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    129e:	ed 81       	ldd	r30, Y+5	; 0x05
    12a0:	fe 81       	ldd	r31, Y+6	; 0x06
    12a2:	10 82       	st	Z, r1
    12a4:	23 c0       	rjmp	.+70     	; 0x12ec <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12a6:	ed 81       	ldd	r30, Y+5	; 0x05
    12a8:	fe 81       	ldd	r31, Y+6	; 0x06
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	80 83       	st	Z, r24
    12ae:	1e c0       	rjmp	.+60     	; 0x12ec <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    12b0:	e0 e3       	ldi	r30, 0x30	; 48
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a9 01       	movw	r20, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_u8GetPinValue+0x144>
    12c4:	55 95       	asr	r21
    12c6:	47 95       	ror	r20
    12c8:	8a 95       	dec	r24
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_u8GetPinValue+0x140>
    12cc:	ca 01       	movw	r24, r20
    12ce:	81 70       	andi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 23       	and	r24, r24
    12d6:	21 f4       	brne	.+8      	; 0x12e0 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    12d8:	ed 81       	ldd	r30, Y+5	; 0x05
    12da:	fe 81       	ldd	r31, Y+6	; 0x06
    12dc:	10 82       	st	Z, r1
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12e0:	ed 81       	ldd	r30, Y+5	; 0x05
    12e2:	fe 81       	ldd	r31, Y+6	; 0x06
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 83       	st	Z, r24
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12ea:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    12ee:	28 96       	adiw	r28, 0x08	; 8
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <DIO_u8SetPortDirection>:
 
u8 DIO_u8SetPortDirection  (u8 Copy_u8PortId, u8 Copy_PortDirection)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	2d 97       	sbiw	r28, 0x0d	; 13
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	8a 83       	std	Y+2, r24	; 0x02
    1316:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_PortDirection == DIO_u8_OUTPUT  )||(Copy_PortDirection == DIO_u8_INPUT))
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	21 f0       	breq	.+8      	; 0x132a <DIO_u8SetPortDirection+0x2a>
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 23       	and	r24, r24
    1326:	09 f0       	breq	.+2      	; 0x132a <DIO_u8SetPortDirection+0x2a>
    1328:	7f c0       	rjmp	.+254    	; 0x1428 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3d 87       	std	Y+13, r19	; 0x0d
    1332:	2c 87       	std	Y+12, r18	; 0x0c
    1334:	8c 85       	ldd	r24, Y+12	; 0x0c
    1336:	9d 85       	ldd	r25, Y+13	; 0x0d
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	91 05       	cpc	r25, r1
    133c:	71 f1       	breq	.+92     	; 0x139a <DIO_u8SetPortDirection+0x9a>
    133e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1340:	3d 85       	ldd	r19, Y+13	; 0x0d
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	2c f4       	brge	.+10     	; 0x1352 <DIO_u8SetPortDirection+0x52>
    1348:	8c 85       	ldd	r24, Y+12	; 0x0c
    134a:	9d 85       	ldd	r25, Y+13	; 0x0d
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	69 f0       	breq	.+26     	; 0x136a <DIO_u8SetPortDirection+0x6a>
    1350:	69 c0       	rjmp	.+210    	; 0x1424 <DIO_u8SetPortDirection+0x124>
    1352:	2c 85       	ldd	r18, Y+12	; 0x0c
    1354:	3d 85       	ldd	r19, Y+13	; 0x0d
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	b1 f1       	breq	.+108    	; 0x13c8 <DIO_u8SetPortDirection+0xc8>
    135c:	8c 85       	ldd	r24, Y+12	; 0x0c
    135e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	91 05       	cpc	r25, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <DIO_u8SetPortDirection+0x68>
    1366:	47 c0       	rjmp	.+142    	; 0x13f6 <DIO_u8SetPortDirection+0xf6>
    1368:	5d c0       	rjmp	.+186    	; 0x1424 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA : 
				switch (Copy_PortDirection)
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	3b 87       	std	Y+11, r19	; 0x0b
    1372:	2a 87       	std	Y+10, r18	; 0x0a
    1374:	8a 85       	ldd	r24, Y+10	; 0x0a
    1376:	9b 85       	ldd	r25, Y+11	; 0x0b
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	59 f0       	breq	.+22     	; 0x1392 <DIO_u8SetPortDirection+0x92>
    137c:	2a 85       	ldd	r18, Y+10	; 0x0a
    137e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1380:	21 30       	cpi	r18, 0x01	; 1
    1382:	31 05       	cpc	r19, r1
    1384:	09 f0       	breq	.+2      	; 0x1388 <DIO_u8SetPortDirection+0x88>
    1386:	51 c0       	rjmp	.+162    	; 0x142a <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRA_REG = 0xff; break;
    1388:	ea e3       	ldi	r30, 0x3A	; 58
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	80 83       	st	Z, r24
    1390:	4c c0       	rjmp	.+152    	; 0x142a <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRA_REG = 0x00; break;
    1392:	ea e3       	ldi	r30, 0x3A	; 58
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	10 82       	st	Z, r1
    1398:	48 c0       	rjmp	.+144    	; 0x142a <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTB :
				switch (Copy_PortDirection)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	39 87       	std	Y+9, r19	; 0x09
    13a2:	28 87       	std	Y+8, r18	; 0x08
    13a4:	88 85       	ldd	r24, Y+8	; 0x08
    13a6:	99 85       	ldd	r25, Y+9	; 0x09
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	51 f0       	breq	.+20     	; 0x13c0 <DIO_u8SetPortDirection+0xc0>
    13ac:	28 85       	ldd	r18, Y+8	; 0x08
    13ae:	39 85       	ldd	r19, Y+9	; 0x09
    13b0:	21 30       	cpi	r18, 0x01	; 1
    13b2:	31 05       	cpc	r19, r1
    13b4:	d1 f5       	brne	.+116    	; 0x142a <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRB_REG = 0xff; break;
    13b6:	e7 e3       	ldi	r30, 0x37	; 55
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	80 83       	st	Z, r24
    13be:	35 c0       	rjmp	.+106    	; 0x142a <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRB_REG = 0x00; break;
    13c0:	e7 e3       	ldi	r30, 0x37	; 55
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	10 82       	st	Z, r1
    13c6:	31 c0       	rjmp	.+98     	; 0x142a <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTC :
				switch (Copy_PortDirection)
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3f 83       	std	Y+7, r19	; 0x07
    13d0:	2e 83       	std	Y+6, r18	; 0x06
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
    13d4:	9f 81       	ldd	r25, Y+7	; 0x07
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	51 f0       	breq	.+20     	; 0x13ee <DIO_u8SetPortDirection+0xee>
    13da:	2e 81       	ldd	r18, Y+6	; 0x06
    13dc:	3f 81       	ldd	r19, Y+7	; 0x07
    13de:	21 30       	cpi	r18, 0x01	; 1
    13e0:	31 05       	cpc	r19, r1
    13e2:	19 f5       	brne	.+70     	; 0x142a <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRC_REG = 0xff; break;
    13e4:	e4 e3       	ldi	r30, 0x34	; 52
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	80 83       	st	Z, r24
    13ec:	1e c0       	rjmp	.+60     	; 0x142a <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRC_REG = 0x00; break;
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	10 82       	st	Z, r1
    13f4:	1a c0       	rjmp	.+52     	; 0x142a <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTD :
				switch (Copy_PortDirection)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3d 83       	std	Y+5, r19	; 0x05
    13fe:	2c 83       	std	Y+4, r18	; 0x04
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	9d 81       	ldd	r25, Y+5	; 0x05
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	51 f0       	breq	.+20     	; 0x141c <DIO_u8SetPortDirection+0x11c>
    1408:	2c 81       	ldd	r18, Y+4	; 0x04
    140a:	3d 81       	ldd	r19, Y+5	; 0x05
    140c:	21 30       	cpi	r18, 0x01	; 1
    140e:	31 05       	cpc	r19, r1
    1410:	61 f4       	brne	.+24     	; 0x142a <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRD_REG = 0xff; break;
    1412:	e1 e3       	ldi	r30, 0x31	; 49
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	80 83       	st	Z, r24
    141a:	07 c0       	rjmp	.+14     	; 0x142a <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRD_REG = 0x00; break;
    141c:	e1 e3       	ldi	r30, 0x31	; 49
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	10 82       	st	Z, r1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			default      :Local_u8ErrorState =STD_TYPES_NOK;
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	01 c0       	rjmp	.+2      	; 0x142a <DIO_u8SetPortDirection+0x12a>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1428:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
}
    142c:	2d 96       	adiw	r28, 0x0d	; 13
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue       (u8 Copy_u8PortId, u8 Copy_PortValue)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_u8SetPortValue+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIO_u8SetPortValue+0x8>
    1446:	0f 92       	push	r0
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	3d 83       	std	Y+5, r19	; 0x05
    145c:	2c 83       	std	Y+4, r18	; 0x04
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	91 05       	cpc	r25, r1
    1466:	d1 f0       	breq	.+52     	; 0x149c <DIO_u8SetPortValue+0x5e>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	2c f4       	brge	.+10     	; 0x147c <DIO_u8SetPortValue+0x3e>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	61 f0       	breq	.+24     	; 0x1492 <DIO_u8SetPortValue+0x54>
    147a:	1f c0       	rjmp	.+62     	; 0x14ba <DIO_u8SetPortValue+0x7c>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	81 f0       	breq	.+32     	; 0x14a6 <DIO_u8SetPortValue+0x68>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	91 05       	cpc	r25, r1
    148e:	81 f0       	breq	.+32     	; 0x14b0 <DIO_u8SetPortValue+0x72>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_PortValue; break;
    1492:	eb e3       	ldi	r30, 0x3B	; 59
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
    149a:	10 c0       	rjmp	.+32     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_PortValue; break;
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	0b c0       	rjmp	.+22     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_PortValue; break;
    14a6:	e5 e3       	ldi	r30, 0x35	; 53
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	80 83       	st	Z, r24
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_PortValue; break;
    14b0:	e2 e3       	ldi	r30, 0x32	; 50
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	80 83       	st	Z, r24
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <DIO_u8SetPortValue+0x7e>
		default           :Local_u8ErrorState = STD_TYPES_NOK;
    14ba:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return Local_u8ErrorState;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue       (u8 Copy_u8PortId , u8 * Copy_pu8ReturnedPortValue )
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_u8GetPortValue+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_u8GetPortValue+0x8>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_u8GetPortValue+0xa>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	7c 83       	std	Y+4, r23	; 0x04
    14e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL)
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	e9 f1       	breq	.+122    	; 0x1568 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	3e 83       	std	Y+6, r19	; 0x06
    14f6:	2d 83       	std	Y+5, r18	; 0x05
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	e1 f0       	breq	.+56     	; 0x153a <DIO_u8GetPortValue+0x6c>
    1502:	2d 81       	ldd	r18, Y+5	; 0x05
    1504:	3e 81       	ldd	r19, Y+6	; 0x06
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	2c f4       	brge	.+10     	; 0x1516 <DIO_u8GetPortValue+0x48>
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	61 f0       	breq	.+24     	; 0x152c <DIO_u8GetPortValue+0x5e>
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <DIO_u8GetPortValue+0x96>
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	a1 f0       	breq	.+40     	; 0x1548 <DIO_u8GetPortValue+0x7a>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	b1 f0       	breq	.+44     	; 0x1556 <DIO_u8GetPortValue+0x88>
    152a:	1c c0       	rjmp	.+56     	; 0x1564 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA : *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG; break;
    152c:	e9 e3       	ldi	r30, 0x39	; 57
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	80 83       	st	Z, r24
    1538:	18 c0       	rjmp	.+48     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB : *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG; break;
    153a:	e6 e3       	ldi	r30, 0x36	; 54
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	eb 81       	ldd	r30, Y+3	; 0x03
    1542:	fc 81       	ldd	r31, Y+4	; 0x04
    1544:	80 83       	st	Z, r24
    1546:	11 c0       	rjmp	.+34     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC : *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG; break; 
    1548:	e3 e3       	ldi	r30, 0x33	; 51
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	80 83       	st	Z, r24
    1554:	0a c0       	rjmp	.+20     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD : *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG; break;
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	80 83       	st	Z, r24
    1562:	03 c0       	rjmp	.+6      	; 0x156a <DIO_u8GetPortValue+0x9c>
			default           : Local_u8ErrorState = STD_TYPES_NOK;
    1564:	19 82       	std	Y+1, r1	; 0x01
    1566:	01 c0       	rjmp	.+2      	; 0x156a <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1568:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	26 96       	adiw	r28, 0x06	; 6
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <GI_voidEnale>:
#include"GI_interface.h"
#include"GI_private.h"
#include"GI_config.h"

void GI_voidEnale(void)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7); 
    1586:	af e5       	ldi	r26, 0x5F	; 95
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e5       	ldi	r30, 0x5F	; 95
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <GI_voidDisable>:

void GI_voidDisable(void)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7); 
    15a2:	af e5       	ldi	r26, 0x5F	; 95
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ef e5       	ldi	r30, 0x5F	; 95
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	8c 93       	st	X, r24
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <LCD_voidInit>:
/*HAL*/
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"
void LCD_voidInit(void)
{
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	cc 54       	subi	r28, 0x4C	; 76
    15c4:	d0 40       	sbci	r29, 0x00	; 0
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	fe 01       	movw	r30, r28
    15d2:	e7 5b       	subi	r30, 0xB7	; 183
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	ac e0       	ldi	r26, 0x0C	; 12
    15dc:	b2 e4       	ldi	r27, 0x42	; 66
    15de:	80 83       	st	Z, r24
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	a2 83       	std	Z+2, r26	; 0x02
    15e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	8e 01       	movw	r16, r28
    15e8:	0b 5b       	subi	r16, 0xBB	; 187
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	fe 01       	movw	r30, r28
    15ee:	e7 5b       	subi	r30, 0xB7	; 183
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	4a ef       	ldi	r20, 0xFA	; 250
    1600:	54 e4       	ldi	r21, 0x44	; 68
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	f8 01       	movw	r30, r16
    160c:	80 83       	st	Z, r24
    160e:	91 83       	std	Z+1, r25	; 0x01
    1610:	a2 83       	std	Z+2, r26	; 0x02
    1612:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1614:	fe 01       	movw	r30, r28
    1616:	eb 5b       	subi	r30, 0xBB	; 187
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	44 f4       	brge	.+16     	; 0x1642 <LCD_voidInit+0x8c>
		__ticks = 1;
    1632:	fe 01       	movw	r30, r28
    1634:	ed 5b       	subi	r30, 0xBD	; 189
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
    1640:	64 c0       	rjmp	.+200    	; 0x170a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1642:	fe 01       	movw	r30, r28
    1644:	eb 5b       	subi	r30, 0xBB	; 187
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	3f ef       	ldi	r19, 0xFF	; 255
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	57 e4       	ldi	r21, 0x47	; 71
    1658:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    165c:	18 16       	cp	r1, r24
    165e:	0c f0       	brlt	.+2      	; 0x1662 <LCD_voidInit+0xac>
    1660:	43 c0       	rjmp	.+134    	; 0x16e8 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	fe 01       	movw	r30, r28
    1664:	e7 5b       	subi	r30, 0xB7	; 183
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e2       	ldi	r20, 0x20	; 32
    1676:	51 e4       	ldi	r21, 0x41	; 65
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	8e 01       	movw	r16, r28
    1682:	0d 5b       	subi	r16, 0xBD	; 189
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	f8 01       	movw	r30, r16
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	80 83       	st	Z, r24
    1698:	1f c0       	rjmp	.+62     	; 0x16d8 <LCD_voidInit+0x122>
    169a:	fe 01       	movw	r30, r28
    169c:	ef 5b       	subi	r30, 0xBF	; 191
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	88 ec       	ldi	r24, 0xC8	; 200
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16a8:	fe 01       	movw	r30, r28
    16aa:	ef 5b       	subi	r30, 0xBF	; 191
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <LCD_voidInit+0xfc>
    16b6:	fe 01       	movw	r30, r28
    16b8:	ef 5b       	subi	r30, 0xBF	; 191
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	de 01       	movw	r26, r28
    16c2:	ad 5b       	subi	r26, 0xBD	; 189
    16c4:	bf 4f       	sbci	r27, 0xFF	; 255
    16c6:	fe 01       	movw	r30, r28
    16c8:	ed 5b       	subi	r30, 0xBD	; 189
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	11 96       	adiw	r26, 0x01	; 1
    16d4:	9c 93       	st	X, r25
    16d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d8:	fe 01       	movw	r30, r28
    16da:	ed 5b       	subi	r30, 0xBD	; 189
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	d1 f6       	brne	.-76     	; 0x169a <LCD_voidInit+0xe4>
    16e6:	24 c0       	rjmp	.+72     	; 0x1730 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	8e 01       	movw	r16, r28
    16ea:	0d 5b       	subi	r16, 0xBD	; 189
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	fe 01       	movw	r30, r28
    16f0:	eb 5b       	subi	r30, 0xBB	; 187
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	f8 01       	movw	r30, r16
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	fe 01       	movw	r30, r28
    170c:	ed 5b       	subi	r30, 0xBD	; 189
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	fe 01       	movw	r30, r28
    1716:	ff 96       	adiw	r30, 0x3f	; 63
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
    171c:	fe 01       	movw	r30, r28
    171e:	ff 96       	adiw	r30, 0x3f	; 63
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCD_voidInit+0x16e>
    1728:	fe 01       	movw	r30, r28
    172a:	ff 96       	adiw	r30, 0x3f	; 63
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set CMND*/
	LCD_voidSendCmnd(CONC(0,0,1,LCD_u8_MODE,LCD_u8_INTIAL_LINE_NUM,LCD_u8_INTIAL_FONT,0,0));
    1730:	88 e3       	ldi	r24, 0x38	; 56
    1732:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a0 e2       	ldi	r26, 0x20	; 32
    173c:	b2 e4       	ldi	r27, 0x42	; 66
    173e:	8b af       	std	Y+59, r24	; 0x3b
    1740:	9c af       	std	Y+60, r25	; 0x3c
    1742:	ad af       	std	Y+61, r26	; 0x3d
    1744:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1746:	6b ad       	ldd	r22, Y+59	; 0x3b
    1748:	7c ad       	ldd	r23, Y+60	; 0x3c
    174a:	8d ad       	ldd	r24, Y+61	; 0x3d
    174c:	9e ad       	ldd	r25, Y+62	; 0x3e
    174e:	2b ea       	ldi	r18, 0xAB	; 171
    1750:	3a ea       	ldi	r19, 0xAA	; 170
    1752:	4a e2       	ldi	r20, 0x2A	; 42
    1754:	50 e4       	ldi	r21, 0x40	; 64
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	8f ab       	std	Y+55, r24	; 0x37
    1760:	98 af       	std	Y+56, r25	; 0x38
    1762:	a9 af       	std	Y+57, r26	; 0x39
    1764:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1766:	6f a9       	ldd	r22, Y+55	; 0x37
    1768:	78 ad       	ldd	r23, Y+56	; 0x38
    176a:	89 ad       	ldd	r24, Y+57	; 0x39
    176c:	9a ad       	ldd	r25, Y+58	; 0x3a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e8       	ldi	r20, 0x80	; 128
    1774:	5f e3       	ldi	r21, 0x3F	; 63
    1776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    177a:	88 23       	and	r24, r24
    177c:	1c f4       	brge	.+6      	; 0x1784 <LCD_voidInit+0x1ce>
		__ticks = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	8e ab       	std	Y+54, r24	; 0x36
    1782:	91 c0       	rjmp	.+290    	; 0x18a6 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1784:	6f a9       	ldd	r22, Y+55	; 0x37
    1786:	78 ad       	ldd	r23, Y+56	; 0x38
    1788:	89 ad       	ldd	r24, Y+57	; 0x39
    178a:	9a ad       	ldd	r25, Y+58	; 0x3a
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	53 e4       	ldi	r21, 0x43	; 67
    1794:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	0c f0       	brlt	.+2      	; 0x179e <LCD_voidInit+0x1e8>
    179c:	7b c0       	rjmp	.+246    	; 0x1894 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    179e:	6b ad       	ldd	r22, Y+59	; 0x3b
    17a0:	7c ad       	ldd	r23, Y+60	; 0x3c
    17a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    17a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	4a e7       	ldi	r20, 0x7A	; 122
    17ac:	54 e4       	ldi	r21, 0x44	; 68
    17ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8a ab       	std	Y+50, r24	; 0x32
    17b8:	9b ab       	std	Y+51, r25	; 0x33
    17ba:	ac ab       	std	Y+52, r26	; 0x34
    17bc:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	6a a9       	ldd	r22, Y+50	; 0x32
    17c0:	7b a9       	ldd	r23, Y+51	; 0x33
    17c2:	8c a9       	ldd	r24, Y+52	; 0x34
    17c4:	9d a9       	ldd	r25, Y+53	; 0x35
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a ef       	ldi	r20, 0xFA	; 250
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8e a7       	std	Y+46, r24	; 0x2e
    17d8:	9f a7       	std	Y+47, r25	; 0x2f
    17da:	a8 ab       	std	Y+48, r26	; 0x30
    17dc:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    17de:	6e a5       	ldd	r22, Y+46	; 0x2e
    17e0:	7f a5       	ldd	r23, Y+47	; 0x2f
    17e2:	88 a9       	ldd	r24, Y+48	; 0x30
    17e4:	99 a9       	ldd	r25, Y+49	; 0x31
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <LCD_voidInit+0x24a>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9d a7       	std	Y+45, r25	; 0x2d
    17fc:	8c a7       	std	Y+44, r24	; 0x2c
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1800:	6e a5       	ldd	r22, Y+46	; 0x2e
    1802:	7f a5       	ldd	r23, Y+47	; 0x2f
    1804:	88 a9       	ldd	r24, Y+48	; 0x30
    1806:	99 a9       	ldd	r25, Y+49	; 0x31
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	6a a9       	ldd	r22, Y+50	; 0x32
    181a:	7b a9       	ldd	r23, Y+51	; 0x33
    181c:	8c a9       	ldd	r24, Y+52	; 0x34
    181e:	9d a9       	ldd	r25, Y+53	; 0x35
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9d a7       	std	Y+45, r25	; 0x2d
    183e:	8c a7       	std	Y+44, r24	; 0x2c
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <LCD_voidInit+0x2aa>
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9b a7       	std	Y+43, r25	; 0x2b
    1848:	8a a7       	std	Y+42, r24	; 0x2a
    184a:	8a a5       	ldd	r24, Y+42	; 0x2a
    184c:	9b a5       	ldd	r25, Y+43	; 0x2b
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_voidInit+0x298>
    1852:	9b a7       	std	Y+43, r25	; 0x2b
    1854:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	8c a5       	ldd	r24, Y+44	; 0x2c
    1858:	9d a5       	ldd	r25, Y+45	; 0x2d
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9d a7       	std	Y+45, r25	; 0x2d
    185e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	8c a5       	ldd	r24, Y+44	; 0x2c
    1862:	9d a5       	ldd	r25, Y+45	; 0x2d
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <LCD_voidInit+0x28c>
    1868:	24 c0       	rjmp	.+72     	; 0x18b2 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6e a5       	ldd	r22, Y+46	; 0x2e
    186c:	7f a5       	ldd	r23, Y+47	; 0x2f
    186e:	88 a9       	ldd	r24, Y+48	; 0x30
    1870:	99 a9       	ldd	r25, Y+49	; 0x31
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9d a7       	std	Y+45, r25	; 0x2d
    187c:	8c a7       	std	Y+44, r24	; 0x2c
    187e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1880:	9d a5       	ldd	r25, Y+45	; 0x2d
    1882:	99 a7       	std	Y+41, r25	; 0x29
    1884:	88 a7       	std	Y+40, r24	; 0x28
    1886:	88 a5       	ldd	r24, Y+40	; 0x28
    1888:	99 a5       	ldd	r25, Y+41	; 0x29
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_voidInit+0x2d4>
    188e:	99 a7       	std	Y+41, r25	; 0x29
    1890:	88 a7       	std	Y+40, r24	; 0x28
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1894:	6f a9       	ldd	r22, Y+55	; 0x37
    1896:	78 ad       	ldd	r23, Y+56	; 0x38
    1898:	89 ad       	ldd	r24, Y+57	; 0x39
    189a:	9a ad       	ldd	r25, Y+58	; 0x3a
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	8e ab       	std	Y+54, r24	; 0x36
    18a6:	8e a9       	ldd	r24, Y+54	; 0x36
    18a8:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18aa:	8f a1       	ldd	r24, Y+39	; 0x27
    18ac:	8a 95       	dec	r24
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_voidInit+0x2f6>
    18b0:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/* Display NO/OFF Control */
	LCD_voidSendCmnd(CONC(0,0,0,0,1,1,LCD_u8_INTIAL_CURSOR_DISPLAY,LCD_u8_INTIAL_CURSOR_BLINK));
    18b2:	8c e0       	ldi	r24, 0x0C	; 12
    18b4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e2       	ldi	r26, 0x20	; 32
    18be:	b2 e4       	ldi	r27, 0x42	; 66
    18c0:	8b a3       	std	Y+35, r24	; 0x23
    18c2:	9c a3       	std	Y+36, r25	; 0x24
    18c4:	ad a3       	std	Y+37, r26	; 0x25
    18c6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18c8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ca:	7c a1       	ldd	r23, Y+36	; 0x24
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	2b ea       	ldi	r18, 0xAB	; 171
    18d2:	3a ea       	ldi	r19, 0xAA	; 170
    18d4:	4a e2       	ldi	r20, 0x2A	; 42
    18d6:	50 e4       	ldi	r21, 0x40	; 64
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8f 8f       	std	Y+31, r24	; 0x1f
    18e2:	98 a3       	std	Y+32, r25	; 0x20
    18e4:	a9 a3       	std	Y+33, r26	; 0x21
    18e6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18ea:	78 a1       	ldd	r23, Y+32	; 0x20
    18ec:	89 a1       	ldd	r24, Y+33	; 0x21
    18ee:	9a a1       	ldd	r25, Y+34	; 0x22
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	1c f4       	brge	.+6      	; 0x1906 <LCD_voidInit+0x350>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	8e 8f       	std	Y+30, r24	; 0x1e
    1904:	91 c0       	rjmp	.+290    	; 0x1a28 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1906:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1908:	78 a1       	ldd	r23, Y+32	; 0x20
    190a:	89 a1       	ldd	r24, Y+33	; 0x21
    190c:	9a a1       	ldd	r25, Y+34	; 0x22
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	53 e4       	ldi	r21, 0x43	; 67
    1916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	0c f0       	brlt	.+2      	; 0x1920 <LCD_voidInit+0x36a>
    191e:	7b c0       	rjmp	.+246    	; 0x1a16 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	4a e7       	ldi	r20, 0x7A	; 122
    192e:	54 e4       	ldi	r21, 0x44	; 68
    1930:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8a 8f       	std	Y+26, r24	; 0x1a
    193a:	9b 8f       	std	Y+27, r25	; 0x1b
    193c:	ac 8f       	std	Y+28, r26	; 0x1c
    193e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1942:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1944:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1946:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a ef       	ldi	r20, 0xFA	; 250
    194e:	54 e4       	ldi	r21, 0x44	; 68
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8e 8b       	std	Y+22, r24	; 0x16
    195a:	9f 8b       	std	Y+23, r25	; 0x17
    195c:	a8 8f       	std	Y+24, r26	; 0x18
    195e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1960:	6e 89       	ldd	r22, Y+22	; 0x16
    1962:	7f 89       	ldd	r23, Y+23	; 0x17
    1964:	88 8d       	ldd	r24, Y+24	; 0x18
    1966:	99 8d       	ldd	r25, Y+25	; 0x19
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9d 8b       	std	Y+21, r25	; 0x15
    197e:	8c 8b       	std	Y+20, r24	; 0x14
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1982:	6e 89       	ldd	r22, Y+22	; 0x16
    1984:	7f 89       	ldd	r23, Y+23	; 0x17
    1986:	88 8d       	ldd	r24, Y+24	; 0x18
    1988:	99 8d       	ldd	r25, Y+25	; 0x19
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    199c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    199e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9d 8b       	std	Y+21, r25	; 0x15
    19c0:	8c 8b       	std	Y+20, r24	; 0x14
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <LCD_voidInit+0x42c>
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9b 8b       	std	Y+19, r25	; 0x13
    19ca:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19cc:	8a 89       	ldd	r24, Y+18	; 0x12
    19ce:	9b 89       	ldd	r25, Y+19	; 0x13
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_voidInit+0x41a>
    19d4:	9b 8b       	std	Y+19, r25	; 0x13
    19d6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8c 89       	ldd	r24, Y+20	; 0x14
    19da:	9d 89       	ldd	r25, Y+21	; 0x15
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	9d 8b       	std	Y+21, r25	; 0x15
    19e0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8c 89       	ldd	r24, Y+20	; 0x14
    19e4:	9d 89       	ldd	r25, Y+21	; 0x15
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <LCD_voidInit+0x40e>
    19ea:	24 c0       	rjmp	.+72     	; 0x1a34 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	6e 89       	ldd	r22, Y+22	; 0x16
    19ee:	7f 89       	ldd	r23, Y+23	; 0x17
    19f0:	88 8d       	ldd	r24, Y+24	; 0x18
    19f2:	99 8d       	ldd	r25, Y+25	; 0x19
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9d 8b       	std	Y+21, r25	; 0x15
    19fe:	8c 8b       	std	Y+20, r24	; 0x14
    1a00:	8c 89       	ldd	r24, Y+20	; 0x14
    1a02:	9d 89       	ldd	r25, Y+21	; 0x15
    1a04:	99 8b       	std	Y+17, r25	; 0x11
    1a06:	88 8b       	std	Y+16, r24	; 0x10
    1a08:	88 89       	ldd	r24, Y+16	; 0x10
    1a0a:	99 89       	ldd	r25, Y+17	; 0x11
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_voidInit+0x456>
    1a10:	99 8b       	std	Y+17, r25	; 0x11
    1a12:	88 8b       	std	Y+16, r24	; 0x10
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a16:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a18:	78 a1       	ldd	r23, Y+32	; 0x20
    1a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	8e 8f       	std	Y+30, r24	; 0x1e
    1a28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a2a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2e:	8a 95       	dec	r24
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_voidInit+0x478>
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/* Display Clear */
	LCD_voidSendCmnd(0b00000001);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b0 e4       	ldi	r27, 0x40	; 64
    1a42:	8b 87       	std	Y+11, r24	; 0x0b
    1a44:	9c 87       	std	Y+12, r25	; 0x0c
    1a46:	ad 87       	std	Y+13, r26	; 0x0d
    1a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a ef       	ldi	r20, 0xFA	; 250
    1a58:	54 e4       	ldi	r21, 0x44	; 68
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8f 83       	std	Y+7, r24	; 0x07
    1a64:	98 87       	std	Y+8, r25	; 0x08
    1a66:	a9 87       	std	Y+9, r26	; 0x09
    1a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <LCD_voidInit+0x4d6>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <LCD_voidInit+0x536>
    1ace:	88 ec       	ldi	r24, 0xC8	; 200
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_voidInit+0x524>
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <LCD_voidInit+0x518>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_voidInit+0x560>
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* Entry Mood Set */
	LCD_voidSendCmnd(0b00000110);
    1b1e:	86 e0       	ldi	r24, 0x06	; 6
    1b20:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
	
}
    1b24:	c4 5b       	subi	r28, 0xB4	; 180
    1b26:	df 4f       	sbci	r29, 0xFF	; 255
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	08 95       	ret

00001b3c <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	69 97       	sbiw	r28, 0x19	; 25
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	89 8f       	std	Y+25, r24	; 0x19
	#if LCD_u8_MODE == BIT_LENGTH_8
	/* step-1:Rs = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_LOW);
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
	/* Write command */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Cmnd  );
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6a:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e8       	ldi	r26, 0x80	; 128
    1b7e:	bf e3       	ldi	r27, 0x3F	; 63
    1b80:	8d 8b       	std	Y+21, r24	; 0x15
    1b82:	9e 8b       	std	Y+22, r25	; 0x16
    1b84:	af 8b       	std	Y+23, r26	; 0x17
    1b86:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b88:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b90:	2b ea       	ldi	r18, 0xAB	; 171
    1b92:	3a ea       	ldi	r19, 0xAA	; 170
    1b94:	4a e2       	ldi	r20, 0x2A	; 42
    1b96:	50 e4       	ldi	r21, 0x40	; 64
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	89 8b       	std	Y+17, r24	; 0x11
    1ba2:	9a 8b       	std	Y+18, r25	; 0x12
    1ba4:	ab 8b       	std	Y+19, r26	; 0x13
    1ba6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ba8:	69 89       	ldd	r22, Y+17	; 0x11
    1baa:	7a 89       	ldd	r23, Y+18	; 0x12
    1bac:	8b 89       	ldd	r24, Y+19	; 0x13
    1bae:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	1c f4       	brge	.+6      	; 0x1bc6 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	88 8b       	std	Y+16, r24	; 0x10
    1bc4:	91 c0       	rjmp	.+290    	; 0x1ce8 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1bc6:	69 89       	ldd	r22, Y+17	; 0x11
    1bc8:	7a 89       	ldd	r23, Y+18	; 0x12
    1bca:	8b 89       	ldd	r24, Y+19	; 0x13
    1bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	53 e4       	ldi	r21, 0x43	; 67
    1bd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	0c f0       	brlt	.+2      	; 0x1be0 <LCD_voidSendCmnd+0xa4>
    1bde:	7b c0       	rjmp	.+246    	; 0x1cd6 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1be0:	6d 89       	ldd	r22, Y+21	; 0x15
    1be2:	7e 89       	ldd	r23, Y+22	; 0x16
    1be4:	8f 89       	ldd	r24, Y+23	; 0x17
    1be6:	98 8d       	ldd	r25, Y+24	; 0x18
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a e7       	ldi	r20, 0x7A	; 122
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8c 87       	std	Y+12, r24	; 0x0c
    1bfa:	9d 87       	std	Y+13, r25	; 0x0d
    1bfc:	ae 87       	std	Y+14, r26	; 0x0e
    1bfe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c02:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c06:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	88 87       	std	Y+8, r24	; 0x08
    1c1a:	99 87       	std	Y+9, r25	; 0x09
    1c1c:	aa 87       	std	Y+10, r26	; 0x0a
    1c1e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c20:	68 85       	ldd	r22, Y+8	; 0x08
    1c22:	79 85       	ldd	r23, Y+9	; 0x09
    1c24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9f 83       	std	Y+7, r25	; 0x07
    1c3e:	8e 83       	std	Y+6, r24	; 0x06
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1c42:	68 85       	ldd	r22, Y+8	; 0x08
    1c44:	79 85       	ldd	r23, Y+9	; 0x09
    1c46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9f 83       	std	Y+7, r25	; 0x07
    1c80:	8e 83       	std	Y+6, r24	; 0x06
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <LCD_voidSendCmnd+0x166>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9d 83       	std	Y+5, r25	; 0x05
    1c8a:	8c 83       	std	Y+4, r24	; 0x04
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_voidSendCmnd+0x154>
    1c94:	9d 83       	std	Y+5, r25	; 0x05
    1c96:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9f 83       	std	Y+7, r25	; 0x07
    1ca0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <LCD_voidSendCmnd+0x148>
    1caa:	24 c0       	rjmp	.+72     	; 0x1cf4 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	68 85       	ldd	r22, Y+8	; 0x08
    1cae:	79 85       	ldd	r23, Y+9	; 0x09
    1cb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9f 83       	std	Y+7, r25	; 0x07
    1cbe:	8e 83       	std	Y+6, r24	; 0x06
    1cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc4:	9b 83       	std	Y+3, r25	; 0x03
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_voidSendCmnd+0x190>
    1cd0:	9b 83       	std	Y+3, r25	; 0x03
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cd6:	69 89       	ldd	r22, Y+17	; 0x11
    1cd8:	7a 89       	ldd	r23, Y+18	; 0x12
    1cda:	8b 89       	ldd	r24, Y+19	; 0x13
    1cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	88 8b       	std	Y+16, r24	; 0x10
    1ce8:	88 89       	ldd	r24, Y+16	; 0x10
    1cea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	8a 95       	dec	r24
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_voidSendCmnd+0x1b2>
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	62 e0       	ldi	r22, 0x02	; 2
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
	
	
	
	
	#endif
}
    1cfe:	69 96       	adiw	r28, 0x19	; 25
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	69 97       	sbiw	r28, 0x19	; 25
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	89 8f       	std	Y+25, r24	; 0x19
	/* step-1:Rs = 1 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_HIGH);
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
	/* Write char */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Char  );
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3e:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	62 e0       	ldi	r22, 0x02	; 2
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	a0 e8       	ldi	r26, 0x80	; 128
    1d52:	bf e3       	ldi	r27, 0x3F	; 63
    1d54:	8d 8b       	std	Y+21, r24	; 0x15
    1d56:	9e 8b       	std	Y+22, r25	; 0x16
    1d58:	af 8b       	std	Y+23, r26	; 0x17
    1d5a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d60:	8f 89       	ldd	r24, Y+23	; 0x17
    1d62:	98 8d       	ldd	r25, Y+24	; 0x18
    1d64:	2b ea       	ldi	r18, 0xAB	; 171
    1d66:	3a ea       	ldi	r19, 0xAA	; 170
    1d68:	4a e2       	ldi	r20, 0x2A	; 42
    1d6a:	50 e4       	ldi	r21, 0x40	; 64
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	89 8b       	std	Y+17, r24	; 0x11
    1d76:	9a 8b       	std	Y+18, r25	; 0x12
    1d78:	ab 8b       	std	Y+19, r26	; 0x13
    1d7a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d7c:	69 89       	ldd	r22, Y+17	; 0x11
    1d7e:	7a 89       	ldd	r23, Y+18	; 0x12
    1d80:	8b 89       	ldd	r24, Y+19	; 0x13
    1d82:	9c 89       	ldd	r25, Y+20	; 0x14
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e8       	ldi	r20, 0x80	; 128
    1d8a:	5f e3       	ldi	r21, 0x3F	; 63
    1d8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d90:	88 23       	and	r24, r24
    1d92:	1c f4       	brge	.+6      	; 0x1d9a <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	88 8b       	std	Y+16, r24	; 0x10
    1d98:	91 c0       	rjmp	.+290    	; 0x1ebc <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1d9a:	69 89       	ldd	r22, Y+17	; 0x11
    1d9c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1da0:	9c 89       	ldd	r25, Y+20	; 0x14
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	53 e4       	ldi	r21, 0x43	; 67
    1daa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	0c f0       	brlt	.+2      	; 0x1db4 <LCD_voidSendChar+0xa4>
    1db2:	7b c0       	rjmp	.+246    	; 0x1eaa <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a e7       	ldi	r20, 0x7A	; 122
    1dc2:	54 e4       	ldi	r21, 0x44	; 68
    1dc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8c 87       	std	Y+12, r24	; 0x0c
    1dce:	9d 87       	std	Y+13, r25	; 0x0d
    1dd0:	ae 87       	std	Y+14, r26	; 0x0e
    1dd2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dd6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dda:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a ef       	ldi	r20, 0xFA	; 250
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	88 87       	std	Y+8, r24	; 0x08
    1dee:	99 87       	std	Y+9, r25	; 0x09
    1df0:	aa 87       	std	Y+10, r26	; 0x0a
    1df2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1df4:	68 85       	ldd	r22, Y+8	; 0x08
    1df6:	79 85       	ldd	r23, Y+9	; 0x09
    1df8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <LCD_voidSendChar+0x106>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9f 83       	std	Y+7, r25	; 0x07
    1e12:	8e 83       	std	Y+6, r24	; 0x06
    1e14:	3f c0       	rjmp	.+126    	; 0x1e94 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1e16:	68 85       	ldd	r22, Y+8	; 0x08
    1e18:	79 85       	ldd	r23, Y+9	; 0x09
    1e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	57 e4       	ldi	r21, 0x47	; 71
    1e26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	4c f5       	brge	.+82     	; 0x1e80 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e30:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e32:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e34:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9f 83       	std	Y+7, r25	; 0x07
    1e54:	8e 83       	std	Y+6, r24	; 0x06
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <LCD_voidSendChar+0x166>
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9d 83       	std	Y+5, r25	; 0x05
    1e5e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
    1e62:	9d 81       	ldd	r25, Y+5	; 0x05
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_voidSendChar+0x154>
    1e68:	9d 83       	std	Y+5, r25	; 0x05
    1e6a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9f 83       	std	Y+7, r25	; 0x07
    1e74:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8e 81       	ldd	r24, Y+6	; 0x06
    1e78:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <LCD_voidSendChar+0x148>
    1e7e:	24 c0       	rjmp	.+72     	; 0x1ec8 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	68 85       	ldd	r22, Y+8	; 0x08
    1e82:	79 85       	ldd	r23, Y+9	; 0x09
    1e84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9f 83       	std	Y+7, r25	; 0x07
    1e92:	8e 83       	std	Y+6, r24	; 0x06
    1e94:	8e 81       	ldd	r24, Y+6	; 0x06
    1e96:	9f 81       	ldd	r25, Y+7	; 0x07
    1e98:	9b 83       	std	Y+3, r25	; 0x03
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_voidSendChar+0x190>
    1ea4:	9b 83       	std	Y+3, r25	; 0x03
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eaa:	69 89       	ldd	r22, Y+17	; 0x11
    1eac:	7a 89       	ldd	r23, Y+18	; 0x12
    1eae:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	88 8b       	std	Y+16, r24	; 0x10
    1ebc:	88 89       	ldd	r24, Y+16	; 0x10
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	8a 95       	dec	r24
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_voidSendChar+0x1b2>
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	62 e0       	ldi	r22, 0x02	; 2
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
}
    1ed2:	69 96       	adiw	r28, 0x19	; 25
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <LCD_voidSendStr>:

void LCD_voidSendStr(u8* Copy_pu8Str )
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <LCD_voidSendStr+0x6>
    1eea:	0f 92       	push	r0
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	9b 83       	std	Y+3, r25	; 0x03
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StrLen = 0;
    1ef4:	19 82       	std	Y+1, r1	; 0x01
    1ef6:	0e c0       	rjmp	.+28     	; 0x1f14 <LCD_voidSendStr+0x30>
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	fc 01       	movw	r30, r24
    1f04:	e2 0f       	add	r30, r18
    1f06:	f3 1f       	adc	r31, r19
    1f08:	80 81       	ld	r24, Z
    1f0a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_voidSendChar>
		Local_u8StrLen++;
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	8f 5f       	subi	r24, 0xFF	; 255
    1f12:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendStr(u8* Copy_pu8Str )
{
	u8 Local_u8StrLen = 0;
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1e:	fc 01       	movw	r30, r24
    1f20:	e2 0f       	add	r30, r18
    1f22:	f3 1f       	adc	r31, r19
    1f24:	80 81       	ld	r24, Z
    1f26:	88 23       	and	r24, r24
    1f28:	39 f7       	brne	.-50     	; 0x1ef8 <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
		Local_u8StrLen++;
	}
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <LCD_voidSendNum>:

void LCD_voidSendNum (u32  Copy_u32Num )
{
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	61 97       	sbiw	r28, 0x11	; 17
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	6e 87       	std	Y+14, r22	; 0x0e
    1f50:	7f 87       	std	Y+15, r23	; 0x0f
    1f52:	88 8b       	std	Y+16, r24	; 0x10
    1f54:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8NumArr[10]= {0};
    1f56:	8a e0       	ldi	r24, 0x0A	; 10
    1f58:	fe 01       	movw	r30, r28
    1f5a:	34 96       	adiw	r30, 0x04	; 4
    1f5c:	df 01       	movw	r26, r30
    1f5e:	98 2f       	mov	r25, r24
    1f60:	1d 92       	st	X+, r1
    1f62:	9a 95       	dec	r25
    1f64:	e9 f7       	brne	.-6      	; 0x1f60 <LCD_voidSendNum+0x2a>
	u8 Local_u8ArrIndex = 0;
    1f66:	1b 82       	std	Y+3, r1	; 0x03
    1f68:	2d c0       	rjmp	.+90     	; 0x1fc4 <LCD_voidSendNum+0x8e>
	while(Copy_u32Num > 0)
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	08 2f       	mov	r16, r24
    1f6e:	10 e0       	ldi	r17, 0x00	; 0
    1f70:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f72:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f74:	a8 89       	ldd	r26, Y+16	; 0x10
    1f76:	b9 89       	ldd	r27, Y+17	; 0x11
    1f78:	2a e0       	ldi	r18, 0x0A	; 10
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodsi4>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	ce 01       	movw	r24, r28
    1f90:	04 96       	adiw	r24, 0x04	; 4
    1f92:	fc 01       	movw	r30, r24
    1f94:	e0 0f       	add	r30, r16
    1f96:	f1 1f       	adc	r31, r17
    1f98:	20 83       	st	Z, r18
		Copy_u32Num /=10;
    1f9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f9e:	a8 89       	ldd	r26, Y+16	; 0x10
    1fa0:	b9 89       	ldd	r27, Y+17	; 0x11
    1fa2:	2a e0       	ldi	r18, 0x0A	; 10
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 b9 13 	call	0x2772	; 0x2772 <__udivmodsi4>
    1fb2:	da 01       	movw	r26, r20
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	8e 87       	std	Y+14, r24	; 0x0e
    1fb8:	9f 87       	std	Y+15, r25	; 0x0f
    1fba:	a8 8b       	std	Y+16, r26	; 0x10
    1fbc:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ArrIndex++;
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	8f 5f       	subi	r24, 0xFF	; 255
    1fc2:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidSendNum (u32  Copy_u32Num )
{
    u8 Local_u8NumArr[10]= {0};
	u8 Local_u8ArrIndex = 0;
	while(Copy_u32Num > 0)
    1fc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc8:	a8 89       	ldd	r26, Y+16	; 0x10
    1fca:	b9 89       	ldd	r27, Y+17	; 0x11
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	a1 05       	cpc	r26, r1
    1fd0:	b1 05       	cpc	r27, r1
    1fd2:	59 f6       	brne	.-106    	; 0x1f6a <LCD_voidSendNum+0x34>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	10 c0       	rjmp	.+32     	; 0x2002 <LCD_voidSendNum+0xcc>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
    1fe2:	29 81       	ldd	r18, Y+1	; 0x01
    1fe4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	04 96       	adiw	r24, 0x04	; 4
    1fea:	fc 01       	movw	r30, r24
    1fec:	e2 0f       	add	r30, r18
    1fee:	f3 1f       	adc	r31, r19
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 5d       	subi	r24, 0xD0	; 208
    1ff4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_voidSendChar>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	99 23       	and	r25, r25
    2008:	64 f7       	brge	.-40     	; 0x1fe2 <LCD_voidSendNum+0xac>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
	}
} 
    200a:	61 96       	adiw	r28, 0x11	; 17
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	08 95       	ret

00002020 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY (u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <LCD_u8GoToXY+0x6>
    2026:	00 d0       	rcall	.+0      	; 0x2028 <LCD_u8GoToXY+0x8>
    2028:	0f 92       	push	r0
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Location <= 39)
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	88 32       	cpi	r24, 0x28	; 40
    203a:	e0 f4       	brcc	.+56     	; 0x2074 <LCD_u8GoToXY+0x54>
	{
			switch (Copy_u8LineNum)
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	3d 83       	std	Y+5, r19	; 0x05
    2044:	2c 83       	std	Y+4, r18	; 0x04
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	9d 81       	ldd	r25, Y+5	; 0x05
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 05       	cpc	r25, r1
    204e:	31 f0       	breq	.+12     	; 0x205c <LCD_u8GoToXY+0x3c>
    2050:	2c 81       	ldd	r18, Y+4	; 0x04
    2052:	3d 81       	ldd	r19, Y+5	; 0x05
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	31 f0       	breq	.+12     	; 0x2066 <LCD_u8GoToXY+0x46>
    205a:	0a c0       	rjmp	.+20     	; 0x2070 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE_1   : LCD_voidSendCmnd (0x80 + Copy_u8Location); break;
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	80 58       	subi	r24, 0x80	; 128
    2060:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE_2   : LCD_voidSendCmnd (0xC0 + Copy_u8Location); break;
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	80 54       	subi	r24, 0x40	; 64
    206a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    206e:	03 c0       	rjmp	.+6      	; 0x2076 <LCD_u8GoToXY+0x56>
			default              : Local_u8ErrorState = STD_TYPES_NOK;
    2070:	19 82       	std	Y+1, r1	; 0x01
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2074:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2076:	89 81       	ldd	r24, Y+1	; 0x01
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <LCD_voidClearScreen>:

void LCD_voidClearScreen (void)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	2e 97       	sbiw	r28, 0x0e	; 14
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd (0x01);
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e0       	ldi	r26, 0x00	; 0
    20a8:	b0 e4       	ldi	r27, 0x40	; 64
    20aa:	8b 87       	std	Y+11, r24	; 0x0b
    20ac:	9c 87       	std	Y+12, r25	; 0x0c
    20ae:	ad 87       	std	Y+13, r26	; 0x0d
    20b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a ef       	ldi	r20, 0xFA	; 250
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8f 83       	std	Y+7, r24	; 0x07
    20cc:	98 87       	std	Y+8, r25	; 0x08
    20ce:	a9 87       	std	Y+9, r26	; 0x09
    20d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	6b 85       	ldd	r22, Y+11	; 0x0b
    210e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2110:	8d 85       	ldd	r24, Y+13	; 0x0d
    2112:	9e 85       	ldd	r25, Y+14	; 0x0e
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <LCD_voidClearScreen+0xcc>
    2136:	88 ec       	ldi	r24, 0xC8	; 200
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_voidClearScreen+0xba>
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <LCD_voidClearScreen+0xae>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_voidClearScreen+0xf6>
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    2186:	2e 96       	adiw	r28, 0x0e	; 14
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <LCD_u8SendSpecialChar>:

u8 LCD_u8SendSpecialChar    (u8 Copy_u8CharNum , u8* Copy_pu8CharShape ,u8  Copy_u8LineNum , u8 Copy_u8Location )
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	2a 97       	sbiw	r28, 0x0a	; 10
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	8c 83       	std	Y+4, r24	; 0x04
    21ae:	7e 83       	std	Y+6, r23	; 0x06
    21b0:	6d 83       	std	Y+5, r22	; 0x05
    21b2:	4f 83       	std	Y+7, r20	; 0x07
    21b4:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	8b 83       	std	Y+3, r24	; 0x03
	if((Copy_u8CharNum <= 7)&&(Copy_u8Location <= 39)&&(Copy_u8LineNum <=2)) 
    21ba:	8c 81       	ldd	r24, Y+4	; 0x04
    21bc:	88 30       	cpi	r24, 0x08	; 8
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <LCD_u8SendSpecialChar+0x2a>
    21c0:	79 c0       	rjmp	.+242    	; 0x22b4 <LCD_u8SendSpecialChar+0x11c>
    21c2:	88 85       	ldd	r24, Y+8	; 0x08
    21c4:	88 32       	cpi	r24, 0x28	; 40
    21c6:	08 f0       	brcs	.+2      	; 0x21ca <LCD_u8SendSpecialChar+0x32>
    21c8:	75 c0       	rjmp	.+234    	; 0x22b4 <LCD_u8SendSpecialChar+0x11c>
    21ca:	8f 81       	ldd	r24, Y+7	; 0x07
    21cc:	83 30       	cpi	r24, 0x03	; 3
    21ce:	08 f0       	brcs	.+2      	; 0x21d2 <LCD_u8SendSpecialChar+0x3a>
    21d0:	71 c0       	rjmp	.+226    	; 0x22b4 <LCD_u8SendSpecialChar+0x11c>
	{
		switch(Copy_u8CharNum)
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	3a 87       	std	Y+10, r19	; 0x0a
    21da:	29 87       	std	Y+9, r18	; 0x09
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	83 30       	cpi	r24, 0x03	; 3
    21e2:	91 05       	cpc	r25, r1
    21e4:	a9 f1       	breq	.+106    	; 0x2250 <LCD_u8SendSpecialChar+0xb8>
    21e6:	29 85       	ldd	r18, Y+9	; 0x09
    21e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    21ea:	24 30       	cpi	r18, 0x04	; 4
    21ec:	31 05       	cpc	r19, r1
    21ee:	7c f4       	brge	.+30     	; 0x220e <LCD_u8SendSpecialChar+0x76>
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	91 05       	cpc	r25, r1
    21f8:	19 f1       	breq	.+70     	; 0x2240 <LCD_u8SendSpecialChar+0xa8>
    21fa:	29 85       	ldd	r18, Y+9	; 0x09
    21fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    21fe:	22 30       	cpi	r18, 0x02	; 2
    2200:	31 05       	cpc	r19, r1
    2202:	14 f5       	brge	.+68     	; 0x2248 <LCD_u8SendSpecialChar+0xb0>
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	b1 f0       	breq	.+44     	; 0x2238 <LCD_u8SendSpecialChar+0xa0>
    220c:	34 c0       	rjmp	.+104    	; 0x2276 <LCD_u8SendSpecialChar+0xde>
    220e:	29 85       	ldd	r18, Y+9	; 0x09
    2210:	3a 85       	ldd	r19, Y+10	; 0x0a
    2212:	25 30       	cpi	r18, 0x05	; 5
    2214:	31 05       	cpc	r19, r1
    2216:	21 f1       	breq	.+72     	; 0x2260 <LCD_u8SendSpecialChar+0xc8>
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	85 30       	cpi	r24, 0x05	; 5
    221e:	91 05       	cpc	r25, r1
    2220:	dc f0       	brlt	.+54     	; 0x2258 <LCD_u8SendSpecialChar+0xc0>
    2222:	29 85       	ldd	r18, Y+9	; 0x09
    2224:	3a 85       	ldd	r19, Y+10	; 0x0a
    2226:	26 30       	cpi	r18, 0x06	; 6
    2228:	31 05       	cpc	r19, r1
    222a:	f1 f0       	breq	.+60     	; 0x2268 <LCD_u8SendSpecialChar+0xd0>
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	87 30       	cpi	r24, 0x07	; 7
    2232:	91 05       	cpc	r25, r1
    2234:	e9 f0       	breq	.+58     	; 0x2270 <LCD_u8SendSpecialChar+0xd8>
    2236:	1f c0       	rjmp	.+62     	; 0x2276 <LCD_u8SendSpecialChar+0xde>
		{
			case 0:LCD_voidSendCmnd(0b01000000); break; //0
    2238:	80 e4       	ldi	r24, 0x40	; 64
    223a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    223e:	1b c0       	rjmp	.+54     	; 0x2276 <LCD_u8SendSpecialChar+0xde>
			case 1:LCD_voidSendCmnd(0b01001000); break; //8
    2240:	88 e4       	ldi	r24, 0x48	; 72
    2242:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    2246:	17 c0       	rjmp	.+46     	; 0x2276 <LCD_u8SendSpecialChar+0xde>
			case 2:LCD_voidSendCmnd(0b01010000); break; //16
    2248:	80 e5       	ldi	r24, 0x50	; 80
    224a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    224e:	13 c0       	rjmp	.+38     	; 0x2276 <LCD_u8SendSpecialChar+0xde>
			case 3:LCD_voidSendCmnd(0b01011000); break; //24
    2250:	88 e5       	ldi	r24, 0x58	; 88
    2252:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <LCD_u8SendSpecialChar+0xde>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
    2258:	80 e6       	ldi	r24, 0x60	; 96
    225a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    225e:	0b c0       	rjmp	.+22     	; 0x2276 <LCD_u8SendSpecialChar+0xde>
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
    2260:	88 e6       	ldi	r24, 0x68	; 104
    2262:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    2266:	07 c0       	rjmp	.+14     	; 0x2276 <LCD_u8SendSpecialChar+0xde>
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
    2268:	80 e7       	ldi	r24, 0x70	; 112
    226a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <LCD_u8SendSpecialChar+0xde>
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
    2270:	88 e7       	ldi	r24, 0x78	; 120
    2272:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
		}
		for(int i=0 ;i <8 ;i++)
    2276:	1a 82       	std	Y+2, r1	; 0x02
    2278:	19 82       	std	Y+1, r1	; 0x01
    227a:	0f c0       	rjmp	.+30     	; 0x229a <LCD_u8SendSpecialChar+0x102>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
    227c:	29 81       	ldd	r18, Y+1	; 0x01
    227e:	3a 81       	ldd	r19, Y+2	; 0x02
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	fc 01       	movw	r30, r24
    2286:	e2 0f       	add	r30, r18
    2288:	f3 1f       	adc	r31, r19
    228a:	80 81       	ld	r24, Z
    228c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_voidSendChar>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
		}
		for(int i=0 ;i <8 ;i++)
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	88 30       	cpi	r24, 0x08	; 8
    22a0:	91 05       	cpc	r25, r1
    22a2:	64 f3       	brlt	.-40     	; 0x227c <LCD_u8SendSpecialChar+0xe4>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
		}
	    LCD_u8GoToXY(Copy_u8LineNum ,Copy_u8Location );	
    22a4:	8f 81       	ldd	r24, Y+7	; 0x07
    22a6:	68 85       	ldd	r22, Y+8	; 0x08
    22a8:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    22ac:	8c 81       	ldd	r24, Y+4	; 0x04
    22ae:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_voidSendChar>
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <LCD_u8SendSpecialChar+0x11e>
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    22b4:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22b8:	2a 96       	adiw	r28, 0x0a	; 10
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <LCD_voidShiftRight>:

void LCD_voidShiftRight(void)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	2e 97       	sbiw	r28, 0x0e	; 14
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011100);
    22de:	8c e1       	ldi	r24, 0x1C	; 28
    22e0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a8 ec       	ldi	r26, 0xC8	; 200
    22ea:	b2 e4       	ldi	r27, 0x42	; 66
    22ec:	8b 87       	std	Y+11, r24	; 0x0b
    22ee:	9c 87       	std	Y+12, r25	; 0x0c
    22f0:	ad 87       	std	Y+13, r26	; 0x0d
    22f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8f 83       	std	Y+7, r24	; 0x07
    230e:	98 87       	std	Y+8, r25	; 0x08
    2310:	a9 87       	std	Y+9, r26	; 0x09
    2312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <LCD_voidShiftRight+0x6c>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <LCD_voidShiftRight+0xea>
	else if (__tmp > 65535)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <LCD_voidShiftRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <LCD_voidShiftRight+0xcc>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_voidShiftRight+0xba>
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <LCD_voidShiftRight+0xae>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <LCD_voidShiftRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_voidShiftRight+0xf6>
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    23c8:	2e 96       	adiw	r28, 0x0e	; 14
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <LCD_voidShiftLeft>:

void LCD_voidShiftLeft(void)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	2e 97       	sbiw	r28, 0x0e	; 14
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011000);
    23ee:	88 e1       	ldi	r24, 0x18	; 24
    23f0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <LCD_voidSendCmnd>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a8 ec       	ldi	r26, 0xC8	; 200
    23fa:	b2 e4       	ldi	r27, 0x42	; 66
    23fc:	8b 87       	std	Y+11, r24	; 0x0b
    23fe:	9c 87       	std	Y+12, r25	; 0x0c
    2400:	ad 87       	std	Y+13, r26	; 0x0d
    2402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a ef       	ldi	r20, 0xFA	; 250
    2412:	54 e4       	ldi	r21, 0x44	; 68
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8f 83       	std	Y+7, r24	; 0x07
    241e:	98 87       	std	Y+8, r25	; 0x08
    2420:	a9 87       	std	Y+9, r26	; 0x09
    2422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	2c f4       	brge	.+10     	; 0x2446 <LCD_voidShiftLeft+0x6c>
		__ticks = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	3f c0       	rjmp	.+126    	; 0x24c4 <LCD_voidShiftLeft+0xea>
	else if (__tmp > 65535)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	57 e4       	ldi	r21, 0x47	; 71
    2456:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	4c f5       	brge	.+82     	; 0x24b0 <LCD_voidShiftLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <LCD_voidShiftLeft+0xcc>
    2488:	88 ec       	ldi	r24, 0xC8	; 200
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_voidShiftLeft+0xba>
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	69 f7       	brne	.-38     	; 0x2488 <LCD_voidShiftLeft+0xae>
    24ae:	14 c0       	rjmp	.+40     	; 0x24d8 <LCD_voidShiftLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_voidShiftLeft+0xf6>
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
    24d8:	2e 96       	adiw	r28, 0x0e	; 14
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <TIMERS_voidTimer0Init>:

/*Global Pointer To Function Of Timer0 CTC*/
static void(*TIMERS_pfTimer0CTC)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
	/*Select Mood => CTC Mood*/
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
    24f2:	a3 e5       	ldi	r26, 0x53	; 83
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e3 e5       	ldi	r30, 0x53	; 83
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	8f 7b       	andi	r24, 0xBF	; 191
    24fe:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    2500:	a3 e5       	ldi	r26, 0x53	; 83
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e3 e5       	ldi	r30, 0x53	; 83
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	88 60       	ori	r24, 0x08	; 8
    250c:	8c 93       	st	X, r24
	
	/*Enable CTC Interrupt*/
	SET_BIT(TIMERS_u8_TIMSK_REG,1);
    250e:	a9 e5       	ldi	r26, 0x59	; 89
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e9 e5       	ldi	r30, 0x59	; 89
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	82 60       	ori	r24, 0x02	; 2
    251a:	8c 93       	st	X, r24
	
	/* load a value in OCR0 to make interrupt 10ms*/
	TIMERS_u8_OCR0_REG=78;
    251c:	ec e5       	ldi	r30, 0x5C	; 92
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	8e e4       	ldi	r24, 0x4E	; 78
    2522:	80 83       	st	Z, r24
	
	/*Set PreScaler Value = 1024*/
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
    2524:	a3 e5       	ldi	r26, 0x53	; 83
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e3 e5       	ldi	r30, 0x53	; 83
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	81 60       	ori	r24, 0x01	; 1
    2530:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
    2532:	a3 e5       	ldi	r26, 0x53	; 83
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e3 e5       	ldi	r30, 0x53	; 83
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	8d 7f       	andi	r24, 0xFD	; 253
    253e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,2);
    2540:	a3 e5       	ldi	r26, 0x53	; 83
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e3 e5       	ldi	r30, 0x53	; 83
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	84 60       	ori	r24, 0x04	; 4
    254c:	8c 93       	st	X, r24
}
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <TIMERS_u8Timer0SetCallBack>:

u8   TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <TIMERS_u8Timer0SetCallBack+0x6>
    255a:	0f 92       	push	r0
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	9b 83       	std	Y+3, r25	; 0x03
    2562:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	39 f0       	breq	.+14     	; 0x257e <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	90 93 9d 00 	sts	0x009D, r25
    2578:	80 93 9c 00 	sts	0x009C, r24
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    257e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2580:	89 81       	ldd	r24, Y+1	; 0x01
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <__vector_10>:

/*Prototype For ISR of Timer0 CTC*/
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    258e:	1f 92       	push	r1
    2590:	0f 92       	push	r0
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	0f 92       	push	r0
    2596:	11 24       	eor	r1, r1
    2598:	2f 93       	push	r18
    259a:	3f 93       	push	r19
    259c:	4f 93       	push	r20
    259e:	5f 93       	push	r21
    25a0:	6f 93       	push	r22
    25a2:	7f 93       	push	r23
    25a4:	8f 93       	push	r24
    25a6:	9f 93       	push	r25
    25a8:	af 93       	push	r26
    25aa:	bf 93       	push	r27
    25ac:	ef 93       	push	r30
    25ae:	ff 93       	push	r31
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
		if(TIMERS_pfTimer0CTC != NULL)
    25b8:	80 91 9c 00 	lds	r24, 0x009C
    25bc:	90 91 9d 00 	lds	r25, 0x009D
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	29 f0       	breq	.+10     	; 0x25ce <__vector_10+0x40>
		{
			TIMERS_pfTimer0CTC();
    25c4:	e0 91 9c 00 	lds	r30, 0x009C
    25c8:	f0 91 9d 00 	lds	r31, 0x009D
    25cc:	09 95       	icall
		}
}
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	ff 91       	pop	r31
    25d4:	ef 91       	pop	r30
    25d6:	bf 91       	pop	r27
    25d8:	af 91       	pop	r26
    25da:	9f 91       	pop	r25
    25dc:	8f 91       	pop	r24
    25de:	7f 91       	pop	r23
    25e0:	6f 91       	pop	r22
    25e2:	5f 91       	pop	r21
    25e4:	4f 91       	pop	r20
    25e6:	3f 91       	pop	r19
    25e8:	2f 91       	pop	r18
    25ea:	0f 90       	pop	r0
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	0f 90       	pop	r0
    25f0:	1f 90       	pop	r1
    25f2:	18 95       	reti

000025f4 <main>:
volatile unsigned char counter_red=7;

void App_voidIncrease_Counter(void);

int main(void)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    25fc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	LCD_voidInit();
    2600:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_voidInit>
	TIMERS_u8Timer0SetCallBack(&App_voidIncrease_Counter);
    2604:	81 ea       	ldi	r24, 0xA1	; 161
    2606:	93 e1       	ldi	r25, 0x13	; 19
    2608:	0e 94 aa 12 	call	0x2554	; 0x2554 <TIMERS_u8Timer0SetCallBack>
	TIMERS_voidTimer0Init();
    260c:	0e 94 75 12 	call	0x24ea	; 0x24ea <TIMERS_voidTimer0Init>
	GI_voidEnale();
    2610:	0e 94 bf 0a 	call	0x157e	; 0x157e <GI_voidEnale>

	while(1)
	{
		counter_green=10;
    2614:	8a e0       	ldi	r24, 0x0A	; 10
    2616:	80 93 99 00 	sts	0x0099, r24
		counter_yellow=5;
    261a:	85 e0       	ldi	r24, 0x05	; 5
    261c:	80 93 9a 00 	sts	0x009A, r24
		counter_red=7;
    2620:	87 e0       	ldi	r24, 0x07	; 7
    2622:	80 93 9b 00 	sts	0x009B, r24
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);  //red
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);  //Green
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>

		LCD_voidClearScreen();
    263a:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_voidClearScreen>
		LCD_voidSendStr("remaining 10 sec");
    263e:	80 e6       	ldi	r24, 0x60	; 96
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_voidSendStr>
    2646:	1c c0       	rjmp	.+56     	; 0x2680 <main+0x8c>
		while(counter_green > 0)
		{
			if(counter1 == 100)
    2648:	80 91 9e 00 	lds	r24, 0x009E
    264c:	84 36       	cpi	r24, 0x64	; 100
    264e:	c1 f4       	brne	.+48     	; 0x2680 <main+0x8c>
			{
				counter1=0;
    2650:	10 92 9e 00 	sts	0x009E, r1
				counter_green--;
    2654:	80 91 99 00 	lds	r24, 0x0099
    2658:	81 50       	subi	r24, 0x01	; 1
    265a:	80 93 99 00 	sts	0x0099, r24
				LCD_u8GoToXY(1,10);
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	6a e0       	ldi	r22, 0x0A	; 10
    2662:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_u8GoToXY>
				LCD_voidSendChar(' ');
    2666:	80 e2       	ldi	r24, 0x20	; 32
    2668:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_voidSendChar>
				LCD_voidSendChar((counter_green%10)+48);
    266c:	80 91 99 00 	lds	r24, 0x0099
    2670:	9a e0       	ldi	r25, 0x0A	; 10
    2672:	69 2f       	mov	r22, r25
    2674:	0e 94 ad 13 	call	0x275a	; 0x275a <__udivmodqi4>
    2678:	89 2f       	mov	r24, r25
    267a:	80 5d       	subi	r24, 0xD0	; 208
    267c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_voidSendChar>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);  //red
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);  //Green

		LCD_voidClearScreen();
		LCD_voidSendStr("remaining 10 sec");
		while(counter_green > 0)
    2680:	80 91 99 00 	lds	r24, 0x0099
    2684:	88 23       	and	r24, r24
    2686:	01 f7       	brne	.-64     	; 0x2648 <main+0x54>
				LCD_voidSendChar(' ');
				LCD_voidSendChar((counter_green%10)+48);
			}
		}

		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);  //Green
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);  //yellow
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	61 e0       	ldi	r22, 0x01	; 1
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
		LCD_voidClearScreen();
    269c:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_voidClearScreen>
	    LCD_voidSendStr("remaining 5 sec");
    26a0:	81 e7       	ldi	r24, 0x71	; 113
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_voidSendStr>
    26a8:	19 c0       	rjmp	.+50     	; 0x26dc <main+0xe8>

		while(counter_yellow > 0)
		{
			if(counter1 == 100)
    26aa:	80 91 9e 00 	lds	r24, 0x009E
    26ae:	84 36       	cpi	r24, 0x64	; 100
    26b0:	a9 f4       	brne	.+42     	; 0x26dc <main+0xe8>
			{
				counter1=0;
    26b2:	10 92 9e 00 	sts	0x009E, r1
				counter_yellow--;
    26b6:	80 91 9a 00 	lds	r24, 0x009A
    26ba:	81 50       	subi	r24, 0x01	; 1
    26bc:	80 93 9a 00 	sts	0x009A, r24
				LCD_u8GoToXY(1,10);
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	6a e0       	ldi	r22, 0x0A	; 10
    26c4:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_u8GoToXY>
				LCD_voidSendChar((counter_yellow%10)+48);
    26c8:	80 91 9a 00 	lds	r24, 0x009A
    26cc:	9a e0       	ldi	r25, 0x0A	; 10
    26ce:	69 2f       	mov	r22, r25
    26d0:	0e 94 ad 13 	call	0x275a	; 0x275a <__udivmodqi4>
    26d4:	89 2f       	mov	r24, r25
    26d6:	80 5d       	subi	r24, 0xD0	; 208
    26d8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_voidSendChar>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);  //Green
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);  //yellow
		LCD_voidClearScreen();
	    LCD_voidSendStr("remaining 5 sec");

		while(counter_yellow > 0)
    26dc:	80 91 9a 00 	lds	r24, 0x009A
    26e0:	88 23       	and	r24, r24
    26e2:	19 f7       	brne	.-58     	; 0x26aa <main+0xb6>
				counter_yellow--;
				LCD_u8GoToXY(1,10);
				LCD_voidSendChar((counter_yellow%10)+48);
			}
		}
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);  //yellow
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);  //red
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_u8SetPinValue>
		LCD_voidClearScreen();
    26f8:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_voidClearScreen>
		LCD_voidSendStr("remaining 7 sec");
    26fc:	81 e8       	ldi	r24, 0x81	; 129
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_voidSendStr>
    2704:	19 c0       	rjmp	.+50     	; 0x2738 <main+0x144>

		while(counter_red > 0)
		{
			if(counter1 == 100)
    2706:	80 91 9e 00 	lds	r24, 0x009E
    270a:	84 36       	cpi	r24, 0x64	; 100
    270c:	a9 f4       	brne	.+42     	; 0x2738 <main+0x144>
			{
				counter1=0;
    270e:	10 92 9e 00 	sts	0x009E, r1
				counter_red--;
    2712:	80 91 9b 00 	lds	r24, 0x009B
    2716:	81 50       	subi	r24, 0x01	; 1
    2718:	80 93 9b 00 	sts	0x009B, r24
				LCD_u8GoToXY(1,10);
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	6a e0       	ldi	r22, 0x0A	; 10
    2720:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_u8GoToXY>
				LCD_voidSendChar((counter_red%10)+48);
    2724:	80 91 9b 00 	lds	r24, 0x009B
    2728:	9a e0       	ldi	r25, 0x0A	; 10
    272a:	69 2f       	mov	r22, r25
    272c:	0e 94 ad 13 	call	0x275a	; 0x275a <__udivmodqi4>
    2730:	89 2f       	mov	r24, r25
    2732:	80 5d       	subi	r24, 0xD0	; 208
    2734:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_voidSendChar>
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);  //yellow
		DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);  //red
		LCD_voidClearScreen();
		LCD_voidSendStr("remaining 7 sec");

		while(counter_red > 0)
    2738:	80 91 9b 00 	lds	r24, 0x009B
    273c:	88 23       	and	r24, r24
    273e:	19 f7       	brne	.-58     	; 0x2706 <main+0x112>
    2740:	69 cf       	rjmp	.-302    	; 0x2614 <main+0x20>

00002742 <App_voidIncrease_Counter>:
	}
	return 0;
}

void App_voidIncrease_Counter(void)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
	counter1++;
    274a:	80 91 9e 00 	lds	r24, 0x009E
    274e:	8f 5f       	subi	r24, 0xFF	; 255
    2750:	80 93 9e 00 	sts	0x009E, r24
}
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <__udivmodqi4>:
    275a:	99 1b       	sub	r25, r25
    275c:	79 e0       	ldi	r23, 0x09	; 9
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <__udivmodqi4_ep>

00002760 <__udivmodqi4_loop>:
    2760:	99 1f       	adc	r25, r25
    2762:	96 17       	cp	r25, r22
    2764:	08 f0       	brcs	.+2      	; 0x2768 <__udivmodqi4_ep>
    2766:	96 1b       	sub	r25, r22

00002768 <__udivmodqi4_ep>:
    2768:	88 1f       	adc	r24, r24
    276a:	7a 95       	dec	r23
    276c:	c9 f7       	brne	.-14     	; 0x2760 <__udivmodqi4_loop>
    276e:	80 95       	com	r24
    2770:	08 95       	ret

00002772 <__udivmodsi4>:
    2772:	a1 e2       	ldi	r26, 0x21	; 33
    2774:	1a 2e       	mov	r1, r26
    2776:	aa 1b       	sub	r26, r26
    2778:	bb 1b       	sub	r27, r27
    277a:	fd 01       	movw	r30, r26
    277c:	0d c0       	rjmp	.+26     	; 0x2798 <__udivmodsi4_ep>

0000277e <__udivmodsi4_loop>:
    277e:	aa 1f       	adc	r26, r26
    2780:	bb 1f       	adc	r27, r27
    2782:	ee 1f       	adc	r30, r30
    2784:	ff 1f       	adc	r31, r31
    2786:	a2 17       	cp	r26, r18
    2788:	b3 07       	cpc	r27, r19
    278a:	e4 07       	cpc	r30, r20
    278c:	f5 07       	cpc	r31, r21
    278e:	20 f0       	brcs	.+8      	; 0x2798 <__udivmodsi4_ep>
    2790:	a2 1b       	sub	r26, r18
    2792:	b3 0b       	sbc	r27, r19
    2794:	e4 0b       	sbc	r30, r20
    2796:	f5 0b       	sbc	r31, r21

00002798 <__udivmodsi4_ep>:
    2798:	66 1f       	adc	r22, r22
    279a:	77 1f       	adc	r23, r23
    279c:	88 1f       	adc	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	1a 94       	dec	r1
    27a2:	69 f7       	brne	.-38     	; 0x277e <__udivmodsi4_loop>
    27a4:	60 95       	com	r22
    27a6:	70 95       	com	r23
    27a8:	80 95       	com	r24
    27aa:	90 95       	com	r25
    27ac:	9b 01       	movw	r18, r22
    27ae:	ac 01       	movw	r20, r24
    27b0:	bd 01       	movw	r22, r26
    27b2:	cf 01       	movw	r24, r30
    27b4:	08 95       	ret

000027b6 <__prologue_saves__>:
    27b6:	2f 92       	push	r2
    27b8:	3f 92       	push	r3
    27ba:	4f 92       	push	r4
    27bc:	5f 92       	push	r5
    27be:	6f 92       	push	r6
    27c0:	7f 92       	push	r7
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	ca 1b       	sub	r28, r26
    27e0:	db 0b       	sbc	r29, r27
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	09 94       	ijmp

000027ee <__epilogue_restores__>:
    27ee:	2a 88       	ldd	r2, Y+18	; 0x12
    27f0:	39 88       	ldd	r3, Y+17	; 0x11
    27f2:	48 88       	ldd	r4, Y+16	; 0x10
    27f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    27fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    27fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2800:	b9 84       	ldd	r11, Y+9	; 0x09
    2802:	c8 84       	ldd	r12, Y+8	; 0x08
    2804:	df 80       	ldd	r13, Y+7	; 0x07
    2806:	ee 80       	ldd	r14, Y+6	; 0x06
    2808:	fd 80       	ldd	r15, Y+5	; 0x05
    280a:	0c 81       	ldd	r16, Y+4	; 0x04
    280c:	1b 81       	ldd	r17, Y+3	; 0x03
    280e:	aa 81       	ldd	r26, Y+2	; 0x02
    2810:	b9 81       	ldd	r27, Y+1	; 0x01
    2812:	ce 0f       	add	r28, r30
    2814:	d1 1d       	adc	r29, r1
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	ed 01       	movw	r28, r26
    2822:	08 95       	ret

00002824 <_exit>:
    2824:	f8 94       	cli

00002826 <__stop_program>:
    2826:	ff cf       	rjmp	.-2      	; 0x2826 <__stop_program>
