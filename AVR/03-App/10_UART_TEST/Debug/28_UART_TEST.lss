
28_UART_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000047da  0000486e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080008a  0080008a  00004898  2**0
                  ALLOC
  3 .stab         000036cc  00000000  00000000  00004898  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7f  00000000  00000000  00007f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009023  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000addc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bcc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ca74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ce61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d62f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <main>
      8a:	0c 94 eb 23 	jmp	0x47d6	; 0x47d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b4 23 	jmp	0x4768	; 0x4768 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d0 23 	jmp	0x47a0	; 0x47a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b4 23 	jmp	0x4768	; 0x4768 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d0 23 	jmp	0x47a0	; 0x47a0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c4 23 	jmp	0x4788	; 0x4788 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Intial PINS Direction*/ 
	DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION , DIO_u8_PA6_INTIAL_DIRECTION , DIO_u8_PA5_INTIAL_DIRECTION ,  DIO_u8_PA4_INTIAL_DIRECTION, 
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
	                       DIO_u8_PA3_INTIAL_DIRECTION , DIO_u8_PA2_INTIAL_DIRECTION , DIO_u8_PA1_INTIAL_DIRECTION ,  DIO_u8_PA0_INTIAL_DIRECTION );
    
	DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION , DIO_u8_PB6_INTIAL_DIRECTION , DIO_u8_PB5_INTIAL_DIRECTION ,  DIO_u8_PB4_INTIAL_DIRECTION , 
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
			               DIO_u8_PB3_INTIAL_DIRECTION , DIO_u8_PB2_INTIAL_DIRECTION , DIO_u8_PB1_INTIAL_DIRECTION ,  DIO_u8_PB0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION , DIO_u8_PC6_INTIAL_DIRECTION , DIO_u8_PC5_INTIAL_DIRECTION ,  DIO_u8_PC4_INTIAL_DIRECTION ,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8c e3       	ldi	r24, 0x3C	; 60
     b64:	80 83       	st	Z, r24
			               DIO_u8_PC3_INTIAL_DIRECTION , DIO_u8_PC2_INTIAL_DIRECTION , DIO_u8_PC1_INTIAL_DIRECTION ,  DIO_u8_PC0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION , DIO_u8_PD6_INTIAL_DIRECTION , DIO_u8_PD5_INTIAL_DIRECTION ,  DIO_u8_PD4_INTIAL_DIRECTION , 
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
			               DIO_u8_PD3_INTIAL_DIRECTION , DIO_u8_PD2_INTIAL_DIRECTION , DIO_u8_PD1_INTIAL_DIRECTION ,  DIO_u8_PD0_INTIAL_DIRECTION );
						  
						  
	/*Intial PINS Value*/
    DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE         , DIO_u8_PA6_INTIAL_VALUE     , DIO_u8_PA5_INTIAL_VALUE ,      DIO_u8_PA4_INTIAL_VALUE , 
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
				            DIO_u8_PA3_INTIAL_VALUE         , DIO_u8_PA2_INTIAL_VALUE     , DIO_u8_PA1_INTIAL_VALUE ,      DIO_u8_PA0_INTIAL_VALUE);                  
                                                                                   
	DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE         , DIO_u8_PB6_INTIAL_VALUE     , DIO_u8_PB5_INTIAL_VALUE ,      DIO_u8_PB4_INTIAL_VALUE ,
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	87 e1       	ldi	r24, 0x17	; 23
     b78:	80 83       	st	Z, r24
				            DIO_u8_PB3_INTIAL_VALUE         , DIO_u8_PB2_INTIAL_VALUE     , DIO_u8_PB1_INTIAL_VALUE ,      DIO_u8_PB0_INTIAL_VALUE);                  
					                                                                  
	DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE         , DIO_u8_PC6_INTIAL_VALUE     , DIO_u8_PC5_INTIAL_VALUE ,      DIO_u8_PC4_INTIAL_VALUE , 
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	8c e3       	ldi	r24, 0x3C	; 60
     b80:	80 83       	st	Z, r24
				            DIO_u8_PC3_INTIAL_VALUE         , DIO_u8_PC2_INTIAL_VALUE     , DIO_u8_PC1_INTIAL_VALUE ,      DIO_u8_PC0_INTIAL_VALUE);                  
					                                                                 
	DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE         , DIO_u8_PD6_INTIAL_VALUE     , DIO_u8_PD5_INTIAL_VALUE ,      DIO_u8_PD4_INTIAL_VALUE , 
     b82:	e2 e3       	ldi	r30, 0x32	; 50
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	88 ee       	ldi	r24, 0xE8	; 232
     b88:	80 83       	st	Z, r24
				            DIO_u8_PD3_INTIAL_VALUE         , DIO_u8_PD2_INTIAL_VALUE     , DIO_u8_PD1_INTIAL_VALUE ,      DIO_u8_PD0_INTIAL_VALUE);
						                                               
						   
}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinDirection)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	2e 97       	sbiw	r28, 0x0e	; 14
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	8a 83       	std	Y+2, r24	; 0x02
     ba6:	6b 83       	std	Y+3, r22	; 0x03
     ba8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_PinDirection == DIO_u8_OUTPUT)||(Copy_PinDirection == DIO_u8_INPUT)))
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	84 30       	cpi	r24, 0x04	; 4
     bb2:	08 f0       	brcs	.+2      	; 0xbb6 <DIO_u8SetPinDirection+0x26>
     bb4:	0c c1       	rjmp	.+536    	; 0xdce <DIO_u8SetPinDirection+0x23e>
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	88 30       	cpi	r24, 0x08	; 8
     bba:	08 f0       	brcs	.+2      	; 0xbbe <DIO_u8SetPinDirection+0x2e>
     bbc:	08 c1       	rjmp	.+528    	; 0xdce <DIO_u8SetPinDirection+0x23e>
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	21 f0       	breq	.+8      	; 0xbcc <DIO_u8SetPinDirection+0x3c>
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	88 23       	and	r24, r24
     bc8:	09 f0       	breq	.+2      	; 0xbcc <DIO_u8SetPinDirection+0x3c>
     bca:	01 c1       	rjmp	.+514    	; 0xdce <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	3e 87       	std	Y+14, r19	; 0x0e
     bd4:	2d 87       	std	Y+13, r18	; 0x0d
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	91 05       	cpc	r25, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <DIO_u8SetPinDirection+0x52>
     be0:	4f c0       	rjmp	.+158    	; 0xc80 <DIO_u8SetPinDirection+0xf0>
     be2:	2d 85       	ldd	r18, Y+13	; 0x0d
     be4:	3e 85       	ldd	r19, Y+14	; 0x0e
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	31 05       	cpc	r19, r1
     bea:	2c f4       	brge	.+10     	; 0xbf6 <DIO_u8SetPinDirection+0x66>
     bec:	8d 85       	ldd	r24, Y+13	; 0x0d
     bee:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	71 f0       	breq	.+28     	; 0xc10 <DIO_u8SetPinDirection+0x80>
     bf4:	ed c0       	rjmp	.+474    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
     bf6:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf8:	3e 85       	ldd	r19, Y+14	; 0x0e
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	31 05       	cpc	r19, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <DIO_u8SetPinDirection+0x72>
     c00:	77 c0       	rjmp	.+238    	; 0xcf0 <DIO_u8SetPinDirection+0x160>
     c02:	8d 85       	ldd	r24, Y+13	; 0x0d
     c04:	9e 85       	ldd	r25, Y+14	; 0x0e
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	91 05       	cpc	r25, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <DIO_u8SetPinDirection+0x7e>
     c0c:	a9 c0       	rjmp	.+338    	; 0xd60 <DIO_u8SetPinDirection+0x1d0>
     c0e:	e0 c0       	rjmp	.+448    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch(Copy_PinDirection)
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	3c 87       	std	Y+12, r19	; 0x0c
     c18:	2b 87       	std	Y+11, r18	; 0x0b
     c1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	d1 f0       	breq	.+52     	; 0xc56 <DIO_u8SetPinDirection+0xc6>
     c22:	2b 85       	ldd	r18, Y+11	; 0x0b
     c24:	3c 85       	ldd	r19, Y+12	; 0x0c
     c26:	21 30       	cpi	r18, 0x01	; 1
     c28:	31 05       	cpc	r19, r1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <DIO_u8SetPinDirection+0x9e>
     c2c:	d1 c0       	rjmp	.+418    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     c2e:	aa e3       	ldi	r26, 0x3A	; 58
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ea e3       	ldi	r30, 0x3A	; 58
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_u8SetPinDirection+0xbc>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_u8SetPinDirection+0xb8>
     c50:	84 2b       	or	r24, r20
     c52:	8c 93       	st	X, r24
     c54:	bd c0       	rjmp	.+378    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     c56:	aa e3       	ldi	r26, 0x3A	; 58
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ea e3       	ldi	r30, 0x3A	; 58
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_u8SetPinDirection+0xe4>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_u8SetPinDirection+0xe0>
     c78:	80 95       	com	r24
     c7a:	84 23       	and	r24, r20
     c7c:	8c 93       	st	X, r24
     c7e:	a8 c0       	rjmp	.+336    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTB:
				switch(Copy_PinDirection)
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	3a 87       	std	Y+10, r19	; 0x0a
     c88:	29 87       	std	Y+9, r18	; 0x09
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	d1 f0       	breq	.+52     	; 0xcc6 <DIO_u8SetPinDirection+0x136>
     c92:	29 85       	ldd	r18, Y+9	; 0x09
     c94:	3a 85       	ldd	r19, Y+10	; 0x0a
     c96:	21 30       	cpi	r18, 0x01	; 1
     c98:	31 05       	cpc	r19, r1
     c9a:	09 f0       	breq	.+2      	; 0xc9e <DIO_u8SetPinDirection+0x10e>
     c9c:	99 c0       	rjmp	.+306    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     c9e:	a7 e3       	ldi	r26, 0x37	; 55
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e7 e3       	ldi	r30, 0x37	; 55
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_u8SetPinDirection+0x12c>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_u8SetPinDirection+0x128>
     cc0:	84 2b       	or	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	85 c0       	rjmp	.+266    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     cc6:	a7 e3       	ldi	r26, 0x37	; 55
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e7 e3       	ldi	r30, 0x37	; 55
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 2e       	mov	r0, r18
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DIO_u8SetPinDirection+0x154>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DIO_u8SetPinDirection+0x150>
     ce8:	80 95       	com	r24
     cea:	84 23       	and	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	70 c0       	rjmp	.+224    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTC:
				switch(Copy_PinDirection)
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	38 87       	std	Y+8, r19	; 0x08
     cf8:	2f 83       	std	Y+7, r18	; 0x07
     cfa:	8f 81       	ldd	r24, Y+7	; 0x07
     cfc:	98 85       	ldd	r25, Y+8	; 0x08
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	d1 f0       	breq	.+52     	; 0xd36 <DIO_u8SetPinDirection+0x1a6>
     d02:	2f 81       	ldd	r18, Y+7	; 0x07
     d04:	38 85       	ldd	r19, Y+8	; 0x08
     d06:	21 30       	cpi	r18, 0x01	; 1
     d08:	31 05       	cpc	r19, r1
     d0a:	09 f0       	breq	.+2      	; 0xd0e <DIO_u8SetPinDirection+0x17e>
     d0c:	61 c0       	rjmp	.+194    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     d0e:	a4 e3       	ldi	r26, 0x34	; 52
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e4 e3       	ldi	r30, 0x34	; 52
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_u8SetPinDirection+0x19c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_u8SetPinDirection+0x198>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	4d c0       	rjmp	.+154    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     d36:	a4 e3       	ldi	r26, 0x34	; 52
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e4 e3       	ldi	r30, 0x34	; 52
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_u8SetPinDirection+0x1c4>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_u8SetPinDirection+0x1c0>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	38 c0       	rjmp	.+112    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTD:
				switch(Copy_PinDirection)
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	3e 83       	std	Y+6, r19	; 0x06
     d68:	2d 83       	std	Y+5, r18	; 0x05
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	c9 f0       	breq	.+50     	; 0xda4 <DIO_u8SetPinDirection+0x214>
     d72:	2d 81       	ldd	r18, Y+5	; 0x05
     d74:	3e 81       	ldd	r19, Y+6	; 0x06
     d76:	21 30       	cpi	r18, 0x01	; 1
     d78:	31 05       	cpc	r19, r1
     d7a:	51 f5       	brne	.+84     	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     d7c:	a1 e3       	ldi	r26, 0x31	; 49
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e1 e3       	ldi	r30, 0x31	; 49
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_u8SetPinDirection+0x20a>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_u8SetPinDirection+0x206>
     d9e:	84 2b       	or	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	16 c0       	rjmp	.+44     	; 0xdd0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     da4:	a1 e3       	ldi	r26, 0x31	; 49
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e1 e3       	ldi	r30, 0x31	; 49
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_u8SetPinDirection+0x232>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_u8SetPinDirection+0x22e>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <DIO_u8SetPinDirection+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     dce:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd2:	2e 96       	adiw	r28, 0x0e	; 14
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinValue)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	2e 97       	sbiw	r28, 0x0e	; 14
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	6b 83       	std	Y+3, r22	; 0x03
     dfc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	88 30       	cpi	r24, 0x08	; 8
     e06:	08 f0       	brcs	.+2      	; 0xe0a <DIO_u8SetPinValue+0x26>
     e08:	08 c1       	rjmp	.+528    	; 0x101a <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3e 87       	std	Y+14, r19	; 0x0e
     e12:	2d 87       	std	Y+13, r18	; 0x0d
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <DIO_u8SetPinValue+0x3c>
     e1e:	50 c0       	rjmp	.+160    	; 0xec0 <DIO_u8SetPinValue+0xdc>
     e20:	2d 85       	ldd	r18, Y+13	; 0x0d
     e22:	3e 85       	ldd	r19, Y+14	; 0x0e
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	2c f4       	brge	.+10     	; 0xe34 <DIO_u8SetPinValue+0x50>
     e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	71 f0       	breq	.+28     	; 0xe4e <DIO_u8SetPinValue+0x6a>
     e32:	f1 c0       	rjmp	.+482    	; 0x1016 <DIO_u8SetPinValue+0x232>
     e34:	2d 85       	ldd	r18, Y+13	; 0x0d
     e36:	3e 85       	ldd	r19, Y+14	; 0x0e
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <DIO_u8SetPinValue+0x5c>
     e3e:	79 c0       	rjmp	.+242    	; 0xf32 <DIO_u8SetPinValue+0x14e>
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	91 05       	cpc	r25, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <DIO_u8SetPinValue+0x68>
     e4a:	ac c0       	rjmp	.+344    	; 0xfa4 <DIO_u8SetPinValue+0x1c0>
     e4c:	e4 c0       	rjmp	.+456    	; 0x1016 <DIO_u8SetPinValue+0x232>
			{
				case DIO_u8_PORTA:
					switch (Copy_PinValue)
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3c 87       	std	Y+12, r19	; 0x0c
     e56:	2b 87       	std	Y+11, r18	; 0x0b
     e58:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	c9 f0       	breq	.+50     	; 0xe92 <DIO_u8SetPinValue+0xae>
     e60:	2b 85       	ldd	r18, Y+11	; 0x0b
     e62:	3c 85       	ldd	r19, Y+12	; 0x0c
     e64:	21 30       	cpi	r18, 0x01	; 1
     e66:	31 05       	cpc	r19, r1
     e68:	49 f5       	brne	.+82     	; 0xebc <DIO_u8SetPinValue+0xd8>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     e6a:	ab e3       	ldi	r26, 0x3B	; 59
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	eb e3       	ldi	r30, 0x3B	; 59
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_u8SetPinValue+0xa4>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_u8SetPinValue+0xa0>
     e8c:	84 2b       	or	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	c5 c0       	rjmp	.+394    	; 0x101c <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     e92:	ab e3       	ldi	r26, 0x3B	; 59
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	eb e3       	ldi	r30, 0x3B	; 59
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_u8SetPinValue+0xcc>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_u8SetPinValue+0xc8>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	b0 c0       	rjmp	.+352    	; 0x101c <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	ae c0       	rjmp	.+348    	; 0x101c <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTB:
					switch (Copy_PinValue)
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3a 87       	std	Y+10, r19	; 0x0a
     ec8:	29 87       	std	Y+9, r18	; 0x09
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	c9 f0       	breq	.+50     	; 0xf04 <DIO_u8SetPinValue+0x120>
     ed2:	29 85       	ldd	r18, Y+9	; 0x09
     ed4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed6:	21 30       	cpi	r18, 0x01	; 1
     ed8:	31 05       	cpc	r19, r1
     eda:	49 f5       	brne	.+82     	; 0xf2e <DIO_u8SetPinValue+0x14a>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_u8SetPinValue+0x116>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_u8SetPinValue+0x112>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	8c c0       	rjmp	.+280    	; 0x101c <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
     f04:	a8 e3       	ldi	r26, 0x38	; 56
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e8 e3       	ldi	r30, 0x38	; 56
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_u8SetPinValue+0x13e>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_u8SetPinValue+0x13a>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	75 c0       	rjmp	.+234    	; 0x101c <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTC:
					switch (Copy_PinValue)
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	38 87       	std	Y+8, r19	; 0x08
     f3a:	2f 83       	std	Y+7, r18	; 0x07
     f3c:	8f 81       	ldd	r24, Y+7	; 0x07
     f3e:	98 85       	ldd	r25, Y+8	; 0x08
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	c9 f0       	breq	.+50     	; 0xf76 <DIO_u8SetPinValue+0x192>
     f44:	2f 81       	ldd	r18, Y+7	; 0x07
     f46:	38 85       	ldd	r19, Y+8	; 0x08
     f48:	21 30       	cpi	r18, 0x01	; 1
     f4a:	31 05       	cpc	r19, r1
     f4c:	49 f5       	brne	.+82     	; 0xfa0 <DIO_u8SetPinValue+0x1bc>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
     f4e:	a5 e3       	ldi	r26, 0x35	; 53
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e5 e3       	ldi	r30, 0x35	; 53
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_u8SetPinValue+0x188>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_u8SetPinValue+0x184>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	53 c0       	rjmp	.+166    	; 0x101c <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
     f76:	a5 e3       	ldi	r26, 0x35	; 53
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e3       	ldi	r30, 0x35	; 53
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_u8SetPinValue+0x1b0>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_u8SetPinValue+0x1ac>
     f98:	80 95       	com	r24
     f9a:	84 23       	and	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	3e c0       	rjmp	.+124    	; 0x101c <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	3c c0       	rjmp	.+120    	; 0x101c <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTD:
					switch (Copy_PinValue)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3e 83       	std	Y+6, r19	; 0x06
     fac:	2d 83       	std	Y+5, r18	; 0x05
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	c9 f0       	breq	.+50     	; 0xfe8 <DIO_u8SetPinValue+0x204>
     fb6:	2d 81       	ldd	r18, Y+5	; 0x05
     fb8:	3e 81       	ldd	r19, Y+6	; 0x06
     fba:	21 30       	cpi	r18, 0x01	; 1
     fbc:	31 05       	cpc	r19, r1
     fbe:	49 f5       	brne	.+82     	; 0x1012 <DIO_u8SetPinValue+0x22e>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
     fc0:	a2 e3       	ldi	r26, 0x32	; 50
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e2 e3       	ldi	r30, 0x32	; 50
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_u8SetPinValue+0x1fa>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_u8SetPinValue+0x1f6>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	1a c0       	rjmp	.+52     	; 0x101c <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
     fe8:	a2 e3       	ldi	r26, 0x32	; 50
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e2 e3       	ldi	r30, 0x32	; 50
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_u8SetPinValue+0x222>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_u8SetPinValue+0x21e>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	05 c0       	rjmp	.+10     	; 0x101c <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	03 c0       	rjmp	.+6      	; 0x101c <DIO_u8SetPinValue+0x238>
					}
				break;
				
				default:Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	01 c0       	rjmp	.+2      	; 0x101c <DIO_u8SetPinValue+0x238>
				
			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    101a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	2e 96       	adiw	r28, 0x0e	; 14
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 * Copy_pu8ReturnedPinValue )
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	28 97       	sbiw	r28, 0x08	; 8
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	8b 83       	std	Y+3, r24	; 0x03
    1046:	6c 83       	std	Y+4, r22	; 0x04
    1048:	5e 83       	std	Y+6, r21	; 0x06
    104a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	08 f0       	brcs	.+2      	; 0x1058 <DIO_u8GetPinValue+0x28>
    1056:	9f c0       	rjmp	.+318    	; 0x1196 <DIO_u8GetPinValue+0x166>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	88 30       	cpi	r24, 0x08	; 8
    105c:	08 f0       	brcs	.+2      	; 0x1060 <DIO_u8GetPinValue+0x30>
    105e:	9b c0       	rjmp	.+310    	; 0x1196 <DIO_u8GetPinValue+0x166>
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	09 f4       	brne	.+2      	; 0x106a <DIO_u8GetPinValue+0x3a>
    1068:	96 c0       	rjmp	.+300    	; 0x1196 <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	38 87       	std	Y+8, r19	; 0x08
    1072:	2f 83       	std	Y+7, r18	; 0x07
    1074:	4f 81       	ldd	r20, Y+7	; 0x07
    1076:	58 85       	ldd	r21, Y+8	; 0x08
    1078:	41 30       	cpi	r20, 0x01	; 1
    107a:	51 05       	cpc	r21, r1
    107c:	a9 f1       	breq	.+106    	; 0x10e8 <DIO_u8GetPinValue+0xb8>
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	91 05       	cpc	r25, r1
    1086:	34 f4       	brge	.+12     	; 0x1094 <DIO_u8GetPinValue+0x64>
    1088:	2f 81       	ldd	r18, Y+7	; 0x07
    108a:	38 85       	ldd	r19, Y+8	; 0x08
    108c:	21 15       	cp	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	71 f0       	breq	.+28     	; 0x10ae <DIO_u8GetPinValue+0x7e>
    1092:	82 c0       	rjmp	.+260    	; 0x1198 <DIO_u8GetPinValue+0x168>
    1094:	4f 81       	ldd	r20, Y+7	; 0x07
    1096:	58 85       	ldd	r21, Y+8	; 0x08
    1098:	42 30       	cpi	r20, 0x02	; 2
    109a:	51 05       	cpc	r21, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <DIO_u8GetPinValue+0x70>
    109e:	41 c0       	rjmp	.+130    	; 0x1122 <DIO_u8GetPinValue+0xf2>
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	98 85       	ldd	r25, Y+8	; 0x08
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <DIO_u8GetPinValue+0x7c>
    10aa:	58 c0       	rjmp	.+176    	; 0x115c <DIO_u8GetPinValue+0x12c>
    10ac:	75 c0       	rjmp	.+234    	; 0x1198 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA : 
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);
    10ae:	e9 e3       	ldi	r30, 0x39	; 57
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8GetPinValue+0x96>
    10c2:	55 95       	asr	r21
    10c4:	47 95       	ror	r20
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8GetPinValue+0x92>
    10ca:	ca 01       	movw	r24, r20
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 23       	and	r24, r24
    10d4:	21 f4       	brne	.+8      	; 0x10de <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    10d6:	ed 81       	ldd	r30, Y+5	; 0x05
    10d8:	fe 81       	ldd	r31, Y+6	; 0x06
    10da:	10 82       	st	Z, r1
    10dc:	5d c0       	rjmp	.+186    	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    10de:	ed 81       	ldd	r30, Y+5	; 0x05
    10e0:	fe 81       	ldd	r31, Y+6	; 0x06
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 83       	st	Z, r24
    10e6:	58 c0       	rjmp	.+176    	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    10e8:	e6 e3       	ldi	r30, 0x36	; 54
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_u8GetPinValue+0xd0>
    10fc:	55 95       	asr	r21
    10fe:	47 95       	ror	r20
    1100:	8a 95       	dec	r24
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_u8GetPinValue+0xcc>
    1104:	ca 01       	movw	r24, r20
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	88 23       	and	r24, r24
    110e:	21 f4       	brne	.+8      	; 0x1118 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1110:	ed 81       	ldd	r30, Y+5	; 0x05
    1112:	fe 81       	ldd	r31, Y+6	; 0x06
    1114:	10 82       	st	Z, r1
    1116:	40 c0       	rjmp	.+128    	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1118:	ed 81       	ldd	r30, Y+5	; 0x05
    111a:	fe 81       	ldd	r31, Y+6	; 0x06
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 83       	st	Z, r24
    1120:	3b c0       	rjmp	.+118    	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    1122:	e3 e3       	ldi	r30, 0x33	; 51
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_u8GetPinValue+0x10a>
    1136:	55 95       	asr	r21
    1138:	47 95       	ror	r20
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_u8GetPinValue+0x106>
    113e:	ca 01       	movw	r24, r20
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	88 23       	and	r24, r24
    1148:	21 f4       	brne	.+8      	; 0x1152 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    114a:	ed 81       	ldd	r30, Y+5	; 0x05
    114c:	fe 81       	ldd	r31, Y+6	; 0x06
    114e:	10 82       	st	Z, r1
    1150:	23 c0       	rjmp	.+70     	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1152:	ed 81       	ldd	r30, Y+5	; 0x05
    1154:	fe 81       	ldd	r31, Y+6	; 0x06
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 83       	st	Z, r24
    115a:	1e c0       	rjmp	.+60     	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    115c:	e0 e3       	ldi	r30, 0x30	; 48
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_u8GetPinValue+0x144>
    1170:	55 95       	asr	r21
    1172:	47 95       	ror	r20
    1174:	8a 95       	dec	r24
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_u8GetPinValue+0x140>
    1178:	ca 01       	movw	r24, r20
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	88 23       	and	r24, r24
    1182:	21 f4       	brne	.+8      	; 0x118c <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1184:	ed 81       	ldd	r30, Y+5	; 0x05
    1186:	fe 81       	ldd	r31, Y+6	; 0x06
    1188:	10 82       	st	Z, r1
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    118c:	ed 81       	ldd	r30, Y+5	; 0x05
    118e:	fe 81       	ldd	r31, Y+6	; 0x06
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 83       	st	Z, r24
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1196:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    119a:	28 96       	adiw	r28, 0x08	; 8
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <DIO_u8SetPortDirection>:
 
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_PortDirection)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	2d 97       	sbiw	r28, 0x0d	; 13
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	8a 83       	std	Y+2, r24	; 0x02
    11c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_PortDirection == DIO_u8_OUTPUT  )||(Copy_PortDirection == DIO_u8_INPUT))
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <DIO_u8SetPortDirection+0x2a>
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	88 23       	and	r24, r24
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <DIO_u8SetPortDirection+0x2a>
    11d4:	7f c0       	rjmp	.+254    	; 0x12d4 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3d 87       	std	Y+13, r19	; 0x0d
    11de:	2c 87       	std	Y+12, r18	; 0x0c
    11e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	71 f1       	breq	.+92     	; 0x1246 <DIO_u8SetPortDirection+0x9a>
    11ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	2c f4       	brge	.+10     	; 0x11fe <DIO_u8SetPortDirection+0x52>
    11f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	69 f0       	breq	.+26     	; 0x1216 <DIO_u8SetPortDirection+0x6a>
    11fc:	69 c0       	rjmp	.+210    	; 0x12d0 <DIO_u8SetPortDirection+0x124>
    11fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1200:	3d 85       	ldd	r19, Y+13	; 0x0d
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	b1 f1       	breq	.+108    	; 0x1274 <DIO_u8SetPortDirection+0xc8>
    1208:	8c 85       	ldd	r24, Y+12	; 0x0c
    120a:	9d 85       	ldd	r25, Y+13	; 0x0d
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <DIO_u8SetPortDirection+0x68>
    1212:	47 c0       	rjmp	.+142    	; 0x12a2 <DIO_u8SetPortDirection+0xf6>
    1214:	5d c0       	rjmp	.+186    	; 0x12d0 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA : 
				switch (Copy_PortDirection)
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3b 87       	std	Y+11, r19	; 0x0b
    121e:	2a 87       	std	Y+10, r18	; 0x0a
    1220:	8a 85       	ldd	r24, Y+10	; 0x0a
    1222:	9b 85       	ldd	r25, Y+11	; 0x0b
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	59 f0       	breq	.+22     	; 0x123e <DIO_u8SetPortDirection+0x92>
    1228:	2a 85       	ldd	r18, Y+10	; 0x0a
    122a:	3b 85       	ldd	r19, Y+11	; 0x0b
    122c:	21 30       	cpi	r18, 0x01	; 1
    122e:	31 05       	cpc	r19, r1
    1230:	09 f0       	breq	.+2      	; 0x1234 <DIO_u8SetPortDirection+0x88>
    1232:	51 c0       	rjmp	.+162    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRA_REG = 0xff; break;
    1234:	ea e3       	ldi	r30, 0x3A	; 58
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	80 83       	st	Z, r24
    123c:	4c c0       	rjmp	.+152    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRA_REG = 0x00; break;
    123e:	ea e3       	ldi	r30, 0x3A	; 58
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	10 82       	st	Z, r1
    1244:	48 c0       	rjmp	.+144    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTB :
				switch (Copy_PortDirection)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	39 87       	std	Y+9, r19	; 0x09
    124e:	28 87       	std	Y+8, r18	; 0x08
    1250:	88 85       	ldd	r24, Y+8	; 0x08
    1252:	99 85       	ldd	r25, Y+9	; 0x09
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	51 f0       	breq	.+20     	; 0x126c <DIO_u8SetPortDirection+0xc0>
    1258:	28 85       	ldd	r18, Y+8	; 0x08
    125a:	39 85       	ldd	r19, Y+9	; 0x09
    125c:	21 30       	cpi	r18, 0x01	; 1
    125e:	31 05       	cpc	r19, r1
    1260:	d1 f5       	brne	.+116    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRB_REG = 0xff; break;
    1262:	e7 e3       	ldi	r30, 0x37	; 55
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	80 83       	st	Z, r24
    126a:	35 c0       	rjmp	.+106    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRB_REG = 0x00; break;
    126c:	e7 e3       	ldi	r30, 0x37	; 55
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
    1272:	31 c0       	rjmp	.+98     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTC :
				switch (Copy_PortDirection)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3f 83       	std	Y+7, r19	; 0x07
    127c:	2e 83       	std	Y+6, r18	; 0x06
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	9f 81       	ldd	r25, Y+7	; 0x07
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	51 f0       	breq	.+20     	; 0x129a <DIO_u8SetPortDirection+0xee>
    1286:	2e 81       	ldd	r18, Y+6	; 0x06
    1288:	3f 81       	ldd	r19, Y+7	; 0x07
    128a:	21 30       	cpi	r18, 0x01	; 1
    128c:	31 05       	cpc	r19, r1
    128e:	19 f5       	brne	.+70     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRC_REG = 0xff; break;
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	80 83       	st	Z, r24
    1298:	1e c0       	rjmp	.+60     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRC_REG = 0x00; break;
    129a:	e4 e3       	ldi	r30, 0x34	; 52
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	10 82       	st	Z, r1
    12a0:	1a c0       	rjmp	.+52     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTD :
				switch (Copy_PortDirection)
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3d 83       	std	Y+5, r19	; 0x05
    12aa:	2c 83       	std	Y+4, r18	; 0x04
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	51 f0       	breq	.+20     	; 0x12c8 <DIO_u8SetPortDirection+0x11c>
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	3d 81       	ldd	r19, Y+5	; 0x05
    12b8:	21 30       	cpi	r18, 0x01	; 1
    12ba:	31 05       	cpc	r19, r1
    12bc:	61 f4       	brne	.+24     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRD_REG = 0xff; break;
    12be:	e1 e3       	ldi	r30, 0x31	; 49
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	80 83       	st	Z, r24
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRD_REG = 0x00; break;
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	10 82       	st	Z, r1
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			default      :Local_u8ErrorState =STD_TYPES_NOK;
    12d0:	19 82       	std	Y+1, r1	; 0x01
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	2d 96       	adiw	r28, 0x0d	; 13
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_PortValue)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_u8SetPortValue+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <DIO_u8SetPortValue+0x8>
    12f2:	0f 92       	push	r0
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	8a 83       	std	Y+2, r24	; 0x02
    12fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3d 83       	std	Y+5, r19	; 0x05
    1308:	2c 83       	std	Y+4, r18	; 0x04
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <DIO_u8SetPortValue+0x5e>
    1314:	2c 81       	ldd	r18, Y+4	; 0x04
    1316:	3d 81       	ldd	r19, Y+5	; 0x05
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_u8SetPortValue+0x3e>
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_u8SetPortValue+0x54>
    1326:	1f c0       	rjmp	.+62     	; 0x1366 <DIO_u8SetPortValue+0x7c>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_u8SetPortValue+0x68>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <DIO_u8SetPortValue+0x72>
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_PortValue; break;
    133e:	eb e3       	ldi	r30, 0x3B	; 59
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	80 83       	st	Z, r24
    1346:	10 c0       	rjmp	.+32     	; 0x1368 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_PortValue; break;
    1348:	e8 e3       	ldi	r30, 0x38	; 56
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	80 83       	st	Z, r24
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_PortValue; break;
    1352:	e5 e3       	ldi	r30, 0x35	; 53
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_PortValue; break;
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	80 83       	st	Z, r24
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <DIO_u8SetPortValue+0x7e>
		default           : Local_u8ErrorState = STD_TYPES_NOK;
    1366:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return Local_u8ErrorState;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue (u8 Copy_u8PortId , u8 * Copy_pu8ReturnedPortValue )
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <DIO_u8GetPortValue+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <DIO_u8GetPortValue+0x8>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <DIO_u8GetPortValue+0xa>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	8a 83       	std	Y+2, r24	; 0x02
    138a:	7c 83       	std	Y+4, r23	; 0x04
    138c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL)
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	e9 f1       	breq	.+122    	; 0x1414 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3e 83       	std	Y+6, r19	; 0x06
    13a2:	2d 83       	std	Y+5, r18	; 0x05
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	e1 f0       	breq	.+56     	; 0x13e6 <DIO_u8GetPortValue+0x6c>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <DIO_u8GetPortValue+0x48>
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	61 f0       	breq	.+24     	; 0x13d8 <DIO_u8GetPortValue+0x5e>
    13c0:	27 c0       	rjmp	.+78     	; 0x1410 <DIO_u8GetPortValue+0x96>
    13c2:	2d 81       	ldd	r18, Y+5	; 0x05
    13c4:	3e 81       	ldd	r19, Y+6	; 0x06
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	a1 f0       	breq	.+40     	; 0x13f4 <DIO_u8GetPortValue+0x7a>
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	b1 f0       	breq	.+44     	; 0x1402 <DIO_u8GetPortValue+0x88>
    13d6:	1c c0       	rjmp	.+56     	; 0x1410 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA : *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG; break;
    13d8:	e9 e3       	ldi	r30, 0x39	; 57
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	eb 81       	ldd	r30, Y+3	; 0x03
    13e0:	fc 81       	ldd	r31, Y+4	; 0x04
    13e2:	80 83       	st	Z, r24
    13e4:	18 c0       	rjmp	.+48     	; 0x1416 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB : *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG; break;
    13e6:	e6 e3       	ldi	r30, 0x36	; 54
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	eb 81       	ldd	r30, Y+3	; 0x03
    13ee:	fc 81       	ldd	r31, Y+4	; 0x04
    13f0:	80 83       	st	Z, r24
    13f2:	11 c0       	rjmp	.+34     	; 0x1416 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC : *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG; break; 
    13f4:	e3 e3       	ldi	r30, 0x33	; 51
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	eb 81       	ldd	r30, Y+3	; 0x03
    13fc:	fc 81       	ldd	r31, Y+4	; 0x04
    13fe:	80 83       	st	Z, r24
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD : *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG; break;
    1402:	e0 e3       	ldi	r30, 0x30	; 48
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	eb 81       	ldd	r30, Y+3	; 0x03
    140a:	fc 81       	ldd	r31, Y+4	; 0x04
    140c:	80 83       	st	Z, r24
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <DIO_u8GetPortValue+0x9c>
			default           : Local_u8ErrorState = STD_TYPES_NOK;
    1410:	19 82       	std	Y+1, r1	; 0x01
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1414:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1416:	89 81       	ldd	r24, Y+1	; 0x01
}
    1418:	26 96       	adiw	r28, 0x06	; 6
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <DIO_u8TogglePin>:

u8  DIO_u8TogglePin(u8 Copy_u8PortId, u8 Copy_u8PinId )
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_u8TogglePin+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <DIO_u8TogglePin+0x8>
    1432:	0f 92       	push	r0
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	8a 83       	std	Y+2, r24	; 0x02
    143a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7))
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	84 30       	cpi	r24, 0x04	; 4
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_u8TogglePin+0x1e>
    1446:	73 c0       	rjmp	.+230    	; 0x152e <DIO_u8TogglePin+0x104>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 30       	cpi	r24, 0x08	; 8
    144c:	08 f0       	brcs	.+2      	; 0x1450 <DIO_u8TogglePin+0x26>
    144e:	6f c0       	rjmp	.+222    	; 0x152e <DIO_u8TogglePin+0x104>
	{
		switch(Copy_u8PortId)
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3d 83       	std	Y+5, r19	; 0x05
    1458:	2c 83       	std	Y+4, r18	; 0x04
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	49 f1       	breq	.+82     	; 0x14b6 <DIO_u8TogglePin+0x8c>
    1464:	2c 81       	ldd	r18, Y+4	; 0x04
    1466:	3d 81       	ldd	r19, Y+5	; 0x05
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <DIO_u8TogglePin+0x4e>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	61 f0       	breq	.+24     	; 0x148e <DIO_u8TogglePin+0x64>
    1476:	5c c0       	rjmp	.+184    	; 0x1530 <DIO_u8TogglePin+0x106>
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	71 f1       	breq	.+92     	; 0x14de <DIO_u8TogglePin+0xb4>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	e9 f1       	breq	.+122    	; 0x1506 <DIO_u8TogglePin+0xdc>
    148c:	51 c0       	rjmp	.+162    	; 0x1530 <DIO_u8TogglePin+0x106>
		{
			case DIO_u8_PORTA : TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    148e:	ab e3       	ldi	r26, 0x3B	; 59
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e3       	ldi	r30, 0x3B	; 59
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_u8TogglePin+0x82>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_u8TogglePin+0x7e>
    14b0:	84 27       	eor	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	3d c0       	rjmp	.+122    	; 0x1530 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTB : TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    14b6:	a8 e3       	ldi	r26, 0x38	; 56
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e8 e3       	ldi	r30, 0x38	; 56
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8TogglePin+0xaa>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_u8TogglePin+0xa6>
    14d8:	84 27       	eor	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	29 c0       	rjmp	.+82     	; 0x1530 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTC : TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    14de:	a5 e3       	ldi	r26, 0x35	; 53
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e3       	ldi	r30, 0x35	; 53
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8TogglePin+0xd2>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_u8TogglePin+0xce>
    1500:	84 27       	eor	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	15 c0       	rjmp	.+42     	; 0x1530 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTD : TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1506:	a2 e3       	ldi	r26, 0x32	; 50
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e2 e3       	ldi	r30, 0x32	; 50
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_u8TogglePin+0xfa>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_u8TogglePin+0xf6>
    1528:	84 27       	eor	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <DIO_u8TogglePin+0x106>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    152e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <DIO_u8SendMostNebble>:

u8 DIO_u8SendMostNebble(u8 Copy_u8PortId, u8 Copy_u8Status )
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <DIO_u8SendMostNebble+0x6>
    1548:	00 d0       	rcall	.+0      	; 0x154a <DIO_u8SendMostNebble+0x8>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	8a 83       	std	Y+2, r24	; 0x02
    1552:	6b 83       	std	Y+3, r22	; 0x03
    Copy_u8Status &= 0xF0;
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	80 7f       	andi	r24, 0xF0	; 240
    1558:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <=  DIO_u8_PORTD)
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	84 30       	cpi	r24, 0x04	; 4
    1562:	08 f0       	brcs	.+2      	; 0x1566 <DIO_u8SendMostNebble+0x24>
    1564:	5f c0       	rjmp	.+190    	; 0x1624 <DIO_u8SendMostNebble+0xe2>
	{
		switch(Copy_u8PortId)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3d 83       	std	Y+5, r19	; 0x05
    156e:	2c 83       	std	Y+4, r18	; 0x04
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	29 f1       	breq	.+74     	; 0x15c4 <DIO_u8SendMostNebble+0x82>
    157a:	2c 81       	ldd	r18, Y+4	; 0x04
    157c:	3d 81       	ldd	r19, Y+5	; 0x05
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	2c f4       	brge	.+10     	; 0x158e <DIO_u8SendMostNebble+0x4c>
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	61 f0       	breq	.+24     	; 0x15a4 <DIO_u8SendMostNebble+0x62>
    158c:	4c c0       	rjmp	.+152    	; 0x1626 <DIO_u8SendMostNebble+0xe4>
    158e:	2c 81       	ldd	r18, Y+4	; 0x04
    1590:	3d 81       	ldd	r19, Y+5	; 0x05
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	31 f1       	breq	.+76     	; 0x15e4 <DIO_u8SendMostNebble+0xa2>
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	89 f1       	breq	.+98     	; 0x1604 <DIO_u8SendMostNebble+0xc2>
    15a2:	41 c0       	rjmp	.+130    	; 0x1626 <DIO_u8SendMostNebble+0xe4>
        {
			case DIO_u8_PORTA : DIO_u8_PORTA_REG &= 0x0F; DIO_u8_PORTA_REG |= Copy_u8Status ; break;
    15a4:	ab e3       	ldi	r26, 0x3B	; 59
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	eb e3       	ldi	r30, 0x3B	; 59
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 70       	andi	r24, 0x0F	; 15
    15b0:	8c 93       	st	X, r24
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	90 81       	ld	r25, Z
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	89 2b       	or	r24, r25
    15c0:	8c 93       	st	X, r24
    15c2:	31 c0       	rjmp	.+98     	; 0x1626 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTB : DIO_u8_PORTB_REG &= 0x0F; DIO_u8_PORTB_REG |= Copy_u8Status ; break;
    15c4:	a8 e3       	ldi	r26, 0x38	; 56
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 70       	andi	r24, 0x0F	; 15
    15d0:	8c 93       	st	X, r24
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	90 81       	ld	r25, Z
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	89 2b       	or	r24, r25
    15e0:	8c 93       	st	X, r24
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTC : DIO_u8_PORTC_REG &= 0x0F; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    15e4:	a5 e3       	ldi	r26, 0x35	; 53
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e3       	ldi	r30, 0x35	; 53
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 70       	andi	r24, 0x0F	; 15
    15f0:	8c 93       	st	X, r24
    15f2:	a5 e3       	ldi	r26, 0x35	; 53
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	90 81       	ld	r25, Z
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	89 2b       	or	r24, r25
    1600:	8c 93       	st	X, r24
    1602:	11 c0       	rjmp	.+34     	; 0x1626 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTD : DIO_u8_PORTD_REG &= 0x0F; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    1604:	a2 e3       	ldi	r26, 0x32	; 50
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e2 e3       	ldi	r30, 0x32	; 50
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	8c 93       	st	X, r24
    1612:	a5 e3       	ldi	r26, 0x35	; 53
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e3       	ldi	r30, 0x35	; 53
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	89 2b       	or	r24, r25
    1620:	8c 93       	st	X, r24
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <DIO_u8SendMostNebble+0xe4>
        }
	}
    else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1624:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <DIO_u8SendLeastNebble>:


u8   DIO_u8SendLeastNebble   (u8 Copy_u8PortId, u8 Copy_u8Status)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_u8SendLeastNebble+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_u8SendLeastNebble+0x8>
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6b 83       	std	Y+3, r22	; 0x03
	Copy_u8Status &= 0x0F;
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	8f 70       	andi	r24, 0x0F	; 15
    164e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <=  DIO_u8_PORTD)
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	08 f0       	brcs	.+2      	; 0x165c <DIO_u8SendLeastNebble+0x24>
    165a:	5f c0       	rjmp	.+190    	; 0x171a <DIO_u8SendLeastNebble+0xe2>
	{
		switch (Copy_u8PortId)
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3d 83       	std	Y+5, r19	; 0x05
    1664:	2c 83       	std	Y+4, r18	; 0x04
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	29 f1       	breq	.+74     	; 0x16ba <DIO_u8SendLeastNebble+0x82>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	2c f4       	brge	.+10     	; 0x1684 <DIO_u8SendLeastNebble+0x4c>
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	61 f0       	breq	.+24     	; 0x169a <DIO_u8SendLeastNebble+0x62>
    1682:	4c c0       	rjmp	.+152    	; 0x171c <DIO_u8SendLeastNebble+0xe4>
    1684:	2c 81       	ldd	r18, Y+4	; 0x04
    1686:	3d 81       	ldd	r19, Y+5	; 0x05
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	31 f1       	breq	.+76     	; 0x16da <DIO_u8SendLeastNebble+0xa2>
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	91 05       	cpc	r25, r1
    1696:	89 f1       	breq	.+98     	; 0x16fa <DIO_u8SendLeastNebble+0xc2>
    1698:	41 c0       	rjmp	.+130    	; 0x171c <DIO_u8SendLeastNebble+0xe4>
        {
			case DIO_u8_PORTA : DIO_u8_PORTA_REG &= 0xF0; DIO_u8_PORTA_REG |= Copy_u8Status ; break;
    169a:	ab e3       	ldi	r26, 0x3B	; 59
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e3       	ldi	r30, 0x3B	; 59
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 7f       	andi	r24, 0xF0	; 240
    16a6:	8c 93       	st	X, r24
    16a8:	ab e3       	ldi	r26, 0x3B	; 59
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e3       	ldi	r30, 0x3B	; 59
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	90 81       	ld	r25, Z
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	89 2b       	or	r24, r25
    16b6:	8c 93       	st	X, r24
    16b8:	31 c0       	rjmp	.+98     	; 0x171c <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTB : DIO_u8_PORTB_REG &= 0xF0; DIO_u8_PORTB_REG |= Copy_u8Status ; break;
    16ba:	a8 e3       	ldi	r26, 0x38	; 56
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e8 e3       	ldi	r30, 0x38	; 56
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	80 7f       	andi	r24, 0xF0	; 240
    16c6:	8c 93       	st	X, r24
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	90 81       	ld	r25, Z
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	89 2b       	or	r24, r25
    16d6:	8c 93       	st	X, r24
    16d8:	21 c0       	rjmp	.+66     	; 0x171c <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTC : DIO_u8_PORTC_REG &= 0xF0; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 7f       	andi	r24, 0xF0	; 240
    16e6:	8c 93       	st	X, r24
    16e8:	a5 e3       	ldi	r26, 0x35	; 53
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e3       	ldi	r30, 0x35	; 53
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	90 81       	ld	r25, Z
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	89 2b       	or	r24, r25
    16f6:	8c 93       	st	X, r24
    16f8:	11 c0       	rjmp	.+34     	; 0x171c <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTD : DIO_u8_PORTD_REG &= 0xF0; DIO_u8_PORTD_REG |= Copy_u8Status ; break;
    16fa:	a2 e3       	ldi	r26, 0x32	; 50
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 7f       	andi	r24, 0xF0	; 240
    1706:	8c 93       	st	X, r24
    1708:	a2 e3       	ldi	r26, 0x32	; 50
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e2 e3       	ldi	r30, 0x32	; 50
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	90 81       	ld	r25, Z
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	89 2b       	or	r24, r25
    1716:	8c 93       	st	X, r24
    1718:	01 c0       	rjmp	.+2      	; 0x171c <DIO_u8SendLeastNebble+0xe4>
        }
	}
    else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    171a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    171c:	89 81       	ldd	r24, Y+1	; 0x01
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <GI_voidEnale>:
#include"GI_interface.h"
#include"GI_private.h"
#include"GI_config.h"

void GI_voidEnale(void)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7); 
    1736:	af e5       	ldi	r26, 0x5F	; 95
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ef e5       	ldi	r30, 0x5F	; 95
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	80 68       	ori	r24, 0x80	; 128
    1742:	8c 93       	st	X, r24
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <GI_voidDisable>:

void GI_voidDisable(void)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7); 
    1752:	af e5       	ldi	r26, 0x5F	; 95
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ef e5       	ldi	r30, 0x5F	; 95
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8f 77       	andi	r24, 0x7F	; 127
    175e:	8c 93       	st	X, r24
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <KPD_u8GetKeyState>:
static const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};

static const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

u8 KPD_u8GetKeyState(u8* Copy_pu8ReturnedKey)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	65 97       	sbiw	r28, 0x15	; 21
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	9d 8b       	std	Y+21, r25	; 0x15
    177c:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowCounter;
	u8 Local_u8ColCounter;
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
    1782:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    1784:	8c 89       	ldd	r24, Y+20	; 0x14
    1786:	9d 89       	ldd	r25, Y+21	; 0x15
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	09 f4       	brne	.+2      	; 0x178e <KPD_u8GetKeyState+0x28>
    178c:	f0 c0       	rjmp	.+480    	; 0x196e <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
    178e:	ec 89       	ldd	r30, Y+20	; 0x14
    1790:	fd 89       	ldd	r31, Y+21	; 0x15
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	80 83       	st	Z, r24
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    1796:	19 8a       	std	Y+17, r1	; 0x11
    1798:	e5 c0       	rjmp	.+458    	; 0x1964 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_ROW_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
    179a:	89 89       	ldd	r24, Y+17	; 0x11
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	fc 01       	movw	r30, r24
    17a2:	ee 57       	subi	r30, 0x7E	; 126
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	90 81       	ld	r25, Z
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	69 2f       	mov	r22, r25
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    17b2:	18 8a       	std	Y+16, r1	; 0x10
    17b4:	c1 c0       	rjmp	.+386    	; 0x1938 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    17b6:	88 89       	ldd	r24, Y+16	; 0x10
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	fc 01       	movw	r30, r24
    17be:	ea 57       	subi	r30, 0x7A	; 122
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	90 81       	ld	r25, Z
    17c4:	9e 01       	movw	r18, r28
    17c6:	2d 5e       	subi	r18, 0xED	; 237
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	69 2f       	mov	r22, r25
    17ce:	a9 01       	movw	r20, r18
    17d0:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    17d4:	8b 89       	ldd	r24, Y+19	; 0x13
    17d6:	88 23       	and	r24, r24
    17d8:	09 f0       	breq	.+2      	; 0x17dc <KPD_u8GetKeyState+0x76>
    17da:	ab c0       	rjmp	.+342    	; 0x1932 <KPD_u8GetKeyState+0x1cc>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 ea       	ldi	r26, 0xA0	; 160
    17e2:	b1 e4       	ldi	r27, 0x41	; 65
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
    17e8:	ad 87       	std	Y+13, r26	; 0x0d
    17ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	98 87       	std	Y+8, r25	; 0x08
    1808:	a9 87       	std	Y+9, r26	; 0x09
    180a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6b 85       	ldd	r22, Y+11	; 0x0b
    1848:	7c 85       	ldd	r23, Y+12	; 0x0c
    184a:	8d 85       	ldd	r24, Y+13	; 0x0d
    184c:	9e 85       	ldd	r25, Y+14	; 0x0e
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	0f c0       	rjmp	.+30     	; 0x188e <KPD_u8GetKeyState+0x128>
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <KPD_u8GetKeyState+0x116>
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <KPD_u8GetKeyState+0x10a>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <KPD_u8GetKeyState+0x152>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    18c0:	88 89       	ldd	r24, Y+16	; 0x10
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	fc 01       	movw	r30, r24
    18c8:	ea 57       	subi	r30, 0x7A	; 122
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	90 81       	ld	r25, Z
    18ce:	9e 01       	movw	r18, r28
    18d0:	2d 5e       	subi	r18, 0xED	; 237
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	69 2f       	mov	r22, r25
    18d8:	a9 01       	movw	r20, r18
    18da:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8GetPinValue>
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <KPD_u8GetKeyState+0x198>
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    18e0:	88 89       	ldd	r24, Y+16	; 0x10
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	fc 01       	movw	r30, r24
    18e8:	ea 57       	subi	r30, 0x7A	; 122
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	90 81       	ld	r25, Z
    18ee:	9e 01       	movw	r18, r28
    18f0:	2d 5e       	subi	r18, 0xED	; 237
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	69 2f       	mov	r22, r25
    18f8:	a9 01       	movw	r20, r18
    18fa:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8GetPinValue>
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					while(Local_u8PinValue == DIO_u8_LOW)
    18fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1900:	88 23       	and	r24, r24
    1902:	71 f3       	breq	.-36     	; 0x18e0 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
    1904:	89 89       	ldd	r24, Y+17	; 0x11
    1906:	48 2f       	mov	r20, r24
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	88 89       	ldd	r24, Y+16	; 0x10
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	ca 01       	movw	r24, r20
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	82 0f       	add	r24, r18
    191c:	93 1f       	adc	r25, r19
    191e:	fc 01       	movw	r30, r24
    1920:	ee 58       	subi	r30, 0x8E	; 142
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	ec 89       	ldd	r30, Y+20	; 0x14
    1928:	fd 89       	ldd	r31, Y+21	; 0x15
    192a:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	8f 87       	std	Y+15, r24	; 0x0f
    1930:	07 c0       	rjmp	.+14     	; 0x1940 <KPD_u8GetKeyState+0x1da>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_ROW_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    1932:	88 89       	ldd	r24, Y+16	; 0x10
    1934:	8f 5f       	subi	r24, 0xFF	; 255
    1936:	88 8b       	std	Y+16, r24	; 0x10
    1938:	88 89       	ldd	r24, Y+16	; 0x10
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	08 f4       	brcc	.+2      	; 0x1940 <KPD_u8GetKeyState+0x1da>
    193e:	3b cf       	rjmp	.-394    	; 0x17b6 <KPD_u8GetKeyState+0x50>
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
					Local_u8Flag = 1;
					break; 
				}
			}
			DIO_u8SetPinValue(KPD_u8_ROW_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_HIGH);
    1940:	89 89       	ldd	r24, Y+17	; 0x11
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	fc 01       	movw	r30, r24
    1948:	ee 57       	subi	r30, 0x7E	; 126
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	90 81       	ld	r25, Z
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	69 2f       	mov	r22, r25
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1) 
    1958:	8f 85       	ldd	r24, Y+15	; 0x0f
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	49 f0       	breq	.+18     	; 0x1970 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    195e:	89 89       	ldd	r24, Y+17	; 0x11
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	89 8b       	std	Y+17, r24	; 0x11
    1964:	89 89       	ldd	r24, Y+17	; 0x11
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	08 f4       	brcc	.+2      	; 0x196c <KPD_u8GetKeyState+0x206>
    196a:	17 cf       	rjmp	.-466    	; 0x179a <KPD_u8GetKeyState+0x34>
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <KPD_u8GetKeyState+0x20a>
			}	
		}
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    196e:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    1970:	8a 89       	ldd	r24, Y+18	; 0x12
	
}
    1972:	65 96       	adiw	r28, 0x15	; 21
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"

u8 LCD_Data_Pins[4]={LCD_DB4_PIN,LCD_DB5_PIN,LCD_DB6_PIN,LCD_DB7_PIN};
void LCD_voidInit(void)
{
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	ca 50       	subi	r28, 0x0A	; 10
    1992:	d1 40       	sbci	r29, 0x01	; 1
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	fe 01       	movw	r30, r28
    19a0:	e9 5f       	subi	r30, 0xF9	; 249
    19a2:	fe 4f       	sbci	r31, 0xFE	; 254
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	ac e0       	ldi	r26, 0x0C	; 12
    19aa:	b2 e4       	ldi	r27, 0x42	; 66
    19ac:	80 83       	st	Z, r24
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	a2 83       	std	Z+2, r26	; 0x02
    19b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b4:	8e 01       	movw	r16, r28
    19b6:	0d 5f       	subi	r16, 0xFD	; 253
    19b8:	1e 4f       	sbci	r17, 0xFE	; 254
    19ba:	fe 01       	movw	r30, r28
    19bc:	e9 5f       	subi	r30, 0xF9	; 249
    19be:	fe 4f       	sbci	r31, 0xFE	; 254
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	f8 01       	movw	r30, r16
    19da:	80 83       	st	Z, r24
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	a2 83       	std	Z+2, r26	; 0x02
    19e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e2:	fe 01       	movw	r30, r28
    19e4:	ed 5f       	subi	r30, 0xFD	; 253
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	44 f4       	brge	.+16     	; 0x1a10 <LCD_voidInit+0x8c>
		__ticks = 1;
    1a00:	fe 01       	movw	r30, r28
    1a02:	ef 5f       	subi	r30, 0xFF	; 255
    1a04:	fe 4f       	sbci	r31, 0xFE	; 254
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	80 83       	st	Z, r24
    1a0e:	64 c0       	rjmp	.+200    	; 0x1ad8 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1a10:	fe 01       	movw	r30, r28
    1a12:	ed 5f       	subi	r30, 0xFD	; 253
    1a14:	fe 4f       	sbci	r31, 0xFE	; 254
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	3f ef       	ldi	r19, 0xFF	; 255
    1a22:	4f e7       	ldi	r20, 0x7F	; 127
    1a24:	57 e4       	ldi	r21, 0x47	; 71
    1a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	0c f0       	brlt	.+2      	; 0x1a30 <LCD_voidInit+0xac>
    1a2e:	43 c0       	rjmp	.+134    	; 0x1ab6 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	fe 01       	movw	r30, r28
    1a32:	e9 5f       	subi	r30, 0xF9	; 249
    1a34:	fe 4f       	sbci	r31, 0xFE	; 254
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e2       	ldi	r20, 0x20	; 32
    1a44:	51 e4       	ldi	r21, 0x41	; 65
    1a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8e 01       	movw	r16, r28
    1a50:	0f 5f       	subi	r16, 0xFF	; 255
    1a52:	1e 4f       	sbci	r17, 0xFE	; 254
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	f8 01       	movw	r30, r16
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
    1a66:	1f c0       	rjmp	.+62     	; 0x1aa6 <LCD_voidInit+0x122>
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e1 50       	subi	r30, 0x01	; 1
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
    1a76:	fe 01       	movw	r30, r28
    1a78:	e1 50       	subi	r30, 0x01	; 1
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <LCD_voidInit+0xfc>
    1a84:	fe 01       	movw	r30, r28
    1a86:	e1 50       	subi	r30, 0x01	; 1
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	de 01       	movw	r26, r28
    1a90:	af 5f       	subi	r26, 0xFF	; 255
    1a92:	be 4f       	sbci	r27, 0xFE	; 254
    1a94:	fe 01       	movw	r30, r28
    1a96:	ef 5f       	subi	r30, 0xFF	; 255
    1a98:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	9c 93       	st	X, r25
    1aa4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ef 5f       	subi	r30, 0xFF	; 255
    1aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	d1 f6       	brne	.-76     	; 0x1a68 <LCD_voidInit+0xe4>
    1ab4:	27 c0       	rjmp	.+78     	; 0x1b04 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	8e 01       	movw	r16, r28
    1ab8:	0f 5f       	subi	r16, 0xFF	; 255
    1aba:	1e 4f       	sbci	r17, 0xFE	; 254
    1abc:	fe 01       	movw	r30, r28
    1abe:	ed 5f       	subi	r30, 0xFD	; 253
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	60 81       	ld	r22, Z
    1ac4:	71 81       	ldd	r23, Z+1	; 0x01
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
    1ad8:	de 01       	movw	r26, r28
    1ada:	a3 50       	subi	r26, 0x03	; 3
    1adc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	ef 5f       	subi	r30, 0xFF	; 255
    1ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	8d 93       	st	X+, r24
    1aea:	9c 93       	st	X, r25
    1aec:	fe 01       	movw	r30, r28
    1aee:	e3 50       	subi	r30, 0x03	; 3
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_voidInit+0x172>
    1afa:	fe 01       	movw	r30, r28
    1afc:	e3 50       	subi	r30, 0x03	; 3
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	80 83       	st	Z, r24

		_delay_ms(35);
		//FIRST 4 BITS SENT (function set)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	63 e0       	ldi	r22, 0x03	; 3
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		//FIRST 4 BITS SENT (function set)
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_HIGH);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	62 e0       	ldi	r22, 0x02	; 2
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	64 e0       	ldi	r22, 0x04	; 4
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>



		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e7 50       	subi	r30, 0x07	; 7
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	80 83       	st	Z, r24
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	a2 83       	std	Z+2, r26	; 0x02
    1b5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	8e 01       	movw	r16, r28
    1b62:	0b 50       	subi	r16, 0x0B	; 11
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	e7 50       	subi	r30, 0x07	; 7
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a ef       	ldi	r20, 0xFA	; 250
    1b7a:	54 e4       	ldi	r21, 0x44	; 68
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	f8 01       	movw	r30, r16
    1b86:	80 83       	st	Z, r24
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	a2 83       	std	Z+2, r26	; 0x02
    1b8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b8e:	fe 01       	movw	r30, r28
    1b90:	eb 50       	subi	r30, 0x0B	; 11
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	44 f4       	brge	.+16     	; 0x1bbc <LCD_voidInit+0x238>
		__ticks = 1;
    1bac:	fe 01       	movw	r30, r28
    1bae:	ed 50       	subi	r30, 0x0D	; 13
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
    1bba:	64 c0       	rjmp	.+200    	; 0x1c84 <LCD_voidInit+0x300>
	else if (__tmp > 65535)
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	eb 50       	subi	r30, 0x0B	; 11
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	0c f0       	brlt	.+2      	; 0x1bdc <LCD_voidInit+0x258>
    1bda:	43 c0       	rjmp	.+134    	; 0x1c62 <LCD_voidInit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e7 50       	subi	r30, 0x07	; 7
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	60 81       	ld	r22, Z
    1be4:	71 81       	ldd	r23, Z+1	; 0x01
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8e 01       	movw	r16, r28
    1bfc:	0d 50       	subi	r16, 0x0D	; 13
    1bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	80 83       	st	Z, r24
    1c12:	1f c0       	rjmp	.+62     	; 0x1c52 <LCD_voidInit+0x2ce>
    1c14:	fe 01       	movw	r30, r28
    1c16:	ef 50       	subi	r30, 0x0F	; 15
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	88 ec       	ldi	r24, 0xC8	; 200
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
    1c22:	fe 01       	movw	r30, r28
    1c24:	ef 50       	subi	r30, 0x0F	; 15
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	80 81       	ld	r24, Z
    1c2a:	91 81       	ldd	r25, Z+1	; 0x01
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_voidInit+0x2a8>
    1c30:	fe 01       	movw	r30, r28
    1c32:	ef 50       	subi	r30, 0x0F	; 15
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3a:	de 01       	movw	r26, r28
    1c3c:	ad 50       	subi	r26, 0x0D	; 13
    1c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c40:	fe 01       	movw	r30, r28
    1c42:	ed 50       	subi	r30, 0x0D	; 13
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	9c 93       	st	X, r25
    1c50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	fe 01       	movw	r30, r28
    1c54:	ed 50       	subi	r30, 0x0D	; 13
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	d1 f6       	brne	.-76     	; 0x1c14 <LCD_voidInit+0x290>
    1c60:	27 c0       	rjmp	.+78     	; 0x1cb0 <LCD_voidInit+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	8e 01       	movw	r16, r28
    1c64:	0d 50       	subi	r16, 0x0D	; 13
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	fe 01       	movw	r30, r28
    1c6a:	eb 50       	subi	r30, 0x0B	; 11
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	f8 01       	movw	r30, r16
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	de 01       	movw	r26, r28
    1c86:	a1 51       	subi	r26, 0x11	; 17
    1c88:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ed 50       	subi	r30, 0x0D	; 13
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	8d 93       	st	X+, r24
    1c96:	9c 93       	st	X, r25
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e1 51       	subi	r30, 0x11	; 17
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_voidInit+0x31e>
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e1 51       	subi	r30, 0x11	; 17
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e5 51       	subi	r30, 0x15	; 21
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e8       	ldi	r26, 0x80	; 128
    1cd0:	bf e3       	ldi	r27, 0x3F	; 63
    1cd2:	80 83       	st	Z, r24
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	a2 83       	std	Z+2, r26	; 0x02
    1cd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	8e 01       	movw	r16, r28
    1cdc:	09 51       	subi	r16, 0x19	; 25
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e5 51       	subi	r30, 0x15	; 21
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	f8 01       	movw	r30, r16
    1d00:	80 83       	st	Z, r24
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	a2 83       	std	Z+2, r26	; 0x02
    1d06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e9 51       	subi	r30, 0x19	; 25
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	44 f4       	brge	.+16     	; 0x1d36 <LCD_voidInit+0x3b2>
		__ticks = 1;
    1d26:	fe 01       	movw	r30, r28
    1d28:	eb 51       	subi	r30, 0x1B	; 27
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
    1d34:	64 c0       	rjmp	.+200    	; 0x1dfe <LCD_voidInit+0x47a>
	else if (__tmp > 65535)
    1d36:	fe 01       	movw	r30, r28
    1d38:	e9 51       	subi	r30, 0x19	; 25
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	3f ef       	ldi	r19, 0xFF	; 255
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	57 e4       	ldi	r21, 0x47	; 71
    1d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d50:	18 16       	cp	r1, r24
    1d52:	0c f0       	brlt	.+2      	; 0x1d56 <LCD_voidInit+0x3d2>
    1d54:	43 c0       	rjmp	.+134    	; 0x1ddc <LCD_voidInit+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	fe 01       	movw	r30, r28
    1d58:	e5 51       	subi	r30, 0x15	; 21
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	8e 01       	movw	r16, r28
    1d76:	0b 51       	subi	r16, 0x1B	; 27
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	f8 01       	movw	r30, r16
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
    1d8c:	1f c0       	rjmp	.+62     	; 0x1dcc <LCD_voidInit+0x448>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ed 51       	subi	r30, 0x1D	; 29
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	88 ec       	ldi	r24, 0xC8	; 200
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ed 51       	subi	r30, 0x1D	; 29
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_voidInit+0x422>
    1daa:	fe 01       	movw	r30, r28
    1dac:	ed 51       	subi	r30, 0x1D	; 29
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	de 01       	movw	r26, r28
    1db6:	ab 51       	subi	r26, 0x1B	; 27
    1db8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dba:	fe 01       	movw	r30, r28
    1dbc:	eb 51       	subi	r30, 0x1B	; 27
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	11 96       	adiw	r26, 0x01	; 1
    1dc8:	9c 93       	st	X, r25
    1dca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dcc:	fe 01       	movw	r30, r28
    1dce:	eb 51       	subi	r30, 0x1B	; 27
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	d1 f6       	brne	.-76     	; 0x1d8e <LCD_voidInit+0x40a>
    1dda:	27 c0       	rjmp	.+78     	; 0x1e2a <LCD_voidInit+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	8e 01       	movw	r16, r28
    1dde:	0b 51       	subi	r16, 0x1B	; 27
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	fe 01       	movw	r30, r28
    1de4:	e9 51       	subi	r30, 0x19	; 25
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	f8 01       	movw	r30, r16
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
    1dfe:	de 01       	movw	r26, r28
    1e00:	af 51       	subi	r26, 0x1F	; 31
    1e02:	bf 4f       	sbci	r27, 0xFF	; 255
    1e04:	fe 01       	movw	r30, r28
    1e06:	eb 51       	subi	r30, 0x1B	; 27
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	8d 93       	st	X+, r24
    1e10:	9c 93       	st	X, r25
    1e12:	fe 01       	movw	r30, r28
    1e14:	ef 51       	subi	r30, 0x1F	; 31
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_voidInit+0x498>
    1e20:	fe 01       	movw	r30, r28
    1e22:	ef 51       	subi	r30, 0x1F	; 31
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
		_delay_ms(1);

		//SECOND 4 BITS SENT (function set)
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_HIGH);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	61 e0       	ldi	r22, 0x01	; 1
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	62 e0       	ldi	r22, 0x02	; 2
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	64 e0       	ldi	r22, 0x04	; 4
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	62 e0       	ldi	r22, 0x02	; 2
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e3 52       	subi	r30, 0x23	; 35
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	8e 01       	movw	r16, r28
    1e74:	07 52       	subi	r16, 0x27	; 39
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e3 52       	subi	r30, 0x23	; 35
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e7 52       	subi	r30, 0x27	; 39
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	44 f4       	brge	.+16     	; 0x1ece <LCD_voidInit+0x54a>
		__ticks = 1;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e9 52       	subi	r30, 0x29	; 41
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
    1ecc:	64 c0       	rjmp	.+200    	; 0x1f96 <LCD_voidInit+0x612>
	else if (__tmp > 65535)
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e7 52       	subi	r30, 0x27	; 39
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	3f ef       	ldi	r19, 0xFF	; 255
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	0c f0       	brlt	.+2      	; 0x1eee <LCD_voidInit+0x56a>
    1eec:	43 c0       	rjmp	.+134    	; 0x1f74 <LCD_voidInit+0x5f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e3 52       	subi	r30, 0x23	; 35
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	09 52       	subi	r16, 0x29	; 41
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	1f c0       	rjmp	.+62     	; 0x1f64 <LCD_voidInit+0x5e0>
    1f26:	fe 01       	movw	r30, r28
    1f28:	eb 52       	subi	r30, 0x2B	; 43
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	fe 01       	movw	r30, r28
    1f36:	eb 52       	subi	r30, 0x2B	; 43
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	91 81       	ldd	r25, Z+1	; 0x01
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_voidInit+0x5ba>
    1f42:	fe 01       	movw	r30, r28
    1f44:	eb 52       	subi	r30, 0x2B	; 43
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	de 01       	movw	r26, r28
    1f4e:	a9 52       	subi	r26, 0x29	; 41
    1f50:	bf 4f       	sbci	r27, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	e9 52       	subi	r30, 0x29	; 41
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	9c 93       	st	X, r25
    1f62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	fe 01       	movw	r30, r28
    1f66:	e9 52       	subi	r30, 0x29	; 41
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	d1 f6       	brne	.-76     	; 0x1f26 <LCD_voidInit+0x5a2>
    1f72:	27 c0       	rjmp	.+78     	; 0x1fc2 <LCD_voidInit+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	8e 01       	movw	r16, r28
    1f76:	09 52       	subi	r16, 0x29	; 41
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e7 52       	subi	r30, 0x27	; 39
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	f8 01       	movw	r30, r16
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	de 01       	movw	r26, r28
    1f98:	ad 52       	subi	r26, 0x2D	; 45
    1f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e9 52       	subi	r30, 0x29	; 41
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	8d 93       	st	X+, r24
    1fa8:	9c 93       	st	X, r25
    1faa:	fe 01       	movw	r30, r28
    1fac:	ed 52       	subi	r30, 0x2D	; 45
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_voidInit+0x630>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ed 52       	subi	r30, 0x2D	; 45
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	62 e0       	ldi	r22, 0x02	; 2
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	63 e0       	ldi	r22, 0x03	; 3
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e1 53       	subi	r30, 0x31	; 49
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a0 e8       	ldi	r26, 0x80	; 128
    1fe2:	bf e3       	ldi	r27, 0x3F	; 63
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	a2 83       	std	Z+2, r26	; 0x02
    1fea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	8e 01       	movw	r16, r28
    1fee:	05 53       	subi	r16, 0x35	; 53
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e1 53       	subi	r30, 0x31	; 49
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4a ef       	ldi	r20, 0xFA	; 250
    2006:	54 e4       	ldi	r21, 0x44	; 68
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	f8 01       	movw	r30, r16
    2012:	80 83       	st	Z, r24
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	a2 83       	std	Z+2, r26	; 0x02
    2018:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    201a:	fe 01       	movw	r30, r28
    201c:	e5 53       	subi	r30, 0x35	; 53
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	44 f4       	brge	.+16     	; 0x2048 <LCD_voidInit+0x6c4>
		__ticks = 1;
    2038:	fe 01       	movw	r30, r28
    203a:	e7 53       	subi	r30, 0x37	; 55
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
    2046:	64 c0       	rjmp	.+200    	; 0x2110 <LCD_voidInit+0x78c>
	else if (__tmp > 65535)
    2048:	fe 01       	movw	r30, r28
    204a:	e5 53       	subi	r30, 0x35	; 53
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	0c f0       	brlt	.+2      	; 0x2068 <LCD_voidInit+0x6e4>
    2066:	43 c0       	rjmp	.+134    	; 0x20ee <LCD_voidInit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2068:	fe 01       	movw	r30, r28
    206a:	e1 53       	subi	r30, 0x31	; 49
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	60 81       	ld	r22, Z
    2070:	71 81       	ldd	r23, Z+1	; 0x01
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8e 01       	movw	r16, r28
    2088:	07 53       	subi	r16, 0x37	; 55
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	f8 01       	movw	r30, r16
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
    209e:	1f c0       	rjmp	.+62     	; 0x20de <LCD_voidInit+0x75a>
    20a0:	fe 01       	movw	r30, r28
    20a2:	e9 53       	subi	r30, 0x39	; 57
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	88 ec       	ldi	r24, 0xC8	; 200
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
    20ae:	fe 01       	movw	r30, r28
    20b0:	e9 53       	subi	r30, 0x39	; 57
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_voidInit+0x734>
    20bc:	fe 01       	movw	r30, r28
    20be:	e9 53       	subi	r30, 0x39	; 57
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c6:	de 01       	movw	r26, r28
    20c8:	a7 53       	subi	r26, 0x37	; 55
    20ca:	bf 4f       	sbci	r27, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	e7 53       	subi	r30, 0x37	; 55
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	11 96       	adiw	r26, 0x01	; 1
    20da:	9c 93       	st	X, r25
    20dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	fe 01       	movw	r30, r28
    20e0:	e7 53       	subi	r30, 0x37	; 55
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	d1 f6       	brne	.-76     	; 0x20a0 <LCD_voidInit+0x71c>
    20ec:	27 c0       	rjmp	.+78     	; 0x213c <LCD_voidInit+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ee:	8e 01       	movw	r16, r28
    20f0:	07 53       	subi	r16, 0x37	; 55
    20f2:	1f 4f       	sbci	r17, 0xFF	; 255
    20f4:	fe 01       	movw	r30, r28
    20f6:	e5 53       	subi	r30, 0x35	; 53
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	f8 01       	movw	r30, r16
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	de 01       	movw	r26, r28
    2112:	ab 53       	subi	r26, 0x3B	; 59
    2114:	bf 4f       	sbci	r27, 0xFF	; 255
    2116:	fe 01       	movw	r30, r28
    2118:	e7 53       	subi	r30, 0x37	; 55
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	8d 93       	st	X+, r24
    2122:	9c 93       	st	X, r25
    2124:	fe 01       	movw	r30, r28
    2126:	eb 53       	subi	r30, 0x3B	; 59
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_voidInit+0x7aa>
    2132:	fe 01       	movw	r30, r28
    2134:	eb 53       	subi	r30, 0x3B	; 59
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	80 83       	st	Z, r24
		_delay_ms(1);

		//last 3 bits
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	61 e0       	ldi	r22, 0x01	; 1
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_HIGH);
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	64 e0       	ldi	r22, 0x04	; 4
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	62 e0       	ldi	r22, 0x02	; 2
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    216e:	fe 01       	movw	r30, r28
    2170:	ef 53       	subi	r30, 0x3F	; 63
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	ac e0       	ldi	r26, 0x0C	; 12
    217a:	b2 e4       	ldi	r27, 0x42	; 66
    217c:	80 83       	st	Z, r24
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	a2 83       	std	Z+2, r26	; 0x02
    2182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	8e 01       	movw	r16, r28
    2186:	03 54       	subi	r16, 0x43	; 67
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	fe 01       	movw	r30, r28
    218c:	ef 53       	subi	r30, 0x3F	; 63
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a ef       	ldi	r20, 0xFA	; 250
    219e:	54 e4       	ldi	r21, 0x44	; 68
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	f8 01       	movw	r30, r16
    21aa:	80 83       	st	Z, r24
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	a2 83       	std	Z+2, r26	; 0x02
    21b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21b2:	fe 01       	movw	r30, r28
    21b4:	e3 54       	subi	r30, 0x43	; 67
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	44 f4       	brge	.+16     	; 0x21e0 <LCD_voidInit+0x85c>
		__ticks = 1;
    21d0:	fe 01       	movw	r30, r28
    21d2:	e5 54       	subi	r30, 0x45	; 69
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	64 c0       	rjmp	.+200    	; 0x22a8 <LCD_voidInit+0x924>
	else if (__tmp > 65535)
    21e0:	fe 01       	movw	r30, r28
    21e2:	e3 54       	subi	r30, 0x43	; 67
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	57 e4       	ldi	r21, 0x47	; 71
    21f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	0c f0       	brlt	.+2      	; 0x2200 <LCD_voidInit+0x87c>
    21fe:	43 c0       	rjmp	.+134    	; 0x2286 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	fe 01       	movw	r30, r28
    2202:	ef 53       	subi	r30, 0x3F	; 63
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8e 01       	movw	r16, r28
    2220:	05 54       	subi	r16, 0x45	; 69
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	1f c0       	rjmp	.+62     	; 0x2276 <LCD_voidInit+0x8f2>
    2238:	fe 01       	movw	r30, r28
    223a:	e7 54       	subi	r30, 0x47	; 71
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	88 ec       	ldi	r24, 0xC8	; 200
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
    2246:	fe 01       	movw	r30, r28
    2248:	e7 54       	subi	r30, 0x47	; 71
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_voidInit+0x8cc>
    2254:	fe 01       	movw	r30, r28
    2256:	e7 54       	subi	r30, 0x47	; 71
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	de 01       	movw	r26, r28
    2260:	a5 54       	subi	r26, 0x45	; 69
    2262:	bf 4f       	sbci	r27, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	e5 54       	subi	r30, 0x45	; 69
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	11 96       	adiw	r26, 0x01	; 1
    2272:	9c 93       	st	X, r25
    2274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	fe 01       	movw	r30, r28
    2278:	e5 54       	subi	r30, 0x45	; 69
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	d1 f6       	brne	.-76     	; 0x2238 <LCD_voidInit+0x8b4>
    2284:	27 c0       	rjmp	.+78     	; 0x22d4 <LCD_voidInit+0x950>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2286:	8e 01       	movw	r16, r28
    2288:	05 54       	subi	r16, 0x45	; 69
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e3 54       	subi	r30, 0x43	; 67
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	f8 01       	movw	r30, r16
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	80 83       	st	Z, r24
    22a8:	de 01       	movw	r26, r28
    22aa:	a9 54       	subi	r26, 0x49	; 73
    22ac:	bf 4f       	sbci	r27, 0xFF	; 255
    22ae:	fe 01       	movw	r30, r28
    22b0:	e5 54       	subi	r30, 0x45	; 69
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	8d 93       	st	X+, r24
    22ba:	9c 93       	st	X, r25
    22bc:	fe 01       	movw	r30, r28
    22be:	e9 54       	subi	r30, 0x49	; 73
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_voidInit+0x942>
    22ca:	fe 01       	movw	r30, r28
    22cc:	e9 54       	subi	r30, 0x49	; 73
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24


		_delay_ms(35);
		// FIRST 4 BITS (display on/off control)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	62 e0       	ldi	r22, 0x02	; 2
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	63 e0       	ldi	r22, 0x03	; 3
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    22e8:	fe 01       	movw	r30, r28
    22ea:	ed 54       	subi	r30, 0x4D	; 77
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a0 e8       	ldi	r26, 0x80	; 128
    22f4:	bf e3       	ldi	r27, 0x3F	; 63
    22f6:	80 83       	st	Z, r24
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	a2 83       	std	Z+2, r26	; 0x02
    22fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fe:	8e 01       	movw	r16, r28
    2300:	01 55       	subi	r16, 0x51	; 81
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	ed 54       	subi	r30, 0x4D	; 77
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	f8 01       	movw	r30, r16
    2324:	80 83       	st	Z, r24
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	a2 83       	std	Z+2, r26	; 0x02
    232a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    232c:	fe 01       	movw	r30, r28
    232e:	e1 55       	subi	r30, 0x51	; 81
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	44 f4       	brge	.+16     	; 0x235a <LCD_voidInit+0x9d6>
		__ticks = 1;
    234a:	fe 01       	movw	r30, r28
    234c:	e3 55       	subi	r30, 0x53	; 83
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	80 83       	st	Z, r24
    2358:	64 c0       	rjmp	.+200    	; 0x2422 <LCD_voidInit+0xa9e>
	else if (__tmp > 65535)
    235a:	fe 01       	movw	r30, r28
    235c:	e1 55       	subi	r30, 0x51	; 81
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	3f ef       	ldi	r19, 0xFF	; 255
    236c:	4f e7       	ldi	r20, 0x7F	; 127
    236e:	57 e4       	ldi	r21, 0x47	; 71
    2370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2374:	18 16       	cp	r1, r24
    2376:	0c f0       	brlt	.+2      	; 0x237a <LCD_voidInit+0x9f6>
    2378:	43 c0       	rjmp	.+134    	; 0x2400 <LCD_voidInit+0xa7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	fe 01       	movw	r30, r28
    237c:	ed 54       	subi	r30, 0x4D	; 77
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	8e 01       	movw	r16, r28
    239a:	03 55       	subi	r16, 0x53	; 83
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	f8 01       	movw	r30, r16
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	80 83       	st	Z, r24
    23b0:	1f c0       	rjmp	.+62     	; 0x23f0 <LCD_voidInit+0xa6c>
    23b2:	fe 01       	movw	r30, r28
    23b4:	e5 55       	subi	r30, 0x55	; 85
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	88 ec       	ldi	r24, 0xC8	; 200
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	80 83       	st	Z, r24
    23c0:	fe 01       	movw	r30, r28
    23c2:	e5 55       	subi	r30, 0x55	; 85
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_voidInit+0xa46>
    23ce:	fe 01       	movw	r30, r28
    23d0:	e5 55       	subi	r30, 0x55	; 85
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d8:	de 01       	movw	r26, r28
    23da:	a3 55       	subi	r26, 0x53	; 83
    23dc:	bf 4f       	sbci	r27, 0xFF	; 255
    23de:	fe 01       	movw	r30, r28
    23e0:	e3 55       	subi	r30, 0x53	; 83
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	11 96       	adiw	r26, 0x01	; 1
    23ec:	9c 93       	st	X, r25
    23ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	fe 01       	movw	r30, r28
    23f2:	e3 55       	subi	r30, 0x53	; 83
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	d1 f6       	brne	.-76     	; 0x23b2 <LCD_voidInit+0xa2e>
    23fe:	27 c0       	rjmp	.+78     	; 0x244e <LCD_voidInit+0xaca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2400:	8e 01       	movw	r16, r28
    2402:	03 55       	subi	r16, 0x53	; 83
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	e1 55       	subi	r30, 0x51	; 81
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	f8 01       	movw	r30, r16
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
    2422:	de 01       	movw	r26, r28
    2424:	a7 55       	subi	r26, 0x57	; 87
    2426:	bf 4f       	sbci	r27, 0xFF	; 255
    2428:	fe 01       	movw	r30, r28
    242a:	e3 55       	subi	r30, 0x53	; 83
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	8d 93       	st	X+, r24
    2434:	9c 93       	st	X, r25
    2436:	fe 01       	movw	r30, r28
    2438:	e7 55       	subi	r30, 0x57	; 87
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_voidInit+0xabc>
    2444:	fe 01       	movw	r30, r28
    2446:	e7 55       	subi	r30, 0x57	; 87
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	62 e0       	ldi	r22, 0x02	; 2
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	64 e0       	ldi	r22, 0x04	; 4
    2470:	40 e0       	ldi	r20, 0x00	; 0
    2472:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>


		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	62 e0       	ldi	r22, 0x02	; 2
    247a:	41 e0       	ldi	r20, 0x01	; 1
    247c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2480:	fe 01       	movw	r30, r28
    2482:	eb 55       	subi	r30, 0x5B	; 91
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	a0 e8       	ldi	r26, 0x80	; 128
    248c:	bf e3       	ldi	r27, 0x3F	; 63
    248e:	80 83       	st	Z, r24
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	a2 83       	std	Z+2, r26	; 0x02
    2494:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2496:	8e 01       	movw	r16, r28
    2498:	0f 55       	subi	r16, 0x5F	; 95
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	fe 01       	movw	r30, r28
    249e:	eb 55       	subi	r30, 0x5B	; 91
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	60 81       	ld	r22, Z
    24a4:	71 81       	ldd	r23, Z+1	; 0x01
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	93 81       	ldd	r25, Z+3	; 0x03
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a ef       	ldi	r20, 0xFA	; 250
    24b0:	54 e4       	ldi	r21, 0x44	; 68
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	f8 01       	movw	r30, r16
    24bc:	80 83       	st	Z, r24
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	a2 83       	std	Z+2, r26	; 0x02
    24c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 55       	subi	r30, 0x5F	; 95
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	44 f4       	brge	.+16     	; 0x24f2 <LCD_voidInit+0xb6e>
		__ticks = 1;
    24e2:	fe 01       	movw	r30, r28
    24e4:	e1 56       	subi	r30, 0x61	; 97
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
    24f0:	64 c0       	rjmp	.+200    	; 0x25ba <LCD_voidInit+0xc36>
	else if (__tmp > 65535)
    24f2:	fe 01       	movw	r30, r28
    24f4:	ef 55       	subi	r30, 0x5F	; 95
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	0c f0       	brlt	.+2      	; 0x2512 <LCD_voidInit+0xb8e>
    2510:	43 c0       	rjmp	.+134    	; 0x2598 <LCD_voidInit+0xc14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	fe 01       	movw	r30, r28
    2514:	eb 55       	subi	r30, 0x5B	; 91
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e2       	ldi	r20, 0x20	; 32
    2526:	51 e4       	ldi	r21, 0x41	; 65
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8e 01       	movw	r16, r28
    2532:	01 56       	subi	r16, 0x61	; 97
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	bc 01       	movw	r22, r24
    2538:	cd 01       	movw	r24, r26
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	f8 01       	movw	r30, r16
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	80 83       	st	Z, r24
    2548:	1f c0       	rjmp	.+62     	; 0x2588 <LCD_voidInit+0xc04>
    254a:	fe 01       	movw	r30, r28
    254c:	e3 56       	subi	r30, 0x63	; 99
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	88 ec       	ldi	r24, 0xC8	; 200
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	fe 01       	movw	r30, r28
    255a:	e3 56       	subi	r30, 0x63	; 99
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 81       	ld	r24, Z
    2560:	91 81       	ldd	r25, Z+1	; 0x01
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <LCD_voidInit+0xbde>
    2566:	fe 01       	movw	r30, r28
    2568:	e3 56       	subi	r30, 0x63	; 99
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	de 01       	movw	r26, r28
    2572:	a1 56       	subi	r26, 0x61	; 97
    2574:	bf 4f       	sbci	r27, 0xFF	; 255
    2576:	fe 01       	movw	r30, r28
    2578:	e1 56       	subi	r30, 0x61	; 97
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	11 96       	adiw	r26, 0x01	; 1
    2584:	9c 93       	st	X, r25
    2586:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	fe 01       	movw	r30, r28
    258a:	e1 56       	subi	r30, 0x61	; 97
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	d1 f6       	brne	.-76     	; 0x254a <LCD_voidInit+0xbc6>
    2596:	27 c0       	rjmp	.+78     	; 0x25e6 <LCD_voidInit+0xc62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2598:	8e 01       	movw	r16, r28
    259a:	01 56       	subi	r16, 0x61	; 97
    259c:	1f 4f       	sbci	r17, 0xFF	; 255
    259e:	fe 01       	movw	r30, r28
    25a0:	ef 55       	subi	r30, 0x5F	; 95
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	60 81       	ld	r22, Z
    25a6:	71 81       	ldd	r23, Z+1	; 0x01
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	93 81       	ldd	r25, Z+3	; 0x03
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	de 01       	movw	r26, r28
    25bc:	a5 56       	subi	r26, 0x65	; 101
    25be:	bf 4f       	sbci	r27, 0xFF	; 255
    25c0:	fe 01       	movw	r30, r28
    25c2:	e1 56       	subi	r30, 0x61	; 97
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	8d 93       	st	X+, r24
    25cc:	9c 93       	st	X, r25
    25ce:	fe 01       	movw	r30, r28
    25d0:	e5 56       	subi	r30, 0x65	; 101
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	91 81       	ldd	r25, Z+1	; 0x01
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <LCD_voidInit+0xc54>
    25dc:	fe 01       	movw	r30, r28
    25de:	e5 56       	subi	r30, 0x65	; 101
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
		_delay_ms(1);

		// SECOND 4 BITS (display on/off control)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	62 e0       	ldi	r22, 0x02	; 2
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	63 e0       	ldi	r22, 0x03	; 3
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    25fa:	fe 01       	movw	r30, r28
    25fc:	e9 56       	subi	r30, 0x69	; 105
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	80 83       	st	Z, r24
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	a2 83       	std	Z+2, r26	; 0x02
    260e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	8e 01       	movw	r16, r28
    2612:	0d 56       	subi	r16, 0x6D	; 109
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	fe 01       	movw	r30, r28
    2618:	e9 56       	subi	r30, 0x69	; 105
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4a ef       	ldi	r20, 0xFA	; 250
    262a:	54 e4       	ldi	r21, 0x44	; 68
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	f8 01       	movw	r30, r16
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    263e:	fe 01       	movw	r30, r28
    2640:	ed 56       	subi	r30, 0x6D	; 109
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	44 f4       	brge	.+16     	; 0x266c <LCD_voidInit+0xce8>
		__ticks = 1;
    265c:	fe 01       	movw	r30, r28
    265e:	ef 56       	subi	r30, 0x6F	; 111
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	80 83       	st	Z, r24
    266a:	64 c0       	rjmp	.+200    	; 0x2734 <LCD_voidInit+0xdb0>
	else if (__tmp > 65535)
    266c:	fe 01       	movw	r30, r28
    266e:	ed 56       	subi	r30, 0x6D	; 109
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	0c f0       	brlt	.+2      	; 0x268c <LCD_voidInit+0xd08>
    268a:	43 c0       	rjmp	.+134    	; 0x2712 <LCD_voidInit+0xd8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	fe 01       	movw	r30, r28
    268e:	e9 56       	subi	r30, 0x69	; 105
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	8e 01       	movw	r16, r28
    26ac:	0f 56       	subi	r16, 0x6F	; 111
    26ae:	1f 4f       	sbci	r17, 0xFF	; 255
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	f8 01       	movw	r30, r16
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	1f c0       	rjmp	.+62     	; 0x2702 <LCD_voidInit+0xd7e>
    26c4:	fe 01       	movw	r30, r28
    26c6:	e1 57       	subi	r30, 0x71	; 113
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	88 ec       	ldi	r24, 0xC8	; 200
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
    26d2:	fe 01       	movw	r30, r28
    26d4:	e1 57       	subi	r30, 0x71	; 113
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_voidInit+0xd58>
    26e0:	fe 01       	movw	r30, r28
    26e2:	e1 57       	subi	r30, 0x71	; 113
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ea:	de 01       	movw	r26, r28
    26ec:	af 56       	subi	r26, 0x6F	; 111
    26ee:	bf 4f       	sbci	r27, 0xFF	; 255
    26f0:	fe 01       	movw	r30, r28
    26f2:	ef 56       	subi	r30, 0x6F	; 111
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	11 96       	adiw	r26, 0x01	; 1
    26fe:	9c 93       	st	X, r25
    2700:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	fe 01       	movw	r30, r28
    2704:	ef 56       	subi	r30, 0x6F	; 111
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	d1 f6       	brne	.-76     	; 0x26c4 <LCD_voidInit+0xd40>
    2710:	27 c0       	rjmp	.+78     	; 0x2760 <LCD_voidInit+0xddc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	8e 01       	movw	r16, r28
    2714:	0f 56       	subi	r16, 0x6F	; 111
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	ed 56       	subi	r30, 0x6D	; 109
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	f8 01       	movw	r30, r16
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	de 01       	movw	r26, r28
    2736:	a3 57       	subi	r26, 0x73	; 115
    2738:	bf 4f       	sbci	r27, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	ef 56       	subi	r30, 0x6F	; 111
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	8d 93       	st	X+, r24
    2746:	9c 93       	st	X, r25
    2748:	fe 01       	movw	r30, r28
    274a:	e3 57       	subi	r30, 0x73	; 115
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_voidInit+0xdce>
    2756:	fe 01       	movw	r30, r28
    2758:	e3 57       	subi	r30, 0x73	; 115
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW); //B
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW); //C
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_HIGH); //D
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	62 e0       	ldi	r22, 0x02	; 2
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_HIGH);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	64 e0       	ldi	r22, 0x04	; 4
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	62 e0       	ldi	r22, 0x02	; 2
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2792:	fe 01       	movw	r30, r28
    2794:	e7 57       	subi	r30, 0x77	; 119
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	ac e0       	ldi	r26, 0x0C	; 12
    279e:	b2 e4       	ldi	r27, 0x42	; 66
    27a0:	80 83       	st	Z, r24
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	a2 83       	std	Z+2, r26	; 0x02
    27a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a8:	8e 01       	movw	r16, r28
    27aa:	0b 57       	subi	r16, 0x7B	; 123
    27ac:	1f 4f       	sbci	r17, 0xFF	; 255
    27ae:	fe 01       	movw	r30, r28
    27b0:	e7 57       	subi	r30, 0x77	; 119
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	4a ef       	ldi	r20, 0xFA	; 250
    27c2:	54 e4       	ldi	r21, 0x44	; 68
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	f8 01       	movw	r30, r16
    27ce:	80 83       	st	Z, r24
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	a2 83       	std	Z+2, r26	; 0x02
    27d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27d6:	fe 01       	movw	r30, r28
    27d8:	eb 57       	subi	r30, 0x7B	; 123
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e8       	ldi	r20, 0x80	; 128
    27ea:	5f e3       	ldi	r21, 0x3F	; 63
    27ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f0:	88 23       	and	r24, r24
    27f2:	44 f4       	brge	.+16     	; 0x2804 <LCD_voidInit+0xe80>
		__ticks = 1;
    27f4:	fe 01       	movw	r30, r28
    27f6:	ed 57       	subi	r30, 0x7D	; 125
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	80 83       	st	Z, r24
    2802:	64 c0       	rjmp	.+200    	; 0x28cc <LCD_voidInit+0xf48>
	else if (__tmp > 65535)
    2804:	fe 01       	movw	r30, r28
    2806:	eb 57       	subi	r30, 0x7B	; 123
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	3f ef       	ldi	r19, 0xFF	; 255
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	57 e4       	ldi	r21, 0x47	; 71
    281a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    281e:	18 16       	cp	r1, r24
    2820:	0c f0       	brlt	.+2      	; 0x2824 <LCD_voidInit+0xea0>
    2822:	43 c0       	rjmp	.+134    	; 0x28aa <LCD_voidInit+0xf26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2824:	fe 01       	movw	r30, r28
    2826:	e7 57       	subi	r30, 0x77	; 119
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	93 81       	ldd	r25, Z+3	; 0x03
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	8e 01       	movw	r16, r28
    2844:	0d 57       	subi	r16, 0x7D	; 125
    2846:	1f 4f       	sbci	r17, 0xFF	; 255
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	f8 01       	movw	r30, r16
    2856:	91 83       	std	Z+1, r25	; 0x01
    2858:	80 83       	st	Z, r24
    285a:	1f c0       	rjmp	.+62     	; 0x289a <LCD_voidInit+0xf16>
    285c:	fe 01       	movw	r30, r28
    285e:	ef 57       	subi	r30, 0x7F	; 127
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	88 ec       	ldi	r24, 0xC8	; 200
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
    286a:	fe 01       	movw	r30, r28
    286c:	ef 57       	subi	r30, 0x7F	; 127
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 81       	ld	r24, Z
    2872:	91 81       	ldd	r25, Z+1	; 0x01
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <LCD_voidInit+0xef0>
    2878:	fe 01       	movw	r30, r28
    287a:	ef 57       	subi	r30, 0x7F	; 127
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	de 01       	movw	r26, r28
    2884:	ad 57       	subi	r26, 0x7D	; 125
    2886:	bf 4f       	sbci	r27, 0xFF	; 255
    2888:	fe 01       	movw	r30, r28
    288a:	ed 57       	subi	r30, 0x7D	; 125
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 81       	ld	r24, Z
    2890:	91 81       	ldd	r25, Z+1	; 0x01
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	11 96       	adiw	r26, 0x01	; 1
    2896:	9c 93       	st	X, r25
    2898:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289a:	fe 01       	movw	r30, r28
    289c:	ed 57       	subi	r30, 0x7D	; 125
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	d1 f6       	brne	.-76     	; 0x285c <LCD_voidInit+0xed8>
    28a8:	27 c0       	rjmp	.+78     	; 0x28f8 <LCD_voidInit+0xf74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	8e 01       	movw	r16, r28
    28ac:	0d 57       	subi	r16, 0x7D	; 125
    28ae:	1f 4f       	sbci	r17, 0xFF	; 255
    28b0:	fe 01       	movw	r30, r28
    28b2:	eb 57       	subi	r30, 0x7B	; 123
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	60 81       	ld	r22, Z
    28b8:	71 81       	ldd	r23, Z+1	; 0x01
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	93 81       	ldd	r25, Z+3	; 0x03
    28be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	f8 01       	movw	r30, r16
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	80 83       	st	Z, r24
    28cc:	de 01       	movw	r26, r28
    28ce:	a1 58       	subi	r26, 0x81	; 129
    28d0:	bf 4f       	sbci	r27, 0xFF	; 255
    28d2:	fe 01       	movw	r30, r28
    28d4:	ed 57       	subi	r30, 0x7D	; 125
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	91 81       	ldd	r25, Z+1	; 0x01
    28dc:	8d 93       	st	X+, r24
    28de:	9c 93       	st	X, r25
    28e0:	fe 01       	movw	r30, r28
    28e2:	e1 58       	subi	r30, 0x81	; 129
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_voidInit+0xf66>
    28ee:	fe 01       	movw	r30, r28
    28f0:	e1 58       	subi	r30, 0x81	; 129
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
		_delay_ms(35);
		//FIRST 4 BITS (display clear)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	62 e0       	ldi	r22, 0x02	; 2
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	63 e0       	ldi	r22, 0x03	; 3
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    290c:	fe 01       	movw	r30, r28
    290e:	e5 58       	subi	r30, 0x85	; 133
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 e8       	ldi	r26, 0x80	; 128
    2918:	bf e3       	ldi	r27, 0x3F	; 63
    291a:	80 83       	st	Z, r24
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	a2 83       	std	Z+2, r26	; 0x02
    2920:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2922:	8e 01       	movw	r16, r28
    2924:	09 58       	subi	r16, 0x89	; 137
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	fe 01       	movw	r30, r28
    292a:	e5 58       	subi	r30, 0x85	; 133
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	60 81       	ld	r22, Z
    2930:	71 81       	ldd	r23, Z+1	; 0x01
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4a ef       	ldi	r20, 0xFA	; 250
    293c:	54 e4       	ldi	r21, 0x44	; 68
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	f8 01       	movw	r30, r16
    2948:	80 83       	st	Z, r24
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	a2 83       	std	Z+2, r26	; 0x02
    294e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2950:	fe 01       	movw	r30, r28
    2952:	e9 58       	subi	r30, 0x89	; 137
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e8       	ldi	r20, 0x80	; 128
    2964:	5f e3       	ldi	r21, 0x3F	; 63
    2966:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296a:	88 23       	and	r24, r24
    296c:	44 f4       	brge	.+16     	; 0x297e <LCD_voidInit+0xffa>
		__ticks = 1;
    296e:	fe 01       	movw	r30, r28
    2970:	eb 58       	subi	r30, 0x8B	; 139
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	80 83       	st	Z, r24
    297c:	64 c0       	rjmp	.+200    	; 0x2a46 <LCD_voidInit+0x10c2>
	else if (__tmp > 65535)
    297e:	fe 01       	movw	r30, r28
    2980:	e9 58       	subi	r30, 0x89	; 137
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	3f ef       	ldi	r19, 0xFF	; 255
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	57 e4       	ldi	r21, 0x47	; 71
    2994:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	0c f0       	brlt	.+2      	; 0x299e <LCD_voidInit+0x101a>
    299c:	43 c0       	rjmp	.+134    	; 0x2a24 <LCD_voidInit+0x10a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299e:	fe 01       	movw	r30, r28
    29a0:	e5 58       	subi	r30, 0x85	; 133
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e2       	ldi	r20, 0x20	; 32
    29b2:	51 e4       	ldi	r21, 0x41	; 65
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	8e 01       	movw	r16, r28
    29be:	0b 58       	subi	r16, 0x8B	; 139
    29c0:	1f 4f       	sbci	r17, 0xFF	; 255
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	f8 01       	movw	r30, r16
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	1f c0       	rjmp	.+62     	; 0x2a14 <LCD_voidInit+0x1090>
    29d6:	fe 01       	movw	r30, r28
    29d8:	ed 58       	subi	r30, 0x8D	; 141
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	88 ec       	ldi	r24, 0xC8	; 200
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	91 83       	std	Z+1, r25	; 0x01
    29e2:	80 83       	st	Z, r24
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 58       	subi	r30, 0x8D	; 141
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <LCD_voidInit+0x106a>
    29f2:	fe 01       	movw	r30, r28
    29f4:	ed 58       	subi	r30, 0x8D	; 141
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fc:	de 01       	movw	r26, r28
    29fe:	ab 58       	subi	r26, 0x8B	; 139
    2a00:	bf 4f       	sbci	r27, 0xFF	; 255
    2a02:	fe 01       	movw	r30, r28
    2a04:	eb 58       	subi	r30, 0x8B	; 139
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	11 96       	adiw	r26, 0x01	; 1
    2a10:	9c 93       	st	X, r25
    2a12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a14:	fe 01       	movw	r30, r28
    2a16:	eb 58       	subi	r30, 0x8B	; 139
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 81       	ld	r24, Z
    2a1c:	91 81       	ldd	r25, Z+1	; 0x01
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	d1 f6       	brne	.-76     	; 0x29d6 <LCD_voidInit+0x1052>
    2a22:	27 c0       	rjmp	.+78     	; 0x2a72 <LCD_voidInit+0x10ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a24:	8e 01       	movw	r16, r28
    2a26:	0b 58       	subi	r16, 0x8B	; 139
    2a28:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e9 58       	subi	r30, 0x89	; 137
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	f8 01       	movw	r30, r16
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
    2a46:	de 01       	movw	r26, r28
    2a48:	af 58       	subi	r26, 0x8F	; 143
    2a4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	eb 58       	subi	r30, 0x8B	; 139
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	8d 93       	st	X+, r24
    2a58:	9c 93       	st	X, r25
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	ef 58       	subi	r30, 0x8F	; 143
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <LCD_voidInit+0x10e0>
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ef 58       	subi	r30, 0x8F	; 143
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	61 e0       	ldi	r22, 0x01	; 1
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	62 e0       	ldi	r22, 0x02	; 2
    2a8a:	40 e0       	ldi	r20, 0x00	; 0
    2a8c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	64 e0       	ldi	r22, 0x04	; 4
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	62 e0       	ldi	r22, 0x02	; 2
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e3 59       	subi	r30, 0x93	; 147
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a0 e8       	ldi	r26, 0x80	; 128
    2ab0:	bf e3       	ldi	r27, 0x3F	; 63
    2ab2:	80 83       	st	Z, r24
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	a2 83       	std	Z+2, r26	; 0x02
    2ab8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aba:	8e 01       	movw	r16, r28
    2abc:	07 59       	subi	r16, 0x97	; 151
    2abe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e3 59       	subi	r30, 0x93	; 147
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4a ef       	ldi	r20, 0xFA	; 250
    2ad4:	54 e4       	ldi	r21, 0x44	; 68
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	f8 01       	movw	r30, r16
    2ae0:	80 83       	st	Z, r24
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	a2 83       	std	Z+2, r26	; 0x02
    2ae6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e7 59       	subi	r30, 0x97	; 151
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	44 f4       	brge	.+16     	; 0x2b16 <LCD_voidInit+0x1192>
		__ticks = 1;
    2b06:	fe 01       	movw	r30, r28
    2b08:	e9 59       	subi	r30, 0x99	; 153
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
    2b14:	64 c0       	rjmp	.+200    	; 0x2bde <LCD_voidInit+0x125a>
	else if (__tmp > 65535)
    2b16:	fe 01       	movw	r30, r28
    2b18:	e7 59       	subi	r30, 0x97	; 151
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <LCD_voidInit+0x11b2>
    2b34:	43 c0       	rjmp	.+134    	; 0x2bbc <LCD_voidInit+0x1238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b36:	fe 01       	movw	r30, r28
    2b38:	e3 59       	subi	r30, 0x93	; 147
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	60 81       	ld	r22, Z
    2b3e:	71 81       	ldd	r23, Z+1	; 0x01
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8e 01       	movw	r16, r28
    2b56:	09 59       	subi	r16, 0x99	; 153
    2b58:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	f8 01       	movw	r30, r16
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	1f c0       	rjmp	.+62     	; 0x2bac <LCD_voidInit+0x1228>
    2b6e:	fe 01       	movw	r30, r28
    2b70:	eb 59       	subi	r30, 0x9B	; 155
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	88 ec       	ldi	r24, 0xC8	; 200
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	eb 59       	subi	r30, 0x9B	; 155
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <LCD_voidInit+0x1202>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	eb 59       	subi	r30, 0x9B	; 155
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	de 01       	movw	r26, r28
    2b96:	a9 59       	subi	r26, 0x99	; 153
    2b98:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e9 59       	subi	r30, 0x99	; 153
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	9c 93       	st	X, r25
    2baa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	fe 01       	movw	r30, r28
    2bae:	e9 59       	subi	r30, 0x99	; 153
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	d1 f6       	brne	.-76     	; 0x2b6e <LCD_voidInit+0x11ea>
    2bba:	27 c0       	rjmp	.+78     	; 0x2c0a <LCD_voidInit+0x1286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	09 59       	subi	r16, 0x99	; 153
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e7 59       	subi	r30, 0x97	; 151
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	f8 01       	movw	r30, r16
    2bda:	91 83       	std	Z+1, r25	; 0x01
    2bdc:	80 83       	st	Z, r24
    2bde:	de 01       	movw	r26, r28
    2be0:	ad 59       	subi	r26, 0x9D	; 157
    2be2:	bf 4f       	sbci	r27, 0xFF	; 255
    2be4:	fe 01       	movw	r30, r28
    2be6:	e9 59       	subi	r30, 0x99	; 153
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	8d 93       	st	X+, r24
    2bf0:	9c 93       	st	X, r25
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ed 59       	subi	r30, 0x9D	; 157
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_voidInit+0x1278>
    2c00:	fe 01       	movw	r30, r28
    2c02:	ed 59       	subi	r30, 0x9D	; 157
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	91 83       	std	Z+1, r25	; 0x01
    2c08:	80 83       	st	Z, r24
		_delay_ms(1);

		//SECOND  4 BITS (display clear)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	63 e0       	ldi	r22, 0x03	; 3
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e1 5a       	subi	r30, 0xA1	; 161
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	a0 e8       	ldi	r26, 0x80	; 128
    2c2a:	bf e3       	ldi	r27, 0x3F	; 63
    2c2c:	80 83       	st	Z, r24
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	a2 83       	std	Z+2, r26	; 0x02
    2c32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	8e 01       	movw	r16, r28
    2c36:	05 5a       	subi	r16, 0xA5	; 165
    2c38:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e1 5a       	subi	r30, 0xA1	; 161
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	60 81       	ld	r22, Z
    2c42:	71 81       	ldd	r23, Z+1	; 0x01
    2c44:	82 81       	ldd	r24, Z+2	; 0x02
    2c46:	93 81       	ldd	r25, Z+3	; 0x03
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	4a ef       	ldi	r20, 0xFA	; 250
    2c4e:	54 e4       	ldi	r21, 0x44	; 68
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	f8 01       	movw	r30, r16
    2c5a:	80 83       	st	Z, r24
    2c5c:	91 83       	std	Z+1, r25	; 0x01
    2c5e:	a2 83       	std	Z+2, r26	; 0x02
    2c60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c62:	fe 01       	movw	r30, r28
    2c64:	e5 5a       	subi	r30, 0xA5	; 165
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	60 81       	ld	r22, Z
    2c6a:	71 81       	ldd	r23, Z+1	; 0x01
    2c6c:	82 81       	ldd	r24, Z+2	; 0x02
    2c6e:	93 81       	ldd	r25, Z+3	; 0x03
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	44 f4       	brge	.+16     	; 0x2c90 <LCD_voidInit+0x130c>
		__ticks = 1;
    2c80:	fe 01       	movw	r30, r28
    2c82:	e7 5a       	subi	r30, 0xA7	; 167
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	80 83       	st	Z, r24
    2c8e:	64 c0       	rjmp	.+200    	; 0x2d58 <LCD_voidInit+0x13d4>
	else if (__tmp > 65535)
    2c90:	fe 01       	movw	r30, r28
    2c92:	e5 5a       	subi	r30, 0xA5	; 165
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	60 81       	ld	r22, Z
    2c98:	71 81       	ldd	r23, Z+1	; 0x01
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	93 81       	ldd	r25, Z+3	; 0x03
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	57 e4       	ldi	r21, 0x47	; 71
    2ca6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	0c f0       	brlt	.+2      	; 0x2cb0 <LCD_voidInit+0x132c>
    2cae:	43 c0       	rjmp	.+134    	; 0x2d36 <LCD_voidInit+0x13b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e1 5a       	subi	r30, 0xA1	; 161
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	60 81       	ld	r22, Z
    2cb8:	71 81       	ldd	r23, Z+1	; 0x01
    2cba:	82 81       	ldd	r24, Z+2	; 0x02
    2cbc:	93 81       	ldd	r25, Z+3	; 0x03
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8e 01       	movw	r16, r28
    2cd0:	07 5a       	subi	r16, 0xA7	; 167
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
    2ce6:	1f c0       	rjmp	.+62     	; 0x2d26 <LCD_voidInit+0x13a2>
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e9 5a       	subi	r30, 0xA9	; 169
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	88 ec       	ldi	r24, 0xC8	; 200
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	80 83       	st	Z, r24
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e9 5a       	subi	r30, 0xA9	; 169
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_voidInit+0x137c>
    2d04:	fe 01       	movw	r30, r28
    2d06:	e9 5a       	subi	r30, 0xA9	; 169
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	de 01       	movw	r26, r28
    2d10:	a7 5a       	subi	r26, 0xA7	; 167
    2d12:	bf 4f       	sbci	r27, 0xFF	; 255
    2d14:	fe 01       	movw	r30, r28
    2d16:	e7 5a       	subi	r30, 0xA7	; 167
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 81       	ld	r24, Z
    2d1c:	91 81       	ldd	r25, Z+1	; 0x01
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	11 96       	adiw	r26, 0x01	; 1
    2d22:	9c 93       	st	X, r25
    2d24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d26:	fe 01       	movw	r30, r28
    2d28:	e7 5a       	subi	r30, 0xA7	; 167
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	d1 f6       	brne	.-76     	; 0x2ce8 <LCD_voidInit+0x1364>
    2d34:	27 c0       	rjmp	.+78     	; 0x2d84 <LCD_voidInit+0x1400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d36:	8e 01       	movw	r16, r28
    2d38:	07 5a       	subi	r16, 0xA7	; 167
    2d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e5 5a       	subi	r30, 0xA5	; 165
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	60 81       	ld	r22, Z
    2d44:	71 81       	ldd	r23, Z+1	; 0x01
    2d46:	82 81       	ldd	r24, Z+2	; 0x02
    2d48:	93 81       	ldd	r25, Z+3	; 0x03
    2d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	f8 01       	movw	r30, r16
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	80 83       	st	Z, r24
    2d58:	de 01       	movw	r26, r28
    2d5a:	ab 5a       	subi	r26, 0xAB	; 171
    2d5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e7 5a       	subi	r30, 0xA7	; 167
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	91 81       	ldd	r25, Z+1	; 0x01
    2d68:	8d 93       	st	X+, r24
    2d6a:	9c 93       	st	X, r25
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	eb 5a       	subi	r30, 0xAB	; 171
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <LCD_voidInit+0x13f2>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	eb 5a       	subi	r30, 0xAB	; 171
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_HIGH);
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	60 e0       	ldi	r22, 0x00	; 0
    2d88:	41 e0       	ldi	r20, 0x01	; 1
    2d8a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	62 e0       	ldi	r22, 0x02	; 2
    2d9c:	40 e0       	ldi	r20, 0x00	; 0
    2d9e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	64 e0       	ldi	r22, 0x04	; 4
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	62 e0       	ldi	r22, 0x02	; 2
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2db6:	fe 01       	movw	r30, r28
    2db8:	ef 5a       	subi	r30, 0xAF	; 175
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	ac e0       	ldi	r26, 0x0C	; 12
    2dc2:	b2 e4       	ldi	r27, 0x42	; 66
    2dc4:	80 83       	st	Z, r24
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	a2 83       	std	Z+2, r26	; 0x02
    2dca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dcc:	8e 01       	movw	r16, r28
    2dce:	03 5b       	subi	r16, 0xB3	; 179
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	ef 5a       	subi	r30, 0xAF	; 175
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a ef       	ldi	r20, 0xFA	; 250
    2de6:	54 e4       	ldi	r21, 0x44	; 68
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	f8 01       	movw	r30, r16
    2df2:	80 83       	st	Z, r24
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	a2 83       	std	Z+2, r26	; 0x02
    2df8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e3 5b       	subi	r30, 0xB3	; 179
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e8       	ldi	r20, 0x80	; 128
    2e0e:	5f e3       	ldi	r21, 0x3F	; 63
    2e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	44 f4       	brge	.+16     	; 0x2e28 <LCD_voidInit+0x14a4>
		__ticks = 1;
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e5 5b       	subi	r30, 0xB5	; 181
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	91 83       	std	Z+1, r25	; 0x01
    2e24:	80 83       	st	Z, r24
    2e26:	64 c0       	rjmp	.+200    	; 0x2ef0 <LCD_voidInit+0x156c>
	else if (__tmp > 65535)
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e3 5b       	subi	r30, 0xB3	; 179
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	57 e4       	ldi	r21, 0x47	; 71
    2e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	0c f0       	brlt	.+2      	; 0x2e48 <LCD_voidInit+0x14c4>
    2e46:	43 c0       	rjmp	.+134    	; 0x2ece <LCD_voidInit+0x154a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ef 5a       	subi	r30, 0xAF	; 175
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e2       	ldi	r20, 0x20	; 32
    2e5c:	51 e4       	ldi	r21, 0x41	; 65
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	8e 01       	movw	r16, r28
    2e68:	05 5b       	subi	r16, 0xB5	; 181
    2e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	f8 01       	movw	r30, r16
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
    2e7e:	1f c0       	rjmp	.+62     	; 0x2ebe <LCD_voidInit+0x153a>
    2e80:	fe 01       	movw	r30, r28
    2e82:	e7 5b       	subi	r30, 0xB7	; 183
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	88 ec       	ldi	r24, 0xC8	; 200
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	80 83       	st	Z, r24
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e7 5b       	subi	r30, 0xB7	; 183
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 81       	ld	r24, Z
    2e96:	91 81       	ldd	r25, Z+1	; 0x01
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <LCD_voidInit+0x1514>
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e7 5b       	subi	r30, 0xB7	; 183
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	de 01       	movw	r26, r28
    2ea8:	a5 5b       	subi	r26, 0xB5	; 181
    2eaa:	bf 4f       	sbci	r27, 0xFF	; 255
    2eac:	fe 01       	movw	r30, r28
    2eae:	e5 5b       	subi	r30, 0xB5	; 181
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	80 81       	ld	r24, Z
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	11 96       	adiw	r26, 0x01	; 1
    2eba:	9c 93       	st	X, r25
    2ebc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e5 5b       	subi	r30, 0xB5	; 181
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	d1 f6       	brne	.-76     	; 0x2e80 <LCD_voidInit+0x14fc>
    2ecc:	27 c0       	rjmp	.+78     	; 0x2f1c <LCD_voidInit+0x1598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ece:	8e 01       	movw	r16, r28
    2ed0:	05 5b       	subi	r16, 0xB5	; 181
    2ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e3 5b       	subi	r30, 0xB3	; 179
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	60 81       	ld	r22, Z
    2edc:	71 81       	ldd	r23, Z+1	; 0x01
    2ede:	82 81       	ldd	r24, Z+2	; 0x02
    2ee0:	93 81       	ldd	r25, Z+3	; 0x03
    2ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	f8 01       	movw	r30, r16
    2eec:	91 83       	std	Z+1, r25	; 0x01
    2eee:	80 83       	st	Z, r24
    2ef0:	de 01       	movw	r26, r28
    2ef2:	a9 5b       	subi	r26, 0xB9	; 185
    2ef4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e5 5b       	subi	r30, 0xB5	; 181
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
    2f00:	8d 93       	st	X+, r24
    2f02:	9c 93       	st	X, r25
    2f04:	fe 01       	movw	r30, r28
    2f06:	e9 5b       	subi	r30, 0xB9	; 185
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <LCD_voidInit+0x158a>
    2f12:	fe 01       	movw	r30, r28
    2f14:	e9 5b       	subi	r30, 0xB9	; 185
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
		_delay_ms(35);

		//FIRST 4 BITS (entry mode set)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	62 e0       	ldi	r22, 0x02	; 2
    2f20:	40 e0       	ldi	r20, 0x00	; 0
    2f22:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	63 e0       	ldi	r22, 0x03	; 3
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2f30:	fe 01       	movw	r30, r28
    2f32:	ed 5b       	subi	r30, 0xBD	; 189
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	a0 e8       	ldi	r26, 0x80	; 128
    2f3c:	bf e3       	ldi	r27, 0x3F	; 63
    2f3e:	80 83       	st	Z, r24
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	a2 83       	std	Z+2, r26	; 0x02
    2f44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f46:	8e 01       	movw	r16, r28
    2f48:	01 5c       	subi	r16, 0xC1	; 193
    2f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ed 5b       	subi	r30, 0xBD	; 189
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	4a ef       	ldi	r20, 0xFA	; 250
    2f60:	54 e4       	ldi	r21, 0x44	; 68
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	80 83       	st	Z, r24
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	a2 83       	std	Z+2, r26	; 0x02
    2f72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f74:	fe 01       	movw	r30, r28
    2f76:	ff 96       	adiw	r30, 0x3f	; 63
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	2c f4       	brge	.+10     	; 0x2f9a <LCD_voidInit+0x1616>
		__ticks = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9e af       	std	Y+62, r25	; 0x3e
    2f96:	8d af       	std	Y+61, r24	; 0x3d
    2f98:	46 c0       	rjmp	.+140    	; 0x3026 <LCD_voidInit+0x16a2>
	else if (__tmp > 65535)
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	ff 96       	adiw	r30, 0x3f	; 63
    2f9e:	60 81       	ld	r22, Z
    2fa0:	71 81       	ldd	r23, Z+1	; 0x01
    2fa2:	82 81       	ldd	r24, Z+2	; 0x02
    2fa4:	93 81       	ldd	r25, Z+3	; 0x03
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	3f ef       	ldi	r19, 0xFF	; 255
    2faa:	4f e7       	ldi	r20, 0x7F	; 127
    2fac:	57 e4       	ldi	r21, 0x47	; 71
    2fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb2:	18 16       	cp	r1, r24
    2fb4:	64 f5       	brge	.+88     	; 0x300e <LCD_voidInit+0x168a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ed 5b       	subi	r30, 0xBD	; 189
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9e af       	std	Y+62, r25	; 0x3e
    2fe2:	8d af       	std	Y+61, r24	; 0x3d
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <LCD_voidInit+0x1680>
    2fe6:	88 ec       	ldi	r24, 0xC8	; 200
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9c af       	std	Y+60, r25	; 0x3c
    2fec:	8b af       	std	Y+59, r24	; 0x3b
    2fee:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ff0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <LCD_voidInit+0x166e>
    2ff6:	9c af       	std	Y+60, r25	; 0x3c
    2ff8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ffc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	9e af       	std	Y+62, r25	; 0x3e
    3002:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3004:	8d ad       	ldd	r24, Y+61	; 0x3d
    3006:	9e ad       	ldd	r25, Y+62	; 0x3e
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f7       	brne	.-38     	; 0x2fe6 <LCD_voidInit+0x1662>
    300c:	16 c0       	rjmp	.+44     	; 0x303a <LCD_voidInit+0x16b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	fe 01       	movw	r30, r28
    3010:	ff 96       	adiw	r30, 0x3f	; 63
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	9e af       	std	Y+62, r25	; 0x3e
    3024:	8d af       	std	Y+61, r24	; 0x3d
    3026:	8d ad       	ldd	r24, Y+61	; 0x3d
    3028:	9e ad       	ldd	r25, Y+62	; 0x3e
    302a:	9a af       	std	Y+58, r25	; 0x3a
    302c:	89 af       	std	Y+57, r24	; 0x39
    302e:	89 ad       	ldd	r24, Y+57	; 0x39
    3030:	9a ad       	ldd	r25, Y+58	; 0x3a
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <LCD_voidInit+0x16ae>
    3036:	9a af       	std	Y+58, r25	; 0x3a
    3038:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	60 e0       	ldi	r22, 0x00	; 0
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	61 e0       	ldi	r22, 0x01	; 1
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	62 e0       	ldi	r22, 0x02	; 2
    3052:	40 e0       	ldi	r20, 0x00	; 0
    3054:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	64 e0       	ldi	r22, 0x04	; 4
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	62 e0       	ldi	r22, 0x02	; 2
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a0 e8       	ldi	r26, 0x80	; 128
    3072:	bf e3       	ldi	r27, 0x3F	; 63
    3074:	8d ab       	std	Y+53, r24	; 0x35
    3076:	9e ab       	std	Y+54, r25	; 0x36
    3078:	af ab       	std	Y+55, r26	; 0x37
    307a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307c:	6d a9       	ldd	r22, Y+53	; 0x35
    307e:	7e a9       	ldd	r23, Y+54	; 0x36
    3080:	8f a9       	ldd	r24, Y+55	; 0x37
    3082:	98 ad       	ldd	r25, Y+56	; 0x38
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	4a ef       	ldi	r20, 0xFA	; 250
    308a:	54 e4       	ldi	r21, 0x44	; 68
    308c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	89 ab       	std	Y+49, r24	; 0x31
    3096:	9a ab       	std	Y+50, r25	; 0x32
    3098:	ab ab       	std	Y+51, r26	; 0x33
    309a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    309c:	69 a9       	ldd	r22, Y+49	; 0x31
    309e:	7a a9       	ldd	r23, Y+50	; 0x32
    30a0:	8b a9       	ldd	r24, Y+51	; 0x33
    30a2:	9c a9       	ldd	r25, Y+52	; 0x34
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e8       	ldi	r20, 0x80	; 128
    30aa:	5f e3       	ldi	r21, 0x3F	; 63
    30ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b0:	88 23       	and	r24, r24
    30b2:	2c f4       	brge	.+10     	; 0x30be <LCD_voidInit+0x173a>
		__ticks = 1;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	98 ab       	std	Y+48, r25	; 0x30
    30ba:	8f a7       	std	Y+47, r24	; 0x2f
    30bc:	3f c0       	rjmp	.+126    	; 0x313c <LCD_voidInit+0x17b8>
	else if (__tmp > 65535)
    30be:	69 a9       	ldd	r22, Y+49	; 0x31
    30c0:	7a a9       	ldd	r23, Y+50	; 0x32
    30c2:	8b a9       	ldd	r24, Y+51	; 0x33
    30c4:	9c a9       	ldd	r25, Y+52	; 0x34
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	3f ef       	ldi	r19, 0xFF	; 255
    30ca:	4f e7       	ldi	r20, 0x7F	; 127
    30cc:	57 e4       	ldi	r21, 0x47	; 71
    30ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30d2:	18 16       	cp	r1, r24
    30d4:	4c f5       	brge	.+82     	; 0x3128 <LCD_voidInit+0x17a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d6:	6d a9       	ldd	r22, Y+53	; 0x35
    30d8:	7e a9       	ldd	r23, Y+54	; 0x36
    30da:	8f a9       	ldd	r24, Y+55	; 0x37
    30dc:	98 ad       	ldd	r25, Y+56	; 0x38
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	40 e2       	ldi	r20, 0x20	; 32
    30e4:	51 e4       	ldi	r21, 0x41	; 65
    30e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	98 ab       	std	Y+48, r25	; 0x30
    30fc:	8f a7       	std	Y+47, r24	; 0x2f
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <LCD_voidInit+0x179a>
    3100:	88 ec       	ldi	r24, 0xC8	; 200
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	9e a7       	std	Y+46, r25	; 0x2e
    3106:	8d a7       	std	Y+45, r24	; 0x2d
    3108:	8d a5       	ldd	r24, Y+45	; 0x2d
    310a:	9e a5       	ldd	r25, Y+46	; 0x2e
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <LCD_voidInit+0x1788>
    3110:	9e a7       	std	Y+46, r25	; 0x2e
    3112:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3114:	8f a5       	ldd	r24, Y+47	; 0x2f
    3116:	98 a9       	ldd	r25, Y+48	; 0x30
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	98 ab       	std	Y+48, r25	; 0x30
    311c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3120:	98 a9       	ldd	r25, Y+48	; 0x30
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	69 f7       	brne	.-38     	; 0x3100 <LCD_voidInit+0x177c>
    3126:	14 c0       	rjmp	.+40     	; 0x3150 <LCD_voidInit+0x17cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3128:	69 a9       	ldd	r22, Y+49	; 0x31
    312a:	7a a9       	ldd	r23, Y+50	; 0x32
    312c:	8b a9       	ldd	r24, Y+51	; 0x33
    312e:	9c a9       	ldd	r25, Y+52	; 0x34
    3130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	98 ab       	std	Y+48, r25	; 0x30
    313a:	8f a7       	std	Y+47, r24	; 0x2f
    313c:	8f a5       	ldd	r24, Y+47	; 0x2f
    313e:	98 a9       	ldd	r25, Y+48	; 0x30
    3140:	9c a7       	std	Y+44, r25	; 0x2c
    3142:	8b a7       	std	Y+43, r24	; 0x2b
    3144:	8b a5       	ldd	r24, Y+43	; 0x2b
    3146:	9c a5       	ldd	r25, Y+44	; 0x2c
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <LCD_voidInit+0x17c4>
    314c:	9c a7       	std	Y+44, r25	; 0x2c
    314e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		//SECOND 4 BITS (entry mode set)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	62 e0       	ldi	r22, 0x02	; 2
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	63 e0       	ldi	r22, 0x03	; 3
    315e:	40 e0       	ldi	r20, 0x00	; 0
    3160:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	a0 e8       	ldi	r26, 0x80	; 128
    316a:	bf e3       	ldi	r27, 0x3F	; 63
    316c:	8f a3       	std	Y+39, r24	; 0x27
    316e:	98 a7       	std	Y+40, r25	; 0x28
    3170:	a9 a7       	std	Y+41, r26	; 0x29
    3172:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3174:	6f a1       	ldd	r22, Y+39	; 0x27
    3176:	78 a5       	ldd	r23, Y+40	; 0x28
    3178:	89 a5       	ldd	r24, Y+41	; 0x29
    317a:	9a a5       	ldd	r25, Y+42	; 0x2a
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	4a ef       	ldi	r20, 0xFA	; 250
    3182:	54 e4       	ldi	r21, 0x44	; 68
    3184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	8b a3       	std	Y+35, r24	; 0x23
    318e:	9c a3       	std	Y+36, r25	; 0x24
    3190:	ad a3       	std	Y+37, r26	; 0x25
    3192:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3194:	6b a1       	ldd	r22, Y+35	; 0x23
    3196:	7c a1       	ldd	r23, Y+36	; 0x24
    3198:	8d a1       	ldd	r24, Y+37	; 0x25
    319a:	9e a1       	ldd	r25, Y+38	; 0x26
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e8       	ldi	r20, 0x80	; 128
    31a2:	5f e3       	ldi	r21, 0x3F	; 63
    31a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a8:	88 23       	and	r24, r24
    31aa:	2c f4       	brge	.+10     	; 0x31b6 <LCD_voidInit+0x1832>
		__ticks = 1;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	9a a3       	std	Y+34, r25	; 0x22
    31b2:	89 a3       	std	Y+33, r24	; 0x21
    31b4:	3f c0       	rjmp	.+126    	; 0x3234 <LCD_voidInit+0x18b0>
	else if (__tmp > 65535)
    31b6:	6b a1       	ldd	r22, Y+35	; 0x23
    31b8:	7c a1       	ldd	r23, Y+36	; 0x24
    31ba:	8d a1       	ldd	r24, Y+37	; 0x25
    31bc:	9e a1       	ldd	r25, Y+38	; 0x26
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	3f ef       	ldi	r19, 0xFF	; 255
    31c2:	4f e7       	ldi	r20, 0x7F	; 127
    31c4:	57 e4       	ldi	r21, 0x47	; 71
    31c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ca:	18 16       	cp	r1, r24
    31cc:	4c f5       	brge	.+82     	; 0x3220 <LCD_voidInit+0x189c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ce:	6f a1       	ldd	r22, Y+39	; 0x27
    31d0:	78 a5       	ldd	r23, Y+40	; 0x28
    31d2:	89 a5       	ldd	r24, Y+41	; 0x29
    31d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e2       	ldi	r20, 0x20	; 32
    31dc:	51 e4       	ldi	r21, 0x41	; 65
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	bc 01       	movw	r22, r24
    31e8:	cd 01       	movw	r24, r26
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	9a a3       	std	Y+34, r25	; 0x22
    31f4:	89 a3       	std	Y+33, r24	; 0x21
    31f6:	0f c0       	rjmp	.+30     	; 0x3216 <LCD_voidInit+0x1892>
    31f8:	88 ec       	ldi	r24, 0xC8	; 200
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	98 a3       	std	Y+32, r25	; 0x20
    31fe:	8f 8f       	std	Y+31, r24	; 0x1f
    3200:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3202:	98 a1       	ldd	r25, Y+32	; 0x20
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	f1 f7       	brne	.-4      	; 0x3204 <LCD_voidInit+0x1880>
    3208:	98 a3       	std	Y+32, r25	; 0x20
    320a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320c:	89 a1       	ldd	r24, Y+33	; 0x21
    320e:	9a a1       	ldd	r25, Y+34	; 0x22
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	9a a3       	std	Y+34, r25	; 0x22
    3214:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3216:	89 a1       	ldd	r24, Y+33	; 0x21
    3218:	9a a1       	ldd	r25, Y+34	; 0x22
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	69 f7       	brne	.-38     	; 0x31f8 <LCD_voidInit+0x1874>
    321e:	14 c0       	rjmp	.+40     	; 0x3248 <LCD_voidInit+0x18c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3220:	6b a1       	ldd	r22, Y+35	; 0x23
    3222:	7c a1       	ldd	r23, Y+36	; 0x24
    3224:	8d a1       	ldd	r24, Y+37	; 0x25
    3226:	9e a1       	ldd	r25, Y+38	; 0x26
    3228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	9a a3       	std	Y+34, r25	; 0x22
    3232:	89 a3       	std	Y+33, r24	; 0x21
    3234:	89 a1       	ldd	r24, Y+33	; 0x21
    3236:	9a a1       	ldd	r25, Y+34	; 0x22
    3238:	9e 8f       	std	Y+30, r25	; 0x1e
    323a:	8d 8f       	std	Y+29, r24	; 0x1d
    323c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    323e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	f1 f7       	brne	.-4      	; 0x3240 <LCD_voidInit+0x18bc>
    3244:	9e 8f       	std	Y+30, r25	; 0x1e
    3246:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	40 e0       	ldi	r20, 0x00	; 0
    324e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_HIGH);
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	61 e0       	ldi	r22, 0x01	; 1
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_HIGH);
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	62 e0       	ldi	r22, 0x02	; 2
    3260:	41 e0       	ldi	r20, 0x01	; 1
    3262:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	64 e0       	ldi	r22, 0x04	; 4
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	62 e0       	ldi	r22, 0x02	; 2
    3274:	41 e0       	ldi	r20, 0x01	; 1
    3276:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	a0 e0       	ldi	r26, 0x00	; 0
    3280:	b0 e4       	ldi	r27, 0x40	; 64
    3282:	89 8f       	std	Y+25, r24	; 0x19
    3284:	9a 8f       	std	Y+26, r25	; 0x1a
    3286:	ab 8f       	std	Y+27, r26	; 0x1b
    3288:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328a:	69 8d       	ldd	r22, Y+25	; 0x19
    328c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    328e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	4a ef       	ldi	r20, 0xFA	; 250
    3298:	54 e4       	ldi	r21, 0x44	; 68
    329a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	8d 8b       	std	Y+21, r24	; 0x15
    32a4:	9e 8b       	std	Y+22, r25	; 0x16
    32a6:	af 8b       	std	Y+23, r26	; 0x17
    32a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32aa:	6d 89       	ldd	r22, Y+21	; 0x15
    32ac:	7e 89       	ldd	r23, Y+22	; 0x16
    32ae:	8f 89       	ldd	r24, Y+23	; 0x17
    32b0:	98 8d       	ldd	r25, Y+24	; 0x18
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e8       	ldi	r20, 0x80	; 128
    32b8:	5f e3       	ldi	r21, 0x3F	; 63
    32ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32be:	88 23       	and	r24, r24
    32c0:	2c f4       	brge	.+10     	; 0x32cc <LCD_voidInit+0x1948>
		__ticks = 1;
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	9c 8b       	std	Y+20, r25	; 0x14
    32c8:	8b 8b       	std	Y+19, r24	; 0x13
    32ca:	3f c0       	rjmp	.+126    	; 0x334a <LCD_voidInit+0x19c6>
	else if (__tmp > 65535)
    32cc:	6d 89       	ldd	r22, Y+21	; 0x15
    32ce:	7e 89       	ldd	r23, Y+22	; 0x16
    32d0:	8f 89       	ldd	r24, Y+23	; 0x17
    32d2:	98 8d       	ldd	r25, Y+24	; 0x18
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	3f ef       	ldi	r19, 0xFF	; 255
    32d8:	4f e7       	ldi	r20, 0x7F	; 127
    32da:	57 e4       	ldi	r21, 0x47	; 71
    32dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e0:	18 16       	cp	r1, r24
    32e2:	4c f5       	brge	.+82     	; 0x3336 <LCD_voidInit+0x19b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e4:	69 8d       	ldd	r22, Y+25	; 0x19
    32e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e2       	ldi	r20, 0x20	; 32
    32f2:	51 e4       	ldi	r21, 0x41	; 65
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	bc 01       	movw	r22, r24
    32fe:	cd 01       	movw	r24, r26
    3300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	9c 8b       	std	Y+20, r25	; 0x14
    330a:	8b 8b       	std	Y+19, r24	; 0x13
    330c:	0f c0       	rjmp	.+30     	; 0x332c <LCD_voidInit+0x19a8>
    330e:	88 ec       	ldi	r24, 0xC8	; 200
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	9a 8b       	std	Y+18, r25	; 0x12
    3314:	89 8b       	std	Y+17, r24	; 0x11
    3316:	89 89       	ldd	r24, Y+17	; 0x11
    3318:	9a 89       	ldd	r25, Y+18	; 0x12
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	f1 f7       	brne	.-4      	; 0x331a <LCD_voidInit+0x1996>
    331e:	9a 8b       	std	Y+18, r25	; 0x12
    3320:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3322:	8b 89       	ldd	r24, Y+19	; 0x13
    3324:	9c 89       	ldd	r25, Y+20	; 0x14
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	9c 8b       	std	Y+20, r25	; 0x14
    332a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332c:	8b 89       	ldd	r24, Y+19	; 0x13
    332e:	9c 89       	ldd	r25, Y+20	; 0x14
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	69 f7       	brne	.-38     	; 0x330e <LCD_voidInit+0x198a>
    3334:	14 c0       	rjmp	.+40     	; 0x335e <LCD_voidInit+0x19da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3336:	6d 89       	ldd	r22, Y+21	; 0x15
    3338:	7e 89       	ldd	r23, Y+22	; 0x16
    333a:	8f 89       	ldd	r24, Y+23	; 0x17
    333c:	98 8d       	ldd	r25, Y+24	; 0x18
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9c 8b       	std	Y+20, r25	; 0x14
    3348:	8b 8b       	std	Y+19, r24	; 0x13
    334a:	8b 89       	ldd	r24, Y+19	; 0x13
    334c:	9c 89       	ldd	r25, Y+20	; 0x14
    334e:	98 8b       	std	Y+16, r25	; 0x10
    3350:	8f 87       	std	Y+15, r24	; 0x0f
    3352:	8f 85       	ldd	r24, Y+15	; 0x0f
    3354:	98 89       	ldd	r25, Y+16	; 0x10
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <LCD_voidInit+0x19d2>
    335a:	98 8b       	std	Y+16, r25	; 0x10
    335c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	62 e0       	ldi	r22, 0x02	; 2
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	a0 e8       	ldi	r26, 0x80	; 128
    336e:	bf e3       	ldi	r27, 0x3F	; 63
    3370:	8b 87       	std	Y+11, r24	; 0x0b
    3372:	9c 87       	std	Y+12, r25	; 0x0c
    3374:	ad 87       	std	Y+13, r26	; 0x0d
    3376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3378:	6b 85       	ldd	r22, Y+11	; 0x0b
    337a:	7c 85       	ldd	r23, Y+12	; 0x0c
    337c:	8d 85       	ldd	r24, Y+13	; 0x0d
    337e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4a ef       	ldi	r20, 0xFA	; 250
    3386:	54 e4       	ldi	r21, 0x44	; 68
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	8f 83       	std	Y+7, r24	; 0x07
    3392:	98 87       	std	Y+8, r25	; 0x08
    3394:	a9 87       	std	Y+9, r26	; 0x09
    3396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3398:	6f 81       	ldd	r22, Y+7	; 0x07
    339a:	78 85       	ldd	r23, Y+8	; 0x08
    339c:	89 85       	ldd	r24, Y+9	; 0x09
    339e:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	2c f4       	brge	.+10     	; 0x33ba <LCD_voidInit+0x1a36>
		__ticks = 1;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9e 83       	std	Y+6, r25	; 0x06
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	3f c0       	rjmp	.+126    	; 0x3438 <LCD_voidInit+0x1ab4>
	else if (__tmp > 65535)
    33ba:	6f 81       	ldd	r22, Y+7	; 0x07
    33bc:	78 85       	ldd	r23, Y+8	; 0x08
    33be:	89 85       	ldd	r24, Y+9	; 0x09
    33c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	3f ef       	ldi	r19, 0xFF	; 255
    33c6:	4f e7       	ldi	r20, 0x7F	; 127
    33c8:	57 e4       	ldi	r21, 0x47	; 71
    33ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ce:	18 16       	cp	r1, r24
    33d0:	4c f5       	brge	.+82     	; 0x3424 <LCD_voidInit+0x1aa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e2       	ldi	r20, 0x20	; 32
    33e0:	51 e4       	ldi	r21, 0x41	; 65
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	bc 01       	movw	r22, r24
    33ec:	cd 01       	movw	r24, r26
    33ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
    33fa:	0f c0       	rjmp	.+30     	; 0x341a <LCD_voidInit+0x1a96>
    33fc:	88 ec       	ldi	r24, 0xC8	; 200
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	9c 83       	std	Y+4, r25	; 0x04
    3402:	8b 83       	std	Y+3, r24	; 0x03
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	9c 81       	ldd	r25, Y+4	; 0x04
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <LCD_voidInit+0x1a84>
    340c:	9c 83       	std	Y+4, r25	; 0x04
    340e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3410:	8d 81       	ldd	r24, Y+5	; 0x05
    3412:	9e 81       	ldd	r25, Y+6	; 0x06
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	9e 83       	std	Y+6, r25	; 0x06
    3418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	9e 81       	ldd	r25, Y+6	; 0x06
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	69 f7       	brne	.-38     	; 0x33fc <LCD_voidInit+0x1a78>
    3422:	14 c0       	rjmp	.+40     	; 0x344c <LCD_voidInit+0x1ac8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3424:	6f 81       	ldd	r22, Y+7	; 0x07
    3426:	78 85       	ldd	r23, Y+8	; 0x08
    3428:	89 85       	ldd	r24, Y+9	; 0x09
    342a:	9a 85       	ldd	r25, Y+10	; 0x0a
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	9a 83       	std	Y+2, r25	; 0x02
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <LCD_voidInit+0x1ac0>
    3448:	9a 83       	std	Y+2, r25	; 0x02
    344a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    344c:	c6 5f       	subi	r28, 0xF6	; 246
    344e:	de 4f       	sbci	r29, 0xFE	; 254
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	08 95       	ret

00003464 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8  Copy_u8Cmnd)
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
    346c:	e9 97       	sbiw	r28, 0x39	; 57
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	cd bf       	out	0x3d, r28	; 61
    3478:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	62 e0       	ldi	r22, 0x02	; 2
    347e:	40 e0       	ldi	r20, 0x00	; 0
    3480:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN,DIO_u8_LOW);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	63 e0       	ldi	r22, 0x03	; 3
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,GET_BIT(Copy_u8Cmnd,4));
    348e:	89 ad       	ldd	r24, Y+57	; 0x39
    3490:	82 95       	swap	r24
    3492:	8f 70       	andi	r24, 0x0F	; 15
    3494:	98 2f       	mov	r25, r24
    3496:	91 70       	andi	r25, 0x01	; 1
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	60 e0       	ldi	r22, 0x00	; 0
    349c:	49 2f       	mov	r20, r25
    349e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,GET_BIT(Copy_u8Cmnd,5));
    34a2:	89 ad       	ldd	r24, Y+57	; 0x39
    34a4:	82 95       	swap	r24
    34a6:	86 95       	lsr	r24
    34a8:	87 70       	andi	r24, 0x07	; 7
    34aa:	98 2f       	mov	r25, r24
    34ac:	91 70       	andi	r25, 0x01	; 1
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	61 e0       	ldi	r22, 0x01	; 1
    34b2:	49 2f       	mov	r20, r25
    34b4:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,GET_BIT(Copy_u8Cmnd,6));
    34b8:	89 ad       	ldd	r24, Y+57	; 0x39
    34ba:	82 95       	swap	r24
    34bc:	86 95       	lsr	r24
    34be:	86 95       	lsr	r24
    34c0:	83 70       	andi	r24, 0x03	; 3
    34c2:	98 2f       	mov	r25, r24
    34c4:	91 70       	andi	r25, 0x01	; 1
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	62 e0       	ldi	r22, 0x02	; 2
    34ca:	49 2f       	mov	r20, r25
    34cc:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,GET_BIT(Copy_u8Cmnd,7));
    34d0:	89 ad       	ldd	r24, Y+57	; 0x39
    34d2:	98 2f       	mov	r25, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	99 27       	eor	r25, r25
    34d8:	99 1f       	adc	r25, r25
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	64 e0       	ldi	r22, 0x04	; 4
    34de:	49 2f       	mov	r20, r25
    34e0:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_HIGH);
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	62 e0       	ldi	r22, 0x02	; 2
    34e8:	41 e0       	ldi	r20, 0x01	; 1
    34ea:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	a0 e0       	ldi	r26, 0x00	; 0
    34f4:	b0 e4       	ldi	r27, 0x40	; 64
    34f6:	8d ab       	std	Y+53, r24	; 0x35
    34f8:	9e ab       	std	Y+54, r25	; 0x36
    34fa:	af ab       	std	Y+55, r26	; 0x37
    34fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3500:	7e a9       	ldd	r23, Y+54	; 0x36
    3502:	8f a9       	ldd	r24, Y+55	; 0x37
    3504:	98 ad       	ldd	r25, Y+56	; 0x38
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	4a ef       	ldi	r20, 0xFA	; 250
    350c:	54 e4       	ldi	r21, 0x44	; 68
    350e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	89 ab       	std	Y+49, r24	; 0x31
    3518:	9a ab       	std	Y+50, r25	; 0x32
    351a:	ab ab       	std	Y+51, r26	; 0x33
    351c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    351e:	69 a9       	ldd	r22, Y+49	; 0x31
    3520:	7a a9       	ldd	r23, Y+50	; 0x32
    3522:	8b a9       	ldd	r24, Y+51	; 0x33
    3524:	9c a9       	ldd	r25, Y+52	; 0x34
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e8       	ldi	r20, 0x80	; 128
    352c:	5f e3       	ldi	r21, 0x3F	; 63
    352e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3532:	88 23       	and	r24, r24
    3534:	2c f4       	brge	.+10     	; 0x3540 <LCD_voidSendCmnd+0xdc>
		__ticks = 1;
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	98 ab       	std	Y+48, r25	; 0x30
    353c:	8f a7       	std	Y+47, r24	; 0x2f
    353e:	3f c0       	rjmp	.+126    	; 0x35be <LCD_voidSendCmnd+0x15a>
	else if (__tmp > 65535)
    3540:	69 a9       	ldd	r22, Y+49	; 0x31
    3542:	7a a9       	ldd	r23, Y+50	; 0x32
    3544:	8b a9       	ldd	r24, Y+51	; 0x33
    3546:	9c a9       	ldd	r25, Y+52	; 0x34
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	3f ef       	ldi	r19, 0xFF	; 255
    354c:	4f e7       	ldi	r20, 0x7F	; 127
    354e:	57 e4       	ldi	r21, 0x47	; 71
    3550:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3554:	18 16       	cp	r1, r24
    3556:	4c f5       	brge	.+82     	; 0x35aa <LCD_voidSendCmnd+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3558:	6d a9       	ldd	r22, Y+53	; 0x35
    355a:	7e a9       	ldd	r23, Y+54	; 0x36
    355c:	8f a9       	ldd	r24, Y+55	; 0x37
    355e:	98 ad       	ldd	r25, Y+56	; 0x38
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	40 e2       	ldi	r20, 0x20	; 32
    3566:	51 e4       	ldi	r21, 0x41	; 65
    3568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	bc 01       	movw	r22, r24
    3572:	cd 01       	movw	r24, r26
    3574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	98 ab       	std	Y+48, r25	; 0x30
    357e:	8f a7       	std	Y+47, r24	; 0x2f
    3580:	0f c0       	rjmp	.+30     	; 0x35a0 <LCD_voidSendCmnd+0x13c>
    3582:	88 ec       	ldi	r24, 0xC8	; 200
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	9e a7       	std	Y+46, r25	; 0x2e
    3588:	8d a7       	std	Y+45, r24	; 0x2d
    358a:	8d a5       	ldd	r24, Y+45	; 0x2d
    358c:	9e a5       	ldd	r25, Y+46	; 0x2e
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	f1 f7       	brne	.-4      	; 0x358e <LCD_voidSendCmnd+0x12a>
    3592:	9e a7       	std	Y+46, r25	; 0x2e
    3594:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3596:	8f a5       	ldd	r24, Y+47	; 0x2f
    3598:	98 a9       	ldd	r25, Y+48	; 0x30
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	98 ab       	std	Y+48, r25	; 0x30
    359e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    35a2:	98 a9       	ldd	r25, Y+48	; 0x30
    35a4:	00 97       	sbiw	r24, 0x00	; 0
    35a6:	69 f7       	brne	.-38     	; 0x3582 <LCD_voidSendCmnd+0x11e>
    35a8:	14 c0       	rjmp	.+40     	; 0x35d2 <LCD_voidSendCmnd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35aa:	69 a9       	ldd	r22, Y+49	; 0x31
    35ac:	7a a9       	ldd	r23, Y+50	; 0x32
    35ae:	8b a9       	ldd	r24, Y+51	; 0x33
    35b0:	9c a9       	ldd	r25, Y+52	; 0x34
    35b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	98 ab       	std	Y+48, r25	; 0x30
    35bc:	8f a7       	std	Y+47, r24	; 0x2f
    35be:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c0:	98 a9       	ldd	r25, Y+48	; 0x30
    35c2:	9c a7       	std	Y+44, r25	; 0x2c
    35c4:	8b a7       	std	Y+43, r24	; 0x2b
    35c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    35c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <LCD_voidSendCmnd+0x166>
    35ce:	9c a7       	std	Y+44, r25	; 0x2c
    35d0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		//second 4 bits
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	62 e0       	ldi	r22, 0x02	; 2
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	a0 e0       	ldi	r26, 0x00	; 0
    35e2:	b0 e4       	ldi	r27, 0x40	; 64
    35e4:	8f a3       	std	Y+39, r24	; 0x27
    35e6:	98 a7       	std	Y+40, r25	; 0x28
    35e8:	a9 a7       	std	Y+41, r26	; 0x29
    35ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ec:	6f a1       	ldd	r22, Y+39	; 0x27
    35ee:	78 a5       	ldd	r23, Y+40	; 0x28
    35f0:	89 a5       	ldd	r24, Y+41	; 0x29
    35f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	4a ef       	ldi	r20, 0xFA	; 250
    35fa:	54 e4       	ldi	r21, 0x44	; 68
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	8b a3       	std	Y+35, r24	; 0x23
    3606:	9c a3       	std	Y+36, r25	; 0x24
    3608:	ad a3       	std	Y+37, r26	; 0x25
    360a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    360c:	6b a1       	ldd	r22, Y+35	; 0x23
    360e:	7c a1       	ldd	r23, Y+36	; 0x24
    3610:	8d a1       	ldd	r24, Y+37	; 0x25
    3612:	9e a1       	ldd	r25, Y+38	; 0x26
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	2c f4       	brge	.+10     	; 0x362e <LCD_voidSendCmnd+0x1ca>
		__ticks = 1;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9a a3       	std	Y+34, r25	; 0x22
    362a:	89 a3       	std	Y+33, r24	; 0x21
    362c:	3f c0       	rjmp	.+126    	; 0x36ac <LCD_voidSendCmnd+0x248>
	else if (__tmp > 65535)
    362e:	6b a1       	ldd	r22, Y+35	; 0x23
    3630:	7c a1       	ldd	r23, Y+36	; 0x24
    3632:	8d a1       	ldd	r24, Y+37	; 0x25
    3634:	9e a1       	ldd	r25, Y+38	; 0x26
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3642:	18 16       	cp	r1, r24
    3644:	4c f5       	brge	.+82     	; 0x3698 <LCD_voidSendCmnd+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3646:	6f a1       	ldd	r22, Y+39	; 0x27
    3648:	78 a5       	ldd	r23, Y+40	; 0x28
    364a:	89 a5       	ldd	r24, Y+41	; 0x29
    364c:	9a a5       	ldd	r25, Y+42	; 0x2a
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	9a a3       	std	Y+34, r25	; 0x22
    366c:	89 a3       	std	Y+33, r24	; 0x21
    366e:	0f c0       	rjmp	.+30     	; 0x368e <LCD_voidSendCmnd+0x22a>
    3670:	88 ec       	ldi	r24, 0xC8	; 200
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	98 a3       	std	Y+32, r25	; 0x20
    3676:	8f 8f       	std	Y+31, r24	; 0x1f
    3678:	8f 8d       	ldd	r24, Y+31	; 0x1f
    367a:	98 a1       	ldd	r25, Y+32	; 0x20
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <LCD_voidSendCmnd+0x218>
    3680:	98 a3       	std	Y+32, r25	; 0x20
    3682:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3684:	89 a1       	ldd	r24, Y+33	; 0x21
    3686:	9a a1       	ldd	r25, Y+34	; 0x22
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	9a a3       	std	Y+34, r25	; 0x22
    368c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	89 a1       	ldd	r24, Y+33	; 0x21
    3690:	9a a1       	ldd	r25, Y+34	; 0x22
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	69 f7       	brne	.-38     	; 0x3670 <LCD_voidSendCmnd+0x20c>
    3696:	14 c0       	rjmp	.+40     	; 0x36c0 <LCD_voidSendCmnd+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3698:	6b a1       	ldd	r22, Y+35	; 0x23
    369a:	7c a1       	ldd	r23, Y+36	; 0x24
    369c:	8d a1       	ldd	r24, Y+37	; 0x25
    369e:	9e a1       	ldd	r25, Y+38	; 0x26
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9a a3       	std	Y+34, r25	; 0x22
    36aa:	89 a3       	std	Y+33, r24	; 0x21
    36ac:	89 a1       	ldd	r24, Y+33	; 0x21
    36ae:	9a a1       	ldd	r25, Y+34	; 0x22
    36b0:	9e 8f       	std	Y+30, r25	; 0x1e
    36b2:	8d 8f       	std	Y+29, r24	; 0x1d
    36b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <LCD_voidSendCmnd+0x254>
    36bc:	9e 8f       	std	Y+30, r25	; 0x1e
    36be:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,GET_BIT(Copy_u8Cmnd,0));
    36c0:	89 ad       	ldd	r24, Y+57	; 0x39
    36c2:	98 2f       	mov	r25, r24
    36c4:	91 70       	andi	r25, 0x01	; 1
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	49 2f       	mov	r20, r25
    36cc:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,GET_BIT(Copy_u8Cmnd,1));
    36d0:	89 ad       	ldd	r24, Y+57	; 0x39
    36d2:	86 95       	lsr	r24
    36d4:	98 2f       	mov	r25, r24
    36d6:	91 70       	andi	r25, 0x01	; 1
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	61 e0       	ldi	r22, 0x01	; 1
    36dc:	49 2f       	mov	r20, r25
    36de:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,GET_BIT(Copy_u8Cmnd,2));
    36e2:	89 ad       	ldd	r24, Y+57	; 0x39
    36e4:	86 95       	lsr	r24
    36e6:	86 95       	lsr	r24
    36e8:	98 2f       	mov	r25, r24
    36ea:	91 70       	andi	r25, 0x01	; 1
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	62 e0       	ldi	r22, 0x02	; 2
    36f0:	49 2f       	mov	r20, r25
    36f2:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,GET_BIT(Copy_u8Cmnd,3));
    36f6:	89 ad       	ldd	r24, Y+57	; 0x39
    36f8:	86 95       	lsr	r24
    36fa:	86 95       	lsr	r24
    36fc:	86 95       	lsr	r24
    36fe:	98 2f       	mov	r25, r24
    3700:	91 70       	andi	r25, 0x01	; 1
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	64 e0       	ldi	r22, 0x04	; 4
    3706:	49 2f       	mov	r20, r25
    3708:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_HIGH);
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	62 e0       	ldi	r22, 0x02	; 2
    3710:	41 e0       	ldi	r20, 0x01	; 1
    3712:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	a0 e0       	ldi	r26, 0x00	; 0
    371c:	b0 e4       	ldi	r27, 0x40	; 64
    371e:	89 8f       	std	Y+25, r24	; 0x19
    3720:	9a 8f       	std	Y+26, r25	; 0x1a
    3722:	ab 8f       	std	Y+27, r26	; 0x1b
    3724:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3726:	69 8d       	ldd	r22, Y+25	; 0x19
    3728:	7a 8d       	ldd	r23, Y+26	; 0x1a
    372a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    372c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	4a ef       	ldi	r20, 0xFA	; 250
    3734:	54 e4       	ldi	r21, 0x44	; 68
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	8d 8b       	std	Y+21, r24	; 0x15
    3740:	9e 8b       	std	Y+22, r25	; 0x16
    3742:	af 8b       	std	Y+23, r26	; 0x17
    3744:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3746:	6d 89       	ldd	r22, Y+21	; 0x15
    3748:	7e 89       	ldd	r23, Y+22	; 0x16
    374a:	8f 89       	ldd	r24, Y+23	; 0x17
    374c:	98 8d       	ldd	r25, Y+24	; 0x18
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 e8       	ldi	r20, 0x80	; 128
    3754:	5f e3       	ldi	r21, 0x3F	; 63
    3756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    375a:	88 23       	and	r24, r24
    375c:	2c f4       	brge	.+10     	; 0x3768 <LCD_voidSendCmnd+0x304>
		__ticks = 1;
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	9c 8b       	std	Y+20, r25	; 0x14
    3764:	8b 8b       	std	Y+19, r24	; 0x13
    3766:	3f c0       	rjmp	.+126    	; 0x37e6 <LCD_voidSendCmnd+0x382>
	else if (__tmp > 65535)
    3768:	6d 89       	ldd	r22, Y+21	; 0x15
    376a:	7e 89       	ldd	r23, Y+22	; 0x16
    376c:	8f 89       	ldd	r24, Y+23	; 0x17
    376e:	98 8d       	ldd	r25, Y+24	; 0x18
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	3f ef       	ldi	r19, 0xFF	; 255
    3774:	4f e7       	ldi	r20, 0x7F	; 127
    3776:	57 e4       	ldi	r21, 0x47	; 71
    3778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    377c:	18 16       	cp	r1, r24
    377e:	4c f5       	brge	.+82     	; 0x37d2 <LCD_voidSendCmnd+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3780:	69 8d       	ldd	r22, Y+25	; 0x19
    3782:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3784:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3786:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	40 e2       	ldi	r20, 0x20	; 32
    378e:	51 e4       	ldi	r21, 0x41	; 65
    3790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	9c 8b       	std	Y+20, r25	; 0x14
    37a6:	8b 8b       	std	Y+19, r24	; 0x13
    37a8:	0f c0       	rjmp	.+30     	; 0x37c8 <LCD_voidSendCmnd+0x364>
    37aa:	88 ec       	ldi	r24, 0xC8	; 200
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	9a 8b       	std	Y+18, r25	; 0x12
    37b0:	89 8b       	std	Y+17, r24	; 0x11
    37b2:	89 89       	ldd	r24, Y+17	; 0x11
    37b4:	9a 89       	ldd	r25, Y+18	; 0x12
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	f1 f7       	brne	.-4      	; 0x37b6 <LCD_voidSendCmnd+0x352>
    37ba:	9a 8b       	std	Y+18, r25	; 0x12
    37bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37be:	8b 89       	ldd	r24, Y+19	; 0x13
    37c0:	9c 89       	ldd	r25, Y+20	; 0x14
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	9c 8b       	std	Y+20, r25	; 0x14
    37c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c8:	8b 89       	ldd	r24, Y+19	; 0x13
    37ca:	9c 89       	ldd	r25, Y+20	; 0x14
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	69 f7       	brne	.-38     	; 0x37aa <LCD_voidSendCmnd+0x346>
    37d0:	14 c0       	rjmp	.+40     	; 0x37fa <LCD_voidSendCmnd+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d2:	6d 89       	ldd	r22, Y+21	; 0x15
    37d4:	7e 89       	ldd	r23, Y+22	; 0x16
    37d6:	8f 89       	ldd	r24, Y+23	; 0x17
    37d8:	98 8d       	ldd	r25, Y+24	; 0x18
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	9c 8b       	std	Y+20, r25	; 0x14
    37e4:	8b 8b       	std	Y+19, r24	; 0x13
    37e6:	8b 89       	ldd	r24, Y+19	; 0x13
    37e8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ea:	98 8b       	std	Y+16, r25	; 0x10
    37ec:	8f 87       	std	Y+15, r24	; 0x0f
    37ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f0:	98 89       	ldd	r25, Y+16	; 0x10
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <LCD_voidSendCmnd+0x38e>
    37f6:	98 8b       	std	Y+16, r25	; 0x10
    37f8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	62 e0       	ldi	r22, 0x02	; 2
    37fe:	40 e0       	ldi	r20, 0x00	; 0
    3800:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	a0 e0       	ldi	r26, 0x00	; 0
    380a:	b0 e4       	ldi	r27, 0x40	; 64
    380c:	8b 87       	std	Y+11, r24	; 0x0b
    380e:	9c 87       	std	Y+12, r25	; 0x0c
    3810:	ad 87       	std	Y+13, r26	; 0x0d
    3812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3814:	6b 85       	ldd	r22, Y+11	; 0x0b
    3816:	7c 85       	ldd	r23, Y+12	; 0x0c
    3818:	8d 85       	ldd	r24, Y+13	; 0x0d
    381a:	9e 85       	ldd	r25, Y+14	; 0x0e
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	4a ef       	ldi	r20, 0xFA	; 250
    3822:	54 e4       	ldi	r21, 0x44	; 68
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	8f 83       	std	Y+7, r24	; 0x07
    382e:	98 87       	std	Y+8, r25	; 0x08
    3830:	a9 87       	std	Y+9, r26	; 0x09
    3832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3834:	6f 81       	ldd	r22, Y+7	; 0x07
    3836:	78 85       	ldd	r23, Y+8	; 0x08
    3838:	89 85       	ldd	r24, Y+9	; 0x09
    383a:	9a 85       	ldd	r25, Y+10	; 0x0a
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e8       	ldi	r20, 0x80	; 128
    3842:	5f e3       	ldi	r21, 0x3F	; 63
    3844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3848:	88 23       	and	r24, r24
    384a:	2c f4       	brge	.+10     	; 0x3856 <LCD_voidSendCmnd+0x3f2>
		__ticks = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	9e 83       	std	Y+6, r25	; 0x06
    3852:	8d 83       	std	Y+5, r24	; 0x05
    3854:	3f c0       	rjmp	.+126    	; 0x38d4 <LCD_voidSendCmnd+0x470>
	else if (__tmp > 65535)
    3856:	6f 81       	ldd	r22, Y+7	; 0x07
    3858:	78 85       	ldd	r23, Y+8	; 0x08
    385a:	89 85       	ldd	r24, Y+9	; 0x09
    385c:	9a 85       	ldd	r25, Y+10	; 0x0a
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	3f ef       	ldi	r19, 0xFF	; 255
    3862:	4f e7       	ldi	r20, 0x7F	; 127
    3864:	57 e4       	ldi	r21, 0x47	; 71
    3866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    386a:	18 16       	cp	r1, r24
    386c:	4c f5       	brge	.+82     	; 0x38c0 <LCD_voidSendCmnd+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3870:	7c 85       	ldd	r23, Y+12	; 0x0c
    3872:	8d 85       	ldd	r24, Y+13	; 0x0d
    3874:	9e 85       	ldd	r25, Y+14	; 0x0e
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e2       	ldi	r20, 0x20	; 32
    387c:	51 e4       	ldi	r21, 0x41	; 65
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <LCD_voidSendCmnd+0x452>
    3898:	88 ec       	ldi	r24, 0xC8	; 200
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	9c 83       	std	Y+4, r25	; 0x04
    389e:	8b 83       	std	Y+3, r24	; 0x03
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	9c 81       	ldd	r25, Y+4	; 0x04
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <LCD_voidSendCmnd+0x440>
    38a8:	9c 83       	std	Y+4, r25	; 0x04
    38aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	9e 81       	ldd	r25, Y+6	; 0x06
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	9e 83       	std	Y+6, r25	; 0x06
    38b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	69 f7       	brne	.-38     	; 0x3898 <LCD_voidSendCmnd+0x434>
    38be:	14 c0       	rjmp	.+40     	; 0x38e8 <LCD_voidSendCmnd+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	6f 81       	ldd	r22, Y+7	; 0x07
    38c2:	78 85       	ldd	r23, Y+8	; 0x08
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	9e 83       	std	Y+6, r25	; 0x06
    38d2:	8d 83       	std	Y+5, r24	; 0x05
    38d4:	8d 81       	ldd	r24, Y+5	; 0x05
    38d6:	9e 81       	ldd	r25, Y+6	; 0x06
    38d8:	9a 83       	std	Y+2, r25	; 0x02
    38da:	89 83       	std	Y+1, r24	; 0x01
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	9a 81       	ldd	r25, Y+2	; 0x02
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <LCD_voidSendCmnd+0x47c>
    38e4:	9a 83       	std	Y+2, r25	; 0x02
    38e6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
}
    38e8:	e9 96       	adiw	r28, 0x39	; 57
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	e9 97       	sbiw	r28, 0x39	; 57
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	62 e0       	ldi	r22, 0x02	; 2
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN,DIO_u8_HIGH);
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	63 e0       	ldi	r22, 0x03	; 3
    391e:	41 e0       	ldi	r20, 0x01	; 1
    3920:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,GET_BIT(Copy_u8Char,4));
    3924:	89 ad       	ldd	r24, Y+57	; 0x39
    3926:	82 95       	swap	r24
    3928:	8f 70       	andi	r24, 0x0F	; 15
    392a:	98 2f       	mov	r25, r24
    392c:	91 70       	andi	r25, 0x01	; 1
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	49 2f       	mov	r20, r25
    3934:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,GET_BIT(Copy_u8Char,5));
    3938:	89 ad       	ldd	r24, Y+57	; 0x39
    393a:	82 95       	swap	r24
    393c:	86 95       	lsr	r24
    393e:	87 70       	andi	r24, 0x07	; 7
    3940:	98 2f       	mov	r25, r24
    3942:	91 70       	andi	r25, 0x01	; 1
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	61 e0       	ldi	r22, 0x01	; 1
    3948:	49 2f       	mov	r20, r25
    394a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,GET_BIT(Copy_u8Char,6));
    394e:	89 ad       	ldd	r24, Y+57	; 0x39
    3950:	82 95       	swap	r24
    3952:	86 95       	lsr	r24
    3954:	86 95       	lsr	r24
    3956:	83 70       	andi	r24, 0x03	; 3
    3958:	98 2f       	mov	r25, r24
    395a:	91 70       	andi	r25, 0x01	; 1
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	62 e0       	ldi	r22, 0x02	; 2
    3960:	49 2f       	mov	r20, r25
    3962:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,GET_BIT(Copy_u8Char,7));
    3966:	89 ad       	ldd	r24, Y+57	; 0x39
    3968:	98 2f       	mov	r25, r24
    396a:	99 1f       	adc	r25, r25
    396c:	99 27       	eor	r25, r25
    396e:	99 1f       	adc	r25, r25
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	64 e0       	ldi	r22, 0x04	; 4
    3974:	49 2f       	mov	r20, r25
    3976:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_HIGH);
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	62 e0       	ldi	r22, 0x02	; 2
    397e:	41 e0       	ldi	r20, 0x01	; 1
    3980:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	a0 e0       	ldi	r26, 0x00	; 0
    398a:	b0 e4       	ldi	r27, 0x40	; 64
    398c:	8d ab       	std	Y+53, r24	; 0x35
    398e:	9e ab       	std	Y+54, r25	; 0x36
    3990:	af ab       	std	Y+55, r26	; 0x37
    3992:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3994:	6d a9       	ldd	r22, Y+53	; 0x35
    3996:	7e a9       	ldd	r23, Y+54	; 0x36
    3998:	8f a9       	ldd	r24, Y+55	; 0x37
    399a:	98 ad       	ldd	r25, Y+56	; 0x38
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	4a ef       	ldi	r20, 0xFA	; 250
    39a2:	54 e4       	ldi	r21, 0x44	; 68
    39a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	89 ab       	std	Y+49, r24	; 0x31
    39ae:	9a ab       	std	Y+50, r25	; 0x32
    39b0:	ab ab       	std	Y+51, r26	; 0x33
    39b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39b4:	69 a9       	ldd	r22, Y+49	; 0x31
    39b6:	7a a9       	ldd	r23, Y+50	; 0x32
    39b8:	8b a9       	ldd	r24, Y+51	; 0x33
    39ba:	9c a9       	ldd	r25, Y+52	; 0x34
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e8       	ldi	r20, 0x80	; 128
    39c2:	5f e3       	ldi	r21, 0x3F	; 63
    39c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39c8:	88 23       	and	r24, r24
    39ca:	2c f4       	brge	.+10     	; 0x39d6 <LCD_voidSendChar+0xdc>
		__ticks = 1;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	98 ab       	std	Y+48, r25	; 0x30
    39d2:	8f a7       	std	Y+47, r24	; 0x2f
    39d4:	3f c0       	rjmp	.+126    	; 0x3a54 <LCD_voidSendChar+0x15a>
	else if (__tmp > 65535)
    39d6:	69 a9       	ldd	r22, Y+49	; 0x31
    39d8:	7a a9       	ldd	r23, Y+50	; 0x32
    39da:	8b a9       	ldd	r24, Y+51	; 0x33
    39dc:	9c a9       	ldd	r25, Y+52	; 0x34
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	3f ef       	ldi	r19, 0xFF	; 255
    39e2:	4f e7       	ldi	r20, 0x7F	; 127
    39e4:	57 e4       	ldi	r21, 0x47	; 71
    39e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ea:	18 16       	cp	r1, r24
    39ec:	4c f5       	brge	.+82     	; 0x3a40 <LCD_voidSendChar+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ee:	6d a9       	ldd	r22, Y+53	; 0x35
    39f0:	7e a9       	ldd	r23, Y+54	; 0x36
    39f2:	8f a9       	ldd	r24, Y+55	; 0x37
    39f4:	98 ad       	ldd	r25, Y+56	; 0x38
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e2       	ldi	r20, 0x20	; 32
    39fc:	51 e4       	ldi	r21, 0x41	; 65
    39fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	bc 01       	movw	r22, r24
    3a08:	cd 01       	movw	r24, r26
    3a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	98 ab       	std	Y+48, r25	; 0x30
    3a14:	8f a7       	std	Y+47, r24	; 0x2f
    3a16:	0f c0       	rjmp	.+30     	; 0x3a36 <LCD_voidSendChar+0x13c>
    3a18:	88 ec       	ldi	r24, 0xC8	; 200
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	9e a7       	std	Y+46, r25	; 0x2e
    3a1e:	8d a7       	std	Y+45, r24	; 0x2d
    3a20:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a22:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <LCD_voidSendChar+0x12a>
    3a28:	9e a7       	std	Y+46, r25	; 0x2e
    3a2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a2e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	98 ab       	std	Y+48, r25	; 0x30
    3a34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a38:	98 a9       	ldd	r25, Y+48	; 0x30
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	69 f7       	brne	.-38     	; 0x3a18 <LCD_voidSendChar+0x11e>
    3a3e:	14 c0       	rjmp	.+40     	; 0x3a68 <LCD_voidSendChar+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a40:	69 a9       	ldd	r22, Y+49	; 0x31
    3a42:	7a a9       	ldd	r23, Y+50	; 0x32
    3a44:	8b a9       	ldd	r24, Y+51	; 0x33
    3a46:	9c a9       	ldd	r25, Y+52	; 0x34
    3a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	98 ab       	std	Y+48, r25	; 0x30
    3a52:	8f a7       	std	Y+47, r24	; 0x2f
    3a54:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a56:	98 a9       	ldd	r25, Y+48	; 0x30
    3a58:	9c a7       	std	Y+44, r25	; 0x2c
    3a5a:	8b a7       	std	Y+43, r24	; 0x2b
    3a5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <LCD_voidSendChar+0x166>
    3a64:	9c a7       	std	Y+44, r25	; 0x2c
    3a66:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		//second 4 bits
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	62 e0       	ldi	r22, 0x02	; 2
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	a0 e0       	ldi	r26, 0x00	; 0
    3a78:	b0 e4       	ldi	r27, 0x40	; 64
    3a7a:	8f a3       	std	Y+39, r24	; 0x27
    3a7c:	98 a7       	std	Y+40, r25	; 0x28
    3a7e:	a9 a7       	std	Y+41, r26	; 0x29
    3a80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a82:	6f a1       	ldd	r22, Y+39	; 0x27
    3a84:	78 a5       	ldd	r23, Y+40	; 0x28
    3a86:	89 a5       	ldd	r24, Y+41	; 0x29
    3a88:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a8a:	20 e0       	ldi	r18, 0x00	; 0
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	4a ef       	ldi	r20, 0xFA	; 250
    3a90:	54 e4       	ldi	r21, 0x44	; 68
    3a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	8b a3       	std	Y+35, r24	; 0x23
    3a9c:	9c a3       	std	Y+36, r25	; 0x24
    3a9e:	ad a3       	std	Y+37, r26	; 0x25
    3aa0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    3aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    3aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    3aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e8       	ldi	r20, 0x80	; 128
    3ab0:	5f e3       	ldi	r21, 0x3F	; 63
    3ab2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ab6:	88 23       	and	r24, r24
    3ab8:	2c f4       	brge	.+10     	; 0x3ac4 <LCD_voidSendChar+0x1ca>
		__ticks = 1;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	9a a3       	std	Y+34, r25	; 0x22
    3ac0:	89 a3       	std	Y+33, r24	; 0x21
    3ac2:	3f c0       	rjmp	.+126    	; 0x3b42 <LCD_voidSendChar+0x248>
	else if (__tmp > 65535)
    3ac4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ac6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    3aca:	9e a1       	ldd	r25, Y+38	; 0x26
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	3f ef       	ldi	r19, 0xFF	; 255
    3ad0:	4f e7       	ldi	r20, 0x7F	; 127
    3ad2:	57 e4       	ldi	r21, 0x47	; 71
    3ad4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ad8:	18 16       	cp	r1, r24
    3ada:	4c f5       	brge	.+82     	; 0x3b2e <LCD_voidSendChar+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3adc:	6f a1       	ldd	r22, Y+39	; 0x27
    3ade:	78 a5       	ldd	r23, Y+40	; 0x28
    3ae0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ae2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	40 e2       	ldi	r20, 0x20	; 32
    3aea:	51 e4       	ldi	r21, 0x41	; 65
    3aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	bc 01       	movw	r22, r24
    3af6:	cd 01       	movw	r24, r26
    3af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	9a a3       	std	Y+34, r25	; 0x22
    3b02:	89 a3       	std	Y+33, r24	; 0x21
    3b04:	0f c0       	rjmp	.+30     	; 0x3b24 <LCD_voidSendChar+0x22a>
    3b06:	88 ec       	ldi	r24, 0xC8	; 200
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	98 a3       	std	Y+32, r25	; 0x20
    3b0c:	8f 8f       	std	Y+31, r24	; 0x1f
    3b0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b10:	98 a1       	ldd	r25, Y+32	; 0x20
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	f1 f7       	brne	.-4      	; 0x3b12 <LCD_voidSendChar+0x218>
    3b16:	98 a3       	std	Y+32, r25	; 0x20
    3b18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b1a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b1c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	9a a3       	std	Y+34, r25	; 0x22
    3b22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b24:	89 a1       	ldd	r24, Y+33	; 0x21
    3b26:	9a a1       	ldd	r25, Y+34	; 0x22
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	69 f7       	brne	.-38     	; 0x3b06 <LCD_voidSendChar+0x20c>
    3b2c:	14 c0       	rjmp	.+40     	; 0x3b56 <LCD_voidSendChar+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b30:	7c a1       	ldd	r23, Y+36	; 0x24
    3b32:	8d a1       	ldd	r24, Y+37	; 0x25
    3b34:	9e a1       	ldd	r25, Y+38	; 0x26
    3b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	9a a3       	std	Y+34, r25	; 0x22
    3b40:	89 a3       	std	Y+33, r24	; 0x21
    3b42:	89 a1       	ldd	r24, Y+33	; 0x21
    3b44:	9a a1       	ldd	r25, Y+34	; 0x22
    3b46:	9e 8f       	std	Y+30, r25	; 0x1e
    3b48:	8d 8f       	std	Y+29, r24	; 0x1d
    3b4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <LCD_voidSendChar+0x254>
    3b52:	9e 8f       	std	Y+30, r25	; 0x1e
    3b54:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,GET_BIT(Copy_u8Char,0));
    3b56:	89 ad       	ldd	r24, Y+57	; 0x39
    3b58:	98 2f       	mov	r25, r24
    3b5a:	91 70       	andi	r25, 0x01	; 1
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	60 e0       	ldi	r22, 0x00	; 0
    3b60:	49 2f       	mov	r20, r25
    3b62:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,GET_BIT(Copy_u8Char,1));
    3b66:	89 ad       	ldd	r24, Y+57	; 0x39
    3b68:	86 95       	lsr	r24
    3b6a:	98 2f       	mov	r25, r24
    3b6c:	91 70       	andi	r25, 0x01	; 1
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	61 e0       	ldi	r22, 0x01	; 1
    3b72:	49 2f       	mov	r20, r25
    3b74:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,GET_BIT(Copy_u8Char,2));
    3b78:	89 ad       	ldd	r24, Y+57	; 0x39
    3b7a:	86 95       	lsr	r24
    3b7c:	86 95       	lsr	r24
    3b7e:	98 2f       	mov	r25, r24
    3b80:	91 70       	andi	r25, 0x01	; 1
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	62 e0       	ldi	r22, 0x02	; 2
    3b86:	49 2f       	mov	r20, r25
    3b88:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,GET_BIT(Copy_u8Char,3));
    3b8c:	89 ad       	ldd	r24, Y+57	; 0x39
    3b8e:	86 95       	lsr	r24
    3b90:	86 95       	lsr	r24
    3b92:	86 95       	lsr	r24
    3b94:	98 2f       	mov	r25, r24
    3b96:	91 70       	andi	r25, 0x01	; 1
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	64 e0       	ldi	r22, 0x04	; 4
    3b9c:	49 2f       	mov	r20, r25
    3b9e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_HIGH);
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	62 e0       	ldi	r22, 0x02	; 2
    3ba6:	41 e0       	ldi	r20, 0x01	; 1
    3ba8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	a0 e0       	ldi	r26, 0x00	; 0
    3bb2:	b0 e4       	ldi	r27, 0x40	; 64
    3bb4:	89 8f       	std	Y+25, r24	; 0x19
    3bb6:	9a 8f       	std	Y+26, r25	; 0x1a
    3bb8:	ab 8f       	std	Y+27, r26	; 0x1b
    3bba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbc:	69 8d       	ldd	r22, Y+25	; 0x19
    3bbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4a ef       	ldi	r20, 0xFA	; 250
    3bca:	54 e4       	ldi	r21, 0x44	; 68
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	8d 8b       	std	Y+21, r24	; 0x15
    3bd6:	9e 8b       	std	Y+22, r25	; 0x16
    3bd8:	af 8b       	std	Y+23, r26	; 0x17
    3bda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    3bde:	7e 89       	ldd	r23, Y+22	; 0x16
    3be0:	8f 89       	ldd	r24, Y+23	; 0x17
    3be2:	98 8d       	ldd	r25, Y+24	; 0x18
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	2c f4       	brge	.+10     	; 0x3bfe <LCD_voidSendChar+0x304>
		__ticks = 1;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	9c 8b       	std	Y+20, r25	; 0x14
    3bfa:	8b 8b       	std	Y+19, r24	; 0x13
    3bfc:	3f c0       	rjmp	.+126    	; 0x3c7c <LCD_voidSendChar+0x382>
	else if (__tmp > 65535)
    3bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    3c00:	7e 89       	ldd	r23, Y+22	; 0x16
    3c02:	8f 89       	ldd	r24, Y+23	; 0x17
    3c04:	98 8d       	ldd	r25, Y+24	; 0x18
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	3f ef       	ldi	r19, 0xFF	; 255
    3c0a:	4f e7       	ldi	r20, 0x7F	; 127
    3c0c:	57 e4       	ldi	r21, 0x47	; 71
    3c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c12:	18 16       	cp	r1, r24
    3c14:	4c f5       	brge	.+82     	; 0x3c68 <LCD_voidSendChar+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c16:	69 8d       	ldd	r22, Y+25	; 0x19
    3c18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e2       	ldi	r20, 0x20	; 32
    3c24:	51 e4       	ldi	r21, 0x41	; 65
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	9c 8b       	std	Y+20, r25	; 0x14
    3c3c:	8b 8b       	std	Y+19, r24	; 0x13
    3c3e:	0f c0       	rjmp	.+30     	; 0x3c5e <LCD_voidSendChar+0x364>
    3c40:	88 ec       	ldi	r24, 0xC8	; 200
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9a 8b       	std	Y+18, r25	; 0x12
    3c46:	89 8b       	std	Y+17, r24	; 0x11
    3c48:	89 89       	ldd	r24, Y+17	; 0x11
    3c4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <LCD_voidSendChar+0x352>
    3c50:	9a 8b       	std	Y+18, r25	; 0x12
    3c52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c54:	8b 89       	ldd	r24, Y+19	; 0x13
    3c56:	9c 89       	ldd	r25, Y+20	; 0x14
    3c58:	01 97       	sbiw	r24, 0x01	; 1
    3c5a:	9c 8b       	std	Y+20, r25	; 0x14
    3c5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c60:	9c 89       	ldd	r25, Y+20	; 0x14
    3c62:	00 97       	sbiw	r24, 0x00	; 0
    3c64:	69 f7       	brne	.-38     	; 0x3c40 <LCD_voidSendChar+0x346>
    3c66:	14 c0       	rjmp	.+40     	; 0x3c90 <LCD_voidSendChar+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c68:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9c 8b       	std	Y+20, r25	; 0x14
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c80:	98 8b       	std	Y+16, r25	; 0x10
    3c82:	8f 87       	std	Y+15, r24	; 0x0f
    3c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c86:	98 89       	ldd	r25, Y+16	; 0x10
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	f1 f7       	brne	.-4      	; 0x3c88 <LCD_voidSendChar+0x38e>
    3c8c:	98 8b       	std	Y+16, r25	; 0x10
    3c8e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	62 e0       	ldi	r22, 0x02	; 2
    3c94:	40 e0       	ldi	r20, 0x00	; 0
    3c96:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	a0 e0       	ldi	r26, 0x00	; 0
    3ca0:	b0 e4       	ldi	r27, 0x40	; 64
    3ca2:	8b 87       	std	Y+11, r24	; 0x0b
    3ca4:	9c 87       	std	Y+12, r25	; 0x0c
    3ca6:	ad 87       	std	Y+13, r26	; 0x0d
    3ca8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	4a ef       	ldi	r20, 0xFA	; 250
    3cb8:	54 e4       	ldi	r21, 0x44	; 68
    3cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	8f 83       	std	Y+7, r24	; 0x07
    3cc4:	98 87       	std	Y+8, r25	; 0x08
    3cc6:	a9 87       	std	Y+9, r26	; 0x09
    3cc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cca:	6f 81       	ldd	r22, Y+7	; 0x07
    3ccc:	78 85       	ldd	r23, Y+8	; 0x08
    3cce:	89 85       	ldd	r24, Y+9	; 0x09
    3cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	40 e8       	ldi	r20, 0x80	; 128
    3cd8:	5f e3       	ldi	r21, 0x3F	; 63
    3cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cde:	88 23       	and	r24, r24
    3ce0:	2c f4       	brge	.+10     	; 0x3cec <LCD_voidSendChar+0x3f2>
		__ticks = 1;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	9e 83       	std	Y+6, r25	; 0x06
    3ce8:	8d 83       	std	Y+5, r24	; 0x05
    3cea:	3f c0       	rjmp	.+126    	; 0x3d6a <LCD_voidSendChar+0x470>
	else if (__tmp > 65535)
    3cec:	6f 81       	ldd	r22, Y+7	; 0x07
    3cee:	78 85       	ldd	r23, Y+8	; 0x08
    3cf0:	89 85       	ldd	r24, Y+9	; 0x09
    3cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	3f ef       	ldi	r19, 0xFF	; 255
    3cf8:	4f e7       	ldi	r20, 0x7F	; 127
    3cfa:	57 e4       	ldi	r21, 0x47	; 71
    3cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d00:	18 16       	cp	r1, r24
    3d02:	4c f5       	brge	.+82     	; 0x3d56 <LCD_voidSendChar+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	40 e2       	ldi	r20, 0x20	; 32
    3d12:	51 e4       	ldi	r21, 0x41	; 65
    3d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	bc 01       	movw	r22, r24
    3d1e:	cd 01       	movw	r24, r26
    3d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	9e 83       	std	Y+6, r25	; 0x06
    3d2a:	8d 83       	std	Y+5, r24	; 0x05
    3d2c:	0f c0       	rjmp	.+30     	; 0x3d4c <LCD_voidSendChar+0x452>
    3d2e:	88 ec       	ldi	r24, 0xC8	; 200
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	9c 83       	std	Y+4, r25	; 0x04
    3d34:	8b 83       	std	Y+3, r24	; 0x03
    3d36:	8b 81       	ldd	r24, Y+3	; 0x03
    3d38:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	f1 f7       	brne	.-4      	; 0x3d3a <LCD_voidSendChar+0x440>
    3d3e:	9c 83       	std	Y+4, r25	; 0x04
    3d40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d42:	8d 81       	ldd	r24, Y+5	; 0x05
    3d44:	9e 81       	ldd	r25, Y+6	; 0x06
    3d46:	01 97       	sbiw	r24, 0x01	; 1
    3d48:	9e 83       	std	Y+6, r25	; 0x06
    3d4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	69 f7       	brne	.-38     	; 0x3d2e <LCD_voidSendChar+0x434>
    3d54:	14 c0       	rjmp	.+40     	; 0x3d7e <LCD_voidSendChar+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d56:	6f 81       	ldd	r22, Y+7	; 0x07
    3d58:	78 85       	ldd	r23, Y+8	; 0x08
    3d5a:	89 85       	ldd	r24, Y+9	; 0x09
    3d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	9e 83       	std	Y+6, r25	; 0x06
    3d68:	8d 83       	std	Y+5, r24	; 0x05
    3d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6e:	9a 83       	std	Y+2, r25	; 0x02
    3d70:	89 83       	std	Y+1, r24	; 0x01
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	9a 81       	ldd	r25, Y+2	; 0x02
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	f1 f7       	brne	.-4      	; 0x3d76 <LCD_voidSendChar+0x47c>
    3d7a:	9a 83       	std	Y+2, r25	; 0x02
    3d7c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

}
    3d7e:	e9 96       	adiw	r28, 0x39	; 57
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	cf 91       	pop	r28
    3d8c:	df 91       	pop	r29
    3d8e:	08 95       	ret

00003d90 <LCD_voidSendStr>:

void LCD_voidSendStr(u8* Copy_pu8Str )
{
    3d90:	df 93       	push	r29
    3d92:	cf 93       	push	r28
    3d94:	00 d0       	rcall	.+0      	; 0x3d96 <LCD_voidSendStr+0x6>
    3d96:	0f 92       	push	r0
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	9b 83       	std	Y+3, r25	; 0x03
    3d9e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StrLen = 0;
    3da0:	19 82       	std	Y+1, r1	; 0x01
    3da2:	0e c0       	rjmp	.+28     	; 0x3dc0 <LCD_voidSendStr+0x30>
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	28 2f       	mov	r18, r24
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dac:	9b 81       	ldd	r25, Y+3	; 0x03
    3dae:	fc 01       	movw	r30, r24
    3db0:	e2 0f       	add	r30, r18
    3db2:	f3 1f       	adc	r31, r19
    3db4:	80 81       	ld	r24, Z
    3db6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_voidSendChar>
		Local_u8StrLen++;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	8f 5f       	subi	r24, 0xFF	; 255
    3dbe:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendStr(u8* Copy_pu8Str )
{
	u8 Local_u8StrLen = 0;
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	28 2f       	mov	r18, r24
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dca:	fc 01       	movw	r30, r24
    3dcc:	e2 0f       	add	r30, r18
    3dce:	f3 1f       	adc	r31, r19
    3dd0:	80 81       	ld	r24, Z
    3dd2:	88 23       	and	r24, r24
    3dd4:	39 f7       	brne	.-50     	; 0x3da4 <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
		Local_u8StrLen++;
	}
}
    3dd6:	0f 90       	pop	r0
    3dd8:	0f 90       	pop	r0
    3dda:	0f 90       	pop	r0
    3ddc:	cf 91       	pop	r28
    3dde:	df 91       	pop	r29
    3de0:	08 95       	ret

00003de2 <LCD_voidSendNum>:

void LCD_voidSendNum (u32  Copy_u32Num )
{
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	df 93       	push	r29
    3de8:	cf 93       	push	r28
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
    3dee:	61 97       	sbiw	r28, 0x11	; 17
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	de bf       	out	0x3e, r29	; 62
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	cd bf       	out	0x3d, r28	; 61
    3dfa:	6e 87       	std	Y+14, r22	; 0x0e
    3dfc:	7f 87       	std	Y+15, r23	; 0x0f
    3dfe:	88 8b       	std	Y+16, r24	; 0x10
    3e00:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8NumArr[10]= {0};
    3e02:	8a e0       	ldi	r24, 0x0A	; 10
    3e04:	fe 01       	movw	r30, r28
    3e06:	34 96       	adiw	r30, 0x04	; 4
    3e08:	df 01       	movw	r26, r30
    3e0a:	98 2f       	mov	r25, r24
    3e0c:	1d 92       	st	X+, r1
    3e0e:	9a 95       	dec	r25
    3e10:	e9 f7       	brne	.-6      	; 0x3e0c <LCD_voidSendNum+0x2a>
	u8 Local_u8ArrIndex = 0;
    3e12:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u32Num == 0)
    3e14:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e16:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e18:	a8 89       	ldd	r26, Y+16	; 0x10
    3e1a:	b9 89       	ldd	r27, Y+17	; 0x11
    3e1c:	00 97       	sbiw	r24, 0x00	; 0
    3e1e:	a1 05       	cpc	r26, r1
    3e20:	b1 05       	cpc	r27, r1
    3e22:	89 f5       	brne	.+98     	; 0x3e86 <LCD_voidSendNum+0xa4>
	{
		LCD_voidSendChar('0');
    3e24:	80 e3       	ldi	r24, 0x30	; 48
    3e26:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_voidSendChar>
    3e2a:	50 c0       	rjmp	.+160    	; 0x3ecc <LCD_voidSendNum+0xea>
	}
	else
	{
		while(Copy_u32Num > 0)
		{
			Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
    3e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2e:	08 2f       	mov	r16, r24
    3e30:	10 e0       	ldi	r17, 0x00	; 0
    3e32:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e34:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e36:	a8 89       	ldd	r26, Y+16	; 0x10
    3e38:	b9 89       	ldd	r27, Y+17	; 0x11
    3e3a:	2a e0       	ldi	r18, 0x0A	; 10
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	40 e0       	ldi	r20, 0x00	; 0
    3e40:	50 e0       	ldi	r21, 0x00	; 0
    3e42:	bc 01       	movw	r22, r24
    3e44:	cd 01       	movw	r24, r26
    3e46:	0e 94 92 23 	call	0x4724	; 0x4724 <__udivmodsi4>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	28 2f       	mov	r18, r24
    3e50:	ce 01       	movw	r24, r28
    3e52:	04 96       	adiw	r24, 0x04	; 4
    3e54:	fc 01       	movw	r30, r24
    3e56:	e0 0f       	add	r30, r16
    3e58:	f1 1f       	adc	r31, r17
    3e5a:	20 83       	st	Z, r18
			Copy_u32Num /=10;
    3e5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e60:	a8 89       	ldd	r26, Y+16	; 0x10
    3e62:	b9 89       	ldd	r27, Y+17	; 0x11
    3e64:	2a e0       	ldi	r18, 0x0A	; 10
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	40 e0       	ldi	r20, 0x00	; 0
    3e6a:	50 e0       	ldi	r21, 0x00	; 0
    3e6c:	bc 01       	movw	r22, r24
    3e6e:	cd 01       	movw	r24, r26
    3e70:	0e 94 92 23 	call	0x4724	; 0x4724 <__udivmodsi4>
    3e74:	da 01       	movw	r26, r20
    3e76:	c9 01       	movw	r24, r18
    3e78:	8e 87       	std	Y+14, r24	; 0x0e
    3e7a:	9f 87       	std	Y+15, r25	; 0x0f
    3e7c:	a8 8b       	std	Y+16, r26	; 0x10
    3e7e:	b9 8b       	std	Y+17, r27	; 0x11
			Local_u8ArrIndex++;
    3e80:	8b 81       	ldd	r24, Y+3	; 0x03
    3e82:	8f 5f       	subi	r24, 0xFF	; 255
    3e84:	8b 83       	std	Y+3, r24	; 0x03
	{
		LCD_voidSendChar('0');
	}
	else
	{
		while(Copy_u32Num > 0)
    3e86:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e88:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e8a:	a8 89       	ldd	r26, Y+16	; 0x10
    3e8c:	b9 89       	ldd	r27, Y+17	; 0x11
    3e8e:	00 97       	sbiw	r24, 0x00	; 0
    3e90:	a1 05       	cpc	r26, r1
    3e92:	b1 05       	cpc	r27, r1
    3e94:	59 f6       	brne	.-106    	; 0x3e2c <LCD_voidSendNum+0x4a>
		{
			Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
			Copy_u32Num /=10;
			Local_u8ArrIndex++;
		}
		for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    3e96:	8b 81       	ldd	r24, Y+3	; 0x03
    3e98:	88 2f       	mov	r24, r24
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	9a 83       	std	Y+2, r25	; 0x02
    3ea0:	89 83       	std	Y+1, r24	; 0x01
    3ea2:	10 c0       	rjmp	.+32     	; 0x3ec4 <LCD_voidSendNum+0xe2>
		{
			LCD_voidSendChar( Local_u8NumArr[i] + '0');
    3ea4:	29 81       	ldd	r18, Y+1	; 0x01
    3ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	04 96       	adiw	r24, 0x04	; 4
    3eac:	fc 01       	movw	r30, r24
    3eae:	e2 0f       	add	r30, r18
    3eb0:	f3 1f       	adc	r31, r19
    3eb2:	80 81       	ld	r24, Z
    3eb4:	80 5d       	subi	r24, 0xD0	; 208
    3eb6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_voidSendChar>
		{
			Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
			Copy_u32Num /=10;
			Local_u8ArrIndex++;
		}
		for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	9a 83       	std	Y+2, r25	; 0x02
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec8:	99 23       	and	r25, r25
    3eca:	64 f7       	brge	.-40     	; 0x3ea4 <LCD_voidSendNum+0xc2>
		{
			LCD_voidSendChar( Local_u8NumArr[i] + '0');
		}
	}
}
    3ecc:	61 96       	adiw	r28, 0x11	; 17
    3ece:	0f b6       	in	r0, 0x3f	; 63
    3ed0:	f8 94       	cli
    3ed2:	de bf       	out	0x3e, r29	; 62
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	cd bf       	out	0x3d, r28	; 61
    3ed8:	cf 91       	pop	r28
    3eda:	df 91       	pop	r29
    3edc:	1f 91       	pop	r17
    3ede:	0f 91       	pop	r16
    3ee0:	08 95       	ret

00003ee2 <LCD_u8GoToXY>:


u8 LCD_u8GoToXY (u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    3ee2:	df 93       	push	r29
    3ee4:	cf 93       	push	r28
    3ee6:	00 d0       	rcall	.+0      	; 0x3ee8 <LCD_u8GoToXY+0x6>
    3ee8:	00 d0       	rcall	.+0      	; 0x3eea <LCD_u8GoToXY+0x8>
    3eea:	0f 92       	push	r0
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    3ef0:	8a 83       	std	Y+2, r24	; 0x02
    3ef2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Location <= 39)
    3ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    3efa:	88 32       	cpi	r24, 0x28	; 40
    3efc:	b0 f5       	brcc	.+108    	; 0x3f6a <LCD_u8GoToXY+0x88>
	{
		switch (Copy_u8LineNum)
    3efe:	8a 81       	ldd	r24, Y+2	; 0x02
    3f00:	28 2f       	mov	r18, r24
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	3d 83       	std	Y+5, r19	; 0x05
    3f06:	2c 83       	std	Y+4, r18	; 0x04
    3f08:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f0c:	82 30       	cpi	r24, 0x02	; 2
    3f0e:	91 05       	cpc	r25, r1
    3f10:	d9 f0       	breq	.+54     	; 0x3f48 <LCD_u8GoToXY+0x66>
    3f12:	2c 81       	ldd	r18, Y+4	; 0x04
    3f14:	3d 81       	ldd	r19, Y+5	; 0x05
    3f16:	23 30       	cpi	r18, 0x03	; 3
    3f18:	31 05       	cpc	r19, r1
    3f1a:	34 f4       	brge	.+12     	; 0x3f28 <LCD_u8GoToXY+0x46>
    3f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f20:	81 30       	cpi	r24, 0x01	; 1
    3f22:	91 05       	cpc	r25, r1
    3f24:	61 f0       	breq	.+24     	; 0x3f3e <LCD_u8GoToXY+0x5c>
    3f26:	1f c0       	rjmp	.+62     	; 0x3f66 <LCD_u8GoToXY+0x84>
    3f28:	2c 81       	ldd	r18, Y+4	; 0x04
    3f2a:	3d 81       	ldd	r19, Y+5	; 0x05
    3f2c:	23 30       	cpi	r18, 0x03	; 3
    3f2e:	31 05       	cpc	r19, r1
    3f30:	81 f0       	breq	.+32     	; 0x3f52 <LCD_u8GoToXY+0x70>
    3f32:	8c 81       	ldd	r24, Y+4	; 0x04
    3f34:	9d 81       	ldd	r25, Y+5	; 0x05
    3f36:	84 30       	cpi	r24, 0x04	; 4
    3f38:	91 05       	cpc	r25, r1
    3f3a:	81 f0       	breq	.+32     	; 0x3f5c <LCD_u8GoToXY+0x7a>
    3f3c:	14 c0       	rjmp	.+40     	; 0x3f66 <LCD_u8GoToXY+0x84>
		{
			case LCD_u8_LINE_1   : LCD_voidSendCmnd (0x80 + Copy_u8Location); break;
    3f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f40:	80 58       	subi	r24, 0x80	; 128
    3f42:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    3f46:	12 c0       	rjmp	.+36     	; 0x3f6c <LCD_u8GoToXY+0x8a>
			case LCD_u8_LINE_2   : LCD_voidSendCmnd (0xc0 + Copy_u8Location); break;
    3f48:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4a:	80 54       	subi	r24, 0x40	; 64
    3f4c:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    3f50:	0d c0       	rjmp	.+26     	; 0x3f6c <LCD_u8GoToXY+0x8a>
			case LCD_u8_LINE_3   : LCD_voidSendCmnd (0x94 + Copy_u8Location); break;
    3f52:	8b 81       	ldd	r24, Y+3	; 0x03
    3f54:	8c 56       	subi	r24, 0x6C	; 108
    3f56:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    3f5a:	08 c0       	rjmp	.+16     	; 0x3f6c <LCD_u8GoToXY+0x8a>
			case LCD_u8_LINE_4   : LCD_voidSendCmnd (0xD4 + Copy_u8Location); break;
    3f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5e:	8c 52       	subi	r24, 0x2C	; 44
    3f60:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    3f64:	03 c0       	rjmp	.+6      	; 0x3f6c <LCD_u8GoToXY+0x8a>
			default              : Local_u8ErrorState = STD_TYPES_NOK;
    3f66:	19 82       	std	Y+1, r1	; 0x01
    3f68:	01 c0       	rjmp	.+2      	; 0x3f6c <LCD_u8GoToXY+0x8a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3f6a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f6e:	0f 90       	pop	r0
    3f70:	0f 90       	pop	r0
    3f72:	0f 90       	pop	r0
    3f74:	0f 90       	pop	r0
    3f76:	0f 90       	pop	r0
    3f78:	cf 91       	pop	r28
    3f7a:	df 91       	pop	r29
    3f7c:	08 95       	ret

00003f7e <LCD_voidClearScreen>:

void LCD_voidClearScreen (void)
{
    3f7e:	df 93       	push	r29
    3f80:	cf 93       	push	r28
    3f82:	cd b7       	in	r28, 0x3d	; 61
    3f84:	de b7       	in	r29, 0x3e	; 62
    3f86:	2e 97       	sbiw	r28, 0x0e	; 14
    3f88:	0f b6       	in	r0, 0x3f	; 63
    3f8a:	f8 94       	cli
    3f8c:	de bf       	out	0x3e, r29	; 62
    3f8e:	0f be       	out	0x3f, r0	; 63
    3f90:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd (0x01);
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	a0 e0       	ldi	r26, 0x00	; 0
    3f9e:	b0 e4       	ldi	r27, 0x40	; 64
    3fa0:	8b 87       	std	Y+11, r24	; 0x0b
    3fa2:	9c 87       	std	Y+12, r25	; 0x0c
    3fa4:	ad 87       	std	Y+13, r26	; 0x0d
    3fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	4a ef       	ldi	r20, 0xFA	; 250
    3fb6:	54 e4       	ldi	r21, 0x44	; 68
    3fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	8f 83       	std	Y+7, r24	; 0x07
    3fc2:	98 87       	std	Y+8, r25	; 0x08
    3fc4:	a9 87       	std	Y+9, r26	; 0x09
    3fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fca:	78 85       	ldd	r23, Y+8	; 0x08
    3fcc:	89 85       	ldd	r24, Y+9	; 0x09
    3fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e8       	ldi	r20, 0x80	; 128
    3fd6:	5f e3       	ldi	r21, 0x3F	; 63
    3fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fdc:	88 23       	and	r24, r24
    3fde:	2c f4       	brge	.+10     	; 0x3fea <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	9e 83       	std	Y+6, r25	; 0x06
    3fe6:	8d 83       	std	Y+5, r24	; 0x05
    3fe8:	3f c0       	rjmp	.+126    	; 0x4068 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    3fea:	6f 81       	ldd	r22, Y+7	; 0x07
    3fec:	78 85       	ldd	r23, Y+8	; 0x08
    3fee:	89 85       	ldd	r24, Y+9	; 0x09
    3ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	3f ef       	ldi	r19, 0xFF	; 255
    3ff6:	4f e7       	ldi	r20, 0x7F	; 127
    3ff8:	57 e4       	ldi	r21, 0x47	; 71
    3ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ffe:	18 16       	cp	r1, r24
    4000:	4c f5       	brge	.+82     	; 0x4054 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4002:	6b 85       	ldd	r22, Y+11	; 0x0b
    4004:	7c 85       	ldd	r23, Y+12	; 0x0c
    4006:	8d 85       	ldd	r24, Y+13	; 0x0d
    4008:	9e 85       	ldd	r25, Y+14	; 0x0e
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e2       	ldi	r20, 0x20	; 32
    4010:	51 e4       	ldi	r21, 0x41	; 65
    4012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	bc 01       	movw	r22, r24
    401c:	cd 01       	movw	r24, r26
    401e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	9e 83       	std	Y+6, r25	; 0x06
    4028:	8d 83       	std	Y+5, r24	; 0x05
    402a:	0f c0       	rjmp	.+30     	; 0x404a <LCD_voidClearScreen+0xcc>
    402c:	88 ec       	ldi	r24, 0xC8	; 200
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	9c 83       	std	Y+4, r25	; 0x04
    4032:	8b 83       	std	Y+3, r24	; 0x03
    4034:	8b 81       	ldd	r24, Y+3	; 0x03
    4036:	9c 81       	ldd	r25, Y+4	; 0x04
    4038:	01 97       	sbiw	r24, 0x01	; 1
    403a:	f1 f7       	brne	.-4      	; 0x4038 <LCD_voidClearScreen+0xba>
    403c:	9c 83       	std	Y+4, r25	; 0x04
    403e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4040:	8d 81       	ldd	r24, Y+5	; 0x05
    4042:	9e 81       	ldd	r25, Y+6	; 0x06
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	9e 83       	std	Y+6, r25	; 0x06
    4048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404a:	8d 81       	ldd	r24, Y+5	; 0x05
    404c:	9e 81       	ldd	r25, Y+6	; 0x06
    404e:	00 97       	sbiw	r24, 0x00	; 0
    4050:	69 f7       	brne	.-38     	; 0x402c <LCD_voidClearScreen+0xae>
    4052:	14 c0       	rjmp	.+40     	; 0x407c <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4054:	6f 81       	ldd	r22, Y+7	; 0x07
    4056:	78 85       	ldd	r23, Y+8	; 0x08
    4058:	89 85       	ldd	r24, Y+9	; 0x09
    405a:	9a 85       	ldd	r25, Y+10	; 0x0a
    405c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	9e 83       	std	Y+6, r25	; 0x06
    4066:	8d 83       	std	Y+5, r24	; 0x05
    4068:	8d 81       	ldd	r24, Y+5	; 0x05
    406a:	9e 81       	ldd	r25, Y+6	; 0x06
    406c:	9a 83       	std	Y+2, r25	; 0x02
    406e:	89 83       	std	Y+1, r24	; 0x01
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	9a 81       	ldd	r25, Y+2	; 0x02
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	f1 f7       	brne	.-4      	; 0x4074 <LCD_voidClearScreen+0xf6>
    4078:	9a 83       	std	Y+2, r25	; 0x02
    407a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    407c:	2e 96       	adiw	r28, 0x0e	; 14
    407e:	0f b6       	in	r0, 0x3f	; 63
    4080:	f8 94       	cli
    4082:	de bf       	out	0x3e, r29	; 62
    4084:	0f be       	out	0x3f, r0	; 63
    4086:	cd bf       	out	0x3d, r28	; 61
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <LCD_u8SendSpecialChar>:

u8 LCD_u8SendSpecialChar    (u8 Copy_u8CharNum , u8* Copy_pu8CharShape ,u8  Copy_u8LineNum , u8 Copy_u8Location )
{
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	2a 97       	sbiw	r28, 0x0a	; 10
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	8c 83       	std	Y+4, r24	; 0x04
    40a4:	7e 83       	std	Y+6, r23	; 0x06
    40a6:	6d 83       	std	Y+5, r22	; 0x05
    40a8:	4f 83       	std	Y+7, r20	; 0x07
    40aa:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	8b 83       	std	Y+3, r24	; 0x03
	if((Copy_u8CharNum <= 7)&&(Copy_u8Location <= 39)&&(Copy_u8LineNum <=4))
    40b0:	8c 81       	ldd	r24, Y+4	; 0x04
    40b2:	88 30       	cpi	r24, 0x08	; 8
    40b4:	08 f0       	brcs	.+2      	; 0x40b8 <LCD_u8SendSpecialChar+0x2a>
    40b6:	79 c0       	rjmp	.+242    	; 0x41aa <LCD_u8SendSpecialChar+0x11c>
    40b8:	88 85       	ldd	r24, Y+8	; 0x08
    40ba:	88 32       	cpi	r24, 0x28	; 40
    40bc:	08 f0       	brcs	.+2      	; 0x40c0 <LCD_u8SendSpecialChar+0x32>
    40be:	75 c0       	rjmp	.+234    	; 0x41aa <LCD_u8SendSpecialChar+0x11c>
    40c0:	8f 81       	ldd	r24, Y+7	; 0x07
    40c2:	85 30       	cpi	r24, 0x05	; 5
    40c4:	08 f0       	brcs	.+2      	; 0x40c8 <LCD_u8SendSpecialChar+0x3a>
    40c6:	71 c0       	rjmp	.+226    	; 0x41aa <LCD_u8SendSpecialChar+0x11c>
	{
		switch(Copy_u8CharNum)
    40c8:	8c 81       	ldd	r24, Y+4	; 0x04
    40ca:	28 2f       	mov	r18, r24
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	3a 87       	std	Y+10, r19	; 0x0a
    40d0:	29 87       	std	Y+9, r18	; 0x09
    40d2:	89 85       	ldd	r24, Y+9	; 0x09
    40d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d6:	83 30       	cpi	r24, 0x03	; 3
    40d8:	91 05       	cpc	r25, r1
    40da:	a9 f1       	breq	.+106    	; 0x4146 <LCD_u8SendSpecialChar+0xb8>
    40dc:	29 85       	ldd	r18, Y+9	; 0x09
    40de:	3a 85       	ldd	r19, Y+10	; 0x0a
    40e0:	24 30       	cpi	r18, 0x04	; 4
    40e2:	31 05       	cpc	r19, r1
    40e4:	7c f4       	brge	.+30     	; 0x4104 <LCD_u8SendSpecialChar+0x76>
    40e6:	89 85       	ldd	r24, Y+9	; 0x09
    40e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ea:	81 30       	cpi	r24, 0x01	; 1
    40ec:	91 05       	cpc	r25, r1
    40ee:	19 f1       	breq	.+70     	; 0x4136 <LCD_u8SendSpecialChar+0xa8>
    40f0:	29 85       	ldd	r18, Y+9	; 0x09
    40f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    40f4:	22 30       	cpi	r18, 0x02	; 2
    40f6:	31 05       	cpc	r19, r1
    40f8:	14 f5       	brge	.+68     	; 0x413e <LCD_u8SendSpecialChar+0xb0>
    40fa:	89 85       	ldd	r24, Y+9	; 0x09
    40fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	b1 f0       	breq	.+44     	; 0x412e <LCD_u8SendSpecialChar+0xa0>
    4102:	34 c0       	rjmp	.+104    	; 0x416c <LCD_u8SendSpecialChar+0xde>
    4104:	29 85       	ldd	r18, Y+9	; 0x09
    4106:	3a 85       	ldd	r19, Y+10	; 0x0a
    4108:	25 30       	cpi	r18, 0x05	; 5
    410a:	31 05       	cpc	r19, r1
    410c:	21 f1       	breq	.+72     	; 0x4156 <LCD_u8SendSpecialChar+0xc8>
    410e:	89 85       	ldd	r24, Y+9	; 0x09
    4110:	9a 85       	ldd	r25, Y+10	; 0x0a
    4112:	85 30       	cpi	r24, 0x05	; 5
    4114:	91 05       	cpc	r25, r1
    4116:	dc f0       	brlt	.+54     	; 0x414e <LCD_u8SendSpecialChar+0xc0>
    4118:	29 85       	ldd	r18, Y+9	; 0x09
    411a:	3a 85       	ldd	r19, Y+10	; 0x0a
    411c:	26 30       	cpi	r18, 0x06	; 6
    411e:	31 05       	cpc	r19, r1
    4120:	f1 f0       	breq	.+60     	; 0x415e <LCD_u8SendSpecialChar+0xd0>
    4122:	89 85       	ldd	r24, Y+9	; 0x09
    4124:	9a 85       	ldd	r25, Y+10	; 0x0a
    4126:	87 30       	cpi	r24, 0x07	; 7
    4128:	91 05       	cpc	r25, r1
    412a:	e9 f0       	breq	.+58     	; 0x4166 <LCD_u8SendSpecialChar+0xd8>
    412c:	1f c0       	rjmp	.+62     	; 0x416c <LCD_u8SendSpecialChar+0xde>
		{
			case 0:LCD_voidSendCmnd(0b01000000); break; //0
    412e:	80 e4       	ldi	r24, 0x40	; 64
    4130:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    4134:	1b c0       	rjmp	.+54     	; 0x416c <LCD_u8SendSpecialChar+0xde>
			case 1:LCD_voidSendCmnd(0b01001000); break; //8
    4136:	88 e4       	ldi	r24, 0x48	; 72
    4138:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    413c:	17 c0       	rjmp	.+46     	; 0x416c <LCD_u8SendSpecialChar+0xde>
			case 2:LCD_voidSendCmnd(0b01010000); break; //16
    413e:	80 e5       	ldi	r24, 0x50	; 80
    4140:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    4144:	13 c0       	rjmp	.+38     	; 0x416c <LCD_u8SendSpecialChar+0xde>
			case 3:LCD_voidSendCmnd(0b01011000); break; //24
    4146:	88 e5       	ldi	r24, 0x58	; 88
    4148:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    414c:	0f c0       	rjmp	.+30     	; 0x416c <LCD_u8SendSpecialChar+0xde>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
    414e:	80 e6       	ldi	r24, 0x60	; 96
    4150:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    4154:	0b c0       	rjmp	.+22     	; 0x416c <LCD_u8SendSpecialChar+0xde>
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
    4156:	88 e6       	ldi	r24, 0x68	; 104
    4158:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    415c:	07 c0       	rjmp	.+14     	; 0x416c <LCD_u8SendSpecialChar+0xde>
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
    415e:	80 e7       	ldi	r24, 0x70	; 112
    4160:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    4164:	03 c0       	rjmp	.+6      	; 0x416c <LCD_u8SendSpecialChar+0xde>
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
    4166:	88 e7       	ldi	r24, 0x78	; 120
    4168:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
		}
		for(int i=0 ;i <8 ;i++)
    416c:	1a 82       	std	Y+2, r1	; 0x02
    416e:	19 82       	std	Y+1, r1	; 0x01
    4170:	0f c0       	rjmp	.+30     	; 0x4190 <LCD_u8SendSpecialChar+0x102>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
    4172:	29 81       	ldd	r18, Y+1	; 0x01
    4174:	3a 81       	ldd	r19, Y+2	; 0x02
    4176:	8d 81       	ldd	r24, Y+5	; 0x05
    4178:	9e 81       	ldd	r25, Y+6	; 0x06
    417a:	fc 01       	movw	r30, r24
    417c:	e2 0f       	add	r30, r18
    417e:	f3 1f       	adc	r31, r19
    4180:	80 81       	ld	r24, Z
    4182:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_voidSendChar>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
		}
		for(int i=0 ;i <8 ;i++)
    4186:	89 81       	ldd	r24, Y+1	; 0x01
    4188:	9a 81       	ldd	r25, Y+2	; 0x02
    418a:	01 96       	adiw	r24, 0x01	; 1
    418c:	9a 83       	std	Y+2, r25	; 0x02
    418e:	89 83       	std	Y+1, r24	; 0x01
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	9a 81       	ldd	r25, Y+2	; 0x02
    4194:	88 30       	cpi	r24, 0x08	; 8
    4196:	91 05       	cpc	r25, r1
    4198:	64 f3       	brlt	.-40     	; 0x4172 <LCD_u8SendSpecialChar+0xe4>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
		}
	    LCD_u8GoToXY(Copy_u8LineNum ,Copy_u8Location );
    419a:	8f 81       	ldd	r24, Y+7	; 0x07
    419c:	68 85       	ldd	r22, Y+8	; 0x08
    419e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    41a2:	8c 81       	ldd	r24, Y+4	; 0x04
    41a4:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_voidSendChar>
    41a8:	01 c0       	rjmp	.+2      	; 0x41ac <LCD_u8SendSpecialChar+0x11e>
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    41aa:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    41ac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    41ae:	2a 96       	adiw	r28, 0x0a	; 10
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	cf 91       	pop	r28
    41bc:	df 91       	pop	r29
    41be:	08 95       	ret

000041c0 <LCD_voidShiftRight>:

void LCD_voidShiftRight(void)
{
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	2e 97       	sbiw	r28, 0x0e	; 14
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011100);
    41d4:	8c e1       	ldi	r24, 0x1C	; 28
    41d6:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	a8 ec       	ldi	r26, 0xC8	; 200
    41e0:	b2 e4       	ldi	r27, 0x42	; 66
    41e2:	8b 87       	std	Y+11, r24	; 0x0b
    41e4:	9c 87       	std	Y+12, r25	; 0x0c
    41e6:	ad 87       	std	Y+13, r26	; 0x0d
    41e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	4a ef       	ldi	r20, 0xFA	; 250
    41f8:	54 e4       	ldi	r21, 0x44	; 68
    41fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	8f 83       	std	Y+7, r24	; 0x07
    4204:	98 87       	std	Y+8, r25	; 0x08
    4206:	a9 87       	std	Y+9, r26	; 0x09
    4208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    420a:	6f 81       	ldd	r22, Y+7	; 0x07
    420c:	78 85       	ldd	r23, Y+8	; 0x08
    420e:	89 85       	ldd	r24, Y+9	; 0x09
    4210:	9a 85       	ldd	r25, Y+10	; 0x0a
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e8       	ldi	r20, 0x80	; 128
    4218:	5f e3       	ldi	r21, 0x3F	; 63
    421a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    421e:	88 23       	and	r24, r24
    4220:	2c f4       	brge	.+10     	; 0x422c <LCD_voidShiftRight+0x6c>
		__ticks = 1;
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	9e 83       	std	Y+6, r25	; 0x06
    4228:	8d 83       	std	Y+5, r24	; 0x05
    422a:	3f c0       	rjmp	.+126    	; 0x42aa <LCD_voidShiftRight+0xea>
	else if (__tmp > 65535)
    422c:	6f 81       	ldd	r22, Y+7	; 0x07
    422e:	78 85       	ldd	r23, Y+8	; 0x08
    4230:	89 85       	ldd	r24, Y+9	; 0x09
    4232:	9a 85       	ldd	r25, Y+10	; 0x0a
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	3f ef       	ldi	r19, 0xFF	; 255
    4238:	4f e7       	ldi	r20, 0x7F	; 127
    423a:	57 e4       	ldi	r21, 0x47	; 71
    423c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4240:	18 16       	cp	r1, r24
    4242:	4c f5       	brge	.+82     	; 0x4296 <LCD_voidShiftRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4244:	6b 85       	ldd	r22, Y+11	; 0x0b
    4246:	7c 85       	ldd	r23, Y+12	; 0x0c
    4248:	8d 85       	ldd	r24, Y+13	; 0x0d
    424a:	9e 85       	ldd	r25, Y+14	; 0x0e
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	40 e2       	ldi	r20, 0x20	; 32
    4252:	51 e4       	ldi	r21, 0x41	; 65
    4254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	bc 01       	movw	r22, r24
    425e:	cd 01       	movw	r24, r26
    4260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	9e 83       	std	Y+6, r25	; 0x06
    426a:	8d 83       	std	Y+5, r24	; 0x05
    426c:	0f c0       	rjmp	.+30     	; 0x428c <LCD_voidShiftRight+0xcc>
    426e:	88 ec       	ldi	r24, 0xC8	; 200
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	9c 83       	std	Y+4, r25	; 0x04
    4274:	8b 83       	std	Y+3, r24	; 0x03
    4276:	8b 81       	ldd	r24, Y+3	; 0x03
    4278:	9c 81       	ldd	r25, Y+4	; 0x04
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	f1 f7       	brne	.-4      	; 0x427a <LCD_voidShiftRight+0xba>
    427e:	9c 83       	std	Y+4, r25	; 0x04
    4280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4282:	8d 81       	ldd	r24, Y+5	; 0x05
    4284:	9e 81       	ldd	r25, Y+6	; 0x06
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	9e 83       	std	Y+6, r25	; 0x06
    428a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    428c:	8d 81       	ldd	r24, Y+5	; 0x05
    428e:	9e 81       	ldd	r25, Y+6	; 0x06
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	69 f7       	brne	.-38     	; 0x426e <LCD_voidShiftRight+0xae>
    4294:	14 c0       	rjmp	.+40     	; 0x42be <LCD_voidShiftRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4296:	6f 81       	ldd	r22, Y+7	; 0x07
    4298:	78 85       	ldd	r23, Y+8	; 0x08
    429a:	89 85       	ldd	r24, Y+9	; 0x09
    429c:	9a 85       	ldd	r25, Y+10	; 0x0a
    429e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a2:	dc 01       	movw	r26, r24
    42a4:	cb 01       	movw	r24, r22
    42a6:	9e 83       	std	Y+6, r25	; 0x06
    42a8:	8d 83       	std	Y+5, r24	; 0x05
    42aa:	8d 81       	ldd	r24, Y+5	; 0x05
    42ac:	9e 81       	ldd	r25, Y+6	; 0x06
    42ae:	9a 83       	std	Y+2, r25	; 0x02
    42b0:	89 83       	std	Y+1, r24	; 0x01
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	9a 81       	ldd	r25, Y+2	; 0x02
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	f1 f7       	brne	.-4      	; 0x42b6 <LCD_voidShiftRight+0xf6>
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    42be:	2e 96       	adiw	r28, 0x0e	; 14
    42c0:	0f b6       	in	r0, 0x3f	; 63
    42c2:	f8 94       	cli
    42c4:	de bf       	out	0x3e, r29	; 62
    42c6:	0f be       	out	0x3f, r0	; 63
    42c8:	cd bf       	out	0x3d, r28	; 61
    42ca:	cf 91       	pop	r28
    42cc:	df 91       	pop	r29
    42ce:	08 95       	ret

000042d0 <LCD_voidShiftLeft>:

void LCD_voidShiftLeft(void)
{
    42d0:	df 93       	push	r29
    42d2:	cf 93       	push	r28
    42d4:	cd b7       	in	r28, 0x3d	; 61
    42d6:	de b7       	in	r29, 0x3e	; 62
    42d8:	2e 97       	sbiw	r28, 0x0e	; 14
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	f8 94       	cli
    42de:	de bf       	out	0x3e, r29	; 62
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011000);
    42e4:	88 e1       	ldi	r24, 0x18	; 24
    42e6:	0e 94 32 1a 	call	0x3464	; 0x3464 <LCD_voidSendCmnd>
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	a8 ec       	ldi	r26, 0xC8	; 200
    42f0:	b2 e4       	ldi	r27, 0x42	; 66
    42f2:	8b 87       	std	Y+11, r24	; 0x0b
    42f4:	9c 87       	std	Y+12, r25	; 0x0c
    42f6:	ad 87       	std	Y+13, r26	; 0x0d
    42f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    42fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    42fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4300:	9e 85       	ldd	r25, Y+14	; 0x0e
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	4a ef       	ldi	r20, 0xFA	; 250
    4308:	54 e4       	ldi	r21, 0x44	; 68
    430a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	8f 83       	std	Y+7, r24	; 0x07
    4314:	98 87       	std	Y+8, r25	; 0x08
    4316:	a9 87       	std	Y+9, r26	; 0x09
    4318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    431a:	6f 81       	ldd	r22, Y+7	; 0x07
    431c:	78 85       	ldd	r23, Y+8	; 0x08
    431e:	89 85       	ldd	r24, Y+9	; 0x09
    4320:	9a 85       	ldd	r25, Y+10	; 0x0a
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	40 e8       	ldi	r20, 0x80	; 128
    4328:	5f e3       	ldi	r21, 0x3F	; 63
    432a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    432e:	88 23       	and	r24, r24
    4330:	2c f4       	brge	.+10     	; 0x433c <LCD_voidShiftLeft+0x6c>
		__ticks = 1;
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	9e 83       	std	Y+6, r25	; 0x06
    4338:	8d 83       	std	Y+5, r24	; 0x05
    433a:	3f c0       	rjmp	.+126    	; 0x43ba <LCD_voidShiftLeft+0xea>
	else if (__tmp > 65535)
    433c:	6f 81       	ldd	r22, Y+7	; 0x07
    433e:	78 85       	ldd	r23, Y+8	; 0x08
    4340:	89 85       	ldd	r24, Y+9	; 0x09
    4342:	9a 85       	ldd	r25, Y+10	; 0x0a
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	3f ef       	ldi	r19, 0xFF	; 255
    4348:	4f e7       	ldi	r20, 0x7F	; 127
    434a:	57 e4       	ldi	r21, 0x47	; 71
    434c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4350:	18 16       	cp	r1, r24
    4352:	4c f5       	brge	.+82     	; 0x43a6 <LCD_voidShiftLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4354:	6b 85       	ldd	r22, Y+11	; 0x0b
    4356:	7c 85       	ldd	r23, Y+12	; 0x0c
    4358:	8d 85       	ldd	r24, Y+13	; 0x0d
    435a:	9e 85       	ldd	r25, Y+14	; 0x0e
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e2       	ldi	r20, 0x20	; 32
    4362:	51 e4       	ldi	r21, 0x41	; 65
    4364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4368:	dc 01       	movw	r26, r24
    436a:	cb 01       	movw	r24, r22
    436c:	bc 01       	movw	r22, r24
    436e:	cd 01       	movw	r24, r26
    4370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	9e 83       	std	Y+6, r25	; 0x06
    437a:	8d 83       	std	Y+5, r24	; 0x05
    437c:	0f c0       	rjmp	.+30     	; 0x439c <LCD_voidShiftLeft+0xcc>
    437e:	88 ec       	ldi	r24, 0xC8	; 200
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	9c 83       	std	Y+4, r25	; 0x04
    4384:	8b 83       	std	Y+3, r24	; 0x03
    4386:	8b 81       	ldd	r24, Y+3	; 0x03
    4388:	9c 81       	ldd	r25, Y+4	; 0x04
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	f1 f7       	brne	.-4      	; 0x438a <LCD_voidShiftLeft+0xba>
    438e:	9c 83       	std	Y+4, r25	; 0x04
    4390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4392:	8d 81       	ldd	r24, Y+5	; 0x05
    4394:	9e 81       	ldd	r25, Y+6	; 0x06
    4396:	01 97       	sbiw	r24, 0x01	; 1
    4398:	9e 83       	std	Y+6, r25	; 0x06
    439a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439c:	8d 81       	ldd	r24, Y+5	; 0x05
    439e:	9e 81       	ldd	r25, Y+6	; 0x06
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	69 f7       	brne	.-38     	; 0x437e <LCD_voidShiftLeft+0xae>
    43a4:	14 c0       	rjmp	.+40     	; 0x43ce <LCD_voidShiftLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a6:	6f 81       	ldd	r22, Y+7	; 0x07
    43a8:	78 85       	ldd	r23, Y+8	; 0x08
    43aa:	89 85       	ldd	r24, Y+9	; 0x09
    43ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	9e 83       	std	Y+6, r25	; 0x06
    43b8:	8d 83       	std	Y+5, r24	; 0x05
    43ba:	8d 81       	ldd	r24, Y+5	; 0x05
    43bc:	9e 81       	ldd	r25, Y+6	; 0x06
    43be:	9a 83       	std	Y+2, r25	; 0x02
    43c0:	89 83       	std	Y+1, r24	; 0x01
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
    43c4:	9a 81       	ldd	r25, Y+2	; 0x02
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <LCD_voidShiftLeft+0xf6>
    43ca:	9a 83       	std	Y+2, r25	; 0x02
    43cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    43ce:	2e 96       	adiw	r28, 0x0e	; 14
    43d0:	0f b6       	in	r0, 0x3f	; 63
    43d2:	f8 94       	cli
    43d4:	de bf       	out	0x3e, r29	; 62
    43d6:	0f be       	out	0x3f, r0	; 63
    43d8:	cd bf       	out	0x3d, r28	; 61
    43da:	cf 91       	pop	r28
    43dc:	df 91       	pop	r29
    43de:	08 95       	ret

000043e0 <UART_voidInit>:
u8* pu8Str = NULL;

void (*UART_Recieved_Notification)(u8) = NULL;

void UART_voidInit(void)
{
    43e0:	df 93       	push	r29
    43e2:	cf 93       	push	r28
    43e4:	00 d0       	rcall	.+0      	; 0x43e6 <UART_voidInit+0x6>
    43e6:	cd b7       	in	r28, 0x3d	; 61
    43e8:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRateValue = 51;
    43ea:	83 e3       	ldi	r24, 0x33	; 51
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	9a 83       	std	Y+2, r25	; 0x02
    43f0:	89 83       	std	Y+1, r24	; 0x01
	
	/*BaudRate = 9600*/
	UART_u8_UBRRL_REG = (u8)Local_u16BaudRateValue;
    43f2:	e9 e2       	ldi	r30, 0x29	; 41
    43f4:	f0 e0       	ldi	r31, 0x00	; 0
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BaudRateValue>>8);
    43fa:	e0 e4       	ldi	r30, 0x40	; 64
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	9a 81       	ldd	r25, Y+2	; 0x02
    4402:	89 2f       	mov	r24, r25
    4404:	99 27       	eor	r25, r25
    4406:	80 83       	st	Z, r24
	
	/*Normal Speed*/
	CLR_BIT(UART_u8_UCSRA_REG,1);
    4408:	ab e2       	ldi	r26, 0x2B	; 43
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	eb e2       	ldi	r30, 0x2B	; 43
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	80 81       	ld	r24, Z
    4412:	8d 7f       	andi	r24, 0xFD	; 253
    4414:	8c 93       	st	X, r24

	/*Disable MultiProcessor Mood*/
	CLR_BIT(UART_u8_UCSRA_REG,0);
    4416:	ab e2       	ldi	r26, 0x2B	; 43
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	eb e2       	ldi	r30, 0x2B	; 43
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	8e 7f       	andi	r24, 0xFE	; 254
    4422:	8c 93       	st	X, r24
	
	/*Enable Tx*/
	SET_BIT(UART_u8_UCSRB_REG,3);
    4424:	aa e2       	ldi	r26, 0x2A	; 42
    4426:	b0 e0       	ldi	r27, 0x00	; 0
    4428:	ea e2       	ldi	r30, 0x2A	; 42
    442a:	f0 e0       	ldi	r31, 0x00	; 0
    442c:	80 81       	ld	r24, Z
    442e:	88 60       	ori	r24, 0x08	; 8
    4430:	8c 93       	st	X, r24

	/*Enable Rx*/
	SET_BIT(UART_u8_UCSRB_REG,4);
    4432:	aa e2       	ldi	r26, 0x2A	; 42
    4434:	b0 e0       	ldi	r27, 0x00	; 0
    4436:	ea e2       	ldi	r30, 0x2A	; 42
    4438:	f0 e0       	ldi	r31, 0x00	; 0
    443a:	80 81       	ld	r24, Z
    443c:	80 61       	ori	r24, 0x10	; 16
    443e:	8c 93       	st	X, r24

	/*Select 8 BIT Data*/
	CLR_BIT(UART_u8_UCSRB_REG,2);
    4440:	aa e2       	ldi	r26, 0x2A	; 42
    4442:	b0 e0       	ldi	r27, 0x00	; 0
    4444:	ea e2       	ldi	r30, 0x2A	; 42
    4446:	f0 e0       	ldi	r31, 0x00	; 0
    4448:	80 81       	ld	r24, Z
    444a:	8b 7f       	andi	r24, 0xFB	; 251
    444c:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRC_REG,7);
    444e:	a0 e4       	ldi	r26, 0x40	; 64
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	e0 e4       	ldi	r30, 0x40	; 64
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	80 68       	ori	r24, 0x80	; 128
    445a:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRC_REG,2);
    445c:	a0 e4       	ldi	r26, 0x40	; 64
    445e:	b0 e0       	ldi	r27, 0x00	; 0
    4460:	e0 e4       	ldi	r30, 0x40	; 64
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	80 81       	ld	r24, Z
    4466:	84 60       	ori	r24, 0x04	; 4
    4468:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRC_REG,1);
    446a:	a0 e4       	ldi	r26, 0x40	; 64
    446c:	b0 e0       	ldi	r27, 0x00	; 0
    446e:	e0 e4       	ldi	r30, 0x40	; 64
    4470:	f0 e0       	ldi	r31, 0x00	; 0
    4472:	80 81       	ld	r24, Z
    4474:	82 60       	ori	r24, 0x02	; 2
    4476:	8c 93       	st	X, r24

	/*Select Asynch Mood*/
	CLR_BIT(UART_u8_UCSRC_REG,6);
    4478:	a0 e4       	ldi	r26, 0x40	; 64
    447a:	b0 e0       	ldi	r27, 0x00	; 0
    447c:	e0 e4       	ldi	r30, 0x40	; 64
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	80 81       	ld	r24, Z
    4482:	8f 7b       	andi	r24, 0xBF	; 191
    4484:	8c 93       	st	X, r24

	/*No Parity Bit*/
	CLR_BIT(UART_u8_UCSRC_REG,5);
    4486:	a0 e4       	ldi	r26, 0x40	; 64
    4488:	b0 e0       	ldi	r27, 0x00	; 0
    448a:	e0 e4       	ldi	r30, 0x40	; 64
    448c:	f0 e0       	ldi	r31, 0x00	; 0
    448e:	80 81       	ld	r24, Z
    4490:	8f 7d       	andi	r24, 0xDF	; 223
    4492:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRC_REG,4);
    4494:	a0 e4       	ldi	r26, 0x40	; 64
    4496:	b0 e0       	ldi	r27, 0x00	; 0
    4498:	e0 e4       	ldi	r30, 0x40	; 64
    449a:	f0 e0       	ldi	r31, 0x00	; 0
    449c:	80 81       	ld	r24, Z
    449e:	8f 7e       	andi	r24, 0xEF	; 239
    44a0:	8c 93       	st	X, r24

	/*Enable Two Stop Bits*/
	SET_BIT(UART_u8_UCSRC_REG,3);
    44a2:	a0 e4       	ldi	r26, 0x40	; 64
    44a4:	b0 e0       	ldi	r27, 0x00	; 0
    44a6:	e0 e4       	ldi	r30, 0x40	; 64
    44a8:	f0 e0       	ldi	r31, 0x00	; 0
    44aa:	80 81       	ld	r24, Z
    44ac:	88 60       	ori	r24, 0x08	; 8
    44ae:	8c 93       	st	X, r24
	
}
    44b0:	0f 90       	pop	r0
    44b2:	0f 90       	pop	r0
    44b4:	cf 91       	pop	r28
    44b6:	df 91       	pop	r29
    44b8:	08 95       	ret

000044ba <UART_voidSendByte>:

void UART_voidSendByte(u8 Copy_u8DataByte)
{
    44ba:	df 93       	push	r29
    44bc:	cf 93       	push	r28
    44be:	0f 92       	push	r0
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	89 83       	std	Y+1, r24	; 0x01
	/*Wait Until TX REG Is Empty*/
	while(GET_BIT(UART_u8_UCSRA_REG,5) == 0);
    44c6:	eb e2       	ldi	r30, 0x2B	; 43
    44c8:	f0 e0       	ldi	r31, 0x00	; 0
    44ca:	80 81       	ld	r24, Z
    44cc:	82 95       	swap	r24
    44ce:	86 95       	lsr	r24
    44d0:	87 70       	andi	r24, 0x07	; 7
    44d2:	88 2f       	mov	r24, r24
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	81 70       	andi	r24, 0x01	; 1
    44d8:	90 70       	andi	r25, 0x00	; 0
    44da:	00 97       	sbiw	r24, 0x00	; 0
    44dc:	a1 f3       	breq	.-24     	; 0x44c6 <UART_voidSendByte+0xc>

	/*Send Data Byte*/
	UART_u8_UDR_REG = Copy_u8DataByte;
    44de:	ec e2       	ldi	r30, 0x2C	; 44
    44e0:	f0 e0       	ldi	r31, 0x00	; 0
    44e2:	89 81       	ldd	r24, Y+1	; 0x01
    44e4:	80 83       	st	Z, r24
}
    44e6:	0f 90       	pop	r0
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	08 95       	ret

000044ee <UART_u8RecieveByte>:


u8  UART_u8RecieveByte(u8* Copy_pu8RecByte)
{
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	00 d0       	rcall	.+0      	; 0x44f4 <UART_u8RecieveByte+0x6>
    44f4:	0f 92       	push	r0
    44f6:	cd b7       	in	r28, 0x3d	; 61
    44f8:	de b7       	in	r29, 0x3e	; 62
    44fa:	9b 83       	std	Y+3, r25	; 0x03
    44fc:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8ErrorState = STD_TYPES_NOK;
    44fe:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_pu8RecByte != NULL)
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	9b 81       	ldd	r25, Y+3	; 0x03
    4504:	00 97       	sbiw	r24, 0x00	; 0
    4506:	69 f0       	breq	.+26     	; 0x4522 <UART_u8RecieveByte+0x34>
	 {
		 /*Wait Until The Data Is Recieved*/
		 while(GET_BIT(UART_u8_UCSRA_REG,7) == 0); 
    4508:	eb e2       	ldi	r30, 0x2B	; 43
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	80 81       	ld	r24, Z
    450e:	88 23       	and	r24, r24
    4510:	dc f7       	brge	.-10     	; 0x4508 <UART_u8RecieveByte+0x1a>

		 /*Read Data*/
		 *Copy_pu8RecByte = UART_u8_UDR_REG;
    4512:	ec e2       	ldi	r30, 0x2C	; 44
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	80 81       	ld	r24, Z
    4518:	ea 81       	ldd	r30, Y+2	; 0x02
    451a:	fb 81       	ldd	r31, Y+3	; 0x03
    451c:	80 83       	st	Z, r24
		 Local_u8ErrorState = STD_TYPES_OK;
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return Local_u8ErrorState;
    4522:	89 81       	ldd	r24, Y+1	; 0x01
}
    4524:	0f 90       	pop	r0
    4526:	0f 90       	pop	r0
    4528:	0f 90       	pop	r0
    452a:	cf 91       	pop	r28
    452c:	df 91       	pop	r29
    452e:	08 95       	ret

00004530 <UART_voidRecieveAsyncByte>:

void  UART_voidRecieveAsyncByte(void (*Copy_pf)(u8))
{
    4530:	df 93       	push	r29
    4532:	cf 93       	push	r28
    4534:	00 d0       	rcall	.+0      	; 0x4536 <UART_voidRecieveAsyncByte+0x6>
    4536:	cd b7       	in	r28, 0x3d	; 61
    4538:	de b7       	in	r29, 0x3e	; 62
    453a:	9a 83       	std	Y+2, r25	; 0x02
    453c:	89 83       	std	Y+1, r24	; 0x01
	UART_Recieved_Notification = Copy_pf;
    453e:	89 81       	ldd	r24, Y+1	; 0x01
    4540:	9a 81       	ldd	r25, Y+2	; 0x02
    4542:	90 93 8d 00 	sts	0x008D, r25
    4546:	80 93 8c 00 	sts	0x008C, r24

	/*RX Complete Interrupt Enable*/
	SET_BIT(UART_u8_UCSRB_REG,7);
    454a:	aa e2       	ldi	r26, 0x2A	; 42
    454c:	b0 e0       	ldi	r27, 0x00	; 0
    454e:	ea e2       	ldi	r30, 0x2A	; 42
    4550:	f0 e0       	ldi	r31, 0x00	; 0
    4552:	80 81       	ld	r24, Z
    4554:	80 68       	ori	r24, 0x80	; 128
    4556:	8c 93       	st	X, r24
}
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	cf 91       	pop	r28
    455e:	df 91       	pop	r29
    4560:	08 95       	ret

00004562 <UART_voidSendAsynString>:

void UART_voidSendAsynString(u8* Copy_pu8Str)
{
    4562:	df 93       	push	r29
    4564:	cf 93       	push	r28
    4566:	00 d0       	rcall	.+0      	; 0x4568 <UART_voidSendAsynString+0x6>
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
    456c:	9a 83       	std	Y+2, r25	; 0x02
    456e:	89 83       	std	Y+1, r24	; 0x01
	pu8Str = Copy_pu8Str;
    4570:	89 81       	ldd	r24, Y+1	; 0x01
    4572:	9a 81       	ldd	r25, Y+2	; 0x02
    4574:	90 93 8b 00 	sts	0x008B, r25
    4578:	80 93 8a 00 	sts	0x008A, r24

	/*TX Complete Interrupt Enable*/
	SET_BIT(UART_u8_UCSRB_REG,6);
    457c:	aa e2       	ldi	r26, 0x2A	; 42
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	ea e2       	ldi	r30, 0x2A	; 42
    4582:	f0 e0       	ldi	r31, 0x00	; 0
    4584:	80 81       	ld	r24, Z
    4586:	80 64       	ori	r24, 0x40	; 64
    4588:	8c 93       	st	X, r24

	/*Send First Byte of String*/
	UART_u8_UDR_REG = pu8Str[0];
    458a:	ac e2       	ldi	r26, 0x2C	; 44
    458c:	b0 e0       	ldi	r27, 0x00	; 0
    458e:	e0 91 8a 00 	lds	r30, 0x008A
    4592:	f0 91 8b 00 	lds	r31, 0x008B
    4596:	80 81       	ld	r24, Z
    4598:	8c 93       	st	X, r24
}
    459a:	0f 90       	pop	r0
    459c:	0f 90       	pop	r0
    459e:	cf 91       	pop	r28
    45a0:	df 91       	pop	r29
    45a2:	08 95       	ret

000045a4 <__vector_15>:

void __vector_15(void)    __attribute__((signal));
void __vector_15(void)
{
    45a4:	1f 92       	push	r1
    45a6:	0f 92       	push	r0
    45a8:	0f b6       	in	r0, 0x3f	; 63
    45aa:	0f 92       	push	r0
    45ac:	11 24       	eor	r1, r1
    45ae:	2f 93       	push	r18
    45b0:	3f 93       	push	r19
    45b2:	8f 93       	push	r24
    45b4:	9f 93       	push	r25
    45b6:	af 93       	push	r26
    45b8:	bf 93       	push	r27
    45ba:	ef 93       	push	r30
    45bc:	ff 93       	push	r31
    45be:	df 93       	push	r29
    45c0:	cf 93       	push	r28
    45c2:	cd b7       	in	r28, 0x3d	; 61
    45c4:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter = 1;

	if(pu8Str[Local_u8Counter] != '\0')
    45c6:	20 91 8a 00 	lds	r18, 0x008A
    45ca:	30 91 8b 00 	lds	r19, 0x008B
    45ce:	80 91 71 00 	lds	r24, 0x0071
    45d2:	88 2f       	mov	r24, r24
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	f9 01       	movw	r30, r18
    45d8:	e8 0f       	add	r30, r24
    45da:	f9 1f       	adc	r31, r25
    45dc:	80 81       	ld	r24, Z
    45de:	88 23       	and	r24, r24
    45e0:	a9 f0       	breq	.+42     	; 0x460c <__vector_15+0x68>
	{
		UART_u8_UDR_REG = pu8Str[Local_u8Counter];
    45e2:	ac e2       	ldi	r26, 0x2C	; 44
    45e4:	b0 e0       	ldi	r27, 0x00	; 0
    45e6:	20 91 8a 00 	lds	r18, 0x008A
    45ea:	30 91 8b 00 	lds	r19, 0x008B
    45ee:	80 91 71 00 	lds	r24, 0x0071
    45f2:	88 2f       	mov	r24, r24
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	f9 01       	movw	r30, r18
    45f8:	e8 0f       	add	r30, r24
    45fa:	f9 1f       	adc	r31, r25
    45fc:	80 81       	ld	r24, Z
    45fe:	8c 93       	st	X, r24
		Local_u8Counter++;
    4600:	80 91 71 00 	lds	r24, 0x0071
    4604:	8f 5f       	subi	r24, 0xFF	; 255
    4606:	80 93 71 00 	sts	0x0071, r24
    460a:	27 c0       	rjmp	.+78     	; 0x465a <__vector_15+0xb6>
	}
	else if(pu8Str[Local_u8Counter] == '\0')
    460c:	20 91 8a 00 	lds	r18, 0x008A
    4610:	30 91 8b 00 	lds	r19, 0x008B
    4614:	80 91 71 00 	lds	r24, 0x0071
    4618:	88 2f       	mov	r24, r24
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	f9 01       	movw	r30, r18
    461e:	e8 0f       	add	r30, r24
    4620:	f9 1f       	adc	r31, r25
    4622:	80 81       	ld	r24, Z
    4624:	88 23       	and	r24, r24
    4626:	c9 f4       	brne	.+50     	; 0x465a <__vector_15+0xb6>
	{
		/*TX Complete Interrupt Disable*/
		CLR_BIT(UART_u8_UCSRB_REG,6);
    4628:	aa e2       	ldi	r26, 0x2A	; 42
    462a:	b0 e0       	ldi	r27, 0x00	; 0
    462c:	ea e2       	ldi	r30, 0x2A	; 42
    462e:	f0 e0       	ldi	r31, 0x00	; 0
    4630:	80 81       	ld	r24, Z
    4632:	8f 7b       	andi	r24, 0xBF	; 191
    4634:	8c 93       	st	X, r24
		UART_u8_UDR_REG = pu8Str[Local_u8Counter];
    4636:	ac e2       	ldi	r26, 0x2C	; 44
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	20 91 8a 00 	lds	r18, 0x008A
    463e:	30 91 8b 00 	lds	r19, 0x008B
    4642:	80 91 71 00 	lds	r24, 0x0071
    4646:	88 2f       	mov	r24, r24
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	f9 01       	movw	r30, r18
    464c:	e8 0f       	add	r30, r24
    464e:	f9 1f       	adc	r31, r25
    4650:	80 81       	ld	r24, Z
    4652:	8c 93       	st	X, r24
		Local_u8Counter = 1;
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	80 93 71 00 	sts	0x0071, r24
	}

}
    465a:	cf 91       	pop	r28
    465c:	df 91       	pop	r29
    465e:	ff 91       	pop	r31
    4660:	ef 91       	pop	r30
    4662:	bf 91       	pop	r27
    4664:	af 91       	pop	r26
    4666:	9f 91       	pop	r25
    4668:	8f 91       	pop	r24
    466a:	3f 91       	pop	r19
    466c:	2f 91       	pop	r18
    466e:	0f 90       	pop	r0
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	0f 90       	pop	r0
    4674:	1f 90       	pop	r1
    4676:	18 95       	reti

00004678 <__vector_13>:

void __vector_13(void)    __attribute__((signal));
void __vector_13(void)
{
    4678:	1f 92       	push	r1
    467a:	0f 92       	push	r0
    467c:	0f b6       	in	r0, 0x3f	; 63
    467e:	0f 92       	push	r0
    4680:	11 24       	eor	r1, r1
    4682:	2f 93       	push	r18
    4684:	3f 93       	push	r19
    4686:	4f 93       	push	r20
    4688:	5f 93       	push	r21
    468a:	6f 93       	push	r22
    468c:	7f 93       	push	r23
    468e:	8f 93       	push	r24
    4690:	9f 93       	push	r25
    4692:	af 93       	push	r26
    4694:	bf 93       	push	r27
    4696:	ef 93       	push	r30
    4698:	ff 93       	push	r31
    469a:	df 93       	push	r29
    469c:	cf 93       	push	r28
    469e:	cd b7       	in	r28, 0x3d	; 61
    46a0:	de b7       	in	r29, 0x3e	; 62
	UART_Recieved_Notification(UART_u8_UDR_REG);
    46a2:	e0 91 8c 00 	lds	r30, 0x008C
    46a6:	f0 91 8d 00 	lds	r31, 0x008D
    46aa:	ac e2       	ldi	r26, 0x2C	; 44
    46ac:	b0 e0       	ldi	r27, 0x00	; 0
    46ae:	8c 91       	ld	r24, X
    46b0:	09 95       	icall
}
    46b2:	cf 91       	pop	r28
    46b4:	df 91       	pop	r29
    46b6:	ff 91       	pop	r31
    46b8:	ef 91       	pop	r30
    46ba:	bf 91       	pop	r27
    46bc:	af 91       	pop	r26
    46be:	9f 91       	pop	r25
    46c0:	8f 91       	pop	r24
    46c2:	7f 91       	pop	r23
    46c4:	6f 91       	pop	r22
    46c6:	5f 91       	pop	r21
    46c8:	4f 91       	pop	r20
    46ca:	3f 91       	pop	r19
    46cc:	2f 91       	pop	r18
    46ce:	0f 90       	pop	r0
    46d0:	0f be       	out	0x3f, r0	; 63
    46d2:	0f 90       	pop	r0
    46d4:	1f 90       	pop	r1
    46d6:	18 95       	reti

000046d8 <main>:

u8 UARTRecievedData;
void UpdateRecievedData(u8 Copy_RecievedData);

int main(void)
{
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    46e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	GI_voidEnale();
    46e4:	0e 94 97 0b 	call	0x172e	; 0x172e <GI_voidEnale>
	UART_voidInit();
    46e8:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <UART_voidInit>
	LCD_voidInit();
    46ec:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_voidInit>
	UART_voidSendAsynString("KERO");
    46f0:	80 e6       	ldi	r24, 0x60	; 96
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	0e 94 b1 22 	call	0x4562	; 0x4562 <UART_voidSendAsynString>
	UART_voidRecieveAsyncByte(&UpdateRecievedData);
    46f8:	81 e8       	ldi	r24, 0x81	; 129
    46fa:	93 e2       	ldi	r25, 0x23	; 35
    46fc:	0e 94 98 22 	call	0x4530	; 0x4530 <UART_voidRecieveAsyncByte>
    4700:	ff cf       	rjmp	.-2      	; 0x4700 <main+0x28>

00004702 <UpdateRecievedData>:
	while(1);
	return 0;
}

void UpdateRecievedData(u8 Copy_RecievedData)
{
    4702:	df 93       	push	r29
    4704:	cf 93       	push	r28
    4706:	0f 92       	push	r0
    4708:	cd b7       	in	r28, 0x3d	; 61
    470a:	de b7       	in	r29, 0x3e	; 62
    470c:	89 83       	std	Y+1, r24	; 0x01
	UARTRecievedData = Copy_RecievedData;
    470e:	89 81       	ldd	r24, Y+1	; 0x01
    4710:	80 93 8e 00 	sts	0x008E, r24
	LCD_voidSendChar(UARTRecievedData);
    4714:	80 91 8e 00 	lds	r24, 0x008E
    4718:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <LCD_voidSendChar>
}
    471c:	0f 90       	pop	r0
    471e:	cf 91       	pop	r28
    4720:	df 91       	pop	r29
    4722:	08 95       	ret

00004724 <__udivmodsi4>:
    4724:	a1 e2       	ldi	r26, 0x21	; 33
    4726:	1a 2e       	mov	r1, r26
    4728:	aa 1b       	sub	r26, r26
    472a:	bb 1b       	sub	r27, r27
    472c:	fd 01       	movw	r30, r26
    472e:	0d c0       	rjmp	.+26     	; 0x474a <__udivmodsi4_ep>

00004730 <__udivmodsi4_loop>:
    4730:	aa 1f       	adc	r26, r26
    4732:	bb 1f       	adc	r27, r27
    4734:	ee 1f       	adc	r30, r30
    4736:	ff 1f       	adc	r31, r31
    4738:	a2 17       	cp	r26, r18
    473a:	b3 07       	cpc	r27, r19
    473c:	e4 07       	cpc	r30, r20
    473e:	f5 07       	cpc	r31, r21
    4740:	20 f0       	brcs	.+8      	; 0x474a <__udivmodsi4_ep>
    4742:	a2 1b       	sub	r26, r18
    4744:	b3 0b       	sbc	r27, r19
    4746:	e4 0b       	sbc	r30, r20
    4748:	f5 0b       	sbc	r31, r21

0000474a <__udivmodsi4_ep>:
    474a:	66 1f       	adc	r22, r22
    474c:	77 1f       	adc	r23, r23
    474e:	88 1f       	adc	r24, r24
    4750:	99 1f       	adc	r25, r25
    4752:	1a 94       	dec	r1
    4754:	69 f7       	brne	.-38     	; 0x4730 <__udivmodsi4_loop>
    4756:	60 95       	com	r22
    4758:	70 95       	com	r23
    475a:	80 95       	com	r24
    475c:	90 95       	com	r25
    475e:	9b 01       	movw	r18, r22
    4760:	ac 01       	movw	r20, r24
    4762:	bd 01       	movw	r22, r26
    4764:	cf 01       	movw	r24, r30
    4766:	08 95       	ret

00004768 <__prologue_saves__>:
    4768:	2f 92       	push	r2
    476a:	3f 92       	push	r3
    476c:	4f 92       	push	r4
    476e:	5f 92       	push	r5
    4770:	6f 92       	push	r6
    4772:	7f 92       	push	r7
    4774:	8f 92       	push	r8
    4776:	9f 92       	push	r9
    4778:	af 92       	push	r10
    477a:	bf 92       	push	r11
    477c:	cf 92       	push	r12
    477e:	df 92       	push	r13
    4780:	ef 92       	push	r14
    4782:	ff 92       	push	r15
    4784:	0f 93       	push	r16
    4786:	1f 93       	push	r17
    4788:	cf 93       	push	r28
    478a:	df 93       	push	r29
    478c:	cd b7       	in	r28, 0x3d	; 61
    478e:	de b7       	in	r29, 0x3e	; 62
    4790:	ca 1b       	sub	r28, r26
    4792:	db 0b       	sbc	r29, r27
    4794:	0f b6       	in	r0, 0x3f	; 63
    4796:	f8 94       	cli
    4798:	de bf       	out	0x3e, r29	; 62
    479a:	0f be       	out	0x3f, r0	; 63
    479c:	cd bf       	out	0x3d, r28	; 61
    479e:	09 94       	ijmp

000047a0 <__epilogue_restores__>:
    47a0:	2a 88       	ldd	r2, Y+18	; 0x12
    47a2:	39 88       	ldd	r3, Y+17	; 0x11
    47a4:	48 88       	ldd	r4, Y+16	; 0x10
    47a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    47a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    47aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    47ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    47ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    47b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    47b2:	b9 84       	ldd	r11, Y+9	; 0x09
    47b4:	c8 84       	ldd	r12, Y+8	; 0x08
    47b6:	df 80       	ldd	r13, Y+7	; 0x07
    47b8:	ee 80       	ldd	r14, Y+6	; 0x06
    47ba:	fd 80       	ldd	r15, Y+5	; 0x05
    47bc:	0c 81       	ldd	r16, Y+4	; 0x04
    47be:	1b 81       	ldd	r17, Y+3	; 0x03
    47c0:	aa 81       	ldd	r26, Y+2	; 0x02
    47c2:	b9 81       	ldd	r27, Y+1	; 0x01
    47c4:	ce 0f       	add	r28, r30
    47c6:	d1 1d       	adc	r29, r1
    47c8:	0f b6       	in	r0, 0x3f	; 63
    47ca:	f8 94       	cli
    47cc:	de bf       	out	0x3e, r29	; 62
    47ce:	0f be       	out	0x3f, r0	; 63
    47d0:	cd bf       	out	0x3d, r28	; 61
    47d2:	ed 01       	movw	r28, r26
    47d4:	08 95       	ret

000047d6 <_exit>:
    47d6:	f8 94       	cli

000047d8 <__stop_program>:
    47d8:	ff cf       	rjmp	.-2      	; 0x47d8 <__stop_program>
