
42_Piano_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003350  000033e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800080  00800080  00003404  2**0
                  ALLOC
  3 .stab         00002538  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ec7  00000000  00000000  0000593c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006803  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a394  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a781  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__vector_10>
      2c:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <main>
      8a:	0c 94 a6 19 	jmp	0x334c	; 0x334c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Intial PINS Direction*/ 
	DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION , DIO_u8_PA6_INTIAL_DIRECTION , DIO_u8_PA5_INTIAL_DIRECTION ,  DIO_u8_PA4_INTIAL_DIRECTION, 
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f e0       	ldi	r24, 0x0F	; 15
     b54:	80 83       	st	Z, r24
	                       DIO_u8_PA3_INTIAL_DIRECTION , DIO_u8_PA2_INTIAL_DIRECTION , DIO_u8_PA1_INTIAL_DIRECTION ,  DIO_u8_PA0_INTIAL_DIRECTION );
    
	DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION , DIO_u8_PB6_INTIAL_DIRECTION , DIO_u8_PB5_INTIAL_DIRECTION ,  DIO_u8_PB4_INTIAL_DIRECTION , 
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	88 e0       	ldi	r24, 0x08	; 8
     b5c:	80 83       	st	Z, r24
			               DIO_u8_PB3_INTIAL_DIRECTION , DIO_u8_PB2_INTIAL_DIRECTION , DIO_u8_PB1_INTIAL_DIRECTION ,  DIO_u8_PB0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION , DIO_u8_PC6_INTIAL_DIRECTION , DIO_u8_PC5_INTIAL_DIRECTION ,  DIO_u8_PC4_INTIAL_DIRECTION ,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
			               DIO_u8_PC3_INTIAL_DIRECTION , DIO_u8_PC2_INTIAL_DIRECTION , DIO_u8_PC1_INTIAL_DIRECTION ,  DIO_u8_PC0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION , DIO_u8_PD6_INTIAL_DIRECTION , DIO_u8_PD5_INTIAL_DIRECTION ,  DIO_u8_PD4_INTIAL_DIRECTION , 
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
			               DIO_u8_PD3_INTIAL_DIRECTION , DIO_u8_PD2_INTIAL_DIRECTION , DIO_u8_PD1_INTIAL_DIRECTION ,  DIO_u8_PD0_INTIAL_DIRECTION );
						  
						  
	/*Intial PINS Value*/
    DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE         , DIO_u8_PA6_INTIAL_VALUE     , DIO_u8_PA5_INTIAL_VALUE ,      DIO_u8_PA4_INTIAL_VALUE , 
     b6a:	eb e3       	ldi	r30, 0x3B	; 59
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	80 83       	st	Z, r24
				            DIO_u8_PA3_INTIAL_VALUE         , DIO_u8_PA2_INTIAL_VALUE     , DIO_u8_PA1_INTIAL_VALUE ,      DIO_u8_PA0_INTIAL_VALUE);                  
                                                                                   
	DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE         , DIO_u8_PB6_INTIAL_VALUE     , DIO_u8_PB5_INTIAL_VALUE ,      DIO_u8_PB4_INTIAL_VALUE ,
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	80 83       	st	Z, r24
				            DIO_u8_PB3_INTIAL_VALUE         , DIO_u8_PB2_INTIAL_VALUE     , DIO_u8_PB1_INTIAL_VALUE ,      DIO_u8_PB0_INTIAL_VALUE);                  
					                                                                  
	DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE         , DIO_u8_PC6_INTIAL_VALUE     , DIO_u8_PC5_INTIAL_VALUE ,      DIO_u8_PC4_INTIAL_VALUE , 
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
				            DIO_u8_PC3_INTIAL_VALUE         , DIO_u8_PC2_INTIAL_VALUE     , DIO_u8_PC1_INTIAL_VALUE ,      DIO_u8_PC0_INTIAL_VALUE);                  
					                                                                 
	DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE         , DIO_u8_PD6_INTIAL_VALUE     , DIO_u8_PD5_INTIAL_VALUE ,      DIO_u8_PD4_INTIAL_VALUE , 
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
				            DIO_u8_PD3_INTIAL_VALUE         , DIO_u8_PD2_INTIAL_VALUE     , DIO_u8_PD1_INTIAL_VALUE ,      DIO_u8_PD0_INTIAL_VALUE);
						                                               
						   
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinDirection)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	2e 97       	sbiw	r28, 0x0e	; 14
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6b 83       	std	Y+3, r22	; 0x03
     ba4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_PinDirection == DIO_u8_OUTPUT)||(Copy_PinDirection == DIO_u8_INPUT)))
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <DIO_u8SetPinDirection+0x26>
     bb0:	0c c1       	rjmp	.+536    	; 0xdca <DIO_u8SetPinDirection+0x23e>
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	88 30       	cpi	r24, 0x08	; 8
     bb6:	08 f0       	brcs	.+2      	; 0xbba <DIO_u8SetPinDirection+0x2e>
     bb8:	08 c1       	rjmp	.+528    	; 0xdca <DIO_u8SetPinDirection+0x23e>
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <DIO_u8SetPinDirection+0x3c>
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	88 23       	and	r24, r24
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <DIO_u8SetPinDirection+0x3c>
     bc6:	01 c1       	rjmp	.+514    	; 0xdca <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3e 87       	std	Y+14, r19	; 0x0e
     bd0:	2d 87       	std	Y+13, r18	; 0x0d
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <DIO_u8SetPinDirection+0x52>
     bdc:	4f c0       	rjmp	.+158    	; 0xc7c <DIO_u8SetPinDirection+0xf0>
     bde:	2d 85       	ldd	r18, Y+13	; 0x0d
     be0:	3e 85       	ldd	r19, Y+14	; 0x0e
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	2c f4       	brge	.+10     	; 0xbf2 <DIO_u8SetPinDirection+0x66>
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	71 f0       	breq	.+28     	; 0xc0c <DIO_u8SetPinDirection+0x80>
     bf0:	ed c0       	rjmp	.+474    	; 0xdcc <DIO_u8SetPinDirection+0x240>
     bf2:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf4:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <DIO_u8SetPinDirection+0x72>
     bfc:	77 c0       	rjmp	.+238    	; 0xcec <DIO_u8SetPinDirection+0x160>
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <DIO_u8SetPinDirection+0x7e>
     c08:	a9 c0       	rjmp	.+338    	; 0xd5c <DIO_u8SetPinDirection+0x1d0>
     c0a:	e0 c0       	rjmp	.+448    	; 0xdcc <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch(Copy_PinDirection)
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	3c 87       	std	Y+12, r19	; 0x0c
     c14:	2b 87       	std	Y+11, r18	; 0x0b
     c16:	8b 85       	ldd	r24, Y+11	; 0x0b
     c18:	9c 85       	ldd	r25, Y+12	; 0x0c
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	d1 f0       	breq	.+52     	; 0xc52 <DIO_u8SetPinDirection+0xc6>
     c1e:	2b 85       	ldd	r18, Y+11	; 0x0b
     c20:	3c 85       	ldd	r19, Y+12	; 0x0c
     c22:	21 30       	cpi	r18, 0x01	; 1
     c24:	31 05       	cpc	r19, r1
     c26:	09 f0       	breq	.+2      	; 0xc2a <DIO_u8SetPinDirection+0x9e>
     c28:	d1 c0       	rjmp	.+418    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     c2a:	aa e3       	ldi	r26, 0x3A	; 58
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ea e3       	ldi	r30, 0x3A	; 58
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	48 2f       	mov	r20, r24
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 2e       	mov	r0, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <DIO_u8SetPinDirection+0xbc>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <DIO_u8SetPinDirection+0xb8>
     c4c:	84 2b       	or	r24, r20
     c4e:	8c 93       	st	X, r24
     c50:	bd c0       	rjmp	.+378    	; 0xdcc <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     c52:	aa e3       	ldi	r26, 0x3A	; 58
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e3       	ldi	r30, 0x3A	; 58
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	48 2f       	mov	r20, r24
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_u8SetPinDirection+0xe4>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_u8SetPinDirection+0xe0>
     c74:	80 95       	com	r24
     c76:	84 23       	and	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	a8 c0       	rjmp	.+336    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTB:
				switch(Copy_PinDirection)
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	3a 87       	std	Y+10, r19	; 0x0a
     c84:	29 87       	std	Y+9, r18	; 0x09
     c86:	89 85       	ldd	r24, Y+9	; 0x09
     c88:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	d1 f0       	breq	.+52     	; 0xcc2 <DIO_u8SetPinDirection+0x136>
     c8e:	29 85       	ldd	r18, Y+9	; 0x09
     c90:	3a 85       	ldd	r19, Y+10	; 0x0a
     c92:	21 30       	cpi	r18, 0x01	; 1
     c94:	31 05       	cpc	r19, r1
     c96:	09 f0       	breq	.+2      	; 0xc9a <DIO_u8SetPinDirection+0x10e>
     c98:	99 c0       	rjmp	.+306    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     c9a:	a7 e3       	ldi	r26, 0x37	; 55
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_u8SetPinDirection+0x12c>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_u8SetPinDirection+0x128>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	85 c0       	rjmp	.+266    	; 0xdcc <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     cc2:	a7 e3       	ldi	r26, 0x37	; 55
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e3       	ldi	r30, 0x37	; 55
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_u8SetPinDirection+0x154>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_u8SetPinDirection+0x150>
     ce4:	80 95       	com	r24
     ce6:	84 23       	and	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	70 c0       	rjmp	.+224    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTC:
				switch(Copy_PinDirection)
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	38 87       	std	Y+8, r19	; 0x08
     cf4:	2f 83       	std	Y+7, r18	; 0x07
     cf6:	8f 81       	ldd	r24, Y+7	; 0x07
     cf8:	98 85       	ldd	r25, Y+8	; 0x08
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	d1 f0       	breq	.+52     	; 0xd32 <DIO_u8SetPinDirection+0x1a6>
     cfe:	2f 81       	ldd	r18, Y+7	; 0x07
     d00:	38 85       	ldd	r19, Y+8	; 0x08
     d02:	21 30       	cpi	r18, 0x01	; 1
     d04:	31 05       	cpc	r19, r1
     d06:	09 f0       	breq	.+2      	; 0xd0a <DIO_u8SetPinDirection+0x17e>
     d08:	61 c0       	rjmp	.+194    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     d0a:	a4 e3       	ldi	r26, 0x34	; 52
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e4 e3       	ldi	r30, 0x34	; 52
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_u8SetPinDirection+0x19c>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_u8SetPinDirection+0x198>
     d2c:	84 2b       	or	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	4d c0       	rjmp	.+154    	; 0xdcc <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     d32:	a4 e3       	ldi	r26, 0x34	; 52
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e4 e3       	ldi	r30, 0x34	; 52
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_u8SetPinDirection+0x1c4>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_u8SetPinDirection+0x1c0>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	38 c0       	rjmp	.+112    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTD:
				switch(Copy_PinDirection)
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3e 83       	std	Y+6, r19	; 0x06
     d64:	2d 83       	std	Y+5, r18	; 0x05
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	c9 f0       	breq	.+50     	; 0xda0 <DIO_u8SetPinDirection+0x214>
     d6e:	2d 81       	ldd	r18, Y+5	; 0x05
     d70:	3e 81       	ldd	r19, Y+6	; 0x06
     d72:	21 30       	cpi	r18, 0x01	; 1
     d74:	31 05       	cpc	r19, r1
     d76:	51 f5       	brne	.+84     	; 0xdcc <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     d78:	a1 e3       	ldi	r26, 0x31	; 49
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 e3       	ldi	r30, 0x31	; 49
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_u8SetPinDirection+0x20a>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_u8SetPinDirection+0x206>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	16 c0       	rjmp	.+44     	; 0xdcc <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     da0:	a1 e3       	ldi	r26, 0x31	; 49
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e1 e3       	ldi	r30, 0x31	; 49
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_u8SetPinDirection+0x232>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_u8SetPinDirection+0x22e>
     dc2:	80 95       	com	r24
     dc4:	84 23       	and	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <DIO_u8SetPinDirection+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     dca:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dce:	2e 96       	adiw	r28, 0x0e	; 14
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinValue)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	2e 97       	sbiw	r28, 0x0e	; 14
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	6b 83       	std	Y+3, r22	; 0x03
     df8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	08 f0       	brcs	.+2      	; 0xe06 <DIO_u8SetPinValue+0x26>
     e04:	08 c1       	rjmp	.+528    	; 0x1016 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3e 87       	std	Y+14, r19	; 0x0e
     e0e:	2d 87       	std	Y+13, r18	; 0x0d
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <DIO_u8SetPinValue+0x3c>
     e1a:	50 c0       	rjmp	.+160    	; 0xebc <DIO_u8SetPinValue+0xdc>
     e1c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	2c f4       	brge	.+10     	; 0xe30 <DIO_u8SetPinValue+0x50>
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	71 f0       	breq	.+28     	; 0xe4a <DIO_u8SetPinValue+0x6a>
     e2e:	f1 c0       	rjmp	.+482    	; 0x1012 <DIO_u8SetPinValue+0x232>
     e30:	2d 85       	ldd	r18, Y+13	; 0x0d
     e32:	3e 85       	ldd	r19, Y+14	; 0x0e
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <DIO_u8SetPinValue+0x5c>
     e3a:	79 c0       	rjmp	.+242    	; 0xf2e <DIO_u8SetPinValue+0x14e>
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <DIO_u8SetPinValue+0x68>
     e46:	ac c0       	rjmp	.+344    	; 0xfa0 <DIO_u8SetPinValue+0x1c0>
     e48:	e4 c0       	rjmp	.+456    	; 0x1012 <DIO_u8SetPinValue+0x232>
			{
				case DIO_u8_PORTA:
					switch (Copy_PinValue)
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3c 87       	std	Y+12, r19	; 0x0c
     e52:	2b 87       	std	Y+11, r18	; 0x0b
     e54:	8b 85       	ldd	r24, Y+11	; 0x0b
     e56:	9c 85       	ldd	r25, Y+12	; 0x0c
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	c9 f0       	breq	.+50     	; 0xe8e <DIO_u8SetPinValue+0xae>
     e5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     e5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	49 f5       	brne	.+82     	; 0xeb8 <DIO_u8SetPinValue+0xd8>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     e66:	ab e3       	ldi	r26, 0x3B	; 59
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb e3       	ldi	r30, 0x3B	; 59
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_u8SetPinValue+0xa4>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_u8SetPinValue+0xa0>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	c5 c0       	rjmp	.+394    	; 0x1018 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinValue+0xcc>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinValue+0xc8>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	b0 c0       	rjmp	.+352    	; 0x1018 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     eb8:	19 82       	std	Y+1, r1	; 0x01
     eba:	ae c0       	rjmp	.+348    	; 0x1018 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTB:
					switch (Copy_PinValue)
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3a 87       	std	Y+10, r19	; 0x0a
     ec4:	29 87       	std	Y+9, r18	; 0x09
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	c9 f0       	breq	.+50     	; 0xf00 <DIO_u8SetPinValue+0x120>
     ece:	29 85       	ldd	r18, Y+9	; 0x09
     ed0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed2:	21 30       	cpi	r18, 0x01	; 1
     ed4:	31 05       	cpc	r19, r1
     ed6:	49 f5       	brne	.+82     	; 0xf2a <DIO_u8SetPinValue+0x14a>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
     ed8:	a8 e3       	ldi	r26, 0x38	; 56
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e8 e3       	ldi	r30, 0x38	; 56
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_u8SetPinValue+0x116>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_u8SetPinValue+0x112>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	8c c0       	rjmp	.+280    	; 0x1018 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
     f00:	a8 e3       	ldi	r26, 0x38	; 56
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e8 e3       	ldi	r30, 0x38	; 56
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_u8SetPinValue+0x13e>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_u8SetPinValue+0x13a>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	77 c0       	rjmp	.+238    	; 0x1018 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     f2a:	19 82       	std	Y+1, r1	; 0x01
     f2c:	75 c0       	rjmp	.+234    	; 0x1018 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTC:
					switch (Copy_PinValue)
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	38 87       	std	Y+8, r19	; 0x08
     f36:	2f 83       	std	Y+7, r18	; 0x07
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	c9 f0       	breq	.+50     	; 0xf72 <DIO_u8SetPinValue+0x192>
     f40:	2f 81       	ldd	r18, Y+7	; 0x07
     f42:	38 85       	ldd	r19, Y+8	; 0x08
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	49 f5       	brne	.+82     	; 0xf9c <DIO_u8SetPinValue+0x1bc>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
     f4a:	a5 e3       	ldi	r26, 0x35	; 53
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e3       	ldi	r30, 0x35	; 53
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_u8SetPinValue+0x188>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_u8SetPinValue+0x184>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	53 c0       	rjmp	.+166    	; 0x1018 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
     f72:	a5 e3       	ldi	r26, 0x35	; 53
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e3       	ldi	r30, 0x35	; 53
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_u8SetPinValue+0x1b0>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_u8SetPinValue+0x1ac>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	3e c0       	rjmp	.+124    	; 0x1018 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     f9c:	19 82       	std	Y+1, r1	; 0x01
     f9e:	3c c0       	rjmp	.+120    	; 0x1018 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTD:
					switch (Copy_PinValue)
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	3e 83       	std	Y+6, r19	; 0x06
     fa8:	2d 83       	std	Y+5, r18	; 0x05
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	c9 f0       	breq	.+50     	; 0xfe4 <DIO_u8SetPinValue+0x204>
     fb2:	2d 81       	ldd	r18, Y+5	; 0x05
     fb4:	3e 81       	ldd	r19, Y+6	; 0x06
     fb6:	21 30       	cpi	r18, 0x01	; 1
     fb8:	31 05       	cpc	r19, r1
     fba:	49 f5       	brne	.+82     	; 0x100e <DIO_u8SetPinValue+0x22e>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
     fbc:	a2 e3       	ldi	r26, 0x32	; 50
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e2 e3       	ldi	r30, 0x32	; 50
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_u8SetPinValue+0x1fa>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_u8SetPinValue+0x1f6>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	1a c0       	rjmp	.+52     	; 0x1018 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
     fe4:	a2 e3       	ldi	r26, 0x32	; 50
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e2 e3       	ldi	r30, 0x32	; 50
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_u8SetPinValue+0x222>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_u8SetPinValue+0x21e>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				default:Local_u8ErrorState = STD_TYPES_NOK;
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <DIO_u8SetPinValue+0x238>
				
			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
}
    101a:	2e 96       	adiw	r28, 0x0e	; 14
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 * Copy_pu8ReturnedPinValue )
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	28 97       	sbiw	r28, 0x08	; 8
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	6c 83       	std	Y+4, r22	; 0x04
    1044:	5e 83       	std	Y+6, r21	; 0x06
    1046:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	84 30       	cpi	r24, 0x04	; 4
    1050:	08 f0       	brcs	.+2      	; 0x1054 <DIO_u8GetPinValue+0x28>
    1052:	9f c0       	rjmp	.+318    	; 0x1192 <DIO_u8GetPinValue+0x166>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	88 30       	cpi	r24, 0x08	; 8
    1058:	08 f0       	brcs	.+2      	; 0x105c <DIO_u8GetPinValue+0x30>
    105a:	9b c0       	rjmp	.+310    	; 0x1192 <DIO_u8GetPinValue+0x166>
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	09 f4       	brne	.+2      	; 0x1066 <DIO_u8GetPinValue+0x3a>
    1064:	96 c0       	rjmp	.+300    	; 0x1192 <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	38 87       	std	Y+8, r19	; 0x08
    106e:	2f 83       	std	Y+7, r18	; 0x07
    1070:	4f 81       	ldd	r20, Y+7	; 0x07
    1072:	58 85       	ldd	r21, Y+8	; 0x08
    1074:	41 30       	cpi	r20, 0x01	; 1
    1076:	51 05       	cpc	r21, r1
    1078:	a9 f1       	breq	.+106    	; 0x10e4 <DIO_u8GetPinValue+0xb8>
    107a:	8f 81       	ldd	r24, Y+7	; 0x07
    107c:	98 85       	ldd	r25, Y+8	; 0x08
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	91 05       	cpc	r25, r1
    1082:	34 f4       	brge	.+12     	; 0x1090 <DIO_u8GetPinValue+0x64>
    1084:	2f 81       	ldd	r18, Y+7	; 0x07
    1086:	38 85       	ldd	r19, Y+8	; 0x08
    1088:	21 15       	cp	r18, r1
    108a:	31 05       	cpc	r19, r1
    108c:	71 f0       	breq	.+28     	; 0x10aa <DIO_u8GetPinValue+0x7e>
    108e:	82 c0       	rjmp	.+260    	; 0x1194 <DIO_u8GetPinValue+0x168>
    1090:	4f 81       	ldd	r20, Y+7	; 0x07
    1092:	58 85       	ldd	r21, Y+8	; 0x08
    1094:	42 30       	cpi	r20, 0x02	; 2
    1096:	51 05       	cpc	r21, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <DIO_u8GetPinValue+0x70>
    109a:	41 c0       	rjmp	.+130    	; 0x111e <DIO_u8GetPinValue+0xf2>
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <DIO_u8GetPinValue+0x7c>
    10a6:	58 c0       	rjmp	.+176    	; 0x1158 <DIO_u8GetPinValue+0x12c>
    10a8:	75 c0       	rjmp	.+234    	; 0x1194 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA : 
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);
    10aa:	e9 e3       	ldi	r30, 0x39	; 57
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a9 01       	movw	r20, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_u8GetPinValue+0x96>
    10be:	55 95       	asr	r21
    10c0:	47 95       	ror	r20
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_u8GetPinValue+0x92>
    10c6:	ca 01       	movw	r24, r20
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 23       	and	r24, r24
    10d0:	21 f4       	brne	.+8      	; 0x10da <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    10d2:	ed 81       	ldd	r30, Y+5	; 0x05
    10d4:	fe 81       	ldd	r31, Y+6	; 0x06
    10d6:	10 82       	st	Z, r1
    10d8:	5d c0       	rjmp	.+186    	; 0x1194 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    10da:	ed 81       	ldd	r30, Y+5	; 0x05
    10dc:	fe 81       	ldd	r31, Y+6	; 0x06
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 83       	st	Z, r24
    10e2:	58 c0       	rjmp	.+176    	; 0x1194 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    10e4:	e6 e3       	ldi	r30, 0x36	; 54
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a9 01       	movw	r20, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_u8GetPinValue+0xd0>
    10f8:	55 95       	asr	r21
    10fa:	47 95       	ror	r20
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_u8GetPinValue+0xcc>
    1100:	ca 01       	movw	r24, r20
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	88 23       	and	r24, r24
    110a:	21 f4       	brne	.+8      	; 0x1114 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    110c:	ed 81       	ldd	r30, Y+5	; 0x05
    110e:	fe 81       	ldd	r31, Y+6	; 0x06
    1110:	10 82       	st	Z, r1
    1112:	40 c0       	rjmp	.+128    	; 0x1194 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1114:	ed 81       	ldd	r30, Y+5	; 0x05
    1116:	fe 81       	ldd	r31, Y+6	; 0x06
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 83       	st	Z, r24
    111c:	3b c0       	rjmp	.+118    	; 0x1194 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    111e:	e3 e3       	ldi	r30, 0x33	; 51
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8GetPinValue+0x10a>
    1132:	55 95       	asr	r21
    1134:	47 95       	ror	r20
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_u8GetPinValue+0x106>
    113a:	ca 01       	movw	r24, r20
    113c:	81 70       	andi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	88 23       	and	r24, r24
    1144:	21 f4       	brne	.+8      	; 0x114e <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1146:	ed 81       	ldd	r30, Y+5	; 0x05
    1148:	fe 81       	ldd	r31, Y+6	; 0x06
    114a:	10 82       	st	Z, r1
    114c:	23 c0       	rjmp	.+70     	; 0x1194 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    114e:	ed 81       	ldd	r30, Y+5	; 0x05
    1150:	fe 81       	ldd	r31, Y+6	; 0x06
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 83       	st	Z, r24
    1156:	1e c0       	rjmp	.+60     	; 0x1194 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    1158:	e0 e3       	ldi	r30, 0x30	; 48
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a9 01       	movw	r20, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_u8GetPinValue+0x144>
    116c:	55 95       	asr	r21
    116e:	47 95       	ror	r20
    1170:	8a 95       	dec	r24
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_u8GetPinValue+0x140>
    1174:	ca 01       	movw	r24, r20
    1176:	81 70       	andi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	88 23       	and	r24, r24
    117e:	21 f4       	brne	.+8      	; 0x1188 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1180:	ed 81       	ldd	r30, Y+5	; 0x05
    1182:	fe 81       	ldd	r31, Y+6	; 0x06
    1184:	10 82       	st	Z, r1
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1188:	ed 81       	ldd	r30, Y+5	; 0x05
    118a:	fe 81       	ldd	r31, Y+6	; 0x06
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 83       	st	Z, r24
    1190:	01 c0       	rjmp	.+2      	; 0x1194 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1192:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    1196:	28 96       	adiw	r28, 0x08	; 8
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <DIO_u8SetPortDirection>:
 
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_PortDirection)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	2d 97       	sbiw	r28, 0x0d	; 13
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_PortDirection == DIO_u8_OUTPUT  )||(Copy_PortDirection == DIO_u8_INPUT))
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <DIO_u8SetPortDirection+0x2a>
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	88 23       	and	r24, r24
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <DIO_u8SetPortDirection+0x2a>
    11d0:	7f c0       	rjmp	.+254    	; 0x12d0 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3d 87       	std	Y+13, r19	; 0x0d
    11da:	2c 87       	std	Y+12, r18	; 0x0c
    11dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11de:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	71 f1       	breq	.+92     	; 0x1242 <DIO_u8SetPortDirection+0x9a>
    11e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	2c f4       	brge	.+10     	; 0x11fa <DIO_u8SetPortDirection+0x52>
    11f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	69 f0       	breq	.+26     	; 0x1212 <DIO_u8SetPortDirection+0x6a>
    11f8:	69 c0       	rjmp	.+210    	; 0x12cc <DIO_u8SetPortDirection+0x124>
    11fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    11fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	b1 f1       	breq	.+108    	; 0x1270 <DIO_u8SetPortDirection+0xc8>
    1204:	8c 85       	ldd	r24, Y+12	; 0x0c
    1206:	9d 85       	ldd	r25, Y+13	; 0x0d
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <DIO_u8SetPortDirection+0x68>
    120e:	47 c0       	rjmp	.+142    	; 0x129e <DIO_u8SetPortDirection+0xf6>
    1210:	5d c0       	rjmp	.+186    	; 0x12cc <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA : 
				switch (Copy_PortDirection)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3b 87       	std	Y+11, r19	; 0x0b
    121a:	2a 87       	std	Y+10, r18	; 0x0a
    121c:	8a 85       	ldd	r24, Y+10	; 0x0a
    121e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	59 f0       	breq	.+22     	; 0x123a <DIO_u8SetPortDirection+0x92>
    1224:	2a 85       	ldd	r18, Y+10	; 0x0a
    1226:	3b 85       	ldd	r19, Y+11	; 0x0b
    1228:	21 30       	cpi	r18, 0x01	; 1
    122a:	31 05       	cpc	r19, r1
    122c:	09 f0       	breq	.+2      	; 0x1230 <DIO_u8SetPortDirection+0x88>
    122e:	51 c0       	rjmp	.+162    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRA_REG = 0xff; break;
    1230:	ea e3       	ldi	r30, 0x3A	; 58
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	80 83       	st	Z, r24
    1238:	4c c0       	rjmp	.+152    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRA_REG = 0x00; break;
    123a:	ea e3       	ldi	r30, 0x3A	; 58
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	10 82       	st	Z, r1
    1240:	48 c0       	rjmp	.+144    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTB :
				switch (Copy_PortDirection)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	39 87       	std	Y+9, r19	; 0x09
    124a:	28 87       	std	Y+8, r18	; 0x08
    124c:	88 85       	ldd	r24, Y+8	; 0x08
    124e:	99 85       	ldd	r25, Y+9	; 0x09
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	51 f0       	breq	.+20     	; 0x1268 <DIO_u8SetPortDirection+0xc0>
    1254:	28 85       	ldd	r18, Y+8	; 0x08
    1256:	39 85       	ldd	r19, Y+9	; 0x09
    1258:	21 30       	cpi	r18, 0x01	; 1
    125a:	31 05       	cpc	r19, r1
    125c:	d1 f5       	brne	.+116    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRB_REG = 0xff; break;
    125e:	e7 e3       	ldi	r30, 0x37	; 55
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	80 83       	st	Z, r24
    1266:	35 c0       	rjmp	.+106    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRB_REG = 0x00; break;
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	10 82       	st	Z, r1
    126e:	31 c0       	rjmp	.+98     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTC :
				switch (Copy_PortDirection)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3f 83       	std	Y+7, r19	; 0x07
    1278:	2e 83       	std	Y+6, r18	; 0x06
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	9f 81       	ldd	r25, Y+7	; 0x07
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	51 f0       	breq	.+20     	; 0x1296 <DIO_u8SetPortDirection+0xee>
    1282:	2e 81       	ldd	r18, Y+6	; 0x06
    1284:	3f 81       	ldd	r19, Y+7	; 0x07
    1286:	21 30       	cpi	r18, 0x01	; 1
    1288:	31 05       	cpc	r19, r1
    128a:	19 f5       	brne	.+70     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRC_REG = 0xff; break;
    128c:	e4 e3       	ldi	r30, 0x34	; 52
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	80 83       	st	Z, r24
    1294:	1e c0       	rjmp	.+60     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRC_REG = 0x00; break;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	10 82       	st	Z, r1
    129c:	1a c0       	rjmp	.+52     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTD :
				switch (Copy_PortDirection)
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	51 f0       	breq	.+20     	; 0x12c4 <DIO_u8SetPortDirection+0x11c>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	21 30       	cpi	r18, 0x01	; 1
    12b6:	31 05       	cpc	r19, r1
    12b8:	61 f4       	brne	.+24     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRD_REG = 0xff; break;
    12ba:	e1 e3       	ldi	r30, 0x31	; 49
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	80 83       	st	Z, r24
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRD_REG = 0x00; break;
    12c4:	e1 e3       	ldi	r30, 0x31	; 49
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	10 82       	st	Z, r1
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			default      :Local_u8ErrorState =STD_TYPES_NOK;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12d0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d4:	2d 96       	adiw	r28, 0x0d	; 13
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_PortValue)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <DIO_u8SetPortValue+0x6>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <DIO_u8SetPortValue+0x8>
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3d 83       	std	Y+5, r19	; 0x05
    1304:	2c 83       	std	Y+4, r18	; 0x04
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	d1 f0       	breq	.+52     	; 0x1344 <DIO_u8SetPortValue+0x5e>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	2c f4       	brge	.+10     	; 0x1324 <DIO_u8SetPortValue+0x3e>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	61 f0       	breq	.+24     	; 0x133a <DIO_u8SetPortValue+0x54>
    1322:	1f c0       	rjmp	.+62     	; 0x1362 <DIO_u8SetPortValue+0x7c>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	81 f0       	breq	.+32     	; 0x134e <DIO_u8SetPortValue+0x68>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	91 05       	cpc	r25, r1
    1336:	81 f0       	breq	.+32     	; 0x1358 <DIO_u8SetPortValue+0x72>
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_PortValue; break;
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	80 83       	st	Z, r24
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_PortValue; break;
    1344:	e8 e3       	ldi	r30, 0x38	; 56
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	80 83       	st	Z, r24
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_PortValue; break;
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	80 83       	st	Z, r24
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_PortValue; break;
    1358:	e2 e3       	ldi	r30, 0x32	; 50
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	80 83       	st	Z, r24
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <DIO_u8SetPortValue+0x7e>
		default           : Local_u8ErrorState = STD_TYPES_NOK;
    1362:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return Local_u8ErrorState;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue (u8 Copy_u8PortId , u8 * Copy_pu8ReturnedPortValue )
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_u8GetPortValue+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <DIO_u8GetPortValue+0x8>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <DIO_u8GetPortValue+0xa>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	7c 83       	std	Y+4, r23	; 0x04
    1388:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	e9 f1       	breq	.+122    	; 0x1410 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3e 83       	std	Y+6, r19	; 0x06
    139e:	2d 83       	std	Y+5, r18	; 0x05
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	e1 f0       	breq	.+56     	; 0x13e2 <DIO_u8GetPortValue+0x6c>
    13aa:	2d 81       	ldd	r18, Y+5	; 0x05
    13ac:	3e 81       	ldd	r19, Y+6	; 0x06
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	2c f4       	brge	.+10     	; 0x13be <DIO_u8GetPortValue+0x48>
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <DIO_u8GetPortValue+0x5e>
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <DIO_u8GetPortValue+0x96>
    13be:	2d 81       	ldd	r18, Y+5	; 0x05
    13c0:	3e 81       	ldd	r19, Y+6	; 0x06
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	a1 f0       	breq	.+40     	; 0x13f0 <DIO_u8GetPortValue+0x7a>
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <DIO_u8GetPortValue+0x88>
    13d2:	1c c0       	rjmp	.+56     	; 0x140c <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA : *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG; break;
    13d4:	e9 e3       	ldi	r30, 0x39	; 57
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	80 83       	st	Z, r24
    13e0:	18 c0       	rjmp	.+48     	; 0x1412 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB : *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG; break;
    13e2:	e6 e3       	ldi	r30, 0x36	; 54
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ea:	fc 81       	ldd	r31, Y+4	; 0x04
    13ec:	80 83       	st	Z, r24
    13ee:	11 c0       	rjmp	.+34     	; 0x1412 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC : *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG; break; 
    13f0:	e3 e3       	ldi	r30, 0x33	; 51
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	eb 81       	ldd	r30, Y+3	; 0x03
    13f8:	fc 81       	ldd	r31, Y+4	; 0x04
    13fa:	80 83       	st	Z, r24
    13fc:	0a c0       	rjmp	.+20     	; 0x1412 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD : *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG; break;
    13fe:	e0 e3       	ldi	r30, 0x30	; 48
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	eb 81       	ldd	r30, Y+3	; 0x03
    1406:	fc 81       	ldd	r31, Y+4	; 0x04
    1408:	80 83       	st	Z, r24
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <DIO_u8GetPortValue+0x9c>
			default           : Local_u8ErrorState = STD_TYPES_NOK;
    140c:	19 82       	std	Y+1, r1	; 0x01
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1410:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
}
    1414:	26 96       	adiw	r28, 0x06	; 6
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <DIO_u8TogglePin>:

u8  DIO_u8TogglePin(u8 Copy_u8PortId, u8 Copy_u8PinId )
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <DIO_u8TogglePin+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_u8TogglePin+0x8>
    142e:	0f 92       	push	r0
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	8a 83       	std	Y+2, r24	; 0x02
    1436:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7))
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	08 f0       	brcs	.+2      	; 0x1444 <DIO_u8TogglePin+0x1e>
    1442:	73 c0       	rjmp	.+230    	; 0x152a <DIO_u8TogglePin+0x104>
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	88 30       	cpi	r24, 0x08	; 8
    1448:	08 f0       	brcs	.+2      	; 0x144c <DIO_u8TogglePin+0x26>
    144a:	6f c0       	rjmp	.+222    	; 0x152a <DIO_u8TogglePin+0x104>
	{
		switch(Copy_u8PortId)
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3d 83       	std	Y+5, r19	; 0x05
    1454:	2c 83       	std	Y+4, r18	; 0x04
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	9d 81       	ldd	r25, Y+5	; 0x05
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	49 f1       	breq	.+82     	; 0x14b2 <DIO_u8TogglePin+0x8c>
    1460:	2c 81       	ldd	r18, Y+4	; 0x04
    1462:	3d 81       	ldd	r19, Y+5	; 0x05
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	2c f4       	brge	.+10     	; 0x1474 <DIO_u8TogglePin+0x4e>
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	61 f0       	breq	.+24     	; 0x148a <DIO_u8TogglePin+0x64>
    1472:	5c c0       	rjmp	.+184    	; 0x152c <DIO_u8TogglePin+0x106>
    1474:	2c 81       	ldd	r18, Y+4	; 0x04
    1476:	3d 81       	ldd	r19, Y+5	; 0x05
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	71 f1       	breq	.+92     	; 0x14da <DIO_u8TogglePin+0xb4>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	e9 f1       	breq	.+122    	; 0x1502 <DIO_u8TogglePin+0xdc>
    1488:	51 c0       	rjmp	.+162    	; 0x152c <DIO_u8TogglePin+0x106>
		{
			case DIO_u8_PORTA : TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    148a:	ab e3       	ldi	r26, 0x3B	; 59
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e3       	ldi	r30, 0x3B	; 59
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8TogglePin+0x82>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_u8TogglePin+0x7e>
    14ac:	84 27       	eor	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	3d c0       	rjmp	.+122    	; 0x152c <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTB : TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    14b2:	a8 e3       	ldi	r26, 0x38	; 56
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e8 e3       	ldi	r30, 0x38	; 56
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_u8TogglePin+0xaa>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_u8TogglePin+0xa6>
    14d4:	84 27       	eor	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	29 c0       	rjmp	.+82     	; 0x152c <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTC : TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    14da:	a5 e3       	ldi	r26, 0x35	; 53
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e5 e3       	ldi	r30, 0x35	; 53
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8TogglePin+0xd2>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8TogglePin+0xce>
    14fc:	84 27       	eor	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	15 c0       	rjmp	.+42     	; 0x152c <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTD : TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1502:	a2 e3       	ldi	r26, 0x32	; 50
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_u8TogglePin+0xfa>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_u8TogglePin+0xf6>
    1524:	84 27       	eor	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	01 c0       	rjmp	.+2      	; 0x152c <DIO_u8TogglePin+0x106>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    152a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <DIO_u8SendMostNebble>:

u8 DIO_u8SendMostNebble(u8 Copy_u8PortId, u8 Copy_u8Status )
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_u8SendMostNebble+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <DIO_u8SendMostNebble+0x8>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	6b 83       	std	Y+3, r22	; 0x03
    Copy_u8Status &= 0xF0;
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	80 7f       	andi	r24, 0xF0	; 240
    1554:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <=  DIO_u8_PORTD)
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	08 f0       	brcs	.+2      	; 0x1562 <DIO_u8SendMostNebble+0x24>
    1560:	5f c0       	rjmp	.+190    	; 0x1620 <DIO_u8SendMostNebble+0xe2>
	{
		switch(Copy_u8PortId)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3d 83       	std	Y+5, r19	; 0x05
    156a:	2c 83       	std	Y+4, r18	; 0x04
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	29 f1       	breq	.+74     	; 0x15c0 <DIO_u8SendMostNebble+0x82>
    1576:	2c 81       	ldd	r18, Y+4	; 0x04
    1578:	3d 81       	ldd	r19, Y+5	; 0x05
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <DIO_u8SendMostNebble+0x4c>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	61 f0       	breq	.+24     	; 0x15a0 <DIO_u8SendMostNebble+0x62>
    1588:	4c c0       	rjmp	.+152    	; 0x1622 <DIO_u8SendMostNebble+0xe4>
    158a:	2c 81       	ldd	r18, Y+4	; 0x04
    158c:	3d 81       	ldd	r19, Y+5	; 0x05
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	31 f1       	breq	.+76     	; 0x15e0 <DIO_u8SendMostNebble+0xa2>
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	89 f1       	breq	.+98     	; 0x1600 <DIO_u8SendMostNebble+0xc2>
    159e:	41 c0       	rjmp	.+130    	; 0x1622 <DIO_u8SendMostNebble+0xe4>
        {
			case DIO_u8_PORTA : DIO_u8_PORTA_REG &= 0x0F; DIO_u8_PORTA_REG |= Copy_u8Status ; break;
    15a0:	ab e3       	ldi	r26, 0x3B	; 59
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	eb e3       	ldi	r30, 0x3B	; 59
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8f 70       	andi	r24, 0x0F	; 15
    15ac:	8c 93       	st	X, r24
    15ae:	ab e3       	ldi	r26, 0x3B	; 59
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	eb e3       	ldi	r30, 0x3B	; 59
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	90 81       	ld	r25, Z
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	89 2b       	or	r24, r25
    15bc:	8c 93       	st	X, r24
    15be:	31 c0       	rjmp	.+98     	; 0x1622 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTB : DIO_u8_PORTB_REG &= 0x0F; DIO_u8_PORTB_REG |= Copy_u8Status ; break;
    15c0:	a8 e3       	ldi	r26, 0x38	; 56
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e8 e3       	ldi	r30, 0x38	; 56
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 70       	andi	r24, 0x0F	; 15
    15cc:	8c 93       	st	X, r24
    15ce:	a8 e3       	ldi	r26, 0x38	; 56
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e8 e3       	ldi	r30, 0x38	; 56
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	90 81       	ld	r25, Z
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	89 2b       	or	r24, r25
    15dc:	8c 93       	st	X, r24
    15de:	21 c0       	rjmp	.+66     	; 0x1622 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTC : DIO_u8_PORTC_REG &= 0x0F; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    15e0:	a5 e3       	ldi	r26, 0x35	; 53
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e3       	ldi	r30, 0x35	; 53
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 70       	andi	r24, 0x0F	; 15
    15ec:	8c 93       	st	X, r24
    15ee:	a5 e3       	ldi	r26, 0x35	; 53
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e5 e3       	ldi	r30, 0x35	; 53
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	90 81       	ld	r25, Z
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	89 2b       	or	r24, r25
    15fc:	8c 93       	st	X, r24
    15fe:	11 c0       	rjmp	.+34     	; 0x1622 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTD : DIO_u8_PORTD_REG &= 0x0F; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    1600:	a2 e3       	ldi	r26, 0x32	; 50
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e2 e3       	ldi	r30, 0x32	; 50
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8f 70       	andi	r24, 0x0F	; 15
    160c:	8c 93       	st	X, r24
    160e:	a5 e3       	ldi	r26, 0x35	; 53
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e3       	ldi	r30, 0x35	; 53
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	90 81       	ld	r25, Z
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	89 2b       	or	r24, r25
    161c:	8c 93       	st	X, r24
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <DIO_u8SendMostNebble+0xe4>
        }
	}
    else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1620:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <DIO_u8SendLeastNebble>:


u8   DIO_u8SendLeastNebble   (u8 Copy_u8PortId, u8 Copy_u8Status)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <DIO_u8SendLeastNebble+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <DIO_u8SendLeastNebble+0x8>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	8a 83       	std	Y+2, r24	; 0x02
    1644:	6b 83       	std	Y+3, r22	; 0x03
	Copy_u8Status &= 0x0F;
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	8f 70       	andi	r24, 0x0F	; 15
    164a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <=  DIO_u8_PORTD)
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	08 f0       	brcs	.+2      	; 0x1658 <DIO_u8SendLeastNebble+0x24>
    1656:	5f c0       	rjmp	.+190    	; 0x1716 <DIO_u8SendLeastNebble+0xe2>
	{
		switch (Copy_u8PortId)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3d 83       	std	Y+5, r19	; 0x05
    1660:	2c 83       	std	Y+4, r18	; 0x04
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	29 f1       	breq	.+74     	; 0x16b6 <DIO_u8SendLeastNebble+0x82>
    166c:	2c 81       	ldd	r18, Y+4	; 0x04
    166e:	3d 81       	ldd	r19, Y+5	; 0x05
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <DIO_u8SendLeastNebble+0x4c>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	61 f0       	breq	.+24     	; 0x1696 <DIO_u8SendLeastNebble+0x62>
    167e:	4c c0       	rjmp	.+152    	; 0x1718 <DIO_u8SendLeastNebble+0xe4>
    1680:	2c 81       	ldd	r18, Y+4	; 0x04
    1682:	3d 81       	ldd	r19, Y+5	; 0x05
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	31 f1       	breq	.+76     	; 0x16d6 <DIO_u8SendLeastNebble+0xa2>
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	9d 81       	ldd	r25, Y+5	; 0x05
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	89 f1       	breq	.+98     	; 0x16f6 <DIO_u8SendLeastNebble+0xc2>
    1694:	41 c0       	rjmp	.+130    	; 0x1718 <DIO_u8SendLeastNebble+0xe4>
        {
			case DIO_u8_PORTA : DIO_u8_PORTA_REG &= 0xF0; DIO_u8_PORTA_REG |= Copy_u8Status ; break;
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	80 7f       	andi	r24, 0xF0	; 240
    16a2:	8c 93       	st	X, r24
    16a4:	ab e3       	ldi	r26, 0x3B	; 59
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	eb e3       	ldi	r30, 0x3B	; 59
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	90 81       	ld	r25, Z
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	89 2b       	or	r24, r25
    16b2:	8c 93       	st	X, r24
    16b4:	31 c0       	rjmp	.+98     	; 0x1718 <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTB : DIO_u8_PORTB_REG &= 0xF0; DIO_u8_PORTB_REG |= Copy_u8Status ; break;
    16b6:	a8 e3       	ldi	r26, 0x38	; 56
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e8 e3       	ldi	r30, 0x38	; 56
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 7f       	andi	r24, 0xF0	; 240
    16c2:	8c 93       	st	X, r24
    16c4:	a8 e3       	ldi	r26, 0x38	; 56
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e8 e3       	ldi	r30, 0x38	; 56
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	90 81       	ld	r25, Z
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	89 2b       	or	r24, r25
    16d2:	8c 93       	st	X, r24
    16d4:	21 c0       	rjmp	.+66     	; 0x1718 <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTC : DIO_u8_PORTC_REG &= 0xF0; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    16d6:	a5 e3       	ldi	r26, 0x35	; 53
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e3       	ldi	r30, 0x35	; 53
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	80 7f       	andi	r24, 0xF0	; 240
    16e2:	8c 93       	st	X, r24
    16e4:	a5 e3       	ldi	r26, 0x35	; 53
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e3       	ldi	r30, 0x35	; 53
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	90 81       	ld	r25, Z
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	89 2b       	or	r24, r25
    16f2:	8c 93       	st	X, r24
    16f4:	11 c0       	rjmp	.+34     	; 0x1718 <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTD : DIO_u8_PORTD_REG &= 0xF0; DIO_u8_PORTD_REG |= Copy_u8Status ; break;
    16f6:	a2 e3       	ldi	r26, 0x32	; 50
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e2 e3       	ldi	r30, 0x32	; 50
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	80 7f       	andi	r24, 0xF0	; 240
    1702:	8c 93       	st	X, r24
    1704:	a2 e3       	ldi	r26, 0x32	; 50
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e2 e3       	ldi	r30, 0x32	; 50
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	90 81       	ld	r25, Z
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	89 2b       	or	r24, r25
    1712:	8c 93       	st	X, r24
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <DIO_u8SendLeastNebble+0xe4>
        }
	}
    else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1716:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1718:	89 81       	ldd	r24, Y+1	; 0x01
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <KPD_u8GetKeyState>:
static const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};

static const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

u8 KPD_u8GetKeyState(u8* Copy_pu8ReturnedKey)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	65 97       	sbiw	r28, 0x15	; 21
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	9d 8b       	std	Y+21, r25	; 0x15
    1740:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowCounter;
	u8 Local_u8ColCounter;
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
    1746:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    1748:	8c 89       	ldd	r24, Y+20	; 0x14
    174a:	9d 89       	ldd	r25, Y+21	; 0x15
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	09 f4       	brne	.+2      	; 0x1752 <KPD_u8GetKeyState+0x28>
    1750:	f0 c0       	rjmp	.+480    	; 0x1932 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
    1752:	ec 89       	ldd	r30, Y+20	; 0x14
    1754:	fd 89       	ldd	r31, Y+21	; 0x15
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	80 83       	st	Z, r24
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    175a:	19 8a       	std	Y+17, r1	; 0x11
    175c:	e5 c0       	rjmp	.+458    	; 0x1928 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
    175e:	89 89       	ldd	r24, Y+17	; 0x11
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	fc 01       	movw	r30, r24
    1766:	e8 58       	subi	r30, 0x88	; 136
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	90 81       	ld	r25, Z
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	69 2f       	mov	r22, r25
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    1776:	18 8a       	std	Y+16, r1	; 0x10
    1778:	c1 c0       	rjmp	.+386    	; 0x18fc <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    177a:	88 89       	ldd	r24, Y+16	; 0x10
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	fc 01       	movw	r30, r24
    1782:	e4 58       	subi	r30, 0x84	; 132
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	90 81       	ld	r25, Z
    1788:	9e 01       	movw	r18, r28
    178a:	2d 5e       	subi	r18, 0xED	; 237
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	69 2f       	mov	r22, r25
    1792:	a9 01       	movw	r20, r18
    1794:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    1798:	8b 89       	ldd	r24, Y+19	; 0x13
    179a:	88 23       	and	r24, r24
    179c:	09 f0       	breq	.+2      	; 0x17a0 <KPD_u8GetKeyState+0x76>
    179e:	ab c0       	rjmp	.+342    	; 0x18f6 <KPD_u8GetKeyState+0x1cc>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a0 ea       	ldi	r26, 0xA0	; 160
    17a6:	b1 e4       	ldi	r27, 0x41	; 65
    17a8:	8b 87       	std	Y+11, r24	; 0x0b
    17aa:	9c 87       	std	Y+12, r25	; 0x0c
    17ac:	ad 87       	std	Y+13, r26	; 0x0d
    17ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	4a ef       	ldi	r20, 0xFA	; 250
    17be:	54 e4       	ldi	r21, 0x44	; 68
    17c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	8f 83       	std	Y+7, r24	; 0x07
    17ca:	98 87       	std	Y+8, r25	; 0x08
    17cc:	a9 87       	std	Y+9, r26	; 0x09
    17ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	5f e3       	ldi	r21, 0x3F	; 63
    17e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e4:	88 23       	and	r24, r24
    17e6:	2c f4       	brge	.+10     	; 0x17f2 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	9e 83       	std	Y+6, r25	; 0x06
    17ee:	8d 83       	std	Y+5, r24	; 0x05
    17f0:	3f c0       	rjmp	.+126    	; 0x1870 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    17f2:	6f 81       	ldd	r22, Y+7	; 0x07
    17f4:	78 85       	ldd	r23, Y+8	; 0x08
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	3f ef       	ldi	r19, 0xFF	; 255
    17fe:	4f e7       	ldi	r20, 0x7F	; 127
    1800:	57 e4       	ldi	r21, 0x47	; 71
    1802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1806:	18 16       	cp	r1, r24
    1808:	4c f5       	brge	.+82     	; 0x185c <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180a:	6b 85       	ldd	r22, Y+11	; 0x0b
    180c:	7c 85       	ldd	r23, Y+12	; 0x0c
    180e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1810:	9e 85       	ldd	r25, Y+14	; 0x0e
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e2       	ldi	r20, 0x20	; 32
    1818:	51 e4       	ldi	r21, 0x41	; 65
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	bc 01       	movw	r22, r24
    1824:	cd 01       	movw	r24, r26
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	0f c0       	rjmp	.+30     	; 0x1852 <KPD_u8GetKeyState+0x128>
    1834:	88 ec       	ldi	r24, 0xC8	; 200
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9c 83       	std	Y+4, r25	; 0x04
    183a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <KPD_u8GetKeyState+0x116>
    1844:	9c 83       	std	Y+4, r25	; 0x04
    1846:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	69 f7       	brne	.-38     	; 0x1834 <KPD_u8GetKeyState+0x10a>
    185a:	14 c0       	rjmp	.+40     	; 0x1884 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185c:	6f 81       	ldd	r22, Y+7	; 0x07
    185e:	78 85       	ldd	r23, Y+8	; 0x08
    1860:	89 85       	ldd	r24, Y+9	; 0x09
    1862:	9a 85       	ldd	r25, Y+10	; 0x0a
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	9a 83       	std	Y+2, r25	; 0x02
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <KPD_u8GetKeyState+0x152>
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    1884:	88 89       	ldd	r24, Y+16	; 0x10
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	fc 01       	movw	r30, r24
    188c:	e4 58       	subi	r30, 0x84	; 132
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	90 81       	ld	r25, Z
    1892:	9e 01       	movw	r18, r28
    1894:	2d 5e       	subi	r18, 0xED	; 237
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	69 2f       	mov	r22, r25
    189c:	a9 01       	movw	r20, r18
    189e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_u8GetPinValue>
    18a2:	0f c0       	rjmp	.+30     	; 0x18c2 <KPD_u8GetKeyState+0x198>
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    18a4:	88 89       	ldd	r24, Y+16	; 0x10
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	fc 01       	movw	r30, r24
    18ac:	e4 58       	subi	r30, 0x84	; 132
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	90 81       	ld	r25, Z
    18b2:	9e 01       	movw	r18, r28
    18b4:	2d 5e       	subi	r18, 0xED	; 237
    18b6:	3f 4f       	sbci	r19, 0xFF	; 255
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	69 2f       	mov	r22, r25
    18bc:	a9 01       	movw	r20, r18
    18be:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_u8GetPinValue>
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					while(Local_u8PinValue == DIO_u8_LOW)
    18c2:	8b 89       	ldd	r24, Y+19	; 0x13
    18c4:	88 23       	and	r24, r24
    18c6:	71 f3       	breq	.-36     	; 0x18a4 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
    18c8:	89 89       	ldd	r24, Y+17	; 0x11
    18ca:	48 2f       	mov	r20, r24
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	88 89       	ldd	r24, Y+16	; 0x10
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	ca 01       	movw	r24, r20
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	82 0f       	add	r24, r18
    18e0:	93 1f       	adc	r25, r19
    18e2:	fc 01       	movw	r30, r24
    18e4:	e8 59       	subi	r30, 0x98	; 152
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	ec 89       	ldd	r30, Y+20	; 0x14
    18ec:	fd 89       	ldd	r31, Y+21	; 0x15
    18ee:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	8f 87       	std	Y+15, r24	; 0x0f
    18f4:	07 c0       	rjmp	.+14     	; 0x1904 <KPD_u8GetKeyState+0x1da>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    18f6:	88 89       	ldd	r24, Y+16	; 0x10
    18f8:	8f 5f       	subi	r24, 0xFF	; 255
    18fa:	88 8b       	std	Y+16, r24	; 0x10
    18fc:	88 89       	ldd	r24, Y+16	; 0x10
    18fe:	84 30       	cpi	r24, 0x04	; 4
    1900:	08 f4       	brcc	.+2      	; 0x1904 <KPD_u8GetKeyState+0x1da>
    1902:	3b cf       	rjmp	.-394    	; 0x177a <KPD_u8GetKeyState+0x50>
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
					Local_u8Flag = 1;
					break; 
				}
			}
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_HIGH);
    1904:	89 89       	ldd	r24, Y+17	; 0x11
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	fc 01       	movw	r30, r24
    190c:	e8 58       	subi	r30, 0x88	; 136
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	90 81       	ld	r25, Z
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	69 2f       	mov	r22, r25
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1) 
    191c:	8f 85       	ldd	r24, Y+15	; 0x0f
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	49 f0       	breq	.+18     	; 0x1934 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    1922:	89 89       	ldd	r24, Y+17	; 0x11
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	89 8b       	std	Y+17, r24	; 0x11
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	08 f4       	brcc	.+2      	; 0x1930 <KPD_u8GetKeyState+0x206>
    192e:	17 cf       	rjmp	.-466    	; 0x175e <KPD_u8GetKeyState+0x34>
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <KPD_u8GetKeyState+0x20a>
			}	
		}
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    1932:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    1934:	8a 89       	ldd	r24, Y+18	; 0x12
	
}
    1936:	65 96       	adiw	r28, 0x15	; 21
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <TIMERS_voidTimer0Init>:

/*Global Pointer To Function Of Timer0 CTC*/
static void(*TIMERS_pfTimer0CTC)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    #elif TIMER0_u8_MODE == TIMER0_CTC_MOOD
	      CLR_BIT(TIMERS_u8_TCCR0_REG,WGM00);
	      SET_BIT(TIMERS_u8_TCCR0_REG,WGM01);

    #elif TIMER0_u8_MODE == TIMER0_FAST_PWM_MOOD
	      SET_BIT(TIMERS_u8_TCCR0_REG,WGM00);
    1950:	a3 e5       	ldi	r26, 0x53	; 83
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e3 e5       	ldi	r30, 0x53	; 83
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	80 64       	ori	r24, 0x40	; 64
    195c:	8c 93       	st	X, r24
	      SET_BIT(TIMERS_u8_TCCR0_REG,WGM01);
    195e:	a3 e5       	ldi	r26, 0x53	; 83
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e3 e5       	ldi	r30, 0x53	; 83
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	88 60       	ori	r24, 0x08	; 8
    196a:	8c 93       	st	X, r24
  #elif TIMER0_OC0_PIN_MOOD == TIMER0_NON_PWM_OC0_PIN_SET
        SET_BIT(TIMERS_u8_TCCR0_REG,COM00);
        SET_BIT(TIMERS_u8_TCCR0_REG,COM01);

  #elif TIMER0_OC0_PIN_MOOD == TIMER0_FAST_PWM_OC0_PIN_CLEAR_ON_COMPARE_SET_AT_TOP
        CLR_BIT(TIMERS_u8_TCCR0_REG,COM00);
    196c:	a3 e5       	ldi	r26, 0x53	; 83
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e3 e5       	ldi	r30, 0x53	; 83
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8f 7e       	andi	r24, 0xEF	; 239
    1978:	8c 93       	st	X, r24
        SET_BIT(TIMERS_u8_TCCR0_REG,COM01);
    197a:	a3 e5       	ldi	r26, 0x53	; 83
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e3 e5       	ldi	r30, 0x53	; 83
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 62       	ori	r24, 0x20	; 32
    1986:	8c 93       	st	X, r24
  #elif TIMER0_OC0_PIN_MOOD == TIMER0_PHASE_PWM_OC0_PIN_SET_UP_COUNTER_CLEAR_DOWN_COUNTER
        SET_BIT(TIMERS_u8_TCCR0_REG,COM00);
        SET_BIT(TIMERS_u8_TCCR0_REG,COM01);

   #endif
}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <TIMERS_voidTimer0Enable>:

void TIMERS_voidTimer0Enable(void)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	/*Set PreScaler Value*/
	TIMERS_u8_TCCR0_REG &= 0xf8;
    1996:	a3 e5       	ldi	r26, 0x53	; 83
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e3 e5       	ldi	r30, 0x53	; 83
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	88 7f       	andi	r24, 0xF8	; 248
    19a2:	8c 93       	st	X, r24
	TIMERS_u8_TCCR0_REG |= TIMER0_u8_PRE_SCALER_MOOD;
    19a4:	a3 e5       	ldi	r26, 0x53	; 83
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e3 e5       	ldi	r30, 0x53	; 83
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	82 60       	ori	r24, 0x02	; 2
    19b0:	8c 93       	st	X, r24
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <TIMERS_voidTimer0Disable>:

void TIMERS_voidTimer0Disable(void)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
	TIMERS_u8_TCCR0_REG &= 0xf8;
    19c0:	a3 e5       	ldi	r26, 0x53	; 83
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e3 e5       	ldi	r30, 0x53	; 83
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	88 7f       	andi	r24, 0xF8	; 248
    19cc:	8c 93       	st	X, r24
	TIMERS_u8_TCCR0_REG |= TIMER0_NO_CLOCK_SOURCE;
    19ce:	a3 e5       	ldi	r26, 0x53	; 83
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e3 e5       	ldi	r30, 0x53	; 83
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8c 93       	st	X, r24
}
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <TIMERS_voidTimer0SetPreLoadValue>:

void TIMERS_voidTimer0SetPreLoadValue(u8 Copy_u8Value)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	89 83       	std	Y+1, r24	; 0x01
	/*Set Preload Value*/
	TIMERS_u8_TCNT0_REG = Copy_u8Value;
    19ec:	e2 e5       	ldi	r30, 0x52	; 82
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	80 83       	st	Z, r24
}
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <TIMERS_u8Timer0ReadCounter>:

u8 TIMERS_u8Timer0ReadCounter(void)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u8_TCNT0_REG;
    1a04:	e2 e5       	ldi	r30, 0x52	; 82
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8Value)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	89 83       	std	Y+1, r24	; 0x01
   TIMERS_u8_OCR0_REG = Copy_u8Value;
    1a1c:	ec e5       	ldi	r30, 0x5C	; 92
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	80 83       	st	Z, r24
}
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <TIMERS_voidTimer0CTCInterruptEnable>:

void TIMERS_voidTimer0CTCInterruptEnable(void)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	/*Enable CTC Interrupt*/
	SET_BIT(TIMERS_u8_TIMSK_REG,OCIE0);
    1a34:	a9 e5       	ldi	r26, 0x59	; 89
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e9 e5       	ldi	r30, 0x59	; 89
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	82 60       	ori	r24, 0x02	; 2
    1a40:	8c 93       	st	X, r24
}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <TIMERS_voidTimer0OVFInterruptEnable>:

void TIMERS_voidTimer0OVFInterruptEnable(void)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	/*Enable OVF Interrupt*/
	SET_BIT(TIMERS_u8_TIMSK_REG,TOIE0);
    1a50:	a9 e5       	ldi	r26, 0x59	; 89
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e9 e5       	ldi	r30, 0x59	; 89
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	81 60       	ori	r24, 0x01	; 1
    1a5c:	8c 93       	st	X, r24
}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <TIMERS_voidTimer0CTCInterruptDisable>:

void TIMERS_voidTimer0CTCInterruptDisable(void)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	/*Disable CTC Interrupt*/
	CLR_BIT(TIMERS_u8_TIMSK_REG,OCIE0);
    1a6c:	a9 e5       	ldi	r26, 0x59	; 89
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e9 e5       	ldi	r30, 0x59	; 89
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8d 7f       	andi	r24, 0xFD	; 253
    1a78:	8c 93       	st	X, r24
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <TIMERS_voidTimer0OVFInterruptDisable>:

void TIMERS_voidTimer0OVFInterruptDisable(void)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	/*Disable OVF Interrupt*/
	CLR_BIT(TIMERS_u8_TIMSK_REG,TOIE0);
    1a88:	a9 e5       	ldi	r26, 0x59	; 89
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e9 e5       	ldi	r30, 0x59	; 89
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	8e 7f       	andi	r24, 0xFE	; 254
    1a94:	8c 93       	st	X, r24
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <TIMERS_u8Timer0ReadOVFFlag>:

u8 TIMERS_u8Timer0ReadOVFFlag(void)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8OVFFlag;
	Local_u8OVFFlag = GET_BIT(TIMERS_u8_TIFR_REG,TOV0);
    1aa6:	e8 e5       	ldi	r30, 0x58	; 88
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	81 70       	andi	r24, 0x01	; 1
    1aae:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8OVFFlag;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <TIMERS_u8Timer0ReadCTCFlag>:

u8 TIMERS_u8Timer0ReadCTCFlag(void)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CTCFlag;
	Local_u8CTCFlag = GET_BIT(TIMERS_u8_TIFR_REG,OCF0);
    1ac4:	e8 e5       	ldi	r30, 0x58	; 88
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	86 95       	lsr	r24
    1acc:	81 70       	andi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8CTCFlag;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <TIMERS_voidTimer0ClearOVFFlag>:

void TIMERS_voidTimer0ClearOVFFlag(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMERS_u8_TIFR_REG,TOV0);
    1ae2:	a8 e5       	ldi	r26, 0x58	; 88
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e8 e5       	ldi	r30, 0x58	; 88
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	81 60       	ori	r24, 0x01	; 1
    1aee:	8c 93       	st	X, r24
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <TIMERS_voidTimer0ClearCTCFlag>:

void TIMERS_voidTimer0ClearCTCFlag(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMERS_u8_TIFR_REG,OCF0);
    1afe:	a8 e5       	ldi	r26, 0x58	; 88
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e8 e5       	ldi	r30, 0x58	; 88
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	82 60       	ori	r24, 0x02	; 2
    1b0a:	8c 93       	st	X, r24
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <TIMERS_u8Timer0OVFSetCallBack>:

u8   TIMERS_u8Timer0OVFSetCallBack(void(*Copy_pf)(void))
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <TIMERS_u8Timer0OVFSetCallBack+0x6>
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9b 83       	std	Y+3, r25	; 0x03
    1b20:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	39 f0       	breq	.+14     	; 0x1b3c <TIMERS_u8Timer0OVFSetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	90 93 81 00 	sts	0x0081, r25
    1b36:	80 93 80 00 	sts	0x0080, r24
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <TIMERS_u8Timer0OVFSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1b3c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <TIMERS_u8Timer0CTCSetCallBack>:

u8   TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <TIMERS_u8Timer0CTCSetCallBack+0x6>
    1b52:	0f 92       	push	r0
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	9b 83       	std	Y+3, r25	; 0x03
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	9b 81       	ldd	r25, Y+3	; 0x03
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	39 f0       	breq	.+14     	; 0x1b76 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	90 93 83 00 	sts	0x0083, r25
    1b70:	80 93 82 00 	sts	0x0082, r24
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1b76:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void)
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	/*Select Mood => 14*/
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    1b8e:	af e4       	ldi	r26, 0x4F	; 79
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ef e4       	ldi	r30, 0x4F	; 79
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	82 60       	ori	r24, 0x02	; 2
    1b9a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    1b9c:	af e4       	ldi	r26, 0x4F	; 79
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	ef e4       	ldi	r30, 0x4F	; 79
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	8e 7f       	andi	r24, 0xFE	; 254
    1ba8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    1baa:	ae e4       	ldi	r26, 0x4E	; 78
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	ee e4       	ldi	r30, 0x4E	; 78
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 61       	ori	r24, 0x10	; 16
    1bb6:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    1bb8:	ae e4       	ldi	r26, 0x4E	; 78
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	ee e4       	ldi	r30, 0x4E	; 78
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 60       	ori	r24, 0x08	; 8
    1bc4:	8c 93       	st	X, r24
	
	/*Select Mood For Output Pin(OC1A) For ChannelA => Non Inverting Mood*/
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    1bc6:	af e4       	ldi	r26, 0x4F	; 79
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	ef e4       	ldi	r30, 0x4F	; 79
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 68       	ori	r24, 0x80	; 128
    1bd2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    1bd4:	af e4       	ldi	r26, 0x4F	; 79
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ef e4       	ldi	r30, 0x4F	; 79
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	8f 7b       	andi	r24, 0xBF	; 191
    1be0:	8c 93       	st	X, r24
	
	/*Select Top Value Of ICR => 1999*/
	TIMERS_u16_ICR1_REG = 19999;
    1be2:	e6 e4       	ldi	r30, 0x46	; 70
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	8f e1       	ldi	r24, 0x1F	; 31
    1be8:	9e e4       	ldi	r25, 0x4E	; 78
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
	
	/*Set Angle Of Servo Motor => 0*/
	TIMERS_u16_OCR1A_REG = 185;
    1bee:	ea e4       	ldi	r30, 0x4A	; 74
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	89 eb       	ldi	r24, 0xB9	; 185
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	80 83       	st	Z, r24

	/*Set PreScaler Value*/
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    1bfa:	ae e4       	ldi	r26, 0x4E	; 78
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	ee e4       	ldi	r30, 0x4E	; 78
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8e 7f       	andi	r24, 0xFE	; 254
    1c06:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    1c08:	ae e4       	ldi	r26, 0x4E	; 78
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ee e4       	ldi	r30, 0x4E	; 78
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	82 60       	ori	r24, 0x02	; 2
    1c14:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    1c16:	ae e4       	ldi	r26, 0x4E	; 78
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	ee e4       	ldi	r30, 0x4E	; 78
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8b 7f       	andi	r24, 0xFB	; 251
    1c22:	8c 93       	st	X, r24
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <TIMERS_voidTimer1SetOCR1A>:

void TIMERS_voidTimer1SetOCR1A(u16 Copy_OCR1A_Value)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <TIMERS_voidTimer1SetOCR1A+0x6>
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_OCR1A_Value;
    1c38:	ea e4       	ldi	r30, 0x4A	; 74
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <__vector_10>:


/*Prototype For ISR of Timer0 CTC*/
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    1c4e:	1f 92       	push	r1
    1c50:	0f 92       	push	r0
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	0f 92       	push	r0
    1c56:	11 24       	eor	r1, r1
    1c58:	2f 93       	push	r18
    1c5a:	3f 93       	push	r19
    1c5c:	4f 93       	push	r20
    1c5e:	5f 93       	push	r21
    1c60:	6f 93       	push	r22
    1c62:	7f 93       	push	r23
    1c64:	8f 93       	push	r24
    1c66:	9f 93       	push	r25
    1c68:	af 93       	push	r26
    1c6a:	bf 93       	push	r27
    1c6c:	ef 93       	push	r30
    1c6e:	ff 93       	push	r31
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pfTimer0CTC != NULL)
    1c78:	80 91 82 00 	lds	r24, 0x0082
    1c7c:	90 91 83 00 	lds	r25, 0x0083
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	29 f0       	breq	.+10     	; 0x1c8e <__vector_10+0x40>
	{
		TIMERS_pfTimer0CTC();
    1c84:	e0 91 82 00 	lds	r30, 0x0082
    1c88:	f0 91 83 00 	lds	r31, 0x0083
    1c8c:	09 95       	icall
	}
}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	ff 91       	pop	r31
    1c94:	ef 91       	pop	r30
    1c96:	bf 91       	pop	r27
    1c98:	af 91       	pop	r26
    1c9a:	9f 91       	pop	r25
    1c9c:	8f 91       	pop	r24
    1c9e:	7f 91       	pop	r23
    1ca0:	6f 91       	pop	r22
    1ca2:	5f 91       	pop	r21
    1ca4:	4f 91       	pop	r20
    1ca6:	3f 91       	pop	r19
    1ca8:	2f 91       	pop	r18
    1caa:	0f 90       	pop	r0
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	0f 90       	pop	r0
    1cb0:	1f 90       	pop	r1
    1cb2:	18 95       	reti

00001cb4 <__vector_11>:

/*Prototype For ISR of Timer0 OVF*/
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1cb4:	1f 92       	push	r1
    1cb6:	0f 92       	push	r0
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	0f 92       	push	r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	2f 93       	push	r18
    1cc0:	3f 93       	push	r19
    1cc2:	4f 93       	push	r20
    1cc4:	5f 93       	push	r21
    1cc6:	6f 93       	push	r22
    1cc8:	7f 93       	push	r23
    1cca:	8f 93       	push	r24
    1ccc:	9f 93       	push	r25
    1cce:	af 93       	push	r26
    1cd0:	bf 93       	push	r27
    1cd2:	ef 93       	push	r30
    1cd4:	ff 93       	push	r31
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pfTimer0OVF != NULL)
    1cde:	80 91 80 00 	lds	r24, 0x0080
    1ce2:	90 91 81 00 	lds	r25, 0x0081
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	29 f0       	breq	.+10     	; 0x1cf4 <__vector_11+0x40>
	{
		TIMERS_pfTimer0OVF();
    1cea:	e0 91 80 00 	lds	r30, 0x0080
    1cee:	f0 91 81 00 	lds	r31, 0x0081
    1cf2:	09 95       	icall
	}
}
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	ff 91       	pop	r31
    1cfa:	ef 91       	pop	r30
    1cfc:	bf 91       	pop	r27
    1cfe:	af 91       	pop	r26
    1d00:	9f 91       	pop	r25
    1d02:	8f 91       	pop	r24
    1d04:	7f 91       	pop	r23
    1d06:	6f 91       	pop	r22
    1d08:	5f 91       	pop	r21
    1d0a:	4f 91       	pop	r20
    1d0c:	3f 91       	pop	r19
    1d0e:	2f 91       	pop	r18
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <main>:
#include "TIMERS_interface.h"
#include "KPD_interface.h"


int main(void)
{
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	c1 5e       	subi	r28, 0xE1	; 225
    1d28:	d0 40       	sbci	r29, 0x00	; 0
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyValue;
	DIO_voidInit();
    1d34:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	TIMERS_voidTimer0Init();
    1d38:	0e 94 a4 0c 	call	0x1948	; 0x1948 <TIMERS_voidTimer0Init>
	TIMERS_voidTimer0Enable();
    1d3c:	0e 94 c7 0c 	call	0x198e	; 0x198e <TIMERS_voidTimer0Enable>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8KeyValue);
    1d40:	ce 01       	movw	r24, r28
    1d42:	8f 51       	subi	r24, 0x1F	; 31
    1d44:	9f 4f       	sbci	r25, 0xFF	; 255
    1d46:	0e 94 95 0b 	call	0x172a	; 0x172a <KPD_u8GetKeyState>
		if(Local_u8KeyValue == '1')
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ef 51       	subi	r30, 0x1F	; 31
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	81 33       	cpi	r24, 0x31	; 49
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <main+0x3e>
    1d56:	b8 c0       	rjmp	.+368    	; 0x1ec8 <main+0x1ae>
		{
			TIMERS_voidTimer0SetCompareMatchValue(150);
    1d58:	86 e9       	ldi	r24, 0x96	; 150
    1d5a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e3 52       	subi	r30, 0x23	; 35
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a8 e4       	ldi	r26, 0x48	; 72
    1d6a:	b3 e4       	ldi	r27, 0x43	; 67
    1d6c:	80 83       	st	Z, r24
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	a2 83       	std	Z+2, r26	; 0x02
    1d72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	8e 01       	movw	r16, r28
    1d76:	07 52       	subi	r16, 0x27	; 39
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e3 52       	subi	r30, 0x23	; 35
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	93 81       	ldd	r25, Z+3	; 0x03
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	f8 01       	movw	r30, r16
    1d9a:	80 83       	st	Z, r24
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	a2 83       	std	Z+2, r26	; 0x02
    1da0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 52       	subi	r30, 0x27	; 39
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	44 f4       	brge	.+16     	; 0x1dd0 <main+0xb6>
		__ticks = 1;
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e9 52       	subi	r30, 0x29	; 41
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	64 c0       	rjmp	.+200    	; 0x1e98 <main+0x17e>
	else if (__tmp > 65535)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e7 52       	subi	r30, 0x27	; 39
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	0c f0       	brlt	.+2      	; 0x1df0 <main+0xd6>
    1dee:	43 c0       	rjmp	.+134    	; 0x1e76 <main+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	fe 01       	movw	r30, r28
    1df2:	e3 52       	subi	r30, 0x23	; 35
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8e 01       	movw	r16, r28
    1e10:	09 52       	subi	r16, 0x29	; 41
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
    1e26:	1f c0       	rjmp	.+62     	; 0x1e66 <main+0x14c>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	eb 52       	subi	r30, 0x2B	; 43
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	88 ec       	ldi	r24, 0xC8	; 200
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	80 83       	st	Z, r24
    1e36:	fe 01       	movw	r30, r28
    1e38:	eb 52       	subi	r30, 0x2B	; 43
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <main+0x126>
    1e44:	fe 01       	movw	r30, r28
    1e46:	eb 52       	subi	r30, 0x2B	; 43
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	de 01       	movw	r26, r28
    1e50:	a9 52       	subi	r26, 0x29	; 41
    1e52:	bf 4f       	sbci	r27, 0xFF	; 255
    1e54:	fe 01       	movw	r30, r28
    1e56:	e9 52       	subi	r30, 0x29	; 41
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	91 81       	ldd	r25, Z+1	; 0x01
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	11 96       	adiw	r26, 0x01	; 1
    1e62:	9c 93       	st	X, r25
    1e64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	fe 01       	movw	r30, r28
    1e68:	e9 52       	subi	r30, 0x29	; 41
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	d1 f6       	brne	.-76     	; 0x1e28 <main+0x10e>
    1e74:	65 cf       	rjmp	.-310    	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	8e 01       	movw	r16, r28
    1e78:	09 52       	subi	r16, 0x29	; 41
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e7 52       	subi	r30, 0x27	; 39
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	de 01       	movw	r26, r28
    1e9a:	ad 52       	subi	r26, 0x2D	; 45
    1e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e9 52       	subi	r30, 0x29	; 41
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	9c 93       	st	X, r25
    1eac:	8e 93       	st	-X, r24
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ed 52       	subi	r30, 0x2D	; 45
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <main+0x19e>
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ed 52       	subi	r30, 0x2D	; 45
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	3c cf       	rjmp	.-392    	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '2')
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ef 51       	subi	r30, 0x1F	; 31
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	82 33       	cpi	r24, 0x32	; 50
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <main+0x1bc>
    1ed4:	b8 c0       	rjmp	.+368    	; 0x2046 <main+0x32c>
		{
			TIMERS_voidTimer0SetCompareMatchValue(207);
    1ed6:	8f ec       	ldi	r24, 0xCF	; 207
    1ed8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    1edc:	fe 01       	movw	r30, r28
    1ede:	e1 53       	subi	r30, 0x31	; 49
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a8 e4       	ldi	r26, 0x48	; 72
    1ee8:	b3 e4       	ldi	r27, 0x43	; 67
    1eea:	80 83       	st	Z, r24
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	a2 83       	std	Z+2, r26	; 0x02
    1ef0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef2:	8e 01       	movw	r16, r28
    1ef4:	05 53       	subi	r16, 0x35	; 53
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e1 53       	subi	r30, 0x31	; 49
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4a ef       	ldi	r20, 0xFA	; 250
    1f0c:	54 e4       	ldi	r21, 0x44	; 68
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	f8 01       	movw	r30, r16
    1f18:	80 83       	st	Z, r24
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	a2 83       	std	Z+2, r26	; 0x02
    1f1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f20:	fe 01       	movw	r30, r28
    1f22:	e5 53       	subi	r30, 0x35	; 53
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	44 f4       	brge	.+16     	; 0x1f4e <main+0x234>
		__ticks = 1;
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e7 53       	subi	r30, 0x37	; 55
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
    1f4c:	64 c0       	rjmp	.+200    	; 0x2016 <main+0x2fc>
	else if (__tmp > 65535)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e5 53       	subi	r30, 0x35	; 53
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	0c f0       	brlt	.+2      	; 0x1f6e <main+0x254>
    1f6c:	43 c0       	rjmp	.+134    	; 0x1ff4 <main+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e1 53       	subi	r30, 0x31	; 49
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e2       	ldi	r20, 0x20	; 32
    1f82:	51 e4       	ldi	r21, 0x41	; 65
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8e 01       	movw	r16, r28
    1f8e:	07 53       	subi	r16, 0x37	; 55
    1f90:	1f 4f       	sbci	r17, 0xFF	; 255
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
    1fa4:	1f c0       	rjmp	.+62     	; 0x1fe4 <main+0x2ca>
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e9 53       	subi	r30, 0x39	; 57
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e9 53       	subi	r30, 0x39	; 57
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <main+0x2a4>
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e9 53       	subi	r30, 0x39	; 57
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	de 01       	movw	r26, r28
    1fce:	a7 53       	subi	r26, 0x37	; 55
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e7 53       	subi	r30, 0x37	; 55
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	11 96       	adiw	r26, 0x01	; 1
    1fe0:	9c 93       	st	X, r25
    1fe2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e7 53       	subi	r30, 0x37	; 55
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	d1 f6       	brne	.-76     	; 0x1fa6 <main+0x28c>
    1ff2:	a6 ce       	rjmp	.-692    	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	8e 01       	movw	r16, r28
    1ff6:	07 53       	subi	r16, 0x37	; 55
    1ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e5 53       	subi	r30, 0x35	; 53
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	f8 01       	movw	r30, r16
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	de 01       	movw	r26, r28
    2018:	ab 53       	subi	r26, 0x3B	; 59
    201a:	bf 4f       	sbci	r27, 0xFF	; 255
    201c:	fe 01       	movw	r30, r28
    201e:	e7 53       	subi	r30, 0x37	; 55
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	11 96       	adiw	r26, 0x01	; 1
    2028:	9c 93       	st	X, r25
    202a:	8e 93       	st	-X, r24
    202c:	fe 01       	movw	r30, r28
    202e:	eb 53       	subi	r30, 0x3B	; 59
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <main+0x31c>
    203a:	fe 01       	movw	r30, r28
    203c:	eb 53       	subi	r30, 0x3B	; 59
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	80 83       	st	Z, r24
    2044:	7d ce       	rjmp	.-774    	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '3')
    2046:	fe 01       	movw	r30, r28
    2048:	ef 51       	subi	r30, 0x1F	; 31
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	83 33       	cpi	r24, 0x33	; 51
    2050:	09 f0       	breq	.+2      	; 0x2054 <main+0x33a>
    2052:	b8 c0       	rjmp	.+368    	; 0x21c4 <main+0x4aa>
		{
			TIMERS_voidTimer0SetCompareMatchValue(97);
    2054:	81 e6       	ldi	r24, 0x61	; 97
    2056:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    205a:	fe 01       	movw	r30, r28
    205c:	ef 53       	subi	r30, 0x3F	; 63
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a8 e4       	ldi	r26, 0x48	; 72
    2066:	b3 e4       	ldi	r27, 0x43	; 67
    2068:	80 83       	st	Z, r24
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	a2 83       	std	Z+2, r26	; 0x02
    206e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	8e 01       	movw	r16, r28
    2072:	03 54       	subi	r16, 0x43	; 67
    2074:	1f 4f       	sbci	r17, 0xFF	; 255
    2076:	fe 01       	movw	r30, r28
    2078:	ef 53       	subi	r30, 0x3F	; 63
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	60 81       	ld	r22, Z
    207e:	71 81       	ldd	r23, Z+1	; 0x01
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a ef       	ldi	r20, 0xFA	; 250
    208a:	54 e4       	ldi	r21, 0x44	; 68
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	f8 01       	movw	r30, r16
    2096:	80 83       	st	Z, r24
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	a2 83       	std	Z+2, r26	; 0x02
    209c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    209e:	fe 01       	movw	r30, r28
    20a0:	e3 54       	subi	r30, 0x43	; 67
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	44 f4       	brge	.+16     	; 0x20cc <main+0x3b2>
		__ticks = 1;
    20bc:	fe 01       	movw	r30, r28
    20be:	e5 54       	subi	r30, 0x45	; 69
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
    20ca:	64 c0       	rjmp	.+200    	; 0x2194 <main+0x47a>
	else if (__tmp > 65535)
    20cc:	fe 01       	movw	r30, r28
    20ce:	e3 54       	subi	r30, 0x43	; 67
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	0c f0       	brlt	.+2      	; 0x20ec <main+0x3d2>
    20ea:	43 c0       	rjmp	.+134    	; 0x2172 <main+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	fe 01       	movw	r30, r28
    20ee:	ef 53       	subi	r30, 0x3F	; 63
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8e 01       	movw	r16, r28
    210c:	05 54       	subi	r16, 0x45	; 69
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	f8 01       	movw	r30, r16
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
    2122:	1f c0       	rjmp	.+62     	; 0x2162 <main+0x448>
    2124:	fe 01       	movw	r30, r28
    2126:	e7 54       	subi	r30, 0x47	; 71
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	88 ec       	ldi	r24, 0xC8	; 200
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	fe 01       	movw	r30, r28
    2134:	e7 54       	subi	r30, 0x47	; 71
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <main+0x422>
    2140:	fe 01       	movw	r30, r28
    2142:	e7 54       	subi	r30, 0x47	; 71
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	de 01       	movw	r26, r28
    214c:	a5 54       	subi	r26, 0x45	; 69
    214e:	bf 4f       	sbci	r27, 0xFF	; 255
    2150:	fe 01       	movw	r30, r28
    2152:	e5 54       	subi	r30, 0x45	; 69
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	9c 93       	st	X, r25
    2160:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	fe 01       	movw	r30, r28
    2164:	e5 54       	subi	r30, 0x45	; 69
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	d1 f6       	brne	.-76     	; 0x2124 <main+0x40a>
    2170:	e7 cd       	rjmp	.-1074   	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	8e 01       	movw	r16, r28
    2174:	05 54       	subi	r16, 0x45	; 69
    2176:	1f 4f       	sbci	r17, 0xFF	; 255
    2178:	fe 01       	movw	r30, r28
    217a:	e3 54       	subi	r30, 0x43	; 67
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	f8 01       	movw	r30, r16
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
    2194:	de 01       	movw	r26, r28
    2196:	a9 54       	subi	r26, 0x49	; 73
    2198:	bf 4f       	sbci	r27, 0xFF	; 255
    219a:	fe 01       	movw	r30, r28
    219c:	e5 54       	subi	r30, 0x45	; 69
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	11 96       	adiw	r26, 0x01	; 1
    21a6:	9c 93       	st	X, r25
    21a8:	8e 93       	st	-X, r24
    21aa:	fe 01       	movw	r30, r28
    21ac:	e9 54       	subi	r30, 0x49	; 73
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <main+0x49a>
    21b8:	fe 01       	movw	r30, r28
    21ba:	e9 54       	subi	r30, 0x49	; 73
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
    21c2:	be cd       	rjmp	.-1156   	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '+')
    21c4:	fe 01       	movw	r30, r28
    21c6:	ef 51       	subi	r30, 0x1F	; 31
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 81       	ld	r24, Z
    21cc:	8b 32       	cpi	r24, 0x2B	; 43
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <main+0x4b8>
    21d0:	b8 c0       	rjmp	.+368    	; 0x2342 <main+0x628>
		{
			TIMERS_voidTimer0SetCompareMatchValue(65);
    21d2:	81 e4       	ldi	r24, 0x41	; 65
    21d4:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    21d8:	fe 01       	movw	r30, r28
    21da:	ed 54       	subi	r30, 0x4D	; 77
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a8 e4       	ldi	r26, 0x48	; 72
    21e4:	b3 e4       	ldi	r27, 0x43	; 67
    21e6:	80 83       	st	Z, r24
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	a2 83       	std	Z+2, r26	; 0x02
    21ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ee:	8e 01       	movw	r16, r28
    21f0:	01 55       	subi	r16, 0x51	; 81
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	fe 01       	movw	r30, r28
    21f6:	ed 54       	subi	r30, 0x4D	; 77
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	4a ef       	ldi	r20, 0xFA	; 250
    2208:	54 e4       	ldi	r21, 0x44	; 68
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	f8 01       	movw	r30, r16
    2214:	80 83       	st	Z, r24
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	a2 83       	std	Z+2, r26	; 0x02
    221a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    221c:	fe 01       	movw	r30, r28
    221e:	e1 55       	subi	r30, 0x51	; 81
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2236:	88 23       	and	r24, r24
    2238:	44 f4       	brge	.+16     	; 0x224a <main+0x530>
		__ticks = 1;
    223a:	fe 01       	movw	r30, r28
    223c:	e3 55       	subi	r30, 0x53	; 83
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
    2248:	64 c0       	rjmp	.+200    	; 0x2312 <main+0x5f8>
	else if (__tmp > 65535)
    224a:	fe 01       	movw	r30, r28
    224c:	e1 55       	subi	r30, 0x51	; 81
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	0c f0       	brlt	.+2      	; 0x226a <main+0x550>
    2268:	43 c0       	rjmp	.+134    	; 0x22f0 <main+0x5d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	fe 01       	movw	r30, r28
    226c:	ed 54       	subi	r30, 0x4D	; 77
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8e 01       	movw	r16, r28
    228a:	03 55       	subi	r16, 0x53	; 83
    228c:	1f 4f       	sbci	r17, 0xFF	; 255
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	f8 01       	movw	r30, r16
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
    22a0:	1f c0       	rjmp	.+62     	; 0x22e0 <main+0x5c6>
    22a2:	fe 01       	movw	r30, r28
    22a4:	e5 55       	subi	r30, 0x55	; 85
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	88 ec       	ldi	r24, 0xC8	; 200
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	80 83       	st	Z, r24
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 55       	subi	r30, 0x55	; 85
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <main+0x5a0>
    22be:	fe 01       	movw	r30, r28
    22c0:	e5 55       	subi	r30, 0x55	; 85
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	de 01       	movw	r26, r28
    22ca:	a3 55       	subi	r26, 0x53	; 83
    22cc:	bf 4f       	sbci	r27, 0xFF	; 255
    22ce:	fe 01       	movw	r30, r28
    22d0:	e3 55       	subi	r30, 0x53	; 83
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	11 96       	adiw	r26, 0x01	; 1
    22dc:	9c 93       	st	X, r25
    22de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	fe 01       	movw	r30, r28
    22e2:	e3 55       	subi	r30, 0x53	; 83
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	d1 f6       	brne	.-76     	; 0x22a2 <main+0x588>
    22ee:	28 cd       	rjmp	.-1456   	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	8e 01       	movw	r16, r28
    22f2:	03 55       	subi	r16, 0x53	; 83
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e1 55       	subi	r30, 0x51	; 81
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	f8 01       	movw	r30, r16
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
    2312:	de 01       	movw	r26, r28
    2314:	a7 55       	subi	r26, 0x57	; 87
    2316:	bf 4f       	sbci	r27, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	e3 55       	subi	r30, 0x53	; 83
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 81       	ld	r24, Z
    2320:	91 81       	ldd	r25, Z+1	; 0x01
    2322:	11 96       	adiw	r26, 0x01	; 1
    2324:	9c 93       	st	X, r25
    2326:	8e 93       	st	-X, r24
    2328:	fe 01       	movw	r30, r28
    232a:	e7 55       	subi	r30, 0x57	; 87
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	80 81       	ld	r24, Z
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <main+0x618>
    2336:	fe 01       	movw	r30, r28
    2338:	e7 55       	subi	r30, 0x57	; 87
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	80 83       	st	Z, r24
    2340:	ff cc       	rjmp	.-1538   	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '4')
    2342:	fe 01       	movw	r30, r28
    2344:	ef 51       	subi	r30, 0x1F	; 31
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	84 33       	cpi	r24, 0x34	; 52
    234c:	09 f0       	breq	.+2      	; 0x2350 <main+0x636>
    234e:	b8 c0       	rjmp	.+368    	; 0x24c0 <main+0x7a6>
		{
			TIMERS_voidTimer0SetCompareMatchValue(80);
    2350:	80 e5       	ldi	r24, 0x50	; 80
    2352:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    2356:	fe 01       	movw	r30, r28
    2358:	eb 55       	subi	r30, 0x5B	; 91
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a8 e4       	ldi	r26, 0x48	; 72
    2362:	b3 e4       	ldi	r27, 0x43	; 67
    2364:	80 83       	st	Z, r24
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	a2 83       	std	Z+2, r26	; 0x02
    236a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	8e 01       	movw	r16, r28
    236e:	0f 55       	subi	r16, 0x5F	; 95
    2370:	1f 4f       	sbci	r17, 0xFF	; 255
    2372:	fe 01       	movw	r30, r28
    2374:	eb 55       	subi	r30, 0x5B	; 91
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a ef       	ldi	r20, 0xFA	; 250
    2386:	54 e4       	ldi	r21, 0x44	; 68
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	f8 01       	movw	r30, r16
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	a2 83       	std	Z+2, r26	; 0x02
    2398:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    239a:	fe 01       	movw	r30, r28
    239c:	ef 55       	subi	r30, 0x5F	; 95
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	60 81       	ld	r22, Z
    23a2:	71 81       	ldd	r23, Z+1	; 0x01
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	44 f4       	brge	.+16     	; 0x23c8 <main+0x6ae>
		__ticks = 1;
    23b8:	fe 01       	movw	r30, r28
    23ba:	e1 56       	subi	r30, 0x61	; 97
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
    23c6:	64 c0       	rjmp	.+200    	; 0x2490 <main+0x776>
	else if (__tmp > 65535)
    23c8:	fe 01       	movw	r30, r28
    23ca:	ef 55       	subi	r30, 0x5F	; 95
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	57 e4       	ldi	r21, 0x47	; 71
    23de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	0c f0       	brlt	.+2      	; 0x23e8 <main+0x6ce>
    23e6:	43 c0       	rjmp	.+134    	; 0x246e <main+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	fe 01       	movw	r30, r28
    23ea:	eb 55       	subi	r30, 0x5B	; 91
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8e 01       	movw	r16, r28
    2408:	01 56       	subi	r16, 0x61	; 97
    240a:	1f 4f       	sbci	r17, 0xFF	; 255
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	f8 01       	movw	r30, r16
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
    241e:	1f c0       	rjmp	.+62     	; 0x245e <main+0x744>
    2420:	fe 01       	movw	r30, r28
    2422:	e3 56       	subi	r30, 0x63	; 99
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	88 ec       	ldi	r24, 0xC8	; 200
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	80 83       	st	Z, r24
    242e:	fe 01       	movw	r30, r28
    2430:	e3 56       	subi	r30, 0x63	; 99
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <main+0x71e>
    243c:	fe 01       	movw	r30, r28
    243e:	e3 56       	subi	r30, 0x63	; 99
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	de 01       	movw	r26, r28
    2448:	a1 56       	subi	r26, 0x61	; 97
    244a:	bf 4f       	sbci	r27, 0xFF	; 255
    244c:	fe 01       	movw	r30, r28
    244e:	e1 56       	subi	r30, 0x61	; 97
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	11 96       	adiw	r26, 0x01	; 1
    245a:	9c 93       	st	X, r25
    245c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	fe 01       	movw	r30, r28
    2460:	e1 56       	subi	r30, 0x61	; 97
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	d1 f6       	brne	.-76     	; 0x2420 <main+0x706>
    246c:	69 cc       	rjmp	.-1838   	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246e:	8e 01       	movw	r16, r28
    2470:	01 56       	subi	r16, 0x61	; 97
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	fe 01       	movw	r30, r28
    2476:	ef 55       	subi	r30, 0x5F	; 95
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	f8 01       	movw	r30, r16
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	80 83       	st	Z, r24
    2490:	de 01       	movw	r26, r28
    2492:	a5 56       	subi	r26, 0x65	; 101
    2494:	bf 4f       	sbci	r27, 0xFF	; 255
    2496:	fe 01       	movw	r30, r28
    2498:	e1 56       	subi	r30, 0x61	; 97
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	11 96       	adiw	r26, 0x01	; 1
    24a2:	9c 93       	st	X, r25
    24a4:	8e 93       	st	-X, r24
    24a6:	fe 01       	movw	r30, r28
    24a8:	e5 56       	subi	r30, 0x65	; 101
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <main+0x796>
    24b4:	fe 01       	movw	r30, r28
    24b6:	e5 56       	subi	r30, 0x65	; 101
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	40 cc       	rjmp	.-1920   	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '5')
    24c0:	fe 01       	movw	r30, r28
    24c2:	ef 51       	subi	r30, 0x1F	; 31
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	85 33       	cpi	r24, 0x35	; 53
    24ca:	09 f0       	breq	.+2      	; 0x24ce <main+0x7b4>
    24cc:	b8 c0       	rjmp	.+368    	; 0x263e <main+0x924>
		{
			TIMERS_voidTimer0SetCompareMatchValue(45);
    24ce:	8d e2       	ldi	r24, 0x2D	; 45
    24d0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    24d4:	fe 01       	movw	r30, r28
    24d6:	e9 56       	subi	r30, 0x69	; 105
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a8 e4       	ldi	r26, 0x48	; 72
    24e0:	b3 e4       	ldi	r27, 0x43	; 67
    24e2:	80 83       	st	Z, r24
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	a2 83       	std	Z+2, r26	; 0x02
    24e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	8e 01       	movw	r16, r28
    24ec:	0d 56       	subi	r16, 0x6D	; 109
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	fe 01       	movw	r30, r28
    24f2:	e9 56       	subi	r30, 0x69	; 105
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4a ef       	ldi	r20, 0xFA	; 250
    2504:	54 e4       	ldi	r21, 0x44	; 68
    2506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	f8 01       	movw	r30, r16
    2510:	80 83       	st	Z, r24
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	a2 83       	std	Z+2, r26	; 0x02
    2516:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2518:	fe 01       	movw	r30, r28
    251a:	ed 56       	subi	r30, 0x6D	; 109
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e8       	ldi	r20, 0x80	; 128
    252c:	5f e3       	ldi	r21, 0x3F	; 63
    252e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2532:	88 23       	and	r24, r24
    2534:	44 f4       	brge	.+16     	; 0x2546 <main+0x82c>
		__ticks = 1;
    2536:	fe 01       	movw	r30, r28
    2538:	ef 56       	subi	r30, 0x6F	; 111
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	64 c0       	rjmp	.+200    	; 0x260e <main+0x8f4>
	else if (__tmp > 65535)
    2546:	fe 01       	movw	r30, r28
    2548:	ed 56       	subi	r30, 0x6D	; 109
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	0c f0       	brlt	.+2      	; 0x2566 <main+0x84c>
    2564:	43 c0       	rjmp	.+134    	; 0x25ec <main+0x8d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2566:	fe 01       	movw	r30, r28
    2568:	e9 56       	subi	r30, 0x69	; 105
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	8e 01       	movw	r16, r28
    2586:	0f 56       	subi	r16, 0x6F	; 111
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	f8 01       	movw	r30, r16
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	80 83       	st	Z, r24
    259c:	1f c0       	rjmp	.+62     	; 0x25dc <main+0x8c2>
    259e:	fe 01       	movw	r30, r28
    25a0:	e1 57       	subi	r30, 0x71	; 113
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	88 ec       	ldi	r24, 0xC8	; 200
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
    25ac:	fe 01       	movw	r30, r28
    25ae:	e1 57       	subi	r30, 0x71	; 113
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <main+0x89c>
    25ba:	fe 01       	movw	r30, r28
    25bc:	e1 57       	subi	r30, 0x71	; 113
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	de 01       	movw	r26, r28
    25c6:	af 56       	subi	r26, 0x6F	; 111
    25c8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	ef 56       	subi	r30, 0x6F	; 111
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	11 96       	adiw	r26, 0x01	; 1
    25d8:	9c 93       	st	X, r25
    25da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	fe 01       	movw	r30, r28
    25de:	ef 56       	subi	r30, 0x6F	; 111
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	d1 f6       	brne	.-76     	; 0x259e <main+0x884>
    25ea:	aa cb       	rjmp	.-2220   	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	8e 01       	movw	r16, r28
    25ee:	0f 56       	subi	r16, 0x6F	; 111
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	fe 01       	movw	r30, r28
    25f4:	ed 56       	subi	r30, 0x6D	; 109
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	f8 01       	movw	r30, r16
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
    260e:	de 01       	movw	r26, r28
    2610:	a3 57       	subi	r26, 0x73	; 115
    2612:	bf 4f       	sbci	r27, 0xFF	; 255
    2614:	fe 01       	movw	r30, r28
    2616:	ef 56       	subi	r30, 0x6F	; 111
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	11 96       	adiw	r26, 0x01	; 1
    2620:	9c 93       	st	X, r25
    2622:	8e 93       	st	-X, r24
    2624:	fe 01       	movw	r30, r28
    2626:	e3 57       	subi	r30, 0x73	; 115
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <main+0x914>
    2632:	fe 01       	movw	r30, r28
    2634:	e3 57       	subi	r30, 0x73	; 115
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	80 83       	st	Z, r24
    263c:	81 cb       	rjmp	.-2302   	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '6')
    263e:	fe 01       	movw	r30, r28
    2640:	ef 51       	subi	r30, 0x1F	; 31
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	86 33       	cpi	r24, 0x36	; 54
    2648:	09 f0       	breq	.+2      	; 0x264c <main+0x932>
    264a:	b8 c0       	rjmp	.+368    	; 0x27bc <main+0xaa2>
		{
			TIMERS_voidTimer0SetCompareMatchValue(112);
    264c:	80 e7       	ldi	r24, 0x70	; 112
    264e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    2652:	fe 01       	movw	r30, r28
    2654:	e7 57       	subi	r30, 0x77	; 119
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a8 e4       	ldi	r26, 0x48	; 72
    265e:	b3 e4       	ldi	r27, 0x43	; 67
    2660:	80 83       	st	Z, r24
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	a2 83       	std	Z+2, r26	; 0x02
    2666:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	8e 01       	movw	r16, r28
    266a:	0b 57       	subi	r16, 0x7B	; 123
    266c:	1f 4f       	sbci	r17, 0xFF	; 255
    266e:	fe 01       	movw	r30, r28
    2670:	e7 57       	subi	r30, 0x77	; 119
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	4a ef       	ldi	r20, 0xFA	; 250
    2682:	54 e4       	ldi	r21, 0x44	; 68
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	f8 01       	movw	r30, r16
    268e:	80 83       	st	Z, r24
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	a2 83       	std	Z+2, r26	; 0x02
    2694:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2696:	fe 01       	movw	r30, r28
    2698:	eb 57       	subi	r30, 0x7B	; 123
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	44 f4       	brge	.+16     	; 0x26c4 <main+0x9aa>
		__ticks = 1;
    26b4:	fe 01       	movw	r30, r28
    26b6:	ed 57       	subi	r30, 0x7D	; 125
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	64 c0       	rjmp	.+200    	; 0x278c <main+0xa72>
	else if (__tmp > 65535)
    26c4:	fe 01       	movw	r30, r28
    26c6:	eb 57       	subi	r30, 0x7B	; 123
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	0c f0       	brlt	.+2      	; 0x26e4 <main+0x9ca>
    26e2:	43 c0       	rjmp	.+134    	; 0x276a <main+0xa50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e4:	fe 01       	movw	r30, r28
    26e6:	e7 57       	subi	r30, 0x77	; 119
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e2       	ldi	r20, 0x20	; 32
    26f8:	51 e4       	ldi	r21, 0x41	; 65
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8e 01       	movw	r16, r28
    2704:	0d 57       	subi	r16, 0x7D	; 125
    2706:	1f 4f       	sbci	r17, 0xFF	; 255
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	f8 01       	movw	r30, r16
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24
    271a:	1f c0       	rjmp	.+62     	; 0x275a <main+0xa40>
    271c:	fe 01       	movw	r30, r28
    271e:	ef 57       	subi	r30, 0x7F	; 127
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	88 ec       	ldi	r24, 0xC8	; 200
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	80 83       	st	Z, r24
    272a:	fe 01       	movw	r30, r28
    272c:	ef 57       	subi	r30, 0x7F	; 127
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <main+0xa1a>
    2738:	fe 01       	movw	r30, r28
    273a:	ef 57       	subi	r30, 0x7F	; 127
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2742:	de 01       	movw	r26, r28
    2744:	ad 57       	subi	r26, 0x7D	; 125
    2746:	bf 4f       	sbci	r27, 0xFF	; 255
    2748:	fe 01       	movw	r30, r28
    274a:	ed 57       	subi	r30, 0x7D	; 125
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	11 96       	adiw	r26, 0x01	; 1
    2756:	9c 93       	st	X, r25
    2758:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	fe 01       	movw	r30, r28
    275c:	ed 57       	subi	r30, 0x7D	; 125
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	d1 f6       	brne	.-76     	; 0x271c <main+0xa02>
    2768:	eb ca       	rjmp	.-2602   	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276a:	8e 01       	movw	r16, r28
    276c:	0d 57       	subi	r16, 0x7D	; 125
    276e:	1f 4f       	sbci	r17, 0xFF	; 255
    2770:	fe 01       	movw	r30, r28
    2772:	eb 57       	subi	r30, 0x7B	; 123
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	f8 01       	movw	r30, r16
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	80 83       	st	Z, r24
    278c:	de 01       	movw	r26, r28
    278e:	a1 58       	subi	r26, 0x81	; 129
    2790:	bf 4f       	sbci	r27, 0xFF	; 255
    2792:	fe 01       	movw	r30, r28
    2794:	ed 57       	subi	r30, 0x7D	; 125
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	80 81       	ld	r24, Z
    279a:	91 81       	ldd	r25, Z+1	; 0x01
    279c:	11 96       	adiw	r26, 0x01	; 1
    279e:	9c 93       	st	X, r25
    27a0:	8e 93       	st	-X, r24
    27a2:	fe 01       	movw	r30, r28
    27a4:	e1 58       	subi	r30, 0x81	; 129
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <main+0xa92>
    27b0:	fe 01       	movw	r30, r28
    27b2:	e1 58       	subi	r30, 0x81	; 129
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
    27ba:	c2 ca       	rjmp	.-2684   	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '-')
    27bc:	fe 01       	movw	r30, r28
    27be:	ef 51       	subi	r30, 0x1F	; 31
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	8d 32       	cpi	r24, 0x2D	; 45
    27c6:	09 f0       	breq	.+2      	; 0x27ca <main+0xab0>
    27c8:	b8 c0       	rjmp	.+368    	; 0x293a <main+0xc20>
		{
			TIMERS_voidTimer0SetCompareMatchValue(23);
    27ca:	87 e1       	ldi	r24, 0x17	; 23
    27cc:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    27d0:	fe 01       	movw	r30, r28
    27d2:	e5 58       	subi	r30, 0x85	; 133
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	a8 e4       	ldi	r26, 0x48	; 72
    27dc:	b3 e4       	ldi	r27, 0x43	; 67
    27de:	80 83       	st	Z, r24
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	a2 83       	std	Z+2, r26	; 0x02
    27e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e6:	8e 01       	movw	r16, r28
    27e8:	09 58       	subi	r16, 0x89	; 137
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	fe 01       	movw	r30, r28
    27ee:	e5 58       	subi	r30, 0x85	; 133
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a ef       	ldi	r20, 0xFA	; 250
    2800:	54 e4       	ldi	r21, 0x44	; 68
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	f8 01       	movw	r30, r16
    280c:	80 83       	st	Z, r24
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	a2 83       	std	Z+2, r26	; 0x02
    2812:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2814:	fe 01       	movw	r30, r28
    2816:	e9 58       	subi	r30, 0x89	; 137
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	60 81       	ld	r22, Z
    281c:	71 81       	ldd	r23, Z+1	; 0x01
    281e:	82 81       	ldd	r24, Z+2	; 0x02
    2820:	93 81       	ldd	r25, Z+3	; 0x03
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    282e:	88 23       	and	r24, r24
    2830:	44 f4       	brge	.+16     	; 0x2842 <main+0xb28>
		__ticks = 1;
    2832:	fe 01       	movw	r30, r28
    2834:	eb 58       	subi	r30, 0x8B	; 139
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	64 c0       	rjmp	.+200    	; 0x290a <main+0xbf0>
	else if (__tmp > 65535)
    2842:	fe 01       	movw	r30, r28
    2844:	e9 58       	subi	r30, 0x89	; 137
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	3f ef       	ldi	r19, 0xFF	; 255
    2854:	4f e7       	ldi	r20, 0x7F	; 127
    2856:	57 e4       	ldi	r21, 0x47	; 71
    2858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285c:	18 16       	cp	r1, r24
    285e:	0c f0       	brlt	.+2      	; 0x2862 <main+0xb48>
    2860:	43 c0       	rjmp	.+134    	; 0x28e8 <main+0xbce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	fe 01       	movw	r30, r28
    2864:	e5 58       	subi	r30, 0x85	; 133
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e2       	ldi	r20, 0x20	; 32
    2876:	51 e4       	ldi	r21, 0x41	; 65
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8e 01       	movw	r16, r28
    2882:	0b 58       	subi	r16, 0x8B	; 139
    2884:	1f 4f       	sbci	r17, 0xFF	; 255
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	f8 01       	movw	r30, r16
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
    2898:	1f c0       	rjmp	.+62     	; 0x28d8 <main+0xbbe>
    289a:	fe 01       	movw	r30, r28
    289c:	ed 58       	subi	r30, 0x8D	; 141
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	88 ec       	ldi	r24, 0xC8	; 200
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	80 83       	st	Z, r24
    28a8:	fe 01       	movw	r30, r28
    28aa:	ed 58       	subi	r30, 0x8D	; 141
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <main+0xb98>
    28b6:	fe 01       	movw	r30, r28
    28b8:	ed 58       	subi	r30, 0x8D	; 141
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c0:	de 01       	movw	r26, r28
    28c2:	ab 58       	subi	r26, 0x8B	; 139
    28c4:	bf 4f       	sbci	r27, 0xFF	; 255
    28c6:	fe 01       	movw	r30, r28
    28c8:	eb 58       	subi	r30, 0x8B	; 139
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	11 96       	adiw	r26, 0x01	; 1
    28d4:	9c 93       	st	X, r25
    28d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d8:	fe 01       	movw	r30, r28
    28da:	eb 58       	subi	r30, 0x8B	; 139
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	d1 f6       	brne	.-76     	; 0x289a <main+0xb80>
    28e6:	2c ca       	rjmp	.-2984   	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	8e 01       	movw	r16, r28
    28ea:	0b 58       	subi	r16, 0x8B	; 139
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e9 58       	subi	r30, 0x89	; 137
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	f8 01       	movw	r30, r16
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	de 01       	movw	r26, r28
    290c:	af 58       	subi	r26, 0x8F	; 143
    290e:	bf 4f       	sbci	r27, 0xFF	; 255
    2910:	fe 01       	movw	r30, r28
    2912:	eb 58       	subi	r30, 0x8B	; 139
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	11 96       	adiw	r26, 0x01	; 1
    291c:	9c 93       	st	X, r25
    291e:	8e 93       	st	-X, r24
    2920:	fe 01       	movw	r30, r28
    2922:	ef 58       	subi	r30, 0x8F	; 143
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <main+0xc10>
    292e:	fe 01       	movw	r30, r28
    2930:	ef 58       	subi	r30, 0x8F	; 143
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
    2938:	03 ca       	rjmp	.-3066   	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '7')
    293a:	fe 01       	movw	r30, r28
    293c:	ef 51       	subi	r30, 0x1F	; 31
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	87 33       	cpi	r24, 0x37	; 55
    2944:	09 f0       	breq	.+2      	; 0x2948 <main+0xc2e>
    2946:	b8 c0       	rjmp	.+368    	; 0x2ab8 <main+0xd9e>
		{
			TIMERS_voidTimer0SetCompareMatchValue(144);
    2948:	80 e9       	ldi	r24, 0x90	; 144
    294a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    294e:	fe 01       	movw	r30, r28
    2950:	e3 59       	subi	r30, 0x93	; 147
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	a8 e4       	ldi	r26, 0x48	; 72
    295a:	b3 e4       	ldi	r27, 0x43	; 67
    295c:	80 83       	st	Z, r24
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	a2 83       	std	Z+2, r26	; 0x02
    2962:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2964:	8e 01       	movw	r16, r28
    2966:	07 59       	subi	r16, 0x97	; 151
    2968:	1f 4f       	sbci	r17, 0xFF	; 255
    296a:	fe 01       	movw	r30, r28
    296c:	e3 59       	subi	r30, 0x93	; 147
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4a ef       	ldi	r20, 0xFA	; 250
    297e:	54 e4       	ldi	r21, 0x44	; 68
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	f8 01       	movw	r30, r16
    298a:	80 83       	st	Z, r24
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	a2 83       	std	Z+2, r26	; 0x02
    2990:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2992:	fe 01       	movw	r30, r28
    2994:	e7 59       	subi	r30, 0x97	; 151
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	5f e3       	ldi	r21, 0x3F	; 63
    29a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ac:	88 23       	and	r24, r24
    29ae:	44 f4       	brge	.+16     	; 0x29c0 <main+0xca6>
		__ticks = 1;
    29b0:	fe 01       	movw	r30, r28
    29b2:	e9 59       	subi	r30, 0x99	; 153
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
    29be:	64 c0       	rjmp	.+200    	; 0x2a88 <main+0xd6e>
	else if (__tmp > 65535)
    29c0:	fe 01       	movw	r30, r28
    29c2:	e7 59       	subi	r30, 0x97	; 151
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	3f ef       	ldi	r19, 0xFF	; 255
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	57 e4       	ldi	r21, 0x47	; 71
    29d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	0c f0       	brlt	.+2      	; 0x29e0 <main+0xcc6>
    29de:	43 c0       	rjmp	.+134    	; 0x2a66 <main+0xd4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e0:	fe 01       	movw	r30, r28
    29e2:	e3 59       	subi	r30, 0x93	; 147
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	51 e4       	ldi	r21, 0x41	; 65
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	8e 01       	movw	r16, r28
    2a00:	09 59       	subi	r16, 0x99	; 153
    2a02:	1f 4f       	sbci	r17, 0xFF	; 255
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	f8 01       	movw	r30, r16
    2a12:	91 83       	std	Z+1, r25	; 0x01
    2a14:	80 83       	st	Z, r24
    2a16:	1f c0       	rjmp	.+62     	; 0x2a56 <main+0xd3c>
    2a18:	fe 01       	movw	r30, r28
    2a1a:	eb 59       	subi	r30, 0x9B	; 155
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	88 ec       	ldi	r24, 0xC8	; 200
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	fe 01       	movw	r30, r28
    2a28:	eb 59       	subi	r30, 0x9B	; 155
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <main+0xd16>
    2a34:	fe 01       	movw	r30, r28
    2a36:	eb 59       	subi	r30, 0x9B	; 155
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	de 01       	movw	r26, r28
    2a40:	a9 59       	subi	r26, 0x99	; 153
    2a42:	bf 4f       	sbci	r27, 0xFF	; 255
    2a44:	fe 01       	movw	r30, r28
    2a46:	e9 59       	subi	r30, 0x99	; 153
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	11 96       	adiw	r26, 0x01	; 1
    2a52:	9c 93       	st	X, r25
    2a54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a56:	fe 01       	movw	r30, r28
    2a58:	e9 59       	subi	r30, 0x99	; 153
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	d1 f6       	brne	.-76     	; 0x2a18 <main+0xcfe>
    2a64:	6d c9       	rjmp	.-3366   	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	8e 01       	movw	r16, r28
    2a68:	09 59       	subi	r16, 0x99	; 153
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e7 59       	subi	r30, 0x97	; 151
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	f8 01       	movw	r30, r16
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
    2a88:	de 01       	movw	r26, r28
    2a8a:	ad 59       	subi	r26, 0x9D	; 157
    2a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e9 59       	subi	r30, 0x99	; 153
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	11 96       	adiw	r26, 0x01	; 1
    2a9a:	9c 93       	st	X, r25
    2a9c:	8e 93       	st	-X, r24
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ed 59       	subi	r30, 0x9D	; 157
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <main+0xd8e>
    2aac:	fe 01       	movw	r30, r28
    2aae:	ed 59       	subi	r30, 0x9D	; 157
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	80 83       	st	Z, r24
    2ab6:	44 c9       	rjmp	.-3448   	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '8')
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ef 51       	subi	r30, 0x1F	; 31
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	88 33       	cpi	r24, 0x38	; 56
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <main+0xdac>
    2ac4:	b8 c0       	rjmp	.+368    	; 0x2c36 <main+0xf1c>
		{
			TIMERS_voidTimer0SetCompareMatchValue(10);
    2ac6:	8a e0       	ldi	r24, 0x0A	; 10
    2ac8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    2acc:	fe 01       	movw	r30, r28
    2ace:	e1 5a       	subi	r30, 0xA1	; 161
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a8 e4       	ldi	r26, 0x48	; 72
    2ad8:	b3 e4       	ldi	r27, 0x43	; 67
    2ada:	80 83       	st	Z, r24
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	a2 83       	std	Z+2, r26	; 0x02
    2ae0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	05 5a       	subi	r16, 0xA5	; 165
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e1 5a       	subi	r30, 0xA1	; 161
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a ef       	ldi	r20, 0xFA	; 250
    2afc:	54 e4       	ldi	r21, 0x44	; 68
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	f8 01       	movw	r30, r16
    2b08:	80 83       	st	Z, r24
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	a2 83       	std	Z+2, r26	; 0x02
    2b0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b10:	fe 01       	movw	r30, r28
    2b12:	e5 5a       	subi	r30, 0xA5	; 165
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	44 f4       	brge	.+16     	; 0x2b3e <main+0xe24>
		__ticks = 1;
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e7 5a       	subi	r30, 0xA7	; 167
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    2b3c:	64 c0       	rjmp	.+200    	; 0x2c06 <main+0xeec>
	else if (__tmp > 65535)
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e5 5a       	subi	r30, 0xA5	; 165
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	0c f0       	brlt	.+2      	; 0x2b5e <main+0xe44>
    2b5c:	43 c0       	rjmp	.+134    	; 0x2be4 <main+0xeca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e1 5a       	subi	r30, 0xA1	; 161
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8e 01       	movw	r16, r28
    2b7e:	07 5a       	subi	r16, 0xA7	; 167
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	f8 01       	movw	r30, r16
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	1f c0       	rjmp	.+62     	; 0x2bd4 <main+0xeba>
    2b96:	fe 01       	movw	r30, r28
    2b98:	e9 5a       	subi	r30, 0xA9	; 169
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	88 ec       	ldi	r24, 0xC8	; 200
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e9 5a       	subi	r30, 0xA9	; 169
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <main+0xe94>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e9 5a       	subi	r30, 0xA9	; 169
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbc:	de 01       	movw	r26, r28
    2bbe:	a7 5a       	subi	r26, 0xA7	; 167
    2bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e7 5a       	subi	r30, 0xA7	; 167
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	9c 93       	st	X, r25
    2bd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e7 5a       	subi	r30, 0xA7	; 167
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	d1 f6       	brne	.-76     	; 0x2b96 <main+0xe7c>
    2be2:	ae c8       	rjmp	.-3748   	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be4:	8e 01       	movw	r16, r28
    2be6:	07 5a       	subi	r16, 0xA7	; 167
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	e5 5a       	subi	r30, 0xA5	; 165
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	f8 01       	movw	r30, r16
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
    2c06:	de 01       	movw	r26, r28
    2c08:	ab 5a       	subi	r26, 0xAB	; 171
    2c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e7 5a       	subi	r30, 0xA7	; 167
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	91 81       	ldd	r25, Z+1	; 0x01
    2c16:	11 96       	adiw	r26, 0x01	; 1
    2c18:	9c 93       	st	X, r25
    2c1a:	8e 93       	st	-X, r24
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	eb 5a       	subi	r30, 0xAB	; 171
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <main+0xf0c>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	eb 5a       	subi	r30, 0xAB	; 171
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
    2c34:	85 c8       	rjmp	.-3830   	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '9')
    2c36:	fe 01       	movw	r30, r28
    2c38:	ef 51       	subi	r30, 0x1F	; 31
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	89 33       	cpi	r24, 0x39	; 57
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <main+0xf2a>
    2c42:	ba c0       	rjmp	.+372    	; 0x2db8 <main+0x109e>
		{
			TIMERS_voidTimer0SetCompareMatchValue(176);
    2c44:	80 eb       	ldi	r24, 0xB0	; 176
    2c46:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	ef 5a       	subi	r30, 0xAF	; 175
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	a8 e4       	ldi	r26, 0x48	; 72
    2c56:	b3 e4       	ldi	r27, 0x43	; 67
    2c58:	80 83       	st	Z, r24
    2c5a:	91 83       	std	Z+1, r25	; 0x01
    2c5c:	a2 83       	std	Z+2, r26	; 0x02
    2c5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c60:	8e 01       	movw	r16, r28
    2c62:	03 5b       	subi	r16, 0xB3	; 179
    2c64:	1f 4f       	sbci	r17, 0xFF	; 255
    2c66:	fe 01       	movw	r30, r28
    2c68:	ef 5a       	subi	r30, 0xAF	; 175
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	4a ef       	ldi	r20, 0xFA	; 250
    2c7a:	54 e4       	ldi	r21, 0x44	; 68
    2c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	f8 01       	movw	r30, r16
    2c86:	80 83       	st	Z, r24
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	a2 83       	std	Z+2, r26	; 0x02
    2c8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e3 5b       	subi	r30, 0xB3	; 179
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	60 81       	ld	r22, Z
    2c96:	71 81       	ldd	r23, Z+1	; 0x01
    2c98:	82 81       	ldd	r24, Z+2	; 0x02
    2c9a:	93 81       	ldd	r25, Z+3	; 0x03
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca8:	88 23       	and	r24, r24
    2caa:	44 f4       	brge	.+16     	; 0x2cbc <main+0xfa2>
		__ticks = 1;
    2cac:	fe 01       	movw	r30, r28
    2cae:	e5 5b       	subi	r30, 0xB5	; 181
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24
    2cba:	65 c0       	rjmp	.+202    	; 0x2d86 <main+0x106c>
	else if (__tmp > 65535)
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e3 5b       	subi	r30, 0xB3	; 179
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	57 e4       	ldi	r21, 0x47	; 71
    2cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	0c f0       	brlt	.+2      	; 0x2cdc <main+0xfc2>
    2cda:	44 c0       	rjmp	.+136    	; 0x2d64 <main+0x104a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ef 5a       	subi	r30, 0xAF	; 175
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	60 81       	ld	r22, Z
    2ce4:	71 81       	ldd	r23, Z+1	; 0x01
    2ce6:	82 81       	ldd	r24, Z+2	; 0x02
    2ce8:	93 81       	ldd	r25, Z+3	; 0x03
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	8e 01       	movw	r16, r28
    2cfc:	05 5b       	subi	r16, 0xB5	; 181
    2cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2d00:	bc 01       	movw	r22, r24
    2d02:	cd 01       	movw	r24, r26
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
    2d12:	1f c0       	rjmp	.+62     	; 0x2d52 <main+0x1038>
    2d14:	fe 01       	movw	r30, r28
    2d16:	e7 5b       	subi	r30, 0xB7	; 183
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	88 ec       	ldi	r24, 0xC8	; 200
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	91 83       	std	Z+1, r25	; 0x01
    2d20:	80 83       	st	Z, r24
    2d22:	fe 01       	movw	r30, r28
    2d24:	e7 5b       	subi	r30, 0xB7	; 183
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <main+0x1012>
    2d30:	fe 01       	movw	r30, r28
    2d32:	e7 5b       	subi	r30, 0xB7	; 183
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	de 01       	movw	r26, r28
    2d3c:	a5 5b       	subi	r26, 0xB5	; 181
    2d3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d40:	fe 01       	movw	r30, r28
    2d42:	e5 5b       	subi	r30, 0xB5	; 181
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	11 96       	adiw	r26, 0x01	; 1
    2d4e:	9c 93       	st	X, r25
    2d50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d52:	fe 01       	movw	r30, r28
    2d54:	e5 5b       	subi	r30, 0xB5	; 181
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	d1 f6       	brne	.-76     	; 0x2d14 <main+0xffa>
    2d60:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	8e 01       	movw	r16, r28
    2d66:	05 5b       	subi	r16, 0xB5	; 181
    2d68:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e3 5b       	subi	r30, 0xB3	; 179
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	60 81       	ld	r22, Z
    2d72:	71 81       	ldd	r23, Z+1	; 0x01
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	f8 01       	movw	r30, r16
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	80 83       	st	Z, r24
    2d86:	de 01       	movw	r26, r28
    2d88:	a9 5b       	subi	r26, 0xB9	; 185
    2d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e5 5b       	subi	r30, 0xB5	; 181
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	80 81       	ld	r24, Z
    2d94:	91 81       	ldd	r25, Z+1	; 0x01
    2d96:	11 96       	adiw	r26, 0x01	; 1
    2d98:	9c 93       	st	X, r25
    2d9a:	8e 93       	st	-X, r24
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e9 5b       	subi	r30, 0xB9	; 185
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <main+0x108c>
    2daa:	fe 01       	movw	r30, r28
    2dac:	e9 5b       	subi	r30, 0xB9	; 185
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
    2db4:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '*')
    2db8:	fe 01       	movw	r30, r28
    2dba:	ef 51       	subi	r30, 0x1F	; 31
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8a 32       	cpi	r24, 0x2A	; 42
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <main+0x10ac>
    2dc4:	8b c0       	rjmp	.+278    	; 0x2edc <main+0x11c2>
		{
			TIMERS_voidTimer0SetCompareMatchValue(223);
    2dc6:	8f ed       	ldi	r24, 0xDF	; 223
    2dc8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ed 5b       	subi	r30, 0xBD	; 189
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	a8 e4       	ldi	r26, 0x48	; 72
    2dd8:	b3 e4       	ldi	r27, 0x43	; 67
    2dda:	80 83       	st	Z, r24
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	a2 83       	std	Z+2, r26	; 0x02
    2de0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de2:	8e 01       	movw	r16, r28
    2de4:	01 5c       	subi	r16, 0xC1	; 193
    2de6:	1f 4f       	sbci	r17, 0xFF	; 255
    2de8:	fe 01       	movw	r30, r28
    2dea:	ed 5b       	subi	r30, 0xBD	; 189
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	4a ef       	ldi	r20, 0xFA	; 250
    2dfc:	54 e4       	ldi	r21, 0x44	; 68
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	80 83       	st	Z, r24
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	a2 83       	std	Z+2, r26	; 0x02
    2e0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e10:	fe 01       	movw	r30, r28
    2e12:	ff 96       	adiw	r30, 0x3f	; 63
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e8       	ldi	r20, 0x80	; 128
    2e22:	5f e3       	ldi	r21, 0x3F	; 63
    2e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e28:	88 23       	and	r24, r24
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <main+0x111c>
		__ticks = 1;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9e af       	std	Y+62, r25	; 0x3e
    2e32:	8d af       	std	Y+61, r24	; 0x3d
    2e34:	47 c0       	rjmp	.+142    	; 0x2ec4 <main+0x11aa>
	else if (__tmp > 65535)
    2e36:	fe 01       	movw	r30, r28
    2e38:	ff 96       	adiw	r30, 0x3f	; 63
    2e3a:	60 81       	ld	r22, Z
    2e3c:	71 81       	ldd	r23, Z+1	; 0x01
    2e3e:	82 81       	ldd	r24, Z+2	; 0x02
    2e40:	93 81       	ldd	r25, Z+3	; 0x03
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	3f ef       	ldi	r19, 0xFF	; 255
    2e46:	4f e7       	ldi	r20, 0x7F	; 127
    2e48:	57 e4       	ldi	r21, 0x47	; 71
    2e4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e4e:	18 16       	cp	r1, r24
    2e50:	6c f5       	brge	.+90     	; 0x2eac <main+0x1192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e52:	fe 01       	movw	r30, r28
    2e54:	ed 5b       	subi	r30, 0xBD	; 189
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	60 81       	ld	r22, Z
    2e5a:	71 81       	ldd	r23, Z+1	; 0x01
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e af       	std	Y+62, r25	; 0x3e
    2e7e:	8d af       	std	Y+61, r24	; 0x3d
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <main+0x1186>
    2e82:	88 ec       	ldi	r24, 0xC8	; 200
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9c af       	std	Y+60, r25	; 0x3c
    2e88:	8b af       	std	Y+59, r24	; 0x3b
    2e8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <main+0x1174>
    2e92:	9c af       	std	Y+60, r25	; 0x3c
    2e94:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e98:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9e af       	std	Y+62, r25	; 0x3e
    2e9e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <main+0x1168>
    2ea8:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eac:	fe 01       	movw	r30, r28
    2eae:	ff 96       	adiw	r30, 0x3f	; 63
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	9e af       	std	Y+62, r25	; 0x3e
    2ec2:	8d af       	std	Y+61, r24	; 0x3d
    2ec4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ec6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ec8:	9a af       	std	Y+58, r25	; 0x3a
    2eca:	89 af       	std	Y+57, r24	; 0x39
    2ecc:	89 ad       	ldd	r24, Y+57	; 0x39
    2ece:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <main+0x11b6>
    2ed4:	9a af       	std	Y+58, r25	; 0x3a
    2ed6:	89 af       	std	Y+57, r24	; 0x39
    2ed8:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '0')
    2edc:	fe 01       	movw	r30, r28
    2ede:	ef 51       	subi	r30, 0x1F	; 31
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	80 81       	ld	r24, Z
    2ee4:	80 33       	cpi	r24, 0x30	; 48
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <main+0x11d0>
    2ee8:	78 c0       	rjmp	.+240    	; 0x2fda <main+0x12c0>
		{
			TIMERS_voidTimer0SetCompareMatchValue(208);
    2eea:	80 ed       	ldi	r24, 0xD0	; 208
    2eec:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	a8 e4       	ldi	r26, 0x48	; 72
    2ef6:	b3 e4       	ldi	r27, 0x43	; 67
    2ef8:	8d ab       	std	Y+53, r24	; 0x35
    2efa:	9e ab       	std	Y+54, r25	; 0x36
    2efc:	af ab       	std	Y+55, r26	; 0x37
    2efe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f00:	6d a9       	ldd	r22, Y+53	; 0x35
    2f02:	7e a9       	ldd	r23, Y+54	; 0x36
    2f04:	8f a9       	ldd	r24, Y+55	; 0x37
    2f06:	98 ad       	ldd	r25, Y+56	; 0x38
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4a ef       	ldi	r20, 0xFA	; 250
    2f0e:	54 e4       	ldi	r21, 0x44	; 68
    2f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	89 ab       	std	Y+49, r24	; 0x31
    2f1a:	9a ab       	std	Y+50, r25	; 0x32
    2f1c:	ab ab       	std	Y+51, r26	; 0x33
    2f1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f20:	69 a9       	ldd	r22, Y+49	; 0x31
    2f22:	7a a9       	ldd	r23, Y+50	; 0x32
    2f24:	8b a9       	ldd	r24, Y+51	; 0x33
    2f26:	9c a9       	ldd	r25, Y+52	; 0x34
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e8       	ldi	r20, 0x80	; 128
    2f2e:	5f e3       	ldi	r21, 0x3F	; 63
    2f30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f34:	88 23       	and	r24, r24
    2f36:	2c f4       	brge	.+10     	; 0x2f42 <main+0x1228>
		__ticks = 1;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	98 ab       	std	Y+48, r25	; 0x30
    2f3e:	8f a7       	std	Y+47, r24	; 0x2f
    2f40:	40 c0       	rjmp	.+128    	; 0x2fc2 <main+0x12a8>
	else if (__tmp > 65535)
    2f42:	69 a9       	ldd	r22, Y+49	; 0x31
    2f44:	7a a9       	ldd	r23, Y+50	; 0x32
    2f46:	8b a9       	ldd	r24, Y+51	; 0x33
    2f48:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	3f ef       	ldi	r19, 0xFF	; 255
    2f4e:	4f e7       	ldi	r20, 0x7F	; 127
    2f50:	57 e4       	ldi	r21, 0x47	; 71
    2f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	54 f5       	brge	.+84     	; 0x2fae <main+0x1294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f60:	98 ad       	ldd	r25, Y+56	; 0x38
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e2       	ldi	r20, 0x20	; 32
    2f68:	51 e4       	ldi	r21, 0x41	; 65
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	98 ab       	std	Y+48, r25	; 0x30
    2f80:	8f a7       	std	Y+47, r24	; 0x2f
    2f82:	0f c0       	rjmp	.+30     	; 0x2fa2 <main+0x1288>
    2f84:	88 ec       	ldi	r24, 0xC8	; 200
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	9e a7       	std	Y+46, r25	; 0x2e
    2f8a:	8d a7       	std	Y+45, r24	; 0x2d
    2f8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <main+0x1276>
    2f94:	9e a7       	std	Y+46, r25	; 0x2e
    2f96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	98 ab       	std	Y+48, r25	; 0x30
    2fa0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	69 f7       	brne	.-38     	; 0x2f84 <main+0x126a>
    2faa:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	98 ab       	std	Y+48, r25	; 0x30
    2fc0:	8f a7       	std	Y+47, r24	; 0x2f
    2fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc6:	9c a7       	std	Y+44, r25	; 0x2c
    2fc8:	8b a7       	std	Y+43, r24	; 0x2b
    2fca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <main+0x12b4>
    2fd2:	9c a7       	std	Y+44, r25	; 0x2c
    2fd4:	8b a7       	std	Y+43, r24	; 0x2b
    2fd6:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '=')
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ef 51       	subi	r30, 0x1F	; 31
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	8d 33       	cpi	r24, 0x3D	; 61
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <main+0x12ce>
    2fe6:	78 c0       	rjmp	.+240    	; 0x30d8 <main+0x13be>
		{
			TIMERS_voidTimer0SetCompareMatchValue(132);
    2fe8:	84 e8       	ldi	r24, 0x84	; 132
    2fea:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	a8 e4       	ldi	r26, 0x48	; 72
    2ff4:	b3 e4       	ldi	r27, 0x43	; 67
    2ff6:	8f a3       	std	Y+39, r24	; 0x27
    2ff8:	98 a7       	std	Y+40, r25	; 0x28
    2ffa:	a9 a7       	std	Y+41, r26	; 0x29
    2ffc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffe:	6f a1       	ldd	r22, Y+39	; 0x27
    3000:	78 a5       	ldd	r23, Y+40	; 0x28
    3002:	89 a5       	ldd	r24, Y+41	; 0x29
    3004:	9a a5       	ldd	r25, Y+42	; 0x2a
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	4a ef       	ldi	r20, 0xFA	; 250
    300c:	54 e4       	ldi	r21, 0x44	; 68
    300e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	8b a3       	std	Y+35, r24	; 0x23
    3018:	9c a3       	std	Y+36, r25	; 0x24
    301a:	ad a3       	std	Y+37, r26	; 0x25
    301c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    301e:	6b a1       	ldd	r22, Y+35	; 0x23
    3020:	7c a1       	ldd	r23, Y+36	; 0x24
    3022:	8d a1       	ldd	r24, Y+37	; 0x25
    3024:	9e a1       	ldd	r25, Y+38	; 0x26
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e8       	ldi	r20, 0x80	; 128
    302c:	5f e3       	ldi	r21, 0x3F	; 63
    302e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3032:	88 23       	and	r24, r24
    3034:	2c f4       	brge	.+10     	; 0x3040 <main+0x1326>
		__ticks = 1;
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9a a3       	std	Y+34, r25	; 0x22
    303c:	89 a3       	std	Y+33, r24	; 0x21
    303e:	40 c0       	rjmp	.+128    	; 0x30c0 <main+0x13a6>
	else if (__tmp > 65535)
    3040:	6b a1       	ldd	r22, Y+35	; 0x23
    3042:	7c a1       	ldd	r23, Y+36	; 0x24
    3044:	8d a1       	ldd	r24, Y+37	; 0x25
    3046:	9e a1       	ldd	r25, Y+38	; 0x26
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	3f ef       	ldi	r19, 0xFF	; 255
    304c:	4f e7       	ldi	r20, 0x7F	; 127
    304e:	57 e4       	ldi	r21, 0x47	; 71
    3050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3054:	18 16       	cp	r1, r24
    3056:	54 f5       	brge	.+84     	; 0x30ac <main+0x1392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3058:	6f a1       	ldd	r22, Y+39	; 0x27
    305a:	78 a5       	ldd	r23, Y+40	; 0x28
    305c:	89 a5       	ldd	r24, Y+41	; 0x29
    305e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e2       	ldi	r20, 0x20	; 32
    3066:	51 e4       	ldi	r21, 0x41	; 65
    3068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	9a a3       	std	Y+34, r25	; 0x22
    307e:	89 a3       	std	Y+33, r24	; 0x21
    3080:	0f c0       	rjmp	.+30     	; 0x30a0 <main+0x1386>
    3082:	88 ec       	ldi	r24, 0xC8	; 200
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	98 a3       	std	Y+32, r25	; 0x20
    3088:	8f 8f       	std	Y+31, r24	; 0x1f
    308a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    308c:	98 a1       	ldd	r25, Y+32	; 0x20
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <main+0x1374>
    3092:	98 a3       	std	Y+32, r25	; 0x20
    3094:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3096:	89 a1       	ldd	r24, Y+33	; 0x21
    3098:	9a a1       	ldd	r25, Y+34	; 0x22
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	9a a3       	std	Y+34, r25	; 0x22
    309e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a0:	89 a1       	ldd	r24, Y+33	; 0x21
    30a2:	9a a1       	ldd	r25, Y+34	; 0x22
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	69 f7       	brne	.-38     	; 0x3082 <main+0x1368>
    30a8:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ac:	6b a1       	ldd	r22, Y+35	; 0x23
    30ae:	7c a1       	ldd	r23, Y+36	; 0x24
    30b0:	8d a1       	ldd	r24, Y+37	; 0x25
    30b2:	9e a1       	ldd	r25, Y+38	; 0x26
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	9a a3       	std	Y+34, r25	; 0x22
    30be:	89 a3       	std	Y+33, r24	; 0x21
    30c0:	89 a1       	ldd	r24, Y+33	; 0x21
    30c2:	9a a1       	ldd	r25, Y+34	; 0x22
    30c4:	9e 8f       	std	Y+30, r25	; 0x1e
    30c6:	8d 8f       	std	Y+29, r24	; 0x1d
    30c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <main+0x13b2>
    30d0:	9e 8f       	std	Y+30, r25	; 0x1e
    30d2:	8d 8f       	std	Y+29, r24	; 0x1d
    30d4:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '/')
    30d8:	fe 01       	movw	r30, r28
    30da:	ef 51       	subi	r30, 0x1F	; 31
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	80 81       	ld	r24, Z
    30e0:	8f 32       	cpi	r24, 0x2F	; 47
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <main+0x13cc>
    30e4:	78 c0       	rjmp	.+240    	; 0x31d6 <main+0x14bc>
		{
			TIMERS_voidTimer0SetCompareMatchValue(78);
    30e6:	8e e4       	ldi	r24, 0x4E	; 78
    30e8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	a8 e4       	ldi	r26, 0x48	; 72
    30f2:	b3 e4       	ldi	r27, 0x43	; 67
    30f4:	89 8f       	std	Y+25, r24	; 0x19
    30f6:	9a 8f       	std	Y+26, r25	; 0x1a
    30f8:	ab 8f       	std	Y+27, r26	; 0x1b
    30fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	69 8d       	ldd	r22, Y+25	; 0x19
    30fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3100:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3102:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a ef       	ldi	r20, 0xFA	; 250
    310a:	54 e4       	ldi	r21, 0x44	; 68
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	8d 8b       	std	Y+21, r24	; 0x15
    3116:	9e 8b       	std	Y+22, r25	; 0x16
    3118:	af 8b       	std	Y+23, r26	; 0x17
    311a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    311c:	6d 89       	ldd	r22, Y+21	; 0x15
    311e:	7e 89       	ldd	r23, Y+22	; 0x16
    3120:	8f 89       	ldd	r24, Y+23	; 0x17
    3122:	98 8d       	ldd	r25, Y+24	; 0x18
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e8       	ldi	r20, 0x80	; 128
    312a:	5f e3       	ldi	r21, 0x3F	; 63
    312c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3130:	88 23       	and	r24, r24
    3132:	2c f4       	brge	.+10     	; 0x313e <main+0x1424>
		__ticks = 1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9c 8b       	std	Y+20, r25	; 0x14
    313a:	8b 8b       	std	Y+19, r24	; 0x13
    313c:	40 c0       	rjmp	.+128    	; 0x31be <main+0x14a4>
	else if (__tmp > 65535)
    313e:	6d 89       	ldd	r22, Y+21	; 0x15
    3140:	7e 89       	ldd	r23, Y+22	; 0x16
    3142:	8f 89       	ldd	r24, Y+23	; 0x17
    3144:	98 8d       	ldd	r25, Y+24	; 0x18
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	3f ef       	ldi	r19, 0xFF	; 255
    314a:	4f e7       	ldi	r20, 0x7F	; 127
    314c:	57 e4       	ldi	r21, 0x47	; 71
    314e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3152:	18 16       	cp	r1, r24
    3154:	54 f5       	brge	.+84     	; 0x31aa <main+0x1490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3156:	69 8d       	ldd	r22, Y+25	; 0x19
    3158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    315a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    315c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e2       	ldi	r20, 0x20	; 32
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9c 8b       	std	Y+20, r25	; 0x14
    317c:	8b 8b       	std	Y+19, r24	; 0x13
    317e:	0f c0       	rjmp	.+30     	; 0x319e <main+0x1484>
    3180:	88 ec       	ldi	r24, 0xC8	; 200
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9a 8b       	std	Y+18, r25	; 0x12
    3186:	89 8b       	std	Y+17, r24	; 0x11
    3188:	89 89       	ldd	r24, Y+17	; 0x11
    318a:	9a 89       	ldd	r25, Y+18	; 0x12
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <main+0x1472>
    3190:	9a 8b       	std	Y+18, r25	; 0x12
    3192:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3194:	8b 89       	ldd	r24, Y+19	; 0x13
    3196:	9c 89       	ldd	r25, Y+20	; 0x14
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	9c 8b       	std	Y+20, r25	; 0x14
    319c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319e:	8b 89       	ldd	r24, Y+19	; 0x13
    31a0:	9c 89       	ldd	r25, Y+20	; 0x14
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	69 f7       	brne	.-38     	; 0x3180 <main+0x1466>
    31a6:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31aa:	6d 89       	ldd	r22, Y+21	; 0x15
    31ac:	7e 89       	ldd	r23, Y+22	; 0x16
    31ae:	8f 89       	ldd	r24, Y+23	; 0x17
    31b0:	98 8d       	ldd	r25, Y+24	; 0x18
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9c 8b       	std	Y+20, r25	; 0x14
    31bc:	8b 8b       	std	Y+19, r24	; 0x13
    31be:	8b 89       	ldd	r24, Y+19	; 0x13
    31c0:	9c 89       	ldd	r25, Y+20	; 0x14
    31c2:	98 8b       	std	Y+16, r25	; 0x10
    31c4:	8f 87       	std	Y+15, r24	; 0x0f
    31c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c8:	98 89       	ldd	r25, Y+16	; 0x10
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <main+0x14b0>
    31ce:	98 8b       	std	Y+16, r25	; 0x10
    31d0:	8f 87       	std	Y+15, r24	; 0x0f
    31d2:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else if(Local_u8KeyValue == '%')
    31d6:	fe 01       	movw	r30, r28
    31d8:	ef 51       	subi	r30, 0x1F	; 31
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	85 32       	cpi	r24, 0x25	; 37
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <main+0x14ca>
    31e2:	78 c0       	rjmp	.+240    	; 0x32d4 <main+0x15ba>
		{
			TIMERS_voidTimer0SetCompareMatchValue(255);
    31e4:	8f ef       	ldi	r24, 0xFF	; 255
    31e6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	a8 e4       	ldi	r26, 0x48	; 72
    31f0:	b3 e4       	ldi	r27, 0x43	; 67
    31f2:	8b 87       	std	Y+11, r24	; 0x0b
    31f4:	9c 87       	std	Y+12, r25	; 0x0c
    31f6:	ad 87       	std	Y+13, r26	; 0x0d
    31f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    31fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3200:	9e 85       	ldd	r25, Y+14	; 0x0e
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	4a ef       	ldi	r20, 0xFA	; 250
    3208:	54 e4       	ldi	r21, 0x44	; 68
    320a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	8f 83       	std	Y+7, r24	; 0x07
    3214:	98 87       	std	Y+8, r25	; 0x08
    3216:	a9 87       	std	Y+9, r26	; 0x09
    3218:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    322e:	88 23       	and	r24, r24
    3230:	2c f4       	brge	.+10     	; 0x323c <main+0x1522>
		__ticks = 1;
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
    323a:	40 c0       	rjmp	.+128    	; 0x32bc <main+0x15a2>
	else if (__tmp > 65535)
    323c:	6f 81       	ldd	r22, Y+7	; 0x07
    323e:	78 85       	ldd	r23, Y+8	; 0x08
    3240:	89 85       	ldd	r24, Y+9	; 0x09
    3242:	9a 85       	ldd	r25, Y+10	; 0x0a
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	3f ef       	ldi	r19, 0xFF	; 255
    3248:	4f e7       	ldi	r20, 0x7F	; 127
    324a:	57 e4       	ldi	r21, 0x47	; 71
    324c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3250:	18 16       	cp	r1, r24
    3252:	54 f5       	brge	.+84     	; 0x32a8 <main+0x158e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3254:	6b 85       	ldd	r22, Y+11	; 0x0b
    3256:	7c 85       	ldd	r23, Y+12	; 0x0c
    3258:	8d 85       	ldd	r24, Y+13	; 0x0d
    325a:	9e 85       	ldd	r25, Y+14	; 0x0e
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e2       	ldi	r20, 0x20	; 32
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	9e 83       	std	Y+6, r25	; 0x06
    327a:	8d 83       	std	Y+5, r24	; 0x05
    327c:	0f c0       	rjmp	.+30     	; 0x329c <main+0x1582>
    327e:	88 ec       	ldi	r24, 0xC8	; 200
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9c 83       	std	Y+4, r25	; 0x04
    3284:	8b 83       	std	Y+3, r24	; 0x03
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <main+0x1570>
    328e:	9c 83       	std	Y+4, r25	; 0x04
    3290:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	69 f7       	brne	.-38     	; 0x327e <main+0x1564>
    32a4:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a8:	6f 81       	ldd	r22, Y+7	; 0x07
    32aa:	78 85       	ldd	r23, Y+8	; 0x08
    32ac:	89 85       	ldd	r24, Y+9	; 0x09
    32ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	9e 83       	std	Y+6, r25	; 0x06
    32ba:	8d 83       	std	Y+5, r24	; 0x05
    32bc:	8d 81       	ldd	r24, Y+5	; 0x05
    32be:	9e 81       	ldd	r25, Y+6	; 0x06
    32c0:	9a 83       	std	Y+2, r25	; 0x02
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	9a 81       	ldd	r25, Y+2	; 0x02
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <main+0x15ae>
    32cc:	9a 83       	std	Y+2, r25	; 0x02
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>
			_delay_ms(200);
		}
		else
		{
			TIMERS_voidTimer0SetCompareMatchValue(0);
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TIMERS_voidTimer0SetCompareMatchValue>
    32da:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <main+0x26>

000032de <__prologue_saves__>:
    32de:	2f 92       	push	r2
    32e0:	3f 92       	push	r3
    32e2:	4f 92       	push	r4
    32e4:	5f 92       	push	r5
    32e6:	6f 92       	push	r6
    32e8:	7f 92       	push	r7
    32ea:	8f 92       	push	r8
    32ec:	9f 92       	push	r9
    32ee:	af 92       	push	r10
    32f0:	bf 92       	push	r11
    32f2:	cf 92       	push	r12
    32f4:	df 92       	push	r13
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	ca 1b       	sub	r28, r26
    3308:	db 0b       	sbc	r29, r27
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	09 94       	ijmp

00003316 <__epilogue_restores__>:
    3316:	2a 88       	ldd	r2, Y+18	; 0x12
    3318:	39 88       	ldd	r3, Y+17	; 0x11
    331a:	48 88       	ldd	r4, Y+16	; 0x10
    331c:	5f 84       	ldd	r5, Y+15	; 0x0f
    331e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3320:	7d 84       	ldd	r7, Y+13	; 0x0d
    3322:	8c 84       	ldd	r8, Y+12	; 0x0c
    3324:	9b 84       	ldd	r9, Y+11	; 0x0b
    3326:	aa 84       	ldd	r10, Y+10	; 0x0a
    3328:	b9 84       	ldd	r11, Y+9	; 0x09
    332a:	c8 84       	ldd	r12, Y+8	; 0x08
    332c:	df 80       	ldd	r13, Y+7	; 0x07
    332e:	ee 80       	ldd	r14, Y+6	; 0x06
    3330:	fd 80       	ldd	r15, Y+5	; 0x05
    3332:	0c 81       	ldd	r16, Y+4	; 0x04
    3334:	1b 81       	ldd	r17, Y+3	; 0x03
    3336:	aa 81       	ldd	r26, Y+2	; 0x02
    3338:	b9 81       	ldd	r27, Y+1	; 0x01
    333a:	ce 0f       	add	r28, r30
    333c:	d1 1d       	adc	r29, r1
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	ed 01       	movw	r28, r26
    334a:	08 95       	ret

0000334c <_exit>:
    334c:	f8 94       	cli

0000334e <__stop_program>:
    334e:	ff cf       	rjmp	.-2      	; 0x334e <__stop_program>
