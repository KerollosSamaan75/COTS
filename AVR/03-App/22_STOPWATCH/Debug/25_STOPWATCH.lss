
25_STOPWATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00002934  000029c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800094  00800094  000029fc  2**0
                  ALLOC
  3 .stab         00002184  00000000  00000000  000029fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf1  00000000  00000000  00004b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005871  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000059d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 14 	call	0x283c	; 0x283c <main>
      8a:	0c 94 98 14 	jmp	0x2930	; 0x2930 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 85 14 	jmp	0x290a	; 0x290a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*Intial PINS Direction*/ 
	DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION , DIO_u8_PA6_INTIAL_DIRECTION , DIO_u8_PA5_INTIAL_DIRECTION ,  DIO_u8_PA4_INTIAL_DIRECTION, 
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
	                       DIO_u8_PA3_INTIAL_DIRECTION , DIO_u8_PA2_INTIAL_DIRECTION , DIO_u8_PA1_INTIAL_DIRECTION ,  DIO_u8_PA0_INTIAL_DIRECTION );
    
	DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION , DIO_u8_PB6_INTIAL_DIRECTION , DIO_u8_PB5_INTIAL_DIRECTION ,  DIO_u8_PB4_INTIAL_DIRECTION , 
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	10 82       	st	Z, r1
			       DIO_u8_PB3_INTIAL_DIRECTION , DIO_u8_PB2_INTIAL_DIRECTION , DIO_u8_PB1_INTIAL_DIRECTION ,  DIO_u8_PB0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION , DIO_u8_PC6_INTIAL_DIRECTION , DIO_u8_PC5_INTIAL_DIRECTION ,  DIO_u8_PC4_INTIAL_DIRECTION ,
     cb2:	e4 e3       	ldi	r30, 0x34	; 52
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1
			       DIO_u8_PC3_INTIAL_DIRECTION , DIO_u8_PC2_INTIAL_DIRECTION , DIO_u8_PC1_INTIAL_DIRECTION ,  DIO_u8_PC0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION , DIO_u8_PD6_INTIAL_DIRECTION , DIO_u8_PD5_INTIAL_DIRECTION ,  DIO_u8_PD4_INTIAL_DIRECTION , 
     cb8:	e1 e3       	ldi	r30, 0x31	; 49
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1
			       DIO_u8_PD3_INTIAL_DIRECTION , DIO_u8_PD2_INTIAL_DIRECTION , DIO_u8_PD1_INTIAL_DIRECTION ,  DIO_u8_PD0_INTIAL_DIRECTION );
						  
						  
	/*Intial PINS Value*/
        DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE     , DIO_u8_PA6_INTIAL_VALUE     , DIO_u8_PA5_INTIAL_VALUE ,      DIO_u8_PA4_INTIAL_VALUE , 
     cbe:	eb e3       	ldi	r30, 0x3B	; 59
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
				DIO_u8_PA3_INTIAL_VALUE     , DIO_u8_PA2_INTIAL_VALUE     , DIO_u8_PA1_INTIAL_VALUE ,      DIO_u8_PA0_INTIAL_VALUE);                  
                                                                                   
	DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE     , DIO_u8_PB6_INTIAL_VALUE     , DIO_u8_PB5_INTIAL_VALUE ,      DIO_u8_PB4_INTIAL_VALUE ,
     cc4:	e8 e3       	ldi	r30, 0x38	; 56
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
				DIO_u8_PB3_INTIAL_VALUE     , DIO_u8_PB2_INTIAL_VALUE     , DIO_u8_PB1_INTIAL_VALUE ,      DIO_u8_PB0_INTIAL_VALUE);                  
					                                                                  
	DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE     , DIO_u8_PC6_INTIAL_VALUE     , DIO_u8_PC5_INTIAL_VALUE ,      DIO_u8_PC4_INTIAL_VALUE , 
     cca:	e5 e3       	ldi	r30, 0x35	; 53
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	10 82       	st	Z, r1
				DIO_u8_PC3_INTIAL_VALUE     , DIO_u8_PC2_INTIAL_VALUE     , DIO_u8_PC1_INTIAL_VALUE ,      DIO_u8_PC0_INTIAL_VALUE);                  
					                                                                 
	DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE     , DIO_u8_PD6_INTIAL_VALUE     , DIO_u8_PD5_INTIAL_VALUE ,      DIO_u8_PD4_INTIAL_VALUE , 
     cd0:	e2 e3       	ldi	r30, 0x32	; 50
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1
				DIO_u8_PD3_INTIAL_VALUE     , DIO_u8_PD2_INTIAL_VALUE     , DIO_u8_PD1_INTIAL_VALUE  ,      DIO_u8_PD0_INTIAL_VALUE);
						                                               
						   
}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection   (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinDirection)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	2e 97       	sbiw	r28, 0x0e	; 14
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	8a 83       	std	Y+2, r24	; 0x02
     cf2:	6b 83       	std	Y+3, r22	; 0x03
     cf4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_PinDirection == DIO_u8_OUTPUT)||(Copy_PinDirection == DIO_u8_INPUT)))
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	84 30       	cpi	r24, 0x04	; 4
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <DIO_u8SetPinDirection+0x26>
     d00:	0c c1       	rjmp	.+536    	; 0xf1a <DIO_u8SetPinDirection+0x23e>
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	88 30       	cpi	r24, 0x08	; 8
     d06:	08 f0       	brcs	.+2      	; 0xd0a <DIO_u8SetPinDirection+0x2e>
     d08:	08 c1       	rjmp	.+528    	; 0xf1a <DIO_u8SetPinDirection+0x23e>
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	21 f0       	breq	.+8      	; 0xd18 <DIO_u8SetPinDirection+0x3c>
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	88 23       	and	r24, r24
     d14:	09 f0       	breq	.+2      	; 0xd18 <DIO_u8SetPinDirection+0x3c>
     d16:	01 c1       	rjmp	.+514    	; 0xf1a <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	3e 87       	std	Y+14, r19	; 0x0e
     d20:	2d 87       	std	Y+13, r18	; 0x0d
     d22:	8d 85       	ldd	r24, Y+13	; 0x0d
     d24:	9e 85       	ldd	r25, Y+14	; 0x0e
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	91 05       	cpc	r25, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <DIO_u8SetPinDirection+0x52>
     d2c:	4f c0       	rjmp	.+158    	; 0xdcc <DIO_u8SetPinDirection+0xf0>
     d2e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d30:	3e 85       	ldd	r19, Y+14	; 0x0e
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	2c f4       	brge	.+10     	; 0xd42 <DIO_u8SetPinDirection+0x66>
     d38:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	71 f0       	breq	.+28     	; 0xd5c <DIO_u8SetPinDirection+0x80>
     d40:	ed c0       	rjmp	.+474    	; 0xf1c <DIO_u8SetPinDirection+0x240>
     d42:	2d 85       	ldd	r18, Y+13	; 0x0d
     d44:	3e 85       	ldd	r19, Y+14	; 0x0e
     d46:	22 30       	cpi	r18, 0x02	; 2
     d48:	31 05       	cpc	r19, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <DIO_u8SetPinDirection+0x72>
     d4c:	77 c0       	rjmp	.+238    	; 0xe3c <DIO_u8SetPinDirection+0x160>
     d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d50:	9e 85       	ldd	r25, Y+14	; 0x0e
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	91 05       	cpc	r25, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_u8SetPinDirection+0x7e>
     d58:	a9 c0       	rjmp	.+338    	; 0xeac <DIO_u8SetPinDirection+0x1d0>
     d5a:	e0 c0       	rjmp	.+448    	; 0xf1c <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch(Copy_PinDirection)
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3c 87       	std	Y+12, r19	; 0x0c
     d64:	2b 87       	std	Y+11, r18	; 0x0b
     d66:	8b 85       	ldd	r24, Y+11	; 0x0b
     d68:	9c 85       	ldd	r25, Y+12	; 0x0c
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	d1 f0       	breq	.+52     	; 0xda2 <DIO_u8SetPinDirection+0xc6>
     d6e:	2b 85       	ldd	r18, Y+11	; 0x0b
     d70:	3c 85       	ldd	r19, Y+12	; 0x0c
     d72:	21 30       	cpi	r18, 0x01	; 1
     d74:	31 05       	cpc	r19, r1
     d76:	09 f0       	breq	.+2      	; 0xd7a <DIO_u8SetPinDirection+0x9e>
     d78:	d1 c0       	rjmp	.+418    	; 0xf1c <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     d7a:	aa e3       	ldi	r26, 0x3A	; 58
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	ea e3       	ldi	r30, 0x3A	; 58
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_u8SetPinDirection+0xbc>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_u8SetPinDirection+0xb8>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	bd c0       	rjmp	.+378    	; 0xf1c <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     da2:	aa e3       	ldi	r26, 0x3A	; 58
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	ea e3       	ldi	r30, 0x3A	; 58
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_u8SetPinDirection+0xe4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_u8SetPinDirection+0xe0>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	a8 c0       	rjmp	.+336    	; 0xf1c <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTB:
				switch(Copy_PinDirection)
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	3a 87       	std	Y+10, r19	; 0x0a
     dd4:	29 87       	std	Y+9, r18	; 0x09
     dd6:	89 85       	ldd	r24, Y+9	; 0x09
     dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	d1 f0       	breq	.+52     	; 0xe12 <DIO_u8SetPinDirection+0x136>
     dde:	29 85       	ldd	r18, Y+9	; 0x09
     de0:	3a 85       	ldd	r19, Y+10	; 0x0a
     de2:	21 30       	cpi	r18, 0x01	; 1
     de4:	31 05       	cpc	r19, r1
     de6:	09 f0       	breq	.+2      	; 0xdea <DIO_u8SetPinDirection+0x10e>
     de8:	99 c0       	rjmp	.+306    	; 0xf1c <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     dea:	a7 e3       	ldi	r26, 0x37	; 55
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e7 e3       	ldi	r30, 0x37	; 55
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_u8SetPinDirection+0x12c>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_u8SetPinDirection+0x128>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	85 c0       	rjmp	.+266    	; 0xf1c <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     e12:	a7 e3       	ldi	r26, 0x37	; 55
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e7 e3       	ldi	r30, 0x37	; 55
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_u8SetPinDirection+0x154>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_u8SetPinDirection+0x150>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	70 c0       	rjmp	.+224    	; 0xf1c <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTC:
				switch(Copy_PinDirection)
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	38 87       	std	Y+8, r19	; 0x08
     e44:	2f 83       	std	Y+7, r18	; 0x07
     e46:	8f 81       	ldd	r24, Y+7	; 0x07
     e48:	98 85       	ldd	r25, Y+8	; 0x08
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	d1 f0       	breq	.+52     	; 0xe82 <DIO_u8SetPinDirection+0x1a6>
     e4e:	2f 81       	ldd	r18, Y+7	; 0x07
     e50:	38 85       	ldd	r19, Y+8	; 0x08
     e52:	21 30       	cpi	r18, 0x01	; 1
     e54:	31 05       	cpc	r19, r1
     e56:	09 f0       	breq	.+2      	; 0xe5a <DIO_u8SetPinDirection+0x17e>
     e58:	61 c0       	rjmp	.+194    	; 0xf1c <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     e5a:	a4 e3       	ldi	r26, 0x34	; 52
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e4 e3       	ldi	r30, 0x34	; 52
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_u8SetPinDirection+0x19c>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_u8SetPinDirection+0x198>
     e7c:	84 2b       	or	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	4d c0       	rjmp	.+154    	; 0xf1c <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     e82:	a4 e3       	ldi	r26, 0x34	; 52
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e4 e3       	ldi	r30, 0x34	; 52
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_u8SetPinDirection+0x1c4>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_u8SetPinDirection+0x1c0>
     ea4:	80 95       	com	r24
     ea6:	84 23       	and	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	38 c0       	rjmp	.+112    	; 0xf1c <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTD:
				switch(Copy_PinDirection)
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	3e 83       	std	Y+6, r19	; 0x06
     eb4:	2d 83       	std	Y+5, r18	; 0x05
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	c9 f0       	breq	.+50     	; 0xef0 <DIO_u8SetPinDirection+0x214>
     ebe:	2d 81       	ldd	r18, Y+5	; 0x05
     ec0:	3e 81       	ldd	r19, Y+6	; 0x06
     ec2:	21 30       	cpi	r18, 0x01	; 1
     ec4:	31 05       	cpc	r19, r1
     ec6:	51 f5       	brne	.+84     	; 0xf1c <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     ec8:	a1 e3       	ldi	r26, 0x31	; 49
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e1 e3       	ldi	r30, 0x31	; 49
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_u8SetPinDirection+0x20a>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_u8SetPinDirection+0x206>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	16 c0       	rjmp	.+44     	; 0xf1c <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     ef0:	a1 e3       	ldi	r26, 0x31	; 49
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e1 e3       	ldi	r30, 0x31	; 49
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_u8SetPinDirection+0x232>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_u8SetPinDirection+0x22e>
     f12:	80 95       	com	r24
     f14:	84 23       	and	r24, r20
     f16:	8c 93       	st	X, r24
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <DIO_u8SetPinDirection+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f1a:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1e:	2e 96       	adiw	r28, 0x0e	; 14
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinValue)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2e 97       	sbiw	r28, 0x0e	; 14
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	6b 83       	std	Y+3, r22	; 0x03
     f48:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	08 f0       	brcs	.+2      	; 0xf56 <DIO_u8SetPinValue+0x26>
     f54:	08 c1       	rjmp	.+528    	; 0x1166 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3e 87       	std	Y+14, r19	; 0x0e
     f5e:	2d 87       	std	Y+13, r18	; 0x0d
     f60:	8d 85       	ldd	r24, Y+13	; 0x0d
     f62:	9e 85       	ldd	r25, Y+14	; 0x0e
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <DIO_u8SetPinValue+0x3c>
     f6a:	50 c0       	rjmp	.+160    	; 0x100c <DIO_u8SetPinValue+0xdc>
     f6c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f6e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	2c f4       	brge	.+10     	; 0xf80 <DIO_u8SetPinValue+0x50>
     f76:	8d 85       	ldd	r24, Y+13	; 0x0d
     f78:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	71 f0       	breq	.+28     	; 0xf9a <DIO_u8SetPinValue+0x6a>
     f7e:	f1 c0       	rjmp	.+482    	; 0x1162 <DIO_u8SetPinValue+0x232>
     f80:	2d 85       	ldd	r18, Y+13	; 0x0d
     f82:	3e 85       	ldd	r19, Y+14	; 0x0e
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	09 f4       	brne	.+2      	; 0xf8c <DIO_u8SetPinValue+0x5c>
     f8a:	79 c0       	rjmp	.+242    	; 0x107e <DIO_u8SetPinValue+0x14e>
     f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_u8SetPinValue+0x68>
     f96:	ac c0       	rjmp	.+344    	; 0x10f0 <DIO_u8SetPinValue+0x1c0>
     f98:	e4 c0       	rjmp	.+456    	; 0x1162 <DIO_u8SetPinValue+0x232>
			{
				case DIO_u8_PORTA:
					switch (Copy_PinValue)
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3c 87       	std	Y+12, r19	; 0x0c
     fa2:	2b 87       	std	Y+11, r18	; 0x0b
     fa4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fa6:	9c 85       	ldd	r25, Y+12	; 0x0c
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	c9 f0       	breq	.+50     	; 0xfde <DIO_u8SetPinValue+0xae>
     fac:	2b 85       	ldd	r18, Y+11	; 0x0b
     fae:	3c 85       	ldd	r19, Y+12	; 0x0c
     fb0:	21 30       	cpi	r18, 0x01	; 1
     fb2:	31 05       	cpc	r19, r1
     fb4:	49 f5       	brne	.+82     	; 0x1008 <DIO_u8SetPinValue+0xd8>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     fb6:	ab e3       	ldi	r26, 0x3B	; 59
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	eb e3       	ldi	r30, 0x3B	; 59
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_u8SetPinValue+0xa4>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_u8SetPinValue+0xa0>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	c5 c0       	rjmp	.+394    	; 0x1168 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     fde:	ab e3       	ldi	r26, 0x3B	; 59
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	eb e3       	ldi	r30, 0x3B	; 59
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_u8SetPinValue+0xcc>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_u8SetPinValue+0xc8>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	b0 c0       	rjmp	.+352    	; 0x1168 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1008:	19 82       	std	Y+1, r1	; 0x01
    100a:	ae c0       	rjmp	.+348    	; 0x1168 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTB:
					switch (Copy_PinValue)
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3a 87       	std	Y+10, r19	; 0x0a
    1014:	29 87       	std	Y+9, r18	; 0x09
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	c9 f0       	breq	.+50     	; 0x1050 <DIO_u8SetPinValue+0x120>
    101e:	29 85       	ldd	r18, Y+9	; 0x09
    1020:	3a 85       	ldd	r19, Y+10	; 0x0a
    1022:	21 30       	cpi	r18, 0x01	; 1
    1024:	31 05       	cpc	r19, r1
    1026:	49 f5       	brne	.+82     	; 0x107a <DIO_u8SetPinValue+0x14a>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    1028:	a8 e3       	ldi	r26, 0x38	; 56
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e8 e3       	ldi	r30, 0x38	; 56
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_u8SetPinValue+0x116>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_u8SetPinValue+0x112>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	8c c0       	rjmp	.+280    	; 0x1168 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    1050:	a8 e3       	ldi	r26, 0x38	; 56
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e3       	ldi	r30, 0x38	; 56
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_u8SetPinValue+0x13e>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_u8SetPinValue+0x13a>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	77 c0       	rjmp	.+238    	; 0x1168 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    107a:	19 82       	std	Y+1, r1	; 0x01
    107c:	75 c0       	rjmp	.+234    	; 0x1168 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTC:
					switch (Copy_PinValue)
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	38 87       	std	Y+8, r19	; 0x08
    1086:	2f 83       	std	Y+7, r18	; 0x07
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	98 85       	ldd	r25, Y+8	; 0x08
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	c9 f0       	breq	.+50     	; 0x10c2 <DIO_u8SetPinValue+0x192>
    1090:	2f 81       	ldd	r18, Y+7	; 0x07
    1092:	38 85       	ldd	r19, Y+8	; 0x08
    1094:	21 30       	cpi	r18, 0x01	; 1
    1096:	31 05       	cpc	r19, r1
    1098:	49 f5       	brne	.+82     	; 0x10ec <DIO_u8SetPinValue+0x1bc>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    109a:	a5 e3       	ldi	r26, 0x35	; 53
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e3       	ldi	r30, 0x35	; 53
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8SetPinValue+0x188>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8SetPinValue+0x184>
    10bc:	84 2b       	or	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	53 c0       	rjmp	.+166    	; 0x1168 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    10c2:	a5 e3       	ldi	r26, 0x35	; 53
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e5 e3       	ldi	r30, 0x35	; 53
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_u8SetPinValue+0x1b0>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_u8SetPinValue+0x1ac>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	3e c0       	rjmp	.+124    	; 0x1168 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    10ec:	19 82       	std	Y+1, r1	; 0x01
    10ee:	3c c0       	rjmp	.+120    	; 0x1168 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTD:
					switch (Copy_PinValue)
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3e 83       	std	Y+6, r19	; 0x06
    10f8:	2d 83       	std	Y+5, r18	; 0x05
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	c9 f0       	breq	.+50     	; 0x1134 <DIO_u8SetPinValue+0x204>
    1102:	2d 81       	ldd	r18, Y+5	; 0x05
    1104:	3e 81       	ldd	r19, Y+6	; 0x06
    1106:	21 30       	cpi	r18, 0x01	; 1
    1108:	31 05       	cpc	r19, r1
    110a:	49 f5       	brne	.+82     	; 0x115e <DIO_u8SetPinValue+0x22e>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    110c:	a2 e3       	ldi	r26, 0x32	; 50
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e2 e3       	ldi	r30, 0x32	; 50
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8SetPinValue+0x1fa>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8SetPinValue+0x1f6>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	1a c0       	rjmp	.+52     	; 0x1168 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_u8SetPinValue+0x222>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_u8SetPinValue+0x21e>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    115e:	19 82       	std	Y+1, r1	; 0x01
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				default:Local_u8ErrorState = STD_TYPES_NOK;
    1162:	19 82       	std	Y+1, r1	; 0x01
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <DIO_u8SetPinValue+0x238>
				
			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1166:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
}
    116a:	2e 96       	adiw	r28, 0x0e	; 14
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 * Copy_pu8ReturnedPinValue )
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	28 97       	sbiw	r28, 0x08	; 8
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	6c 83       	std	Y+4, r22	; 0x04
    1194:	5e 83       	std	Y+6, r21	; 0x06
    1196:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	84 30       	cpi	r24, 0x04	; 4
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <DIO_u8GetPinValue+0x28>
    11a2:	9f c0       	rjmp	.+318    	; 0x12e2 <DIO_u8GetPinValue+0x166>
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	88 30       	cpi	r24, 0x08	; 8
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <DIO_u8GetPinValue+0x30>
    11aa:	9b c0       	rjmp	.+310    	; 0x12e2 <DIO_u8GetPinValue+0x166>
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_u8GetPinValue+0x3a>
    11b4:	96 c0       	rjmp	.+300    	; 0x12e2 <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	38 87       	std	Y+8, r19	; 0x08
    11be:	2f 83       	std	Y+7, r18	; 0x07
    11c0:	4f 81       	ldd	r20, Y+7	; 0x07
    11c2:	58 85       	ldd	r21, Y+8	; 0x08
    11c4:	41 30       	cpi	r20, 0x01	; 1
    11c6:	51 05       	cpc	r21, r1
    11c8:	a9 f1       	breq	.+106    	; 0x1234 <DIO_u8GetPinValue+0xb8>
    11ca:	8f 81       	ldd	r24, Y+7	; 0x07
    11cc:	98 85       	ldd	r25, Y+8	; 0x08
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	91 05       	cpc	r25, r1
    11d2:	34 f4       	brge	.+12     	; 0x11e0 <DIO_u8GetPinValue+0x64>
    11d4:	2f 81       	ldd	r18, Y+7	; 0x07
    11d6:	38 85       	ldd	r19, Y+8	; 0x08
    11d8:	21 15       	cp	r18, r1
    11da:	31 05       	cpc	r19, r1
    11dc:	71 f0       	breq	.+28     	; 0x11fa <DIO_u8GetPinValue+0x7e>
    11de:	82 c0       	rjmp	.+260    	; 0x12e4 <DIO_u8GetPinValue+0x168>
    11e0:	4f 81       	ldd	r20, Y+7	; 0x07
    11e2:	58 85       	ldd	r21, Y+8	; 0x08
    11e4:	42 30       	cpi	r20, 0x02	; 2
    11e6:	51 05       	cpc	r21, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <DIO_u8GetPinValue+0x70>
    11ea:	41 c0       	rjmp	.+130    	; 0x126e <DIO_u8GetPinValue+0xf2>
    11ec:	8f 81       	ldd	r24, Y+7	; 0x07
    11ee:	98 85       	ldd	r25, Y+8	; 0x08
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_u8GetPinValue+0x7c>
    11f6:	58 c0       	rjmp	.+176    	; 0x12a8 <DIO_u8GetPinValue+0x12c>
    11f8:	75 c0       	rjmp	.+234    	; 0x12e4 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA : 
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);
    11fa:	e9 e3       	ldi	r30, 0x39	; 57
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_u8GetPinValue+0x96>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_u8GetPinValue+0x92>
    1216:	ca 01       	movw	r24, r20
    1218:	81 70       	andi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	88 23       	and	r24, r24
    1220:	21 f4       	brne	.+8      	; 0x122a <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1222:	ed 81       	ldd	r30, Y+5	; 0x05
    1224:	fe 81       	ldd	r31, Y+6	; 0x06
    1226:	10 82       	st	Z, r1
    1228:	5d c0       	rjmp	.+186    	; 0x12e4 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    122a:	ed 81       	ldd	r30, Y+5	; 0x05
    122c:	fe 81       	ldd	r31, Y+6	; 0x06
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24
    1232:	58 c0       	rjmp	.+176    	; 0x12e4 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    1234:	e6 e3       	ldi	r30, 0x36	; 54
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a9 01       	movw	r20, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_u8GetPinValue+0xd0>
    1248:	55 95       	asr	r21
    124a:	47 95       	ror	r20
    124c:	8a 95       	dec	r24
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_u8GetPinValue+0xcc>
    1250:	ca 01       	movw	r24, r20
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	88 23       	and	r24, r24
    125a:	21 f4       	brne	.+8      	; 0x1264 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    125c:	ed 81       	ldd	r30, Y+5	; 0x05
    125e:	fe 81       	ldd	r31, Y+6	; 0x06
    1260:	10 82       	st	Z, r1
    1262:	40 c0       	rjmp	.+128    	; 0x12e4 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1264:	ed 81       	ldd	r30, Y+5	; 0x05
    1266:	fe 81       	ldd	r31, Y+6	; 0x06
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 83       	st	Z, r24
    126c:	3b c0       	rjmp	.+118    	; 0x12e4 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    126e:	e3 e3       	ldi	r30, 0x33	; 51
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_u8GetPinValue+0x10a>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_u8GetPinValue+0x106>
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	88 23       	and	r24, r24
    1294:	21 f4       	brne	.+8      	; 0x129e <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1296:	ed 81       	ldd	r30, Y+5	; 0x05
    1298:	fe 81       	ldd	r31, Y+6	; 0x06
    129a:	10 82       	st	Z, r1
    129c:	23 c0       	rjmp	.+70     	; 0x12e4 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    129e:	ed 81       	ldd	r30, Y+5	; 0x05
    12a0:	fe 81       	ldd	r31, Y+6	; 0x06
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 83       	st	Z, r24
    12a6:	1e c0       	rjmp	.+60     	; 0x12e4 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    12a8:	e0 e3       	ldi	r30, 0x30	; 48
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a9 01       	movw	r20, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8GetPinValue+0x144>
    12bc:	55 95       	asr	r21
    12be:	47 95       	ror	r20
    12c0:	8a 95       	dec	r24
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8GetPinValue+0x140>
    12c4:	ca 01       	movw	r24, r20
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	88 23       	and	r24, r24
    12ce:	21 f4       	brne	.+8      	; 0x12d8 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    12d0:	ed 81       	ldd	r30, Y+5	; 0x05
    12d2:	fe 81       	ldd	r31, Y+6	; 0x06
    12d4:	10 82       	st	Z, r1
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12d8:	ed 81       	ldd	r30, Y+5	; 0x05
    12da:	fe 81       	ldd	r31, Y+6	; 0x06
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 83       	st	Z, r24
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12e2:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    12e6:	28 96       	adiw	r28, 0x08	; 8
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_u8SetPortDirection>:
 
u8 DIO_u8SetPortDirection  (u8 Copy_u8PortId, u8 Copy_PortDirection)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	2d 97       	sbiw	r28, 0x0d	; 13
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	8a 83       	std	Y+2, r24	; 0x02
    130e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_PortDirection == DIO_u8_OUTPUT  )||(Copy_PortDirection == DIO_u8_INPUT))
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	21 f0       	breq	.+8      	; 0x1322 <DIO_u8SetPortDirection+0x2a>
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	88 23       	and	r24, r24
    131e:	09 f0       	breq	.+2      	; 0x1322 <DIO_u8SetPortDirection+0x2a>
    1320:	7f c0       	rjmp	.+254    	; 0x1420 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3d 87       	std	Y+13, r19	; 0x0d
    132a:	2c 87       	std	Y+12, r18	; 0x0c
    132c:	8c 85       	ldd	r24, Y+12	; 0x0c
    132e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	71 f1       	breq	.+92     	; 0x1392 <DIO_u8SetPortDirection+0x9a>
    1336:	2c 85       	ldd	r18, Y+12	; 0x0c
    1338:	3d 85       	ldd	r19, Y+13	; 0x0d
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	2c f4       	brge	.+10     	; 0x134a <DIO_u8SetPortDirection+0x52>
    1340:	8c 85       	ldd	r24, Y+12	; 0x0c
    1342:	9d 85       	ldd	r25, Y+13	; 0x0d
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	69 f0       	breq	.+26     	; 0x1362 <DIO_u8SetPortDirection+0x6a>
    1348:	69 c0       	rjmp	.+210    	; 0x141c <DIO_u8SetPortDirection+0x124>
    134a:	2c 85       	ldd	r18, Y+12	; 0x0c
    134c:	3d 85       	ldd	r19, Y+13	; 0x0d
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	b1 f1       	breq	.+108    	; 0x13c0 <DIO_u8SetPortDirection+0xc8>
    1354:	8c 85       	ldd	r24, Y+12	; 0x0c
    1356:	9d 85       	ldd	r25, Y+13	; 0x0d
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <DIO_u8SetPortDirection+0x68>
    135e:	47 c0       	rjmp	.+142    	; 0x13ee <DIO_u8SetPortDirection+0xf6>
    1360:	5d c0       	rjmp	.+186    	; 0x141c <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA : 
				switch (Copy_PortDirection)
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3b 87       	std	Y+11, r19	; 0x0b
    136a:	2a 87       	std	Y+10, r18	; 0x0a
    136c:	8a 85       	ldd	r24, Y+10	; 0x0a
    136e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	59 f0       	breq	.+22     	; 0x138a <DIO_u8SetPortDirection+0x92>
    1374:	2a 85       	ldd	r18, Y+10	; 0x0a
    1376:	3b 85       	ldd	r19, Y+11	; 0x0b
    1378:	21 30       	cpi	r18, 0x01	; 1
    137a:	31 05       	cpc	r19, r1
    137c:	09 f0       	breq	.+2      	; 0x1380 <DIO_u8SetPortDirection+0x88>
    137e:	51 c0       	rjmp	.+162    	; 0x1422 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRA_REG = 0xff; break;
    1380:	ea e3       	ldi	r30, 0x3A	; 58
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	80 83       	st	Z, r24
    1388:	4c c0       	rjmp	.+152    	; 0x1422 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRA_REG = 0x00; break;
    138a:	ea e3       	ldi	r30, 0x3A	; 58
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	10 82       	st	Z, r1
    1390:	48 c0       	rjmp	.+144    	; 0x1422 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTB :
				switch (Copy_PortDirection)
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	39 87       	std	Y+9, r19	; 0x09
    139a:	28 87       	std	Y+8, r18	; 0x08
    139c:	88 85       	ldd	r24, Y+8	; 0x08
    139e:	99 85       	ldd	r25, Y+9	; 0x09
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	51 f0       	breq	.+20     	; 0x13b8 <DIO_u8SetPortDirection+0xc0>
    13a4:	28 85       	ldd	r18, Y+8	; 0x08
    13a6:	39 85       	ldd	r19, Y+9	; 0x09
    13a8:	21 30       	cpi	r18, 0x01	; 1
    13aa:	31 05       	cpc	r19, r1
    13ac:	d1 f5       	brne	.+116    	; 0x1422 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRB_REG = 0xff; break;
    13ae:	e7 e3       	ldi	r30, 0x37	; 55
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	80 83       	st	Z, r24
    13b6:	35 c0       	rjmp	.+106    	; 0x1422 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRB_REG = 0x00; break;
    13b8:	e7 e3       	ldi	r30, 0x37	; 55
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	10 82       	st	Z, r1
    13be:	31 c0       	rjmp	.+98     	; 0x1422 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTC :
				switch (Copy_PortDirection)
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3f 83       	std	Y+7, r19	; 0x07
    13c8:	2e 83       	std	Y+6, r18	; 0x06
    13ca:	8e 81       	ldd	r24, Y+6	; 0x06
    13cc:	9f 81       	ldd	r25, Y+7	; 0x07
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	51 f0       	breq	.+20     	; 0x13e6 <DIO_u8SetPortDirection+0xee>
    13d2:	2e 81       	ldd	r18, Y+6	; 0x06
    13d4:	3f 81       	ldd	r19, Y+7	; 0x07
    13d6:	21 30       	cpi	r18, 0x01	; 1
    13d8:	31 05       	cpc	r19, r1
    13da:	19 f5       	brne	.+70     	; 0x1422 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRC_REG = 0xff; break;
    13dc:	e4 e3       	ldi	r30, 0x34	; 52
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	80 83       	st	Z, r24
    13e4:	1e c0       	rjmp	.+60     	; 0x1422 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRC_REG = 0x00; break;
    13e6:	e4 e3       	ldi	r30, 0x34	; 52
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	10 82       	st	Z, r1
    13ec:	1a c0       	rjmp	.+52     	; 0x1422 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTD :
				switch (Copy_PortDirection)
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3d 83       	std	Y+5, r19	; 0x05
    13f6:	2c 83       	std	Y+4, r18	; 0x04
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	51 f0       	breq	.+20     	; 0x1414 <DIO_u8SetPortDirection+0x11c>
    1400:	2c 81       	ldd	r18, Y+4	; 0x04
    1402:	3d 81       	ldd	r19, Y+5	; 0x05
    1404:	21 30       	cpi	r18, 0x01	; 1
    1406:	31 05       	cpc	r19, r1
    1408:	61 f4       	brne	.+24     	; 0x1422 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRD_REG = 0xff; break;
    140a:	e1 e3       	ldi	r30, 0x31	; 49
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	80 83       	st	Z, r24
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRD_REG = 0x00; break;
    1414:	e1 e3       	ldi	r30, 0x31	; 49
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	10 82       	st	Z, r1
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			default      :Local_u8ErrorState =STD_TYPES_NOK;
    141c:	19 82       	std	Y+1, r1	; 0x01
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <DIO_u8SetPortDirection+0x12a>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1420:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1422:	89 81       	ldd	r24, Y+1	; 0x01
}
    1424:	2d 96       	adiw	r28, 0x0d	; 13
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue       (u8 Copy_u8PortId, u8 Copy_PortValue)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DIO_u8SetPortValue+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_u8SetPortValue+0x8>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3d 83       	std	Y+5, r19	; 0x05
    1454:	2c 83       	std	Y+4, r18	; 0x04
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	9d 81       	ldd	r25, Y+5	; 0x05
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	d1 f0       	breq	.+52     	; 0x1494 <DIO_u8SetPortValue+0x5e>
    1460:	2c 81       	ldd	r18, Y+4	; 0x04
    1462:	3d 81       	ldd	r19, Y+5	; 0x05
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	2c f4       	brge	.+10     	; 0x1474 <DIO_u8SetPortValue+0x3e>
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	61 f0       	breq	.+24     	; 0x148a <DIO_u8SetPortValue+0x54>
    1472:	1f c0       	rjmp	.+62     	; 0x14b2 <DIO_u8SetPortValue+0x7c>
    1474:	2c 81       	ldd	r18, Y+4	; 0x04
    1476:	3d 81       	ldd	r19, Y+5	; 0x05
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	81 f0       	breq	.+32     	; 0x149e <DIO_u8SetPortValue+0x68>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	81 f0       	breq	.+32     	; 0x14a8 <DIO_u8SetPortValue+0x72>
    1488:	14 c0       	rjmp	.+40     	; 0x14b2 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_PortValue; break;
    148a:	eb e3       	ldi	r30, 0x3B	; 59
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	80 83       	st	Z, r24
    1492:	10 c0       	rjmp	.+32     	; 0x14b4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_PortValue; break;
    1494:	e8 e3       	ldi	r30, 0x38	; 56
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	80 83       	st	Z, r24
    149c:	0b c0       	rjmp	.+22     	; 0x14b4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_PortValue; break;
    149e:	e5 e3       	ldi	r30, 0x35	; 53
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	80 83       	st	Z, r24
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_PortValue; break;
    14a8:	e2 e3       	ldi	r30, 0x32	; 50
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	80 83       	st	Z, r24
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <DIO_u8SetPortValue+0x7e>
		default           :Local_u8ErrorState = STD_TYPES_NOK;
    14b2:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return Local_u8ErrorState;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue       (u8 Copy_u8PortId , u8 * Copy_pu8ReturnedPortValue )
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <DIO_u8GetPortValue+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <DIO_u8GetPortValue+0x8>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_u8GetPortValue+0xa>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	7c 83       	std	Y+4, r23	; 0x04
    14d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL)
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	e9 f1       	breq	.+122    	; 0x1560 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3e 83       	std	Y+6, r19	; 0x06
    14ee:	2d 83       	std	Y+5, r18	; 0x05
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	e1 f0       	breq	.+56     	; 0x1532 <DIO_u8GetPortValue+0x6c>
    14fa:	2d 81       	ldd	r18, Y+5	; 0x05
    14fc:	3e 81       	ldd	r19, Y+6	; 0x06
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	2c f4       	brge	.+10     	; 0x150e <DIO_u8GetPortValue+0x48>
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	61 f0       	breq	.+24     	; 0x1524 <DIO_u8GetPortValue+0x5e>
    150c:	27 c0       	rjmp	.+78     	; 0x155c <DIO_u8GetPortValue+0x96>
    150e:	2d 81       	ldd	r18, Y+5	; 0x05
    1510:	3e 81       	ldd	r19, Y+6	; 0x06
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	a1 f0       	breq	.+40     	; 0x1540 <DIO_u8GetPortValue+0x7a>
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	b1 f0       	breq	.+44     	; 0x154e <DIO_u8GetPortValue+0x88>
    1522:	1c c0       	rjmp	.+56     	; 0x155c <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA : *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG; break;
    1524:	e9 e3       	ldi	r30, 0x39	; 57
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	eb 81       	ldd	r30, Y+3	; 0x03
    152c:	fc 81       	ldd	r31, Y+4	; 0x04
    152e:	80 83       	st	Z, r24
    1530:	18 c0       	rjmp	.+48     	; 0x1562 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB : *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG; break;
    1532:	e6 e3       	ldi	r30, 0x36	; 54
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	eb 81       	ldd	r30, Y+3	; 0x03
    153a:	fc 81       	ldd	r31, Y+4	; 0x04
    153c:	80 83       	st	Z, r24
    153e:	11 c0       	rjmp	.+34     	; 0x1562 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC : *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG; break; 
    1540:	e3 e3       	ldi	r30, 0x33	; 51
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	eb 81       	ldd	r30, Y+3	; 0x03
    1548:	fc 81       	ldd	r31, Y+4	; 0x04
    154a:	80 83       	st	Z, r24
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD : *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG; break;
    154e:	e0 e3       	ldi	r30, 0x30	; 48
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	eb 81       	ldd	r30, Y+3	; 0x03
    1556:	fc 81       	ldd	r31, Y+4	; 0x04
    1558:	80 83       	st	Z, r24
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <DIO_u8GetPortValue+0x9c>
			default           : Local_u8ErrorState = STD_TYPES_NOK;
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1560:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	26 96       	adiw	r28, 0x06	; 6
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <GI_voidEnale>:
#include"GI_interface.h"
#include"GI_private.h"
#include"GI_config.h"

void GI_voidEnale(void)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7); 
    157e:	af e5       	ldi	r26, 0x5F	; 95
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ef e5       	ldi	r30, 0x5F	; 95
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 68       	ori	r24, 0x80	; 128
    158a:	8c 93       	st	X, r24
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <GI_voidDisable>:

void GI_voidDisable(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7); 
    159a:	af e5       	ldi	r26, 0x5F	; 95
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ef e5       	ldi	r30, 0x5F	; 95
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 77       	andi	r24, 0x7F	; 127
    15a6:	8c 93       	st	X, r24
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <KPD_u8GetKeyState>:
static const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};

static const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

u8 KPD_u8GetKeyState(u8* Copy_pu8ReturnedKey)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	65 97       	sbiw	r28, 0x15	; 21
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	9d 8b       	std	Y+21, r25	; 0x15
    15c4:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowCounter;
	u8 Local_u8ColCounter;
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
    15ca:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    15cc:	8c 89       	ldd	r24, Y+20	; 0x14
    15ce:	9d 89       	ldd	r25, Y+21	; 0x15
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <KPD_u8GetKeyState+0x28>
    15d4:	f0 c0       	rjmp	.+480    	; 0x17b6 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
    15d6:	ec 89       	ldd	r30, Y+20	; 0x14
    15d8:	fd 89       	ldd	r31, Y+21	; 0x15
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	80 83       	st	Z, r24
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    15de:	19 8a       	std	Y+17, r1	; 0x11
    15e0:	e5 c0       	rjmp	.+458    	; 0x17ac <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
    15e2:	89 89       	ldd	r24, Y+17	; 0x11
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	fc 01       	movw	r30, r24
    15ea:	e5 57       	subi	r30, 0x75	; 117
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	90 81       	ld	r25, Z
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	69 2f       	mov	r22, r25
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    15fa:	18 8a       	std	Y+16, r1	; 0x10
    15fc:	c1 c0       	rjmp	.+386    	; 0x1780 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    15fe:	88 89       	ldd	r24, Y+16	; 0x10
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	fc 01       	movw	r30, r24
    1606:	e1 57       	subi	r30, 0x71	; 113
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	90 81       	ld	r25, Z
    160c:	9e 01       	movw	r18, r28
    160e:	2d 5e       	subi	r18, 0xED	; 237
    1610:	3f 4f       	sbci	r19, 0xFF	; 255
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	69 2f       	mov	r22, r25
    1616:	a9 01       	movw	r20, r18
    1618:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    161c:	8b 89       	ldd	r24, Y+19	; 0x13
    161e:	88 23       	and	r24, r24
    1620:	09 f0       	breq	.+2      	; 0x1624 <KPD_u8GetKeyState+0x76>
    1622:	ab c0       	rjmp	.+342    	; 0x177a <KPD_u8GetKeyState+0x1cc>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 ea       	ldi	r26, 0xA0	; 160
    162a:	b1 e4       	ldi	r27, 0x41	; 65
    162c:	8b 87       	std	Y+11, r24	; 0x0b
    162e:	9c 87       	std	Y+12, r25	; 0x0c
    1630:	ad 87       	std	Y+13, r26	; 0x0d
    1632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	6b 85       	ldd	r22, Y+11	; 0x0b
    1636:	7c 85       	ldd	r23, Y+12	; 0x0c
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a ef       	ldi	r20, 0xFA	; 250
    1642:	54 e4       	ldi	r21, 0x44	; 68
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	8f 83       	std	Y+7, r24	; 0x07
    164e:	98 87       	std	Y+8, r25	; 0x08
    1650:	a9 87       	std	Y+9, r26	; 0x09
    1652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1654:	6f 81       	ldd	r22, Y+7	; 0x07
    1656:	78 85       	ldd	r23, Y+8	; 0x08
    1658:	89 85       	ldd	r24, Y+9	; 0x09
    165a:	9a 85       	ldd	r25, Y+10	; 0x0a
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	2c f4       	brge	.+10     	; 0x1676 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	3f c0       	rjmp	.+126    	; 0x16f4 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1676:	6f 81       	ldd	r22, Y+7	; 0x07
    1678:	78 85       	ldd	r23, Y+8	; 0x08
    167a:	89 85       	ldd	r24, Y+9	; 0x09
    167c:	9a 85       	ldd	r25, Y+10	; 0x0a
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	4c f5       	brge	.+82     	; 0x16e0 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1690:	7c 85       	ldd	r23, Y+12	; 0x0c
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <KPD_u8GetKeyState+0x128>
    16b8:	88 ec       	ldi	r24, 0xC8	; 200
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9c 83       	std	Y+4, r25	; 0x04
    16be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <KPD_u8GetKeyState+0x116>
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <KPD_u8GetKeyState+0x10a>
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <KPD_u8GetKeyState+0x152>
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	89 83       	std	Y+1, r24	; 0x01
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    1708:	88 89       	ldd	r24, Y+16	; 0x10
    170a:	88 2f       	mov	r24, r24
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	fc 01       	movw	r30, r24
    1710:	e1 57       	subi	r30, 0x71	; 113
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	90 81       	ld	r25, Z
    1716:	9e 01       	movw	r18, r28
    1718:	2d 5e       	subi	r18, 0xED	; 237
    171a:	3f 4f       	sbci	r19, 0xFF	; 255
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	69 2f       	mov	r22, r25
    1720:	a9 01       	movw	r20, r18
    1722:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_u8GetPinValue>
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <KPD_u8GetKeyState+0x198>
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    1728:	88 89       	ldd	r24, Y+16	; 0x10
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	fc 01       	movw	r30, r24
    1730:	e1 57       	subi	r30, 0x71	; 113
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	90 81       	ld	r25, Z
    1736:	9e 01       	movw	r18, r28
    1738:	2d 5e       	subi	r18, 0xED	; 237
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	69 2f       	mov	r22, r25
    1740:	a9 01       	movw	r20, r18
    1742:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_u8GetPinValue>
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					while(Local_u8PinValue == DIO_u8_LOW)
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	88 23       	and	r24, r24
    174a:	71 f3       	breq	.-36     	; 0x1728 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
    174c:	89 89       	ldd	r24, Y+17	; 0x11
    174e:	48 2f       	mov	r20, r24
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	88 89       	ldd	r24, Y+16	; 0x10
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	ca 01       	movw	r24, r20
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	82 0f       	add	r24, r18
    1764:	93 1f       	adc	r25, r19
    1766:	fc 01       	movw	r30, r24
    1768:	e5 58       	subi	r30, 0x85	; 133
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 81       	ld	r24, Z
    176e:	ec 89       	ldd	r30, Y+20	; 0x14
    1770:	fd 89       	ldd	r31, Y+21	; 0x15
    1772:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	8f 87       	std	Y+15, r24	; 0x0f
    1778:	07 c0       	rjmp	.+14     	; 0x1788 <KPD_u8GetKeyState+0x1da>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    177a:	88 89       	ldd	r24, Y+16	; 0x10
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	88 8b       	std	Y+16, r24	; 0x10
    1780:	88 89       	ldd	r24, Y+16	; 0x10
    1782:	84 30       	cpi	r24, 0x04	; 4
    1784:	08 f4       	brcc	.+2      	; 0x1788 <KPD_u8GetKeyState+0x1da>
    1786:	3b cf       	rjmp	.-394    	; 0x15fe <KPD_u8GetKeyState+0x50>
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
					Local_u8Flag = 1;
					break; 
				}
			}
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_HIGH);
    1788:	89 89       	ldd	r24, Y+17	; 0x11
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	fc 01       	movw	r30, r24
    1790:	e5 57       	subi	r30, 0x75	; 117
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	90 81       	ld	r25, Z
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	69 2f       	mov	r22, r25
    179a:	41 e0       	ldi	r20, 0x01	; 1
    179c:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1) 
    17a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	49 f0       	breq	.+18     	; 0x17b8 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    17a6:	89 89       	ldd	r24, Y+17	; 0x11
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	89 8b       	std	Y+17, r24	; 0x11
    17ac:	89 89       	ldd	r24, Y+17	; 0x11
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <KPD_u8GetKeyState+0x206>
    17b2:	17 cf       	rjmp	.-466    	; 0x15e2 <KPD_u8GetKeyState+0x34>
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <KPD_u8GetKeyState+0x20a>
			}	
		}
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    17b6:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    17b8:	8a 89       	ldd	r24, Y+18	; 0x12
	
}
    17ba:	65 96       	adiw	r28, 0x15	; 21
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <LCD_voidInit>:
/*HAL*/
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"
void LCD_voidInit(void)
{
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	cc 54       	subi	r28, 0x4C	; 76
    17da:	d0 40       	sbci	r29, 0x00	; 0
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	fe 01       	movw	r30, r28
    17e8:	e7 5b       	subi	r30, 0xB7	; 183
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	ac e0       	ldi	r26, 0x0C	; 12
    17f2:	b2 e4       	ldi	r27, 0x42	; 66
    17f4:	80 83       	st	Z, r24
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	a2 83       	std	Z+2, r26	; 0x02
    17fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fc:	8e 01       	movw	r16, r28
    17fe:	0b 5b       	subi	r16, 0xBB	; 187
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	fe 01       	movw	r30, r28
    1804:	e7 5b       	subi	r30, 0xB7	; 183
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a ef       	ldi	r20, 0xFA	; 250
    1816:	54 e4       	ldi	r21, 0x44	; 68
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	f8 01       	movw	r30, r16
    1822:	80 83       	st	Z, r24
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	a2 83       	std	Z+2, r26	; 0x02
    1828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    182a:	fe 01       	movw	r30, r28
    182c:	eb 5b       	subi	r30, 0xBB	; 187
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e8       	ldi	r20, 0x80	; 128
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1844:	88 23       	and	r24, r24
    1846:	44 f4       	brge	.+16     	; 0x1858 <LCD_voidInit+0x8c>
		__ticks = 1;
    1848:	fe 01       	movw	r30, r28
    184a:	ed 5b       	subi	r30, 0xBD	; 189
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	64 c0       	rjmp	.+200    	; 0x1920 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1858:	fe 01       	movw	r30, r28
    185a:	eb 5b       	subi	r30, 0xBB	; 187
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	57 e4       	ldi	r21, 0x47	; 71
    186e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	0c f0       	brlt	.+2      	; 0x1878 <LCD_voidInit+0xac>
    1876:	43 c0       	rjmp	.+134    	; 0x18fe <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	fe 01       	movw	r30, r28
    187a:	e7 5b       	subi	r30, 0xB7	; 183
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	8e 01       	movw	r16, r28
    1898:	0d 5b       	subi	r16, 0xBD	; 189
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	f8 01       	movw	r30, r16
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
    18ae:	1f c0       	rjmp	.+62     	; 0x18ee <LCD_voidInit+0x122>
    18b0:	fe 01       	movw	r30, r28
    18b2:	ef 5b       	subi	r30, 0xBF	; 191
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	88 ec       	ldi	r24, 0xC8	; 200
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
    18be:	fe 01       	movw	r30, r28
    18c0:	ef 5b       	subi	r30, 0xBF	; 191
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <LCD_voidInit+0xfc>
    18cc:	fe 01       	movw	r30, r28
    18ce:	ef 5b       	subi	r30, 0xBF	; 191
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	de 01       	movw	r26, r28
    18d8:	ad 5b       	subi	r26, 0xBD	; 189
    18da:	bf 4f       	sbci	r27, 0xFF	; 255
    18dc:	fe 01       	movw	r30, r28
    18de:	ed 5b       	subi	r30, 0xBD	; 189
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	11 96       	adiw	r26, 0x01	; 1
    18ea:	9c 93       	st	X, r25
    18ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	fe 01       	movw	r30, r28
    18f0:	ed 5b       	subi	r30, 0xBD	; 189
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	d1 f6       	brne	.-76     	; 0x18b0 <LCD_voidInit+0xe4>
    18fc:	24 c0       	rjmp	.+72     	; 0x1946 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fe:	8e 01       	movw	r16, r28
    1900:	0d 5b       	subi	r16, 0xBD	; 189
    1902:	1f 4f       	sbci	r17, 0xFF	; 255
    1904:	fe 01       	movw	r30, r28
    1906:	eb 5b       	subi	r30, 0xBB	; 187
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	60 81       	ld	r22, Z
    190c:	71 81       	ldd	r23, Z+1	; 0x01
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	f8 01       	movw	r30, r16
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
    1920:	fe 01       	movw	r30, r28
    1922:	ed 5b       	subi	r30, 0xBD	; 189
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	fe 01       	movw	r30, r28
    192c:	ff 96       	adiw	r30, 0x3f	; 63
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
    1932:	fe 01       	movw	r30, r28
    1934:	ff 96       	adiw	r30, 0x3f	; 63
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_voidInit+0x16e>
    193e:	fe 01       	movw	r30, r28
    1940:	ff 96       	adiw	r30, 0x3f	; 63
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set CMND*/
	LCD_voidSendCmnd(CONC(0,0,1,LCD_u8_MODE,LCD_u8_INTIAL_LINE_NUM,LCD_u8_INTIAL_FONT,0,0));
    1946:	88 e3       	ldi	r24, 0x38	; 56
    1948:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e2       	ldi	r26, 0x20	; 32
    1952:	b2 e4       	ldi	r27, 0x42	; 66
    1954:	8b af       	std	Y+59, r24	; 0x3b
    1956:	9c af       	std	Y+60, r25	; 0x3c
    1958:	ad af       	std	Y+61, r26	; 0x3d
    195a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    195c:	6b ad       	ldd	r22, Y+59	; 0x3b
    195e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1960:	8d ad       	ldd	r24, Y+61	; 0x3d
    1962:	9e ad       	ldd	r25, Y+62	; 0x3e
    1964:	2b ea       	ldi	r18, 0xAB	; 171
    1966:	3a ea       	ldi	r19, 0xAA	; 170
    1968:	4a e2       	ldi	r20, 0x2A	; 42
    196a:	50 e4       	ldi	r21, 0x40	; 64
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8f ab       	std	Y+55, r24	; 0x37
    1976:	98 af       	std	Y+56, r25	; 0x38
    1978:	a9 af       	std	Y+57, r26	; 0x39
    197a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    197c:	6f a9       	ldd	r22, Y+55	; 0x37
    197e:	78 ad       	ldd	r23, Y+56	; 0x38
    1980:	89 ad       	ldd	r24, Y+57	; 0x39
    1982:	9a ad       	ldd	r25, Y+58	; 0x3a
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	1c f4       	brge	.+6      	; 0x199a <LCD_voidInit+0x1ce>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	8e ab       	std	Y+54, r24	; 0x36
    1998:	91 c0       	rjmp	.+290    	; 0x1abc <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    199a:	6f a9       	ldd	r22, Y+55	; 0x37
    199c:	78 ad       	ldd	r23, Y+56	; 0x38
    199e:	89 ad       	ldd	r24, Y+57	; 0x39
    19a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	4f e7       	ldi	r20, 0x7F	; 127
    19a8:	53 e4       	ldi	r21, 0x43	; 67
    19aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <LCD_voidInit+0x1e8>
    19b2:	7b c0       	rjmp	.+246    	; 0x1aaa <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    19b4:	6b ad       	ldd	r22, Y+59	; 0x3b
    19b6:	7c ad       	ldd	r23, Y+60	; 0x3c
    19b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	4a e7       	ldi	r20, 0x7A	; 122
    19c2:	54 e4       	ldi	r21, 0x44	; 68
    19c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	8a ab       	std	Y+50, r24	; 0x32
    19ce:	9b ab       	std	Y+51, r25	; 0x33
    19d0:	ac ab       	std	Y+52, r26	; 0x34
    19d2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d4:	6a a9       	ldd	r22, Y+50	; 0x32
    19d6:	7b a9       	ldd	r23, Y+51	; 0x33
    19d8:	8c a9       	ldd	r24, Y+52	; 0x34
    19da:	9d a9       	ldd	r25, Y+53	; 0x35
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	4a ef       	ldi	r20, 0xFA	; 250
    19e2:	54 e4       	ldi	r21, 0x44	; 68
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	8e a7       	std	Y+46, r24	; 0x2e
    19ee:	9f a7       	std	Y+47, r25	; 0x2f
    19f0:	a8 ab       	std	Y+48, r26	; 0x30
    19f2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19f4:	6e a5       	ldd	r22, Y+46	; 0x2e
    19f6:	7f a5       	ldd	r23, Y+47	; 0x2f
    19f8:	88 a9       	ldd	r24, Y+48	; 0x30
    19fa:	99 a9       	ldd	r25, Y+49	; 0x31
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <LCD_voidInit+0x24a>
		__ticks = 1;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9d a7       	std	Y+45, r25	; 0x2d
    1a12:	8c a7       	std	Y+44, r24	; 0x2c
    1a14:	3f c0       	rjmp	.+126    	; 0x1a94 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1a16:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a18:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a1a:	88 a9       	ldd	r24, Y+48	; 0x30
    1a1c:	99 a9       	ldd	r25, Y+49	; 0x31
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	3f ef       	ldi	r19, 0xFF	; 255
    1a22:	4f e7       	ldi	r20, 0x7F	; 127
    1a24:	57 e4       	ldi	r21, 0x47	; 71
    1a26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	4c f5       	brge	.+82     	; 0x1a80 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2e:	6a a9       	ldd	r22, Y+50	; 0x32
    1a30:	7b a9       	ldd	r23, Y+51	; 0x33
    1a32:	8c a9       	ldd	r24, Y+52	; 0x34
    1a34:	9d a9       	ldd	r25, Y+53	; 0x35
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e2       	ldi	r20, 0x20	; 32
    1a3c:	51 e4       	ldi	r21, 0x41	; 65
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9d a7       	std	Y+45, r25	; 0x2d
    1a54:	8c a7       	std	Y+44, r24	; 0x2c
    1a56:	0f c0       	rjmp	.+30     	; 0x1a76 <LCD_voidInit+0x2aa>
    1a58:	88 ec       	ldi	r24, 0xC8	; 200
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9b a7       	std	Y+43, r25	; 0x2b
    1a5e:	8a a7       	std	Y+42, r24	; 0x2a
    1a60:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a62:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <LCD_voidInit+0x298>
    1a68:	9b a7       	std	Y+43, r25	; 0x2b
    1a6a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a6e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	9d a7       	std	Y+45, r25	; 0x2d
    1a74:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a76:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a78:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	69 f7       	brne	.-38     	; 0x1a58 <LCD_voidInit+0x28c>
    1a7e:	24 c0       	rjmp	.+72     	; 0x1ac8 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a80:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a82:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a84:	88 a9       	ldd	r24, Y+48	; 0x30
    1a86:	99 a9       	ldd	r25, Y+49	; 0x31
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9d a7       	std	Y+45, r25	; 0x2d
    1a92:	8c a7       	std	Y+44, r24	; 0x2c
    1a94:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a96:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a98:	99 a7       	std	Y+41, r25	; 0x29
    1a9a:	88 a7       	std	Y+40, r24	; 0x28
    1a9c:	88 a5       	ldd	r24, Y+40	; 0x28
    1a9e:	99 a5       	ldd	r25, Y+41	; 0x29
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <LCD_voidInit+0x2d4>
    1aa4:	99 a7       	std	Y+41, r25	; 0x29
    1aa6:	88 a7       	std	Y+40, r24	; 0x28
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aaa:	6f a9       	ldd	r22, Y+55	; 0x37
    1aac:	78 ad       	ldd	r23, Y+56	; 0x38
    1aae:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8e ab       	std	Y+54, r24	; 0x36
    1abc:	8e a9       	ldd	r24, Y+54	; 0x36
    1abe:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ac0:	8f a1       	ldd	r24, Y+39	; 0x27
    1ac2:	8a 95       	dec	r24
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_voidInit+0x2f6>
    1ac6:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/* Display NO/OFF Control */
	LCD_voidSendCmnd(CONC(0,0,0,0,1,1,LCD_u8_INTIAL_CURSOR_DISPLAY,LCD_u8_INTIAL_CURSOR_BLINK));
    1ac8:	8e e0       	ldi	r24, 0x0E	; 14
    1aca:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e2       	ldi	r26, 0x20	; 32
    1ad4:	b2 e4       	ldi	r27, 0x42	; 66
    1ad6:	8b a3       	std	Y+35, r24	; 0x23
    1ad8:	9c a3       	std	Y+36, r25	; 0x24
    1ada:	ad a3       	std	Y+37, r26	; 0x25
    1adc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ade:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae6:	2b ea       	ldi	r18, 0xAB	; 171
    1ae8:	3a ea       	ldi	r19, 0xAA	; 170
    1aea:	4a e2       	ldi	r20, 0x2A	; 42
    1aec:	50 e4       	ldi	r21, 0x40	; 64
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8f 8f       	std	Y+31, r24	; 0x1f
    1af8:	98 a3       	std	Y+32, r25	; 0x20
    1afa:	a9 a3       	std	Y+33, r26	; 0x21
    1afc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1afe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b00:	78 a1       	ldd	r23, Y+32	; 0x20
    1b02:	89 a1       	ldd	r24, Y+33	; 0x21
    1b04:	9a a1       	ldd	r25, Y+34	; 0x22
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	1c f4       	brge	.+6      	; 0x1b1c <LCD_voidInit+0x350>
		__ticks = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	8e 8f       	std	Y+30, r24	; 0x1e
    1b1a:	91 c0       	rjmp	.+290    	; 0x1c3e <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1b1c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b1e:	78 a1       	ldd	r23, Y+32	; 0x20
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	53 e4       	ldi	r21, 0x43	; 67
    1b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <LCD_voidInit+0x36a>
    1b34:	7b c0       	rjmp	.+246    	; 0x1c2c <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1b36:	6b a1       	ldd	r22, Y+35	; 0x23
    1b38:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a e7       	ldi	r20, 0x7A	; 122
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8a 8f       	std	Y+26, r24	; 0x1a
    1b50:	9b 8f       	std	Y+27, r25	; 0x1b
    1b52:	ac 8f       	std	Y+28, r26	; 0x1c
    1b54:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b56:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b58:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a ef       	ldi	r20, 0xFA	; 250
    1b64:	54 e4       	ldi	r21, 0x44	; 68
    1b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8e 8b       	std	Y+22, r24	; 0x16
    1b70:	9f 8b       	std	Y+23, r25	; 0x17
    1b72:	a8 8f       	std	Y+24, r26	; 0x18
    1b74:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b76:	6e 89       	ldd	r22, Y+22	; 0x16
    1b78:	7f 89       	ldd	r23, Y+23	; 0x17
    1b7a:	88 8d       	ldd	r24, Y+24	; 0x18
    1b7c:	99 8d       	ldd	r25, Y+25	; 0x19
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	5f e3       	ldi	r21, 0x3F	; 63
    1b86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b8a:	88 23       	and	r24, r24
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9d 8b       	std	Y+21, r25	; 0x15
    1b94:	8c 8b       	std	Y+20, r24	; 0x14
    1b96:	3f c0       	rjmp	.+126    	; 0x1c16 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1b98:	6e 89       	ldd	r22, Y+22	; 0x16
    1b9a:	7f 89       	ldd	r23, Y+23	; 0x17
    1b9c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b9e:	99 8d       	ldd	r25, Y+25	; 0x19
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	3f ef       	ldi	r19, 0xFF	; 255
    1ba4:	4f e7       	ldi	r20, 0x7F	; 127
    1ba6:	57 e4       	ldi	r21, 0x47	; 71
    1ba8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bac:	18 16       	cp	r1, r24
    1bae:	4c f5       	brge	.+82     	; 0x1c02 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bb2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bb6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e2       	ldi	r20, 0x20	; 32
    1bbe:	51 e4       	ldi	r21, 0x41	; 65
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9d 8b       	std	Y+21, r25	; 0x15
    1bd6:	8c 8b       	std	Y+20, r24	; 0x14
    1bd8:	0f c0       	rjmp	.+30     	; 0x1bf8 <LCD_voidInit+0x42c>
    1bda:	88 ec       	ldi	r24, 0xC8	; 200
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9b 8b       	std	Y+19, r25	; 0x13
    1be0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be2:	8a 89       	ldd	r24, Y+18	; 0x12
    1be4:	9b 89       	ldd	r25, Y+19	; 0x13
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_voidInit+0x41a>
    1bea:	9b 8b       	std	Y+19, r25	; 0x13
    1bec:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bee:	8c 89       	ldd	r24, Y+20	; 0x14
    1bf0:	9d 89       	ldd	r25, Y+21	; 0x15
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	9d 8b       	std	Y+21, r25	; 0x15
    1bf6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf8:	8c 89       	ldd	r24, Y+20	; 0x14
    1bfa:	9d 89       	ldd	r25, Y+21	; 0x15
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	69 f7       	brne	.-38     	; 0x1bda <LCD_voidInit+0x40e>
    1c00:	24 c0       	rjmp	.+72     	; 0x1c4a <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c02:	6e 89       	ldd	r22, Y+22	; 0x16
    1c04:	7f 89       	ldd	r23, Y+23	; 0x17
    1c06:	88 8d       	ldd	r24, Y+24	; 0x18
    1c08:	99 8d       	ldd	r25, Y+25	; 0x19
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9d 8b       	std	Y+21, r25	; 0x15
    1c14:	8c 8b       	std	Y+20, r24	; 0x14
    1c16:	8c 89       	ldd	r24, Y+20	; 0x14
    1c18:	9d 89       	ldd	r25, Y+21	; 0x15
    1c1a:	99 8b       	std	Y+17, r25	; 0x11
    1c1c:	88 8b       	std	Y+16, r24	; 0x10
    1c1e:	88 89       	ldd	r24, Y+16	; 0x10
    1c20:	99 89       	ldd	r25, Y+17	; 0x11
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_voidInit+0x456>
    1c26:	99 8b       	std	Y+17, r25	; 0x11
    1c28:	88 8b       	std	Y+16, r24	; 0x10
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c2c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c2e:	78 a1       	ldd	r23, Y+32	; 0x20
    1c30:	89 a1       	ldd	r24, Y+33	; 0x21
    1c32:	9a a1       	ldd	r25, Y+34	; 0x22
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c40:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c44:	8a 95       	dec	r24
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_voidInit+0x478>
    1c48:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/* Display Clear */
	LCD_voidSendCmnd(0b00000001);
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e0       	ldi	r26, 0x00	; 0
    1c56:	b0 e4       	ldi	r27, 0x40	; 64
    1c58:	8b 87       	std	Y+11, r24	; 0x0b
    1c5a:	9c 87       	std	Y+12, r25	; 0x0c
    1c5c:	ad 87       	std	Y+13, r26	; 0x0d
    1c5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a ef       	ldi	r20, 0xFA	; 250
    1c6e:	54 e4       	ldi	r21, 0x44	; 68
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8f 83       	std	Y+7, r24	; 0x07
    1c7a:	98 87       	std	Y+8, r25	; 0x08
    1c7c:	a9 87       	std	Y+9, r26	; 0x09
    1c7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c80:	6f 81       	ldd	r22, Y+7	; 0x07
    1c82:	78 85       	ldd	r23, Y+8	; 0x08
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <LCD_voidInit+0x536>
    1ce4:	88 ec       	ldi	r24, 0xC8	; 200
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_voidInit+0x524>
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <LCD_voidInit+0x518>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0e:	78 85       	ldd	r23, Y+8	; 0x08
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_voidInit+0x560>
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* Entry Mood Set */
	LCD_voidSendCmnd(0b00000110);
    1d34:	86 e0       	ldi	r24, 0x06	; 6
    1d36:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
	
}
    1d3a:	c4 5b       	subi	r28, 0xB4	; 180
    1d3c:	df 4f       	sbci	r29, 0xFF	; 255
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	08 95       	ret

00001d52 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	69 97       	sbiw	r28, 0x19	; 25
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	89 8f       	std	Y+25, r24	; 0x19
	#if LCD_u8_MODE == BIT_LENGTH_8
	/* step-1:Rs = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_LOW);
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	/* Write command */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Cmnd  );
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d80:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	62 e0       	ldi	r22, 0x02	; 2
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e8       	ldi	r26, 0x80	; 128
    1d94:	bf e3       	ldi	r27, 0x3F	; 63
    1d96:	8d 8b       	std	Y+21, r24	; 0x15
    1d98:	9e 8b       	std	Y+22, r25	; 0x16
    1d9a:	af 8b       	std	Y+23, r26	; 0x17
    1d9c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1da0:	7e 89       	ldd	r23, Y+22	; 0x16
    1da2:	8f 89       	ldd	r24, Y+23	; 0x17
    1da4:	98 8d       	ldd	r25, Y+24	; 0x18
    1da6:	2b ea       	ldi	r18, 0xAB	; 171
    1da8:	3a ea       	ldi	r19, 0xAA	; 170
    1daa:	4a e2       	ldi	r20, 0x2A	; 42
    1dac:	50 e4       	ldi	r21, 0x40	; 64
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	89 8b       	std	Y+17, r24	; 0x11
    1db8:	9a 8b       	std	Y+18, r25	; 0x12
    1dba:	ab 8b       	std	Y+19, r26	; 0x13
    1dbc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1dbe:	69 89       	ldd	r22, Y+17	; 0x11
    1dc0:	7a 89       	ldd	r23, Y+18	; 0x12
    1dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	1c f4       	brge	.+6      	; 0x1ddc <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	88 8b       	std	Y+16, r24	; 0x10
    1dda:	91 c0       	rjmp	.+290    	; 0x1efe <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1ddc:	69 89       	ldd	r22, Y+17	; 0x11
    1dde:	7a 89       	ldd	r23, Y+18	; 0x12
    1de0:	8b 89       	ldd	r24, Y+19	; 0x13
    1de2:	9c 89       	ldd	r25, Y+20	; 0x14
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	53 e4       	ldi	r21, 0x43	; 67
    1dec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	0c f0       	brlt	.+2      	; 0x1df6 <LCD_voidSendCmnd+0xa4>
    1df4:	7b c0       	rjmp	.+246    	; 0x1eec <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1df6:	6d 89       	ldd	r22, Y+21	; 0x15
    1df8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8c 87       	std	Y+12, r24	; 0x0c
    1e10:	9d 87       	std	Y+13, r25	; 0x0d
    1e12:	ae 87       	std	Y+14, r26	; 0x0e
    1e14:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e16:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e18:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	4a ef       	ldi	r20, 0xFA	; 250
    1e24:	54 e4       	ldi	r21, 0x44	; 68
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	88 87       	std	Y+8, r24	; 0x08
    1e30:	99 87       	std	Y+9, r25	; 0x09
    1e32:	aa 87       	std	Y+10, r26	; 0x0a
    1e34:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e36:	68 85       	ldd	r22, Y+8	; 0x08
    1e38:	79 85       	ldd	r23, Y+9	; 0x09
    1e3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9f 83       	std	Y+7, r25	; 0x07
    1e54:	8e 83       	std	Y+6, r24	; 0x06
    1e56:	3f c0       	rjmp	.+126    	; 0x1ed6 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1e58:	68 85       	ldd	r22, Y+8	; 0x08
    1e5a:	79 85       	ldd	r23, Y+9	; 0x09
    1e5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	3f ef       	ldi	r19, 0xFF	; 255
    1e64:	4f e7       	ldi	r20, 0x7F	; 127
    1e66:	57 e4       	ldi	r21, 0x47	; 71
    1e68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	4c f5       	brge	.+82     	; 0x1ec2 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e70:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e72:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e76:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e2       	ldi	r20, 0x20	; 32
    1e7e:	51 e4       	ldi	r21, 0x41	; 65
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9f 83       	std	Y+7, r25	; 0x07
    1e96:	8e 83       	std	Y+6, r24	; 0x06
    1e98:	0f c0       	rjmp	.+30     	; 0x1eb8 <LCD_voidSendCmnd+0x166>
    1e9a:	88 ec       	ldi	r24, 0xC8	; 200
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9d 83       	std	Y+5, r25	; 0x05
    1ea0:	8c 83       	std	Y+4, r24	; 0x04
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_voidSendCmnd+0x154>
    1eaa:	9d 83       	std	Y+5, r25	; 0x05
    1eac:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eae:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	9f 83       	std	Y+7, r25	; 0x07
    1eb6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eba:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	69 f7       	brne	.-38     	; 0x1e9a <LCD_voidSendCmnd+0x148>
    1ec0:	24 c0       	rjmp	.+72     	; 0x1f0a <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec2:	68 85       	ldd	r22, Y+8	; 0x08
    1ec4:	79 85       	ldd	r23, Y+9	; 0x09
    1ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9f 83       	std	Y+7, r25	; 0x07
    1ed4:	8e 83       	std	Y+6, r24	; 0x06
    1ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eda:	9b 83       	std	Y+3, r25	; 0x03
    1edc:	8a 83       	std	Y+2, r24	; 0x02
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_voidSendCmnd+0x190>
    1ee6:	9b 83       	std	Y+3, r25	; 0x03
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eec:	69 89       	ldd	r22, Y+17	; 0x11
    1eee:	7a 89       	ldd	r23, Y+18	; 0x12
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	88 8b       	std	Y+16, r24	; 0x10
    1efe:	88 89       	ldd	r24, Y+16	; 0x10
    1f00:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	8a 95       	dec	r24
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_voidSendCmnd+0x1b2>
    1f08:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	62 e0       	ldi	r22, 0x02	; 2
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	
	
	
	
	#endif
}
    1f14:	69 96       	adiw	r28, 0x19	; 25
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	69 97       	sbiw	r28, 0x19	; 25
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	89 8f       	std	Y+25, r24	; 0x19
	/* step-1:Rs = 1 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_HIGH);
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	61 e0       	ldi	r22, 0x01	; 1
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
	/* Write char */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Char  );
    1f50:	83 e0       	ldi	r24, 0x03	; 3
    1f52:	69 8d       	ldd	r22, Y+25	; 0x19
    1f54:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	62 e0       	ldi	r22, 0x02	; 2
    1f5c:	41 e0       	ldi	r20, 0x01	; 1
    1f5e:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e8       	ldi	r26, 0x80	; 128
    1f68:	bf e3       	ldi	r27, 0x3F	; 63
    1f6a:	8d 8b       	std	Y+21, r24	; 0x15
    1f6c:	9e 8b       	std	Y+22, r25	; 0x16
    1f6e:	af 8b       	std	Y+23, r26	; 0x17
    1f70:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f72:	6d 89       	ldd	r22, Y+21	; 0x15
    1f74:	7e 89       	ldd	r23, Y+22	; 0x16
    1f76:	8f 89       	ldd	r24, Y+23	; 0x17
    1f78:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7a:	2b ea       	ldi	r18, 0xAB	; 171
    1f7c:	3a ea       	ldi	r19, 0xAA	; 170
    1f7e:	4a e2       	ldi	r20, 0x2A	; 42
    1f80:	50 e4       	ldi	r21, 0x40	; 64
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	89 8b       	std	Y+17, r24	; 0x11
    1f8c:	9a 8b       	std	Y+18, r25	; 0x12
    1f8e:	ab 8b       	std	Y+19, r26	; 0x13
    1f90:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f92:	69 89       	ldd	r22, Y+17	; 0x11
    1f94:	7a 89       	ldd	r23, Y+18	; 0x12
    1f96:	8b 89       	ldd	r24, Y+19	; 0x13
    1f98:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	1c f4       	brge	.+6      	; 0x1fb0 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	88 8b       	std	Y+16, r24	; 0x10
    1fae:	91 c0       	rjmp	.+290    	; 0x20d2 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1fb0:	69 89       	ldd	r22, Y+17	; 0x11
    1fb2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	53 e4       	ldi	r21, 0x43	; 67
    1fc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	0c f0       	brlt	.+2      	; 0x1fca <LCD_voidSendChar+0xa4>
    1fc8:	7b c0       	rjmp	.+246    	; 0x20c0 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1fca:	6d 89       	ldd	r22, Y+21	; 0x15
    1fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fce:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a e7       	ldi	r20, 0x7A	; 122
    1fd8:	54 e4       	ldi	r21, 0x44	; 68
    1fda:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8c 87       	std	Y+12, r24	; 0x0c
    1fe4:	9d 87       	std	Y+13, r25	; 0x0d
    1fe6:	ae 87       	std	Y+14, r26	; 0x0e
    1fe8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fec:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	88 87       	std	Y+8, r24	; 0x08
    2004:	99 87       	std	Y+9, r25	; 0x09
    2006:	aa 87       	std	Y+10, r26	; 0x0a
    2008:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    200a:	68 85       	ldd	r22, Y+8	; 0x08
    200c:	79 85       	ldd	r23, Y+9	; 0x09
    200e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2010:	9b 85       	ldd	r25, Y+11	; 0x0b
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <LCD_voidSendChar+0x106>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9f 83       	std	Y+7, r25	; 0x07
    2028:	8e 83       	std	Y+6, r24	; 0x06
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    202c:	68 85       	ldd	r22, Y+8	; 0x08
    202e:	79 85       	ldd	r23, Y+9	; 0x09
    2030:	8a 85       	ldd	r24, Y+10	; 0x0a
    2032:	9b 85       	ldd	r25, Y+11	; 0x0b
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	6c 85       	ldd	r22, Y+12	; 0x0c
    2046:	7d 85       	ldd	r23, Y+13	; 0x0d
    2048:	8e 85       	ldd	r24, Y+14	; 0x0e
    204a:	9f 85       	ldd	r25, Y+15	; 0x0f
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9f 83       	std	Y+7, r25	; 0x07
    206a:	8e 83       	std	Y+6, r24	; 0x06
    206c:	0f c0       	rjmp	.+30     	; 0x208c <LCD_voidSendChar+0x166>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9d 83       	std	Y+5, r25	; 0x05
    2074:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	9d 81       	ldd	r25, Y+5	; 0x05
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <LCD_voidSendChar+0x154>
    207e:	9d 83       	std	Y+5, r25	; 0x05
    2080:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8e 81       	ldd	r24, Y+6	; 0x06
    2084:	9f 81       	ldd	r25, Y+7	; 0x07
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9f 83       	std	Y+7, r25	; 0x07
    208a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8e 81       	ldd	r24, Y+6	; 0x06
    208e:	9f 81       	ldd	r25, Y+7	; 0x07
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <LCD_voidSendChar+0x148>
    2094:	24 c0       	rjmp	.+72     	; 0x20de <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	68 85       	ldd	r22, Y+8	; 0x08
    2098:	79 85       	ldd	r23, Y+9	; 0x09
    209a:	8a 85       	ldd	r24, Y+10	; 0x0a
    209c:	9b 85       	ldd	r25, Y+11	; 0x0b
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9f 83       	std	Y+7, r25	; 0x07
    20a8:	8e 83       	std	Y+6, r24	; 0x06
    20aa:	8e 81       	ldd	r24, Y+6	; 0x06
    20ac:	9f 81       	ldd	r25, Y+7	; 0x07
    20ae:	9b 83       	std	Y+3, r25	; 0x03
    20b0:	8a 83       	std	Y+2, r24	; 0x02
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	9b 81       	ldd	r25, Y+3	; 0x03
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <LCD_voidSendChar+0x190>
    20ba:	9b 83       	std	Y+3, r25	; 0x03
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	0f c0       	rjmp	.+30     	; 0x20de <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20c0:	69 89       	ldd	r22, Y+17	; 0x11
    20c2:	7a 89       	ldd	r23, Y+18	; 0x12
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	88 8b       	std	Y+16, r24	; 0x10
    20d2:	88 89       	ldd	r24, Y+16	; 0x10
    20d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	8a 95       	dec	r24
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_voidSendChar+0x1b2>
    20dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	62 e0       	ldi	r22, 0x02	; 2
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_u8SetPinValue>
}
    20e8:	69 96       	adiw	r28, 0x19	; 25
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <LCD_voidSendStr>:

void LCD_voidSendStr(u8* Copy_pu8Str )
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <LCD_voidSendStr+0x6>
    2100:	0f 92       	push	r0
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	9b 83       	std	Y+3, r25	; 0x03
    2108:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StrLen = 0;
    210a:	19 82       	std	Y+1, r1	; 0x01
    210c:	0e c0       	rjmp	.+28     	; 0x212a <LCD_voidSendStr+0x30>
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	9b 81       	ldd	r25, Y+3	; 0x03
    2118:	fc 01       	movw	r30, r24
    211a:	e2 0f       	add	r30, r18
    211c:	f3 1f       	adc	r31, r19
    211e:	80 81       	ld	r24, Z
    2120:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_voidSendChar>
		Local_u8StrLen++;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	8f 5f       	subi	r24, 0xFF	; 255
    2128:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendStr(u8* Copy_pu8Str )
{
	u8 Local_u8StrLen = 0;
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	fc 01       	movw	r30, r24
    2136:	e2 0f       	add	r30, r18
    2138:	f3 1f       	adc	r31, r19
    213a:	80 81       	ld	r24, Z
    213c:	88 23       	and	r24, r24
    213e:	39 f7       	brne	.-50     	; 0x210e <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
		Local_u8StrLen++;
	}
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <LCD_voidSendNum>:

void LCD_voidSendNum (u32  Copy_u32Num )
{
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	61 97       	sbiw	r28, 0x11	; 17
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	6e 87       	std	Y+14, r22	; 0x0e
    2166:	7f 87       	std	Y+15, r23	; 0x0f
    2168:	88 8b       	std	Y+16, r24	; 0x10
    216a:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8NumArr[10]= {0};
    216c:	8a e0       	ldi	r24, 0x0A	; 10
    216e:	fe 01       	movw	r30, r28
    2170:	34 96       	adiw	r30, 0x04	; 4
    2172:	df 01       	movw	r26, r30
    2174:	98 2f       	mov	r25, r24
    2176:	1d 92       	st	X+, r1
    2178:	9a 95       	dec	r25
    217a:	e9 f7       	brne	.-6      	; 0x2176 <LCD_voidSendNum+0x2a>
	u8 Local_u8ArrIndex = 0;
    217c:	1b 82       	std	Y+3, r1	; 0x03
    217e:	2d c0       	rjmp	.+90     	; 0x21da <LCD_voidSendNum+0x8e>
	while(Copy_u32Num > 0)
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	08 2f       	mov	r16, r24
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	8e 85       	ldd	r24, Y+14	; 0x0e
    2188:	9f 85       	ldd	r25, Y+15	; 0x0f
    218a:	a8 89       	ldd	r26, Y+16	; 0x10
    218c:	b9 89       	ldd	r27, Y+17	; 0x11
    218e:	2a e0       	ldi	r18, 0x0A	; 10
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 3f 14 	call	0x287e	; 0x287e <__udivmodsi4>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	28 2f       	mov	r18, r24
    21a4:	ce 01       	movw	r24, r28
    21a6:	04 96       	adiw	r24, 0x04	; 4
    21a8:	fc 01       	movw	r30, r24
    21aa:	e0 0f       	add	r30, r16
    21ac:	f1 1f       	adc	r31, r17
    21ae:	20 83       	st	Z, r18
		Copy_u32Num /=10;
    21b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    21b4:	a8 89       	ldd	r26, Y+16	; 0x10
    21b6:	b9 89       	ldd	r27, Y+17	; 0x11
    21b8:	2a e0       	ldi	r18, 0x0A	; 10
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 3f 14 	call	0x287e	; 0x287e <__udivmodsi4>
    21c8:	da 01       	movw	r26, r20
    21ca:	c9 01       	movw	r24, r18
    21cc:	8e 87       	std	Y+14, r24	; 0x0e
    21ce:	9f 87       	std	Y+15, r25	; 0x0f
    21d0:	a8 8b       	std	Y+16, r26	; 0x10
    21d2:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ArrIndex++;
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	8f 5f       	subi	r24, 0xFF	; 255
    21d8:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidSendNum (u32  Copy_u32Num )
{
    u8 Local_u8NumArr[10]= {0};
	u8 Local_u8ArrIndex = 0;
	while(Copy_u32Num > 0)
    21da:	8e 85       	ldd	r24, Y+14	; 0x0e
    21dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    21de:	a8 89       	ldd	r26, Y+16	; 0x10
    21e0:	b9 89       	ldd	r27, Y+17	; 0x11
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	a1 05       	cpc	r26, r1
    21e6:	b1 05       	cpc	r27, r1
    21e8:	59 f6       	brne	.-106    	; 0x2180 <LCD_voidSendNum+0x34>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	10 c0       	rjmp	.+32     	; 0x2218 <LCD_voidSendNum+0xcc>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
    21f8:	29 81       	ldd	r18, Y+1	; 0x01
    21fa:	3a 81       	ldd	r19, Y+2	; 0x02
    21fc:	ce 01       	movw	r24, r28
    21fe:	04 96       	adiw	r24, 0x04	; 4
    2200:	fc 01       	movw	r30, r24
    2202:	e2 0f       	add	r30, r18
    2204:	f3 1f       	adc	r31, r19
    2206:	80 81       	ld	r24, Z
    2208:	80 5d       	subi	r24, 0xD0	; 208
    220a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_voidSendChar>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	99 23       	and	r25, r25
    221e:	64 f7       	brge	.-40     	; 0x21f8 <LCD_voidSendNum+0xac>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
	}
} 
    2220:	61 96       	adiw	r28, 0x11	; 17
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	08 95       	ret

00002236 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY (u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <LCD_u8GoToXY+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <LCD_u8GoToXY+0x8>
    223e:	0f 92       	push	r0
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	8a 83       	std	Y+2, r24	; 0x02
    2246:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Location <= 39)
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	88 32       	cpi	r24, 0x28	; 40
    2250:	e0 f4       	brcc	.+56     	; 0x228a <LCD_u8GoToXY+0x54>
	{
			switch (Copy_u8LineNum)
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3d 83       	std	Y+5, r19	; 0x05
    225a:	2c 83       	std	Y+4, r18	; 0x04
    225c:	8c 81       	ldd	r24, Y+4	; 0x04
    225e:	9d 81       	ldd	r25, Y+5	; 0x05
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	31 f0       	breq	.+12     	; 0x2272 <LCD_u8GoToXY+0x3c>
    2266:	2c 81       	ldd	r18, Y+4	; 0x04
    2268:	3d 81       	ldd	r19, Y+5	; 0x05
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	31 f0       	breq	.+12     	; 0x227c <LCD_u8GoToXY+0x46>
    2270:	0a c0       	rjmp	.+20     	; 0x2286 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE_1   : LCD_voidSendCmnd (0x80 + Copy_u8Location); break;
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	80 58       	subi	r24, 0x80	; 128
    2276:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    227a:	08 c0       	rjmp	.+16     	; 0x228c <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE_2   : LCD_voidSendCmnd (0xC0 + Copy_u8Location); break;
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	80 54       	subi	r24, 0x40	; 64
    2280:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    2284:	03 c0       	rjmp	.+6      	; 0x228c <LCD_u8GoToXY+0x56>
			default              : Local_u8ErrorState = STD_TYPES_NOK;
    2286:	19 82       	std	Y+1, r1	; 0x01
    2288:	01 c0       	rjmp	.+2      	; 0x228c <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    228a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <LCD_voidClearScreen>:

void LCD_voidClearScreen (void)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	2e 97       	sbiw	r28, 0x0e	; 14
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd (0x01);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e4       	ldi	r27, 0x40	; 64
    22c0:	8b 87       	std	Y+11, r24	; 0x0b
    22c2:	9c 87       	std	Y+12, r25	; 0x0c
    22c4:	ad 87       	std	Y+13, r26	; 0x0d
    22c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    22cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a ef       	ldi	r20, 0xFA	; 250
    22d6:	54 e4       	ldi	r21, 0x44	; 68
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8f 83       	std	Y+7, r24	; 0x07
    22e2:	98 87       	std	Y+8, r25	; 0x08
    22e4:	a9 87       	std	Y+9, r26	; 0x09
    22e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	2c f4       	brge	.+10     	; 0x230a <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    230a:	6f 81       	ldd	r22, Y+7	; 0x07
    230c:	78 85       	ldd	r23, Y+8	; 0x08
    230e:	89 85       	ldd	r24, Y+9	; 0x09
    2310:	9a 85       	ldd	r25, Y+10	; 0x0a
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	4c f5       	brge	.+82     	; 0x2374 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2322:	6b 85       	ldd	r22, Y+11	; 0x0b
    2324:	7c 85       	ldd	r23, Y+12	; 0x0c
    2326:	8d 85       	ldd	r24, Y+13	; 0x0d
    2328:	9e 85       	ldd	r25, Y+14	; 0x0e
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	0f c0       	rjmp	.+30     	; 0x236a <LCD_voidClearScreen+0xcc>
    234c:	88 ec       	ldi	r24, 0xC8	; 200
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9c 83       	std	Y+4, r25	; 0x04
    2352:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_voidClearScreen+0xba>
    235c:	9c 83       	std	Y+4, r25	; 0x04
    235e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	69 f7       	brne	.-38     	; 0x234c <LCD_voidClearScreen+0xae>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2374:	6f 81       	ldd	r22, Y+7	; 0x07
    2376:	78 85       	ldd	r23, Y+8	; 0x08
    2378:	89 85       	ldd	r24, Y+9	; 0x09
    237a:	9a 85       	ldd	r25, Y+10	; 0x0a
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_voidClearScreen+0xf6>
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    239c:	2e 96       	adiw	r28, 0x0e	; 14
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <LCD_u8SendSpecialChar>:

u8 LCD_u8SendSpecialChar    (u8 Copy_u8CharNum , u8* Copy_pu8CharShape ,u8  Copy_u8LineNum , u8 Copy_u8Location )
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	2a 97       	sbiw	r28, 0x0a	; 10
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	8c 83       	std	Y+4, r24	; 0x04
    23c4:	7e 83       	std	Y+6, r23	; 0x06
    23c6:	6d 83       	std	Y+5, r22	; 0x05
    23c8:	4f 83       	std	Y+7, r20	; 0x07
    23ca:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	8b 83       	std	Y+3, r24	; 0x03
	if((Copy_u8CharNum <= 7)&&(Copy_u8Location <= 39)&&(Copy_u8LineNum <=2)) 
    23d0:	8c 81       	ldd	r24, Y+4	; 0x04
    23d2:	88 30       	cpi	r24, 0x08	; 8
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <LCD_u8SendSpecialChar+0x2a>
    23d6:	79 c0       	rjmp	.+242    	; 0x24ca <LCD_u8SendSpecialChar+0x11c>
    23d8:	88 85       	ldd	r24, Y+8	; 0x08
    23da:	88 32       	cpi	r24, 0x28	; 40
    23dc:	08 f0       	brcs	.+2      	; 0x23e0 <LCD_u8SendSpecialChar+0x32>
    23de:	75 c0       	rjmp	.+234    	; 0x24ca <LCD_u8SendSpecialChar+0x11c>
    23e0:	8f 81       	ldd	r24, Y+7	; 0x07
    23e2:	83 30       	cpi	r24, 0x03	; 3
    23e4:	08 f0       	brcs	.+2      	; 0x23e8 <LCD_u8SendSpecialChar+0x3a>
    23e6:	71 c0       	rjmp	.+226    	; 0x24ca <LCD_u8SendSpecialChar+0x11c>
	{
		switch(Copy_u8CharNum)
    23e8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	3a 87       	std	Y+10, r19	; 0x0a
    23f0:	29 87       	std	Y+9, r18	; 0x09
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	83 30       	cpi	r24, 0x03	; 3
    23f8:	91 05       	cpc	r25, r1
    23fa:	a9 f1       	breq	.+106    	; 0x2466 <LCD_u8SendSpecialChar+0xb8>
    23fc:	29 85       	ldd	r18, Y+9	; 0x09
    23fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2400:	24 30       	cpi	r18, 0x04	; 4
    2402:	31 05       	cpc	r19, r1
    2404:	7c f4       	brge	.+30     	; 0x2424 <LCD_u8SendSpecialChar+0x76>
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	91 05       	cpc	r25, r1
    240e:	19 f1       	breq	.+70     	; 0x2456 <LCD_u8SendSpecialChar+0xa8>
    2410:	29 85       	ldd	r18, Y+9	; 0x09
    2412:	3a 85       	ldd	r19, Y+10	; 0x0a
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	14 f5       	brge	.+68     	; 0x245e <LCD_u8SendSpecialChar+0xb0>
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	9a 85       	ldd	r25, Y+10	; 0x0a
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	b1 f0       	breq	.+44     	; 0x244e <LCD_u8SendSpecialChar+0xa0>
    2422:	34 c0       	rjmp	.+104    	; 0x248c <LCD_u8SendSpecialChar+0xde>
    2424:	29 85       	ldd	r18, Y+9	; 0x09
    2426:	3a 85       	ldd	r19, Y+10	; 0x0a
    2428:	25 30       	cpi	r18, 0x05	; 5
    242a:	31 05       	cpc	r19, r1
    242c:	21 f1       	breq	.+72     	; 0x2476 <LCD_u8SendSpecialChar+0xc8>
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	85 30       	cpi	r24, 0x05	; 5
    2434:	91 05       	cpc	r25, r1
    2436:	dc f0       	brlt	.+54     	; 0x246e <LCD_u8SendSpecialChar+0xc0>
    2438:	29 85       	ldd	r18, Y+9	; 0x09
    243a:	3a 85       	ldd	r19, Y+10	; 0x0a
    243c:	26 30       	cpi	r18, 0x06	; 6
    243e:	31 05       	cpc	r19, r1
    2440:	f1 f0       	breq	.+60     	; 0x247e <LCD_u8SendSpecialChar+0xd0>
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	87 30       	cpi	r24, 0x07	; 7
    2448:	91 05       	cpc	r25, r1
    244a:	e9 f0       	breq	.+58     	; 0x2486 <LCD_u8SendSpecialChar+0xd8>
    244c:	1f c0       	rjmp	.+62     	; 0x248c <LCD_u8SendSpecialChar+0xde>
		{
			case 0:LCD_voidSendCmnd(0b01000000); break; //0
    244e:	80 e4       	ldi	r24, 0x40	; 64
    2450:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    2454:	1b c0       	rjmp	.+54     	; 0x248c <LCD_u8SendSpecialChar+0xde>
			case 1:LCD_voidSendCmnd(0b01001000); break; //8
    2456:	88 e4       	ldi	r24, 0x48	; 72
    2458:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    245c:	17 c0       	rjmp	.+46     	; 0x248c <LCD_u8SendSpecialChar+0xde>
			case 2:LCD_voidSendCmnd(0b01010000); break; //16
    245e:	80 e5       	ldi	r24, 0x50	; 80
    2460:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    2464:	13 c0       	rjmp	.+38     	; 0x248c <LCD_u8SendSpecialChar+0xde>
			case 3:LCD_voidSendCmnd(0b01011000); break; //24
    2466:	88 e5       	ldi	r24, 0x58	; 88
    2468:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    246c:	0f c0       	rjmp	.+30     	; 0x248c <LCD_u8SendSpecialChar+0xde>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
    246e:	80 e6       	ldi	r24, 0x60	; 96
    2470:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    2474:	0b c0       	rjmp	.+22     	; 0x248c <LCD_u8SendSpecialChar+0xde>
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
    2476:	88 e6       	ldi	r24, 0x68	; 104
    2478:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    247c:	07 c0       	rjmp	.+14     	; 0x248c <LCD_u8SendSpecialChar+0xde>
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
    247e:	80 e7       	ldi	r24, 0x70	; 112
    2480:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    2484:	03 c0       	rjmp	.+6      	; 0x248c <LCD_u8SendSpecialChar+0xde>
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
    2486:	88 e7       	ldi	r24, 0x78	; 120
    2488:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
		}
		for(int i=0 ;i <8 ;i++)
    248c:	1a 82       	std	Y+2, r1	; 0x02
    248e:	19 82       	std	Y+1, r1	; 0x01
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <LCD_u8SendSpecialChar+0x102>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
    2492:	29 81       	ldd	r18, Y+1	; 0x01
    2494:	3a 81       	ldd	r19, Y+2	; 0x02
    2496:	8d 81       	ldd	r24, Y+5	; 0x05
    2498:	9e 81       	ldd	r25, Y+6	; 0x06
    249a:	fc 01       	movw	r30, r24
    249c:	e2 0f       	add	r30, r18
    249e:	f3 1f       	adc	r31, r19
    24a0:	80 81       	ld	r24, Z
    24a2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_voidSendChar>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
		}
		for(int i=0 ;i <8 ;i++)
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	88 30       	cpi	r24, 0x08	; 8
    24b6:	91 05       	cpc	r25, r1
    24b8:	64 f3       	brlt	.-40     	; 0x2492 <LCD_u8SendSpecialChar+0xe4>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
		}
	    LCD_u8GoToXY(Copy_u8LineNum ,Copy_u8Location );	
    24ba:	8f 81       	ldd	r24, Y+7	; 0x07
    24bc:	68 85       	ldd	r22, Y+8	; 0x08
    24be:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_voidSendChar>
    24c8:	01 c0       	rjmp	.+2      	; 0x24cc <LCD_u8SendSpecialChar+0x11e>
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    24ca:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    24ce:	2a 96       	adiw	r28, 0x0a	; 10
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <LCD_voidShiftRight>:

void LCD_voidShiftRight(void)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	2e 97       	sbiw	r28, 0x0e	; 14
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011100);
    24f4:	8c e1       	ldi	r24, 0x1C	; 28
    24f6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a8 ec       	ldi	r26, 0xC8	; 200
    2500:	b2 e4       	ldi	r27, 0x42	; 66
    2502:	8b 87       	std	Y+11, r24	; 0x0b
    2504:	9c 87       	std	Y+12, r25	; 0x0c
    2506:	ad 87       	std	Y+13, r26	; 0x0d
    2508:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	6b 85       	ldd	r22, Y+11	; 0x0b
    250c:	7c 85       	ldd	r23, Y+12	; 0x0c
    250e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2510:	9e 85       	ldd	r25, Y+14	; 0x0e
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a ef       	ldi	r20, 0xFA	; 250
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8f 83       	std	Y+7, r24	; 0x07
    2524:	98 87       	std	Y+8, r25	; 0x08
    2526:	a9 87       	std	Y+9, r26	; 0x09
    2528:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    252a:	6f 81       	ldd	r22, Y+7	; 0x07
    252c:	78 85       	ldd	r23, Y+8	; 0x08
    252e:	89 85       	ldd	r24, Y+9	; 0x09
    2530:	9a 85       	ldd	r25, Y+10	; 0x0a
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    253e:	88 23       	and	r24, r24
    2540:	2c f4       	brge	.+10     	; 0x254c <LCD_voidShiftRight+0x6c>
		__ticks = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	3f c0       	rjmp	.+126    	; 0x25ca <LCD_voidShiftRight+0xea>
	else if (__tmp > 65535)
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	4c f5       	brge	.+82     	; 0x25b6 <LCD_voidShiftRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2564:	6b 85       	ldd	r22, Y+11	; 0x0b
    2566:	7c 85       	ldd	r23, Y+12	; 0x0c
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	9e 85       	ldd	r25, Y+14	; 0x0e
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e2       	ldi	r20, 0x20	; 32
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <LCD_voidShiftRight+0xcc>
    258e:	88 ec       	ldi	r24, 0xC8	; 200
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9c 83       	std	Y+4, r25	; 0x04
    2594:	8b 83       	std	Y+3, r24	; 0x03
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	9c 81       	ldd	r25, Y+4	; 0x04
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_voidShiftRight+0xba>
    259e:	9c 83       	std	Y+4, r25	; 0x04
    25a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	69 f7       	brne	.-38     	; 0x258e <LCD_voidShiftRight+0xae>
    25b4:	14 c0       	rjmp	.+40     	; 0x25de <LCD_voidShiftRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b6:	6f 81       	ldd	r22, Y+7	; 0x07
    25b8:	78 85       	ldd	r23, Y+8	; 0x08
    25ba:	89 85       	ldd	r24, Y+9	; 0x09
    25bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	9a 83       	std	Y+2, r25	; 0x02
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	9a 81       	ldd	r25, Y+2	; 0x02
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <LCD_voidShiftRight+0xf6>
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    25de:	2e 96       	adiw	r28, 0x0e	; 14
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <LCD_voidShiftLeft>:

void LCD_voidShiftLeft(void)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	2e 97       	sbiw	r28, 0x0e	; 14
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011000);
    2604:	88 e1       	ldi	r24, 0x18	; 24
    2606:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_voidSendCmnd>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a8 ec       	ldi	r26, 0xC8	; 200
    2610:	b2 e4       	ldi	r27, 0x42	; 66
    2612:	8b 87       	std	Y+11, r24	; 0x0b
    2614:	9c 87       	std	Y+12, r25	; 0x0c
    2616:	ad 87       	std	Y+13, r26	; 0x0d
    2618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	6b 85       	ldd	r22, Y+11	; 0x0b
    261c:	7c 85       	ldd	r23, Y+12	; 0x0c
    261e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2620:	9e 85       	ldd	r25, Y+14	; 0x0e
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a ef       	ldi	r20, 0xFA	; 250
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8f 83       	std	Y+7, r24	; 0x07
    2634:	98 87       	std	Y+8, r25	; 0x08
    2636:	a9 87       	std	Y+9, r26	; 0x09
    2638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <LCD_voidShiftLeft+0x6c>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	3f c0       	rjmp	.+126    	; 0x26da <LCD_voidShiftLeft+0xea>
	else if (__tmp > 65535)
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <LCD_voidShiftLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	6b 85       	ldd	r22, Y+11	; 0x0b
    2676:	7c 85       	ldd	r23, Y+12	; 0x0c
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <LCD_voidShiftLeft+0xcc>
    269e:	88 ec       	ldi	r24, 0xC8	; 200
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	8b 83       	std	Y+3, r24	; 0x03
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_voidShiftLeft+0xba>
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <LCD_voidShiftLeft+0xae>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <LCD_voidShiftLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_voidShiftLeft+0xf6>
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
    26ee:	2e 96       	adiw	r28, 0x0e	; 14
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <TIMERS_voidTimer0Init>:

/*Global Pointer To Function Of Timer0 OVF*/
static void(*TIMERS_pfTimer0OVF)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
	/*Select Mood => Normal Mood*/
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
    2708:	a3 e5       	ldi	r26, 0x53	; 83
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e3 e5       	ldi	r30, 0x53	; 83
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	8f 7b       	andi	r24, 0xBF	; 191
    2714:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
    2716:	a3 e5       	ldi	r26, 0x53	; 83
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e3 e5       	ldi	r30, 0x53	; 83
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	87 7f       	andi	r24, 0xF7	; 247
    2722:	8c 93       	st	X, r24
	
	/*Enable OVF Interrupt*/
	SET_BIT(TIMERS_u8_TIMSK_REG,0);
    2724:	a9 e5       	ldi	r26, 0x59	; 89
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e9 e5       	ldi	r30, 0x59	; 89
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	81 60       	ori	r24, 0x01	; 1
    2730:	8c 93       	st	X, r24
	
	/*Set Preload Value*/
	TIMERS_u8_TCNT0_REG = 192;
    2732:	e2 e5       	ldi	r30, 0x52	; 82
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 ec       	ldi	r24, 0xC0	; 192
    2738:	80 83       	st	Z, r24
	
	/*Set PreScaler Value*/
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
    273a:	a3 e5       	ldi	r26, 0x53	; 83
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e3 e5       	ldi	r30, 0x53	; 83
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	8e 7f       	andi	r24, 0xFE	; 254
    2746:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
    2748:	a3 e5       	ldi	r26, 0x53	; 83
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e3 e5       	ldi	r30, 0x53	; 83
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	82 60       	ori	r24, 0x02	; 2
    2754:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    2756:	a3 e5       	ldi	r26, 0x53	; 83
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e3 e5       	ldi	r30, 0x53	; 83
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8b 7f       	andi	r24, 0xFB	; 251
    2762:	8c 93       	st	X, r24
}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <TIMERS_u8Timer0SetCallBack>:


u8   TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	00 d0       	rcall	.+0      	; 0x2770 <TIMERS_u8Timer0SetCallBack+0x6>
    2770:	0f 92       	push	r0
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	9b 83       	std	Y+3, r25	; 0x03
    2778:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	9b 81       	ldd	r25, Y+3	; 0x03
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	39 f0       	breq	.+14     	; 0x2794 <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	90 93 95 00 	sts	0x0095, r25
    278e:	80 93 94 00 	sts	0x0094, r24
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2794:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2796:	89 81       	ldd	r24, Y+1	; 0x01
}
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <__vector_11>:


/*Prototype For ISR of Timer0 OVF*/
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    27a4:	1f 92       	push	r1
    27a6:	0f 92       	push	r0
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	0f 92       	push	r0
    27ac:	11 24       	eor	r1, r1
    27ae:	2f 93       	push	r18
    27b0:	3f 93       	push	r19
    27b2:	4f 93       	push	r20
    27b4:	5f 93       	push	r21
    27b6:	6f 93       	push	r22
    27b8:	7f 93       	push	r23
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
    27be:	af 93       	push	r26
    27c0:	bf 93       	push	r27
    27c2:	ef 93       	push	r30
    27c4:	ff 93       	push	r31
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    27ce:	80 91 96 00 	lds	r24, 0x0096
    27d2:	90 91 97 00 	lds	r25, 0x0097
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	90 93 97 00 	sts	0x0097, r25
    27dc:	80 93 96 00 	sts	0x0096, r24
	if(Local_u16CounterOVF == 3907)
    27e0:	80 91 96 00 	lds	r24, 0x0096
    27e4:	90 91 97 00 	lds	r25, 0x0097
    27e8:	2f e0       	ldi	r18, 0x0F	; 15
    27ea:	83 34       	cpi	r24, 0x43	; 67
    27ec:	92 07       	cpc	r25, r18
    27ee:	99 f4       	brne	.+38     	; 0x2816 <__vector_11+0x72>
	{
		/*Update Preload Value*/
	    TIMERS_u8_TCNT0_REG = 192;
    27f0:	e2 e5       	ldi	r30, 0x52	; 82
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 ec       	ldi	r24, 0xC0	; 192
    27f6:	80 83       	st	Z, r24
		/*Clear OVF Counter*/ 
		Local_u16CounterOVF = 0;
    27f8:	10 92 97 00 	sts	0x0097, r1
    27fc:	10 92 96 00 	sts	0x0096, r1
		/*Call App Function*/
		if(TIMERS_pfTimer0OVF != NULL)
    2800:	80 91 94 00 	lds	r24, 0x0094
    2804:	90 91 95 00 	lds	r25, 0x0095
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	29 f0       	breq	.+10     	; 0x2816 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    280c:	e0 91 94 00 	lds	r30, 0x0094
    2810:	f0 91 95 00 	lds	r31, 0x0095
    2814:	09 95       	icall
		}
	}
}
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	ff 91       	pop	r31
    281c:	ef 91       	pop	r30
    281e:	bf 91       	pop	r27
    2820:	af 91       	pop	r26
    2822:	9f 91       	pop	r25
    2824:	8f 91       	pop	r24
    2826:	7f 91       	pop	r23
    2828:	6f 91       	pop	r22
    282a:	5f 91       	pop	r21
    282c:	4f 91       	pop	r20
    282e:	3f 91       	pop	r19
    2830:	2f 91       	pop	r18
    2832:	0f 90       	pop	r0
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	0f 90       	pop	r0
    2838:	1f 90       	pop	r1
    283a:	18 95       	reti

0000283c <main>:

#include "LCD_interface.h"
#include "KPD_interface.h"

int main(void)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	27 97       	sbiw	r28, 0x07	; 7
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyValue;
	u8 Local_Au8Num[6];
	DIO_voidInit();
    2850:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	GI_voidEnale();
    2854:	0e 94 bb 0a 	call	0x1576	; 0x1576 <GI_voidEnale>
	LCD_voidInit();
    2858:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <LCD_voidInit>
	LCD_u8GoToXY(1,4);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	64 e0       	ldi	r22, 0x04	; 4
    2860:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_u8GoToXY>
	LCD_voidSendStr("StopWatch");
    2864:	80 e6       	ldi	r24, 0x60	; 96
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_voidSendStr>
	LCD_u8GoToXY(2,3);
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	63 e0       	ldi	r22, 0x03	; 3
    2870:	0e 94 1b 11 	call	0x2236	; 0x2236 <LCD_u8GoToXY>
	LCD_voidSendStr("00:00:00");
    2874:	8a e6       	ldi	r24, 0x6A	; 106
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 7d 10 	call	0x20fa	; 0x20fa <LCD_voidSendStr>
    287c:	ff cf       	rjmp	.-2      	; 0x287c <main+0x40>

0000287e <__udivmodsi4>:
    287e:	a1 e2       	ldi	r26, 0x21	; 33
    2880:	1a 2e       	mov	r1, r26
    2882:	aa 1b       	sub	r26, r26
    2884:	bb 1b       	sub	r27, r27
    2886:	fd 01       	movw	r30, r26
    2888:	0d c0       	rjmp	.+26     	; 0x28a4 <__udivmodsi4_ep>

0000288a <__udivmodsi4_loop>:
    288a:	aa 1f       	adc	r26, r26
    288c:	bb 1f       	adc	r27, r27
    288e:	ee 1f       	adc	r30, r30
    2890:	ff 1f       	adc	r31, r31
    2892:	a2 17       	cp	r26, r18
    2894:	b3 07       	cpc	r27, r19
    2896:	e4 07       	cpc	r30, r20
    2898:	f5 07       	cpc	r31, r21
    289a:	20 f0       	brcs	.+8      	; 0x28a4 <__udivmodsi4_ep>
    289c:	a2 1b       	sub	r26, r18
    289e:	b3 0b       	sbc	r27, r19
    28a0:	e4 0b       	sbc	r30, r20
    28a2:	f5 0b       	sbc	r31, r21

000028a4 <__udivmodsi4_ep>:
    28a4:	66 1f       	adc	r22, r22
    28a6:	77 1f       	adc	r23, r23
    28a8:	88 1f       	adc	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	1a 94       	dec	r1
    28ae:	69 f7       	brne	.-38     	; 0x288a <__udivmodsi4_loop>
    28b0:	60 95       	com	r22
    28b2:	70 95       	com	r23
    28b4:	80 95       	com	r24
    28b6:	90 95       	com	r25
    28b8:	9b 01       	movw	r18, r22
    28ba:	ac 01       	movw	r20, r24
    28bc:	bd 01       	movw	r22, r26
    28be:	cf 01       	movw	r24, r30
    28c0:	08 95       	ret

000028c2 <__prologue_saves__>:
    28c2:	2f 92       	push	r2
    28c4:	3f 92       	push	r3
    28c6:	4f 92       	push	r4
    28c8:	5f 92       	push	r5
    28ca:	6f 92       	push	r6
    28cc:	7f 92       	push	r7
    28ce:	8f 92       	push	r8
    28d0:	9f 92       	push	r9
    28d2:	af 92       	push	r10
    28d4:	bf 92       	push	r11
    28d6:	cf 92       	push	r12
    28d8:	df 92       	push	r13
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	ca 1b       	sub	r28, r26
    28ec:	db 0b       	sbc	r29, r27
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	09 94       	ijmp

000028fa <__epilogue_restores__>:
    28fa:	2a 88       	ldd	r2, Y+18	; 0x12
    28fc:	39 88       	ldd	r3, Y+17	; 0x11
    28fe:	48 88       	ldd	r4, Y+16	; 0x10
    2900:	5f 84       	ldd	r5, Y+15	; 0x0f
    2902:	6e 84       	ldd	r6, Y+14	; 0x0e
    2904:	7d 84       	ldd	r7, Y+13	; 0x0d
    2906:	8c 84       	ldd	r8, Y+12	; 0x0c
    2908:	9b 84       	ldd	r9, Y+11	; 0x0b
    290a:	aa 84       	ldd	r10, Y+10	; 0x0a
    290c:	b9 84       	ldd	r11, Y+9	; 0x09
    290e:	c8 84       	ldd	r12, Y+8	; 0x08
    2910:	df 80       	ldd	r13, Y+7	; 0x07
    2912:	ee 80       	ldd	r14, Y+6	; 0x06
    2914:	fd 80       	ldd	r15, Y+5	; 0x05
    2916:	0c 81       	ldd	r16, Y+4	; 0x04
    2918:	1b 81       	ldd	r17, Y+3	; 0x03
    291a:	aa 81       	ldd	r26, Y+2	; 0x02
    291c:	b9 81       	ldd	r27, Y+1	; 0x01
    291e:	ce 0f       	add	r28, r30
    2920:	d1 1d       	adc	r29, r1
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	ed 01       	movw	r28, r26
    292e:	08 95       	ret

00002930 <_exit>:
    2930:	f8 94       	cli

00002932 <__stop_program>:
    2932:	ff cf       	rjmp	.-2      	; 0x2932 <__stop_program>
