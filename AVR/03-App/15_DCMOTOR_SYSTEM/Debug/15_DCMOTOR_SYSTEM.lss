
15_DCMOTOR_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e12  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00002e12  00002e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002490  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c7d  00000000  00000000  000053ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006029  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006189  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000835d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000945e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a3e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 61 13 	call	0x26c2	; 0x26c2 <main>
      7a:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 ed       	ldi	r26, 0xD3	; 211
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 ed       	ldi	r24, 0xD3	; 211
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 ed       	ldi	r22, 0xD3	; 211
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/*Intial PINS Direction*/ 
	DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION , DIO_u8_PA6_INTIAL_DIRECTION , DIO_u8_PA5_INTIAL_DIRECTION ,  DIO_u8_PA4_INTIAL_DIRECTION, 
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	10 82       	st	Z, r1
	                       DIO_u8_PA3_INTIAL_DIRECTION , DIO_u8_PA2_INTIAL_DIRECTION , DIO_u8_PA1_INTIAL_DIRECTION ,  DIO_u8_PA0_INTIAL_DIRECTION );
    
	DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION , DIO_u8_PB6_INTIAL_DIRECTION , DIO_u8_PB5_INTIAL_DIRECTION ,  DIO_u8_PB4_INTIAL_DIRECTION , 
     c9c:	e7 e3       	ldi	r30, 0x37	; 55
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION , DIO_u8_PB2_INTIAL_DIRECTION , DIO_u8_PB1_INTIAL_DIRECTION ,  DIO_u8_PB0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION , DIO_u8_PC6_INTIAL_DIRECTION , DIO_u8_PC5_INTIAL_DIRECTION ,  DIO_u8_PC4_INTIAL_DIRECTION ,
     ca4:	e4 e3       	ldi	r30, 0x34	; 52
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION , DIO_u8_PC2_INTIAL_DIRECTION , DIO_u8_PC1_INTIAL_DIRECTION ,  DIO_u8_PC0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION , DIO_u8_PD6_INTIAL_DIRECTION , DIO_u8_PD5_INTIAL_DIRECTION ,  DIO_u8_PD4_INTIAL_DIRECTION , 
     cac:	e1 e3       	ldi	r30, 0x31	; 49
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8f e0       	ldi	r24, 0x0F	; 15
     cb2:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION , DIO_u8_PD2_INTIAL_DIRECTION , DIO_u8_PD1_INTIAL_DIRECTION ,  DIO_u8_PD0_INTIAL_DIRECTION );
						  
						  
	/*Intial PINS Value*/
    DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE     , DIO_u8_PA6_INTIAL_VALUE     , DIO_u8_PA5_INTIAL_VALUE ,      DIO_u8_PA4_INTIAL_VALUE , 
     cb4:	eb e3       	ldi	r30, 0x3B	; 59
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
				            DIO_u8_PA3_INTIAL_VALUE     , DIO_u8_PA2_INTIAL_VALUE     , DIO_u8_PA1_INTIAL_VALUE ,      DIO_u8_PA0_INTIAL_VALUE);                  
                                                                                   
	DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE     , DIO_u8_PB6_INTIAL_VALUE     , DIO_u8_PB5_INTIAL_VALUE ,      DIO_u8_PB4_INTIAL_VALUE ,
     cba:	e8 e3       	ldi	r30, 0x38	; 56
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	80 83       	st	Z, r24
					        DIO_u8_PB3_INTIAL_VALUE     , DIO_u8_PB2_INTIAL_VALUE     , DIO_u8_PB1_INTIAL_VALUE ,      DIO_u8_PB0_INTIAL_VALUE);                  
					                                                                  
	DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE     , DIO_u8_PC6_INTIAL_VALUE     , DIO_u8_PC5_INTIAL_VALUE ,      DIO_u8_PC4_INTIAL_VALUE , 
     cc2:	e5 e3       	ldi	r30, 0x35	; 53
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
					        DIO_u8_PC3_INTIAL_VALUE     , DIO_u8_PC2_INTIAL_VALUE     , DIO_u8_PC1_INTIAL_VALUE ,      DIO_u8_PC0_INTIAL_VALUE);                  
					                                                                 
	DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE     , DIO_u8_PD6_INTIAL_VALUE     , DIO_u8_PD5_INTIAL_VALUE ,      DIO_u8_PD4_INTIAL_VALUE , 
     cc8:	e2 e3       	ldi	r30, 0x32	; 50
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 ef       	ldi	r24, 0xF0	; 240
     cce:	80 83       	st	Z, r24
						    DIO_u8_PD3_INTIAL_VALUE     , DIO_u8_PD2_INTIAL_VALUE     ,DIO_u8_PD1_INTIAL_VALUE  ,      DIO_u8_PD0_INTIAL_VALUE);
						                                               
						   
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection   (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinDirection)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2e 97       	sbiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	6b 83       	std	Y+3, r22	; 0x03
     cee:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_PinDirection == DIO_u8_OUTPUT)||(Copy_PinDirection == DIO_u8_INPUT)))
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <DIO_u8SetPinDirection+0x26>
     cfa:	0c c1       	rjmp	.+536    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	08 f0       	brcs	.+2      	; 0xd04 <DIO_u8SetPinDirection+0x2e>
     d02:	08 c1       	rjmp	.+528    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	21 f0       	breq	.+8      	; 0xd12 <DIO_u8SetPinDirection+0x3c>
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	88 23       	and	r24, r24
     d0e:	09 f0       	breq	.+2      	; 0xd12 <DIO_u8SetPinDirection+0x3c>
     d10:	01 c1       	rjmp	.+514    	; 0xf14 <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	3e 87       	std	Y+14, r19	; 0x0e
     d1a:	2d 87       	std	Y+13, r18	; 0x0d
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	09 f4       	brne	.+2      	; 0xd28 <DIO_u8SetPinDirection+0x52>
     d26:	4f c0       	rjmp	.+158    	; 0xdc6 <DIO_u8SetPinDirection+0xf0>
     d28:	2d 85       	ldd	r18, Y+13	; 0x0d
     d2a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	2c f4       	brge	.+10     	; 0xd3c <DIO_u8SetPinDirection+0x66>
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	9e 85       	ldd	r25, Y+14	; 0x0e
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	71 f0       	breq	.+28     	; 0xd56 <DIO_u8SetPinDirection+0x80>
     d3a:	ed c0       	rjmp	.+474    	; 0xf16 <DIO_u8SetPinDirection+0x240>
     d3c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <DIO_u8SetPinDirection+0x72>
     d46:	77 c0       	rjmp	.+238    	; 0xe36 <DIO_u8SetPinDirection+0x160>
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <DIO_u8SetPinDirection+0x7e>
     d52:	a9 c0       	rjmp	.+338    	; 0xea6 <DIO_u8SetPinDirection+0x1d0>
     d54:	e0 c0       	rjmp	.+448    	; 0xf16 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch(Copy_PinDirection)
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3c 87       	std	Y+12, r19	; 0x0c
     d5e:	2b 87       	std	Y+11, r18	; 0x0b
     d60:	8b 85       	ldd	r24, Y+11	; 0x0b
     d62:	9c 85       	ldd	r25, Y+12	; 0x0c
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	d1 f0       	breq	.+52     	; 0xd9c <DIO_u8SetPinDirection+0xc6>
     d68:	2b 85       	ldd	r18, Y+11	; 0x0b
     d6a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6c:	21 30       	cpi	r18, 0x01	; 1
     d6e:	31 05       	cpc	r19, r1
     d70:	09 f0       	breq	.+2      	; 0xd74 <DIO_u8SetPinDirection+0x9e>
     d72:	d1 c0       	rjmp	.+418    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     d74:	aa e3       	ldi	r26, 0x3A	; 58
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ea e3       	ldi	r30, 0x3A	; 58
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_u8SetPinDirection+0xbc>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_u8SetPinDirection+0xb8>
     d96:	84 2b       	or	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	bd c0       	rjmp	.+378    	; 0xf16 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     d9c:	aa e3       	ldi	r26, 0x3A	; 58
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_u8SetPinDirection+0xe4>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_u8SetPinDirection+0xe0>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	a8 c0       	rjmp	.+336    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTB:
				switch(Copy_PinDirection)
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3a 87       	std	Y+10, r19	; 0x0a
     dce:	29 87       	std	Y+9, r18	; 0x09
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <DIO_u8SetPinDirection+0x136>
     dd8:	29 85       	ldd	r18, Y+9	; 0x09
     dda:	3a 85       	ldd	r19, Y+10	; 0x0a
     ddc:	21 30       	cpi	r18, 0x01	; 1
     dde:	31 05       	cpc	r19, r1
     de0:	09 f0       	breq	.+2      	; 0xde4 <DIO_u8SetPinDirection+0x10e>
     de2:	99 c0       	rjmp	.+306    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     de4:	a7 e3       	ldi	r26, 0x37	; 55
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e7 e3       	ldi	r30, 0x37	; 55
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_u8SetPinDirection+0x12c>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_u8SetPinDirection+0x128>
     e06:	84 2b       	or	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	85 c0       	rjmp	.+266    	; 0xf16 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     e0c:	a7 e3       	ldi	r26, 0x37	; 55
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e7 e3       	ldi	r30, 0x37	; 55
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_u8SetPinDirection+0x154>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <DIO_u8SetPinDirection+0x150>
     e2e:	80 95       	com	r24
     e30:	84 23       	and	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	70 c0       	rjmp	.+224    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTC:
				switch(Copy_PinDirection)
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	38 87       	std	Y+8, r19	; 0x08
     e3e:	2f 83       	std	Y+7, r18	; 0x07
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	d1 f0       	breq	.+52     	; 0xe7c <DIO_u8SetPinDirection+0x1a6>
     e48:	2f 81       	ldd	r18, Y+7	; 0x07
     e4a:	38 85       	ldd	r19, Y+8	; 0x08
     e4c:	21 30       	cpi	r18, 0x01	; 1
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f0       	breq	.+2      	; 0xe54 <DIO_u8SetPinDirection+0x17e>
     e52:	61 c0       	rjmp	.+194    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     e54:	a4 e3       	ldi	r26, 0x34	; 52
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e4 e3       	ldi	r30, 0x34	; 52
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_u8SetPinDirection+0x19c>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_u8SetPinDirection+0x198>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	4d c0       	rjmp	.+154    	; 0xf16 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     e7c:	a4 e3       	ldi	r26, 0x34	; 52
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e3       	ldi	r30, 0x34	; 52
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_u8SetPinDirection+0x1c4>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_u8SetPinDirection+0x1c0>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	38 c0       	rjmp	.+112    	; 0xf16 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTD:
				switch(Copy_PinDirection)
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3e 83       	std	Y+6, r19	; 0x06
     eae:	2d 83       	std	Y+5, r18	; 0x05
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	c9 f0       	breq	.+50     	; 0xeea <DIO_u8SetPinDirection+0x214>
     eb8:	2d 81       	ldd	r18, Y+5	; 0x05
     eba:	3e 81       	ldd	r19, Y+6	; 0x06
     ebc:	21 30       	cpi	r18, 0x01	; 1
     ebe:	31 05       	cpc	r19, r1
     ec0:	51 f5       	brne	.+84     	; 0xf16 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     ec2:	a1 e3       	ldi	r26, 0x31	; 49
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e1 e3       	ldi	r30, 0x31	; 49
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_u8SetPinDirection+0x20a>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_u8SetPinDirection+0x206>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	16 c0       	rjmp	.+44     	; 0xf16 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     eea:	a1 e3       	ldi	r26, 0x31	; 49
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_u8SetPinDirection+0x232>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_u8SetPinDirection+0x22e>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <DIO_u8SetPinDirection+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f14:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
}
     f18:	2e 96       	adiw	r28, 0x0e	; 14
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinValue)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	2e 97       	sbiw	r28, 0x0e	; 14
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	8a 83       	std	Y+2, r24	; 0x02
     f40:	6b 83       	std	Y+3, r22	; 0x03
     f42:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	88 30       	cpi	r24, 0x08	; 8
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <DIO_u8SetPinValue+0x26>
     f4e:	08 c1       	rjmp	.+528    	; 0x1160 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3e 87       	std	Y+14, r19	; 0x0e
     f58:	2d 87       	std	Y+13, r18	; 0x0d
     f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	09 f4       	brne	.+2      	; 0xf66 <DIO_u8SetPinValue+0x3c>
     f64:	50 c0       	rjmp	.+160    	; 0x1006 <DIO_u8SetPinValue+0xdc>
     f66:	2d 85       	ldd	r18, Y+13	; 0x0d
     f68:	3e 85       	ldd	r19, Y+14	; 0x0e
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	2c f4       	brge	.+10     	; 0xf7a <DIO_u8SetPinValue+0x50>
     f70:	8d 85       	ldd	r24, Y+13	; 0x0d
     f72:	9e 85       	ldd	r25, Y+14	; 0x0e
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	71 f0       	breq	.+28     	; 0xf94 <DIO_u8SetPinValue+0x6a>
     f78:	f1 c0       	rjmp	.+482    	; 0x115c <DIO_u8SetPinValue+0x232>
     f7a:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7c:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	09 f4       	brne	.+2      	; 0xf86 <DIO_u8SetPinValue+0x5c>
     f84:	79 c0       	rjmp	.+242    	; 0x1078 <DIO_u8SetPinValue+0x14e>
     f86:	8d 85       	ldd	r24, Y+13	; 0x0d
     f88:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	91 05       	cpc	r25, r1
     f8e:	09 f4       	brne	.+2      	; 0xf92 <DIO_u8SetPinValue+0x68>
     f90:	ac c0       	rjmp	.+344    	; 0x10ea <DIO_u8SetPinValue+0x1c0>
     f92:	e4 c0       	rjmp	.+456    	; 0x115c <DIO_u8SetPinValue+0x232>
			{
				case DIO_u8_PORTA:
					switch (Copy_PinValue)
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3c 87       	std	Y+12, r19	; 0x0c
     f9c:	2b 87       	std	Y+11, r18	; 0x0b
     f9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     fa0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	c9 f0       	breq	.+50     	; 0xfd8 <DIO_u8SetPinValue+0xae>
     fa6:	2b 85       	ldd	r18, Y+11	; 0x0b
     fa8:	3c 85       	ldd	r19, Y+12	; 0x0c
     faa:	21 30       	cpi	r18, 0x01	; 1
     fac:	31 05       	cpc	r19, r1
     fae:	49 f5       	brne	.+82     	; 0x1002 <DIO_u8SetPinValue+0xd8>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     fb0:	ab e3       	ldi	r26, 0x3B	; 59
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_u8SetPinValue+0xa4>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_u8SetPinValue+0xa0>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	c5 c0       	rjmp	.+394    	; 0x1162 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPinValue+0xcc>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_u8SetPinValue+0xc8>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	b0 c0       	rjmp	.+352    	; 0x1162 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1002:	19 82       	std	Y+1, r1	; 0x01
    1004:	ae c0       	rjmp	.+348    	; 0x1162 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTB:
					switch (Copy_PinValue)
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	3a 87       	std	Y+10, r19	; 0x0a
    100e:	29 87       	std	Y+9, r18	; 0x09
    1010:	89 85       	ldd	r24, Y+9	; 0x09
    1012:	9a 85       	ldd	r25, Y+10	; 0x0a
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	c9 f0       	breq	.+50     	; 0x104a <DIO_u8SetPinValue+0x120>
    1018:	29 85       	ldd	r18, Y+9	; 0x09
    101a:	3a 85       	ldd	r19, Y+10	; 0x0a
    101c:	21 30       	cpi	r18, 0x01	; 1
    101e:	31 05       	cpc	r19, r1
    1020:	49 f5       	brne	.+82     	; 0x1074 <DIO_u8SetPinValue+0x14a>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    1022:	a8 e3       	ldi	r26, 0x38	; 56
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_u8SetPinValue+0x116>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_u8SetPinValue+0x112>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	8c c0       	rjmp	.+280    	; 0x1162 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
    104a:	a8 e3       	ldi	r26, 0x38	; 56
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e3       	ldi	r30, 0x38	; 56
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_u8SetPinValue+0x13e>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_u8SetPinValue+0x13a>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	77 c0       	rjmp	.+238    	; 0x1162 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1074:	19 82       	std	Y+1, r1	; 0x01
    1076:	75 c0       	rjmp	.+234    	; 0x1162 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTC:
					switch (Copy_PinValue)
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	38 87       	std	Y+8, r19	; 0x08
    1080:	2f 83       	std	Y+7, r18	; 0x07
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	c9 f0       	breq	.+50     	; 0x10bc <DIO_u8SetPinValue+0x192>
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	38 85       	ldd	r19, Y+8	; 0x08
    108e:	21 30       	cpi	r18, 0x01	; 1
    1090:	31 05       	cpc	r19, r1
    1092:	49 f5       	brne	.+82     	; 0x10e6 <DIO_u8SetPinValue+0x1bc>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    1094:	a5 e3       	ldi	r26, 0x35	; 53
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e5 e3       	ldi	r30, 0x35	; 53
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_u8SetPinValue+0x188>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_u8SetPinValue+0x184>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	53 c0       	rjmp	.+166    	; 0x1162 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
    10bc:	a5 e3       	ldi	r26, 0x35	; 53
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e3       	ldi	r30, 0x35	; 53
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_u8SetPinValue+0x1b0>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_u8SetPinValue+0x1ac>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	3e c0       	rjmp	.+124    	; 0x1162 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	3c c0       	rjmp	.+120    	; 0x1162 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTD:
					switch (Copy_PinValue)
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3e 83       	std	Y+6, r19	; 0x06
    10f2:	2d 83       	std	Y+5, r18	; 0x05
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	c9 f0       	breq	.+50     	; 0x112e <DIO_u8SetPinValue+0x204>
    10fc:	2d 81       	ldd	r18, Y+5	; 0x05
    10fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1100:	21 30       	cpi	r18, 0x01	; 1
    1102:	31 05       	cpc	r19, r1
    1104:	49 f5       	brne	.+82     	; 0x1158 <DIO_u8SetPinValue+0x22e>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    1106:	a2 e3       	ldi	r26, 0x32	; 50
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_u8SetPinValue+0x1fa>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_u8SetPinValue+0x1f6>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	1a c0       	rjmp	.+52     	; 0x1162 <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
    112e:	a2 e3       	ldi	r26, 0x32	; 50
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_u8SetPinValue+0x222>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_u8SetPinValue+0x21e>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <DIO_u8SetPinValue+0x238>
					}
				break;
				
				default:Local_u8ErrorState = STD_TYPES_NOK;
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <DIO_u8SetPinValue+0x238>
				
			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1160:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	2e 96       	adiw	r28, 0x0e	; 14
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 * Copy_pu8ReturnedPinValue )
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	28 97       	sbiw	r28, 0x08	; 8
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	8b 83       	std	Y+3, r24	; 0x03
    118c:	6c 83       	std	Y+4, r22	; 0x04
    118e:	5e 83       	std	Y+6, r21	; 0x06
    1190:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	84 30       	cpi	r24, 0x04	; 4
    119a:	08 f0       	brcs	.+2      	; 0x119e <DIO_u8GetPinValue+0x28>
    119c:	9f c0       	rjmp	.+318    	; 0x12dc <DIO_u8GetPinValue+0x166>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	88 30       	cpi	r24, 0x08	; 8
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <DIO_u8GetPinValue+0x30>
    11a4:	9b c0       	rjmp	.+310    	; 0x12dc <DIO_u8GetPinValue+0x166>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <DIO_u8GetPinValue+0x3a>
    11ae:	96 c0       	rjmp	.+300    	; 0x12dc <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	38 87       	std	Y+8, r19	; 0x08
    11b8:	2f 83       	std	Y+7, r18	; 0x07
    11ba:	4f 81       	ldd	r20, Y+7	; 0x07
    11bc:	58 85       	ldd	r21, Y+8	; 0x08
    11be:	41 30       	cpi	r20, 0x01	; 1
    11c0:	51 05       	cpc	r21, r1
    11c2:	a9 f1       	breq	.+106    	; 0x122e <DIO_u8GetPinValue+0xb8>
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
    11c6:	98 85       	ldd	r25, Y+8	; 0x08
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	91 05       	cpc	r25, r1
    11cc:	34 f4       	brge	.+12     	; 0x11da <DIO_u8GetPinValue+0x64>
    11ce:	2f 81       	ldd	r18, Y+7	; 0x07
    11d0:	38 85       	ldd	r19, Y+8	; 0x08
    11d2:	21 15       	cp	r18, r1
    11d4:	31 05       	cpc	r19, r1
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <DIO_u8GetPinValue+0x7e>
    11d8:	82 c0       	rjmp	.+260    	; 0x12de <DIO_u8GetPinValue+0x168>
    11da:	4f 81       	ldd	r20, Y+7	; 0x07
    11dc:	58 85       	ldd	r21, Y+8	; 0x08
    11de:	42 30       	cpi	r20, 0x02	; 2
    11e0:	51 05       	cpc	r21, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <DIO_u8GetPinValue+0x70>
    11e4:	41 c0       	rjmp	.+130    	; 0x1268 <DIO_u8GetPinValue+0xf2>
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	91 05       	cpc	r25, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <DIO_u8GetPinValue+0x7c>
    11f0:	58 c0       	rjmp	.+176    	; 0x12a2 <DIO_u8GetPinValue+0x12c>
    11f2:	75 c0       	rjmp	.+234    	; 0x12de <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA : 
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);
    11f4:	e9 e3       	ldi	r30, 0x39	; 57
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8GetPinValue+0x96>
    1208:	55 95       	asr	r21
    120a:	47 95       	ror	r20
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8GetPinValue+0x92>
    1210:	ca 01       	movw	r24, r20
    1212:	81 70       	andi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	88 23       	and	r24, r24
    121a:	21 f4       	brne	.+8      	; 0x1224 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    121c:	ed 81       	ldd	r30, Y+5	; 0x05
    121e:	fe 81       	ldd	r31, Y+6	; 0x06
    1220:	10 82       	st	Z, r1
    1222:	5d c0       	rjmp	.+186    	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1224:	ed 81       	ldd	r30, Y+5	; 0x05
    1226:	fe 81       	ldd	r31, Y+6	; 0x06
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 83       	st	Z, r24
    122c:	58 c0       	rjmp	.+176    	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    122e:	e6 e3       	ldi	r30, 0x36	; 54
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a9 01       	movw	r20, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8GetPinValue+0xd0>
    1242:	55 95       	asr	r21
    1244:	47 95       	ror	r20
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8GetPinValue+0xcc>
    124a:	ca 01       	movw	r24, r20
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	88 23       	and	r24, r24
    1254:	21 f4       	brne	.+8      	; 0x125e <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1256:	ed 81       	ldd	r30, Y+5	; 0x05
    1258:	fe 81       	ldd	r31, Y+6	; 0x06
    125a:	10 82       	st	Z, r1
    125c:	40 c0       	rjmp	.+128    	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    125e:	ed 81       	ldd	r30, Y+5	; 0x05
    1260:	fe 81       	ldd	r31, Y+6	; 0x06
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 83       	st	Z, r24
    1266:	3b c0       	rjmp	.+118    	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    1268:	e3 e3       	ldi	r30, 0x33	; 51
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a9 01       	movw	r20, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8GetPinValue+0x10a>
    127c:	55 95       	asr	r21
    127e:	47 95       	ror	r20
    1280:	8a 95       	dec	r24
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8GetPinValue+0x106>
    1284:	ca 01       	movw	r24, r20
    1286:	81 70       	andi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	88 23       	and	r24, r24
    128e:	21 f4       	brne	.+8      	; 0x1298 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1290:	ed 81       	ldd	r30, Y+5	; 0x05
    1292:	fe 81       	ldd	r31, Y+6	; 0x06
    1294:	10 82       	st	Z, r1
    1296:	23 c0       	rjmp	.+70     	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1298:	ed 81       	ldd	r30, Y+5	; 0x05
    129a:	fe 81       	ldd	r31, Y+6	; 0x06
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 83       	st	Z, r24
    12a0:	1e c0       	rjmp	.+60     	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    12a2:	e0 e3       	ldi	r30, 0x30	; 48
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a9 01       	movw	r20, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_u8GetPinValue+0x144>
    12b6:	55 95       	asr	r21
    12b8:	47 95       	ror	r20
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_u8GetPinValue+0x140>
    12be:	ca 01       	movw	r24, r20
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	88 23       	and	r24, r24
    12c8:	21 f4       	brne	.+8      	; 0x12d2 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    12ca:	ed 81       	ldd	r30, Y+5	; 0x05
    12cc:	fe 81       	ldd	r31, Y+6	; 0x06
    12ce:	10 82       	st	Z, r1
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12d2:	ed 81       	ldd	r30, Y+5	; 0x05
    12d4:	fe 81       	ldd	r31, Y+6	; 0x06
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 83       	st	Z, r24
    12da:	01 c0       	rjmp	.+2      	; 0x12de <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12dc:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    12e0:	28 96       	adiw	r28, 0x08	; 8
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DIO_u8SetPortDirection>:
 
u8 DIO_u8SetPortDirection  (u8 Copy_u8PortId, u8 Copy_PortDirection)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	2d 97       	sbiw	r28, 0x0d	; 13
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_PortDirection == DIO_u8_OUTPUT  )||(Copy_PortDirection == DIO_u8_INPUT))
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	21 f0       	breq	.+8      	; 0x131c <DIO_u8SetPortDirection+0x2a>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 23       	and	r24, r24
    1318:	09 f0       	breq	.+2      	; 0x131c <DIO_u8SetPortDirection+0x2a>
    131a:	7f c0       	rjmp	.+254    	; 0x141a <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3d 87       	std	Y+13, r19	; 0x0d
    1324:	2c 87       	std	Y+12, r18	; 0x0c
    1326:	8c 85       	ldd	r24, Y+12	; 0x0c
    1328:	9d 85       	ldd	r25, Y+13	; 0x0d
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	71 f1       	breq	.+92     	; 0x138c <DIO_u8SetPortDirection+0x9a>
    1330:	2c 85       	ldd	r18, Y+12	; 0x0c
    1332:	3d 85       	ldd	r19, Y+13	; 0x0d
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <DIO_u8SetPortDirection+0x52>
    133a:	8c 85       	ldd	r24, Y+12	; 0x0c
    133c:	9d 85       	ldd	r25, Y+13	; 0x0d
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f0       	breq	.+26     	; 0x135c <DIO_u8SetPortDirection+0x6a>
    1342:	69 c0       	rjmp	.+210    	; 0x1416 <DIO_u8SetPortDirection+0x124>
    1344:	2c 85       	ldd	r18, Y+12	; 0x0c
    1346:	3d 85       	ldd	r19, Y+13	; 0x0d
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	b1 f1       	breq	.+108    	; 0x13ba <DIO_u8SetPortDirection+0xc8>
    134e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1350:	9d 85       	ldd	r25, Y+13	; 0x0d
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <DIO_u8SetPortDirection+0x68>
    1358:	47 c0       	rjmp	.+142    	; 0x13e8 <DIO_u8SetPortDirection+0xf6>
    135a:	5d c0       	rjmp	.+186    	; 0x1416 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA : 
				switch (Copy_PortDirection)
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3b 87       	std	Y+11, r19	; 0x0b
    1364:	2a 87       	std	Y+10, r18	; 0x0a
    1366:	8a 85       	ldd	r24, Y+10	; 0x0a
    1368:	9b 85       	ldd	r25, Y+11	; 0x0b
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	59 f0       	breq	.+22     	; 0x1384 <DIO_u8SetPortDirection+0x92>
    136e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1370:	3b 85       	ldd	r19, Y+11	; 0x0b
    1372:	21 30       	cpi	r18, 0x01	; 1
    1374:	31 05       	cpc	r19, r1
    1376:	09 f0       	breq	.+2      	; 0x137a <DIO_u8SetPortDirection+0x88>
    1378:	51 c0       	rjmp	.+162    	; 0x141c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRA_REG = 0xff; break;
    137a:	ea e3       	ldi	r30, 0x3A	; 58
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	80 83       	st	Z, r24
    1382:	4c c0       	rjmp	.+152    	; 0x141c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRA_REG = 0x00; break;
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	10 82       	st	Z, r1
    138a:	48 c0       	rjmp	.+144    	; 0x141c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTB :
				switch (Copy_PortDirection)
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	39 87       	std	Y+9, r19	; 0x09
    1394:	28 87       	std	Y+8, r18	; 0x08
    1396:	88 85       	ldd	r24, Y+8	; 0x08
    1398:	99 85       	ldd	r25, Y+9	; 0x09
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	51 f0       	breq	.+20     	; 0x13b2 <DIO_u8SetPortDirection+0xc0>
    139e:	28 85       	ldd	r18, Y+8	; 0x08
    13a0:	39 85       	ldd	r19, Y+9	; 0x09
    13a2:	21 30       	cpi	r18, 0x01	; 1
    13a4:	31 05       	cpc	r19, r1
    13a6:	d1 f5       	brne	.+116    	; 0x141c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRB_REG = 0xff; break;
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	80 83       	st	Z, r24
    13b0:	35 c0       	rjmp	.+106    	; 0x141c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRB_REG = 0x00; break;
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	10 82       	st	Z, r1
    13b8:	31 c0       	rjmp	.+98     	; 0x141c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTC :
				switch (Copy_PortDirection)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3f 83       	std	Y+7, r19	; 0x07
    13c2:	2e 83       	std	Y+6, r18	; 0x06
    13c4:	8e 81       	ldd	r24, Y+6	; 0x06
    13c6:	9f 81       	ldd	r25, Y+7	; 0x07
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	51 f0       	breq	.+20     	; 0x13e0 <DIO_u8SetPortDirection+0xee>
    13cc:	2e 81       	ldd	r18, Y+6	; 0x06
    13ce:	3f 81       	ldd	r19, Y+7	; 0x07
    13d0:	21 30       	cpi	r18, 0x01	; 1
    13d2:	31 05       	cpc	r19, r1
    13d4:	19 f5       	brne	.+70     	; 0x141c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRC_REG = 0xff; break;
    13d6:	e4 e3       	ldi	r30, 0x34	; 52
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	80 83       	st	Z, r24
    13de:	1e c0       	rjmp	.+60     	; 0x141c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRC_REG = 0x00; break;
    13e0:	e4 e3       	ldi	r30, 0x34	; 52
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	10 82       	st	Z, r1
    13e6:	1a c0       	rjmp	.+52     	; 0x141c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTD :
				switch (Copy_PortDirection)
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3d 83       	std	Y+5, r19	; 0x05
    13f0:	2c 83       	std	Y+4, r18	; 0x04
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	51 f0       	breq	.+20     	; 0x140e <DIO_u8SetPortDirection+0x11c>
    13fa:	2c 81       	ldd	r18, Y+4	; 0x04
    13fc:	3d 81       	ldd	r19, Y+5	; 0x05
    13fe:	21 30       	cpi	r18, 0x01	; 1
    1400:	31 05       	cpc	r19, r1
    1402:	61 f4       	brne	.+24     	; 0x141c <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRD_REG = 0xff; break;
    1404:	e1 e3       	ldi	r30, 0x31	; 49
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	80 83       	st	Z, r24
    140c:	07 c0       	rjmp	.+14     	; 0x141c <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRD_REG = 0x00; break;
    140e:	e1 e3       	ldi	r30, 0x31	; 49
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
    1414:	03 c0       	rjmp	.+6      	; 0x141c <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			default      :Local_u8ErrorState =STD_TYPES_NOK;
    1416:	19 82       	std	Y+1, r1	; 0x01
    1418:	01 c0       	rjmp	.+2      	; 0x141c <DIO_u8SetPortDirection+0x12a>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    141a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	2d 96       	adiw	r28, 0x0d	; 13
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue       (u8 Copy_u8PortId, u8 Copy_PortValue)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <DIO_u8SetPortValue+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <DIO_u8SetPortValue+0x8>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3d 83       	std	Y+5, r19	; 0x05
    144e:	2c 83       	std	Y+4, r18	; 0x04
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	91 05       	cpc	r25, r1
    1458:	d1 f0       	breq	.+52     	; 0x148e <DIO_u8SetPortValue+0x5e>
    145a:	2c 81       	ldd	r18, Y+4	; 0x04
    145c:	3d 81       	ldd	r19, Y+5	; 0x05
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	2c f4       	brge	.+10     	; 0x146e <DIO_u8SetPortValue+0x3e>
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	9d 81       	ldd	r25, Y+5	; 0x05
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	61 f0       	breq	.+24     	; 0x1484 <DIO_u8SetPortValue+0x54>
    146c:	1f c0       	rjmp	.+62     	; 0x14ac <DIO_u8SetPortValue+0x7c>
    146e:	2c 81       	ldd	r18, Y+4	; 0x04
    1470:	3d 81       	ldd	r19, Y+5	; 0x05
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	81 f0       	breq	.+32     	; 0x1498 <DIO_u8SetPortValue+0x68>
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	91 05       	cpc	r25, r1
    1480:	81 f0       	breq	.+32     	; 0x14a2 <DIO_u8SetPortValue+0x72>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_PortValue; break;
    1484:	eb e3       	ldi	r30, 0x3B	; 59
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	80 83       	st	Z, r24
    148c:	10 c0       	rjmp	.+32     	; 0x14ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_PortValue; break;
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	80 83       	st	Z, r24
    1496:	0b c0       	rjmp	.+22     	; 0x14ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_PortValue; break;
    1498:	e5 e3       	ldi	r30, 0x35	; 53
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	80 83       	st	Z, r24
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_PortValue; break;
    14a2:	e2 e3       	ldi	r30, 0x32	; 50
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	80 83       	st	Z, r24
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <DIO_u8SetPortValue+0x7e>
		default           :Local_u8ErrorState = STD_TYPES_NOK;
    14ac:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return Local_u8ErrorState;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue       (u8 Copy_u8PortId , u8 * Copy_pu8ReturnedPortValue )
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <DIO_u8GetPortValue+0x6>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <DIO_u8GetPortValue+0x8>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_u8GetPortValue+0xa>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	8a 83       	std	Y+2, r24	; 0x02
    14d0:	7c 83       	std	Y+4, r23	; 0x04
    14d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL)
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	e9 f1       	breq	.+122    	; 0x155a <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3e 83       	std	Y+6, r19	; 0x06
    14e8:	2d 83       	std	Y+5, r18	; 0x05
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	e1 f0       	breq	.+56     	; 0x152c <DIO_u8GetPortValue+0x6c>
    14f4:	2d 81       	ldd	r18, Y+5	; 0x05
    14f6:	3e 81       	ldd	r19, Y+6	; 0x06
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <DIO_u8GetPortValue+0x48>
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <DIO_u8GetPortValue+0x5e>
    1506:	27 c0       	rjmp	.+78     	; 0x1556 <DIO_u8GetPortValue+0x96>
    1508:	2d 81       	ldd	r18, Y+5	; 0x05
    150a:	3e 81       	ldd	r19, Y+6	; 0x06
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	a1 f0       	breq	.+40     	; 0x153a <DIO_u8GetPortValue+0x7a>
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	b1 f0       	breq	.+44     	; 0x1548 <DIO_u8GetPortValue+0x88>
    151c:	1c c0       	rjmp	.+56     	; 0x1556 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA : *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG; break;
    151e:	e9 e3       	ldi	r30, 0x39	; 57
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	80 83       	st	Z, r24
    152a:	18 c0       	rjmp	.+48     	; 0x155c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB : *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG; break;
    152c:	e6 e3       	ldi	r30, 0x36	; 54
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	80 83       	st	Z, r24
    1538:	11 c0       	rjmp	.+34     	; 0x155c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC : *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG; break; 
    153a:	e3 e3       	ldi	r30, 0x33	; 51
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	eb 81       	ldd	r30, Y+3	; 0x03
    1542:	fc 81       	ldd	r31, Y+4	; 0x04
    1544:	80 83       	st	Z, r24
    1546:	0a c0       	rjmp	.+20     	; 0x155c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD : *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG; break;
    1548:	e0 e3       	ldi	r30, 0x30	; 48
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	80 83       	st	Z, r24
    1554:	03 c0       	rjmp	.+6      	; 0x155c <DIO_u8GetPortValue+0x9c>
			default           : Local_u8ErrorState = STD_TYPES_NOK;
    1556:	19 82       	std	Y+1, r1	; 0x01
    1558:	01 c0       	rjmp	.+2      	; 0x155c <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    155a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	26 96       	adiw	r28, 0x06	; 6
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <KPD_u8GetKeyState>:
static const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};

static const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

u8 KPD_u8GetKeyState(u8* Copy_pu8ReturnedKey)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	65 97       	sbiw	r28, 0x15	; 21
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	9d 8b       	std	Y+21, r25	; 0x15
    1586:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowCounter;
	u8 Local_u8ColCounter;
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
    158c:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    158e:	8c 89       	ldd	r24, Y+20	; 0x14
    1590:	9d 89       	ldd	r25, Y+21	; 0x15
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	09 f4       	brne	.+2      	; 0x1598 <KPD_u8GetKeyState+0x28>
    1596:	f0 c0       	rjmp	.+480    	; 0x1778 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
    1598:	ec 89       	ldd	r30, Y+20	; 0x14
    159a:	fd 89       	ldd	r31, Y+21	; 0x15
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	80 83       	st	Z, r24
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    15a0:	19 8a       	std	Y+17, r1	; 0x11
    15a2:	e5 c0       	rjmp	.+458    	; 0x176e <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
    15a4:	89 89       	ldd	r24, Y+17	; 0x11
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	fc 01       	movw	r30, r24
    15ac:	e5 51       	subi	r30, 0x15	; 21
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	90 81       	ld	r25, Z
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	69 2f       	mov	r22, r25
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    15bc:	18 8a       	std	Y+16, r1	; 0x10
    15be:	c1 c0       	rjmp	.+386    	; 0x1742 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    15c0:	88 89       	ldd	r24, Y+16	; 0x10
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	fc 01       	movw	r30, r24
    15c8:	e1 51       	subi	r30, 0x11	; 17
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	90 81       	ld	r25, Z
    15ce:	9e 01       	movw	r18, r28
    15d0:	2d 5e       	subi	r18, 0xED	; 237
    15d2:	3f 4f       	sbci	r19, 0xFF	; 255
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	69 2f       	mov	r22, r25
    15d8:	a9 01       	movw	r20, r18
    15da:	0e 94 bb 08 	call	0x1176	; 0x1176 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	88 23       	and	r24, r24
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <KPD_u8GetKeyState+0x76>
    15e4:	ab c0       	rjmp	.+342    	; 0x173c <KPD_u8GetKeyState+0x1cc>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a0 ea       	ldi	r26, 0xA0	; 160
    15ec:	b1 e4       	ldi	r27, 0x41	; 65
    15ee:	8b 87       	std	Y+11, r24	; 0x0b
    15f0:	9c 87       	std	Y+12, r25	; 0x0c
    15f2:	ad 87       	std	Y+13, r26	; 0x0d
    15f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a ef       	ldi	r20, 0xFA	; 250
    1604:	54 e4       	ldi	r21, 0x44	; 68
    1606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8f 83       	std	Y+7, r24	; 0x07
    1610:	98 87       	std	Y+8, r25	; 0x08
    1612:	a9 87       	std	Y+9, r26	; 0x09
    1614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9e 83       	std	Y+6, r25	; 0x06
    1634:	8d 83       	std	Y+5, r24	; 0x05
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1638:	6f 81       	ldd	r22, Y+7	; 0x07
    163a:	78 85       	ldd	r23, Y+8	; 0x08
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	6b 85       	ldd	r22, Y+11	; 0x0b
    1652:	7c 85       	ldd	r23, Y+12	; 0x0c
    1654:	8d 85       	ldd	r24, Y+13	; 0x0d
    1656:	9e 85       	ldd	r25, Y+14	; 0x0e
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <KPD_u8GetKeyState+0x128>
    167a:	88 ec       	ldi	r24, 0xC8	; 200
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9c 83       	std	Y+4, r25	; 0x04
    1680:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <KPD_u8GetKeyState+0x116>
    168a:	9c 83       	std	Y+4, r25	; 0x04
    168c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f7       	brne	.-38     	; 0x167a <KPD_u8GetKeyState+0x10a>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6f 81       	ldd	r22, Y+7	; 0x07
    16a4:	78 85       	ldd	r23, Y+8	; 0x08
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <KPD_u8GetKeyState+0x152>
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    16ca:	88 89       	ldd	r24, Y+16	; 0x10
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	fc 01       	movw	r30, r24
    16d2:	e1 51       	subi	r30, 0x11	; 17
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	90 81       	ld	r25, Z
    16d8:	9e 01       	movw	r18, r28
    16da:	2d 5e       	subi	r18, 0xED	; 237
    16dc:	3f 4f       	sbci	r19, 0xFF	; 255
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	69 2f       	mov	r22, r25
    16e2:	a9 01       	movw	r20, r18
    16e4:	0e 94 bb 08 	call	0x1176	; 0x1176 <DIO_u8GetPinValue>
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <KPD_u8GetKeyState+0x198>
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    16ea:	88 89       	ldd	r24, Y+16	; 0x10
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	fc 01       	movw	r30, r24
    16f2:	e1 51       	subi	r30, 0x11	; 17
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	90 81       	ld	r25, Z
    16f8:	9e 01       	movw	r18, r28
    16fa:	2d 5e       	subi	r18, 0xED	; 237
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	69 2f       	mov	r22, r25
    1702:	a9 01       	movw	r20, r18
    1704:	0e 94 bb 08 	call	0x1176	; 0x1176 <DIO_u8GetPinValue>
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					while(Local_u8PinValue == DIO_u8_LOW)
    1708:	8b 89       	ldd	r24, Y+19	; 0x13
    170a:	88 23       	and	r24, r24
    170c:	71 f3       	breq	.-36     	; 0x16ea <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
    170e:	89 89       	ldd	r24, Y+17	; 0x11
    1710:	48 2f       	mov	r20, r24
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	88 89       	ldd	r24, Y+16	; 0x10
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	ca 01       	movw	r24, r20
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	82 0f       	add	r24, r18
    1726:	93 1f       	adc	r25, r19
    1728:	fc 01       	movw	r30, r24
    172a:	e5 52       	subi	r30, 0x25	; 37
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 81       	ld	r24, Z
    1730:	ec 89       	ldd	r30, Y+20	; 0x14
    1732:	fd 89       	ldd	r31, Y+21	; 0x15
    1734:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	8f 87       	std	Y+15, r24	; 0x0f
    173a:	07 c0       	rjmp	.+14     	; 0x174a <KPD_u8GetKeyState+0x1da>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    173c:	88 89       	ldd	r24, Y+16	; 0x10
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	88 8b       	std	Y+16, r24	; 0x10
    1742:	88 89       	ldd	r24, Y+16	; 0x10
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	08 f4       	brcc	.+2      	; 0x174a <KPD_u8GetKeyState+0x1da>
    1748:	3b cf       	rjmp	.-394    	; 0x15c0 <KPD_u8GetKeyState+0x50>
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
					Local_u8Flag = 1;
					break; 
				}
			}
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_HIGH);
    174a:	89 89       	ldd	r24, Y+17	; 0x11
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	e5 51       	subi	r30, 0x15	; 21
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	90 81       	ld	r25, Z
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	69 2f       	mov	r22, r25
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
			if(Local_u8Flag == 1) 
    1762:	8f 85       	ldd	r24, Y+15	; 0x0f
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	49 f0       	breq	.+18     	; 0x177a <KPD_u8GetKeyState+0x20a>
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    1768:	89 89       	ldd	r24, Y+17	; 0x11
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	89 8b       	std	Y+17, r24	; 0x11
    176e:	89 89       	ldd	r24, Y+17	; 0x11
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	08 f4       	brcc	.+2      	; 0x1776 <KPD_u8GetKeyState+0x206>
    1774:	17 cf       	rjmp	.-466    	; 0x15a4 <KPD_u8GetKeyState+0x34>
    1776:	01 c0       	rjmp	.+2      	; 0x177a <KPD_u8GetKeyState+0x20a>
			}	
		}
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    1778:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    177a:	8a 89       	ldd	r24, Y+18	; 0x12
	
}
    177c:	65 96       	adiw	r28, 0x15	; 21
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <LCD_voidInit>:
/*HAL*/
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"
void LCD_voidInit(void)
{
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	cc 54       	subi	r28, 0x4C	; 76
    179c:	d0 40       	sbci	r29, 0x00	; 0
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	fe 01       	movw	r30, r28
    17aa:	e7 5b       	subi	r30, 0xB7	; 183
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	ac e0       	ldi	r26, 0x0C	; 12
    17b4:	b2 e4       	ldi	r27, 0x42	; 66
    17b6:	80 83       	st	Z, r24
    17b8:	91 83       	std	Z+1, r25	; 0x01
    17ba:	a2 83       	std	Z+2, r26	; 0x02
    17bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	8e 01       	movw	r16, r28
    17c0:	0b 5b       	subi	r16, 0xBB	; 187
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	fe 01       	movw	r30, r28
    17c6:	e7 5b       	subi	r30, 0xB7	; 183
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a ef       	ldi	r20, 0xFA	; 250
    17d8:	54 e4       	ldi	r21, 0x44	; 68
    17da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	f8 01       	movw	r30, r16
    17e4:	80 83       	st	Z, r24
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	a2 83       	std	Z+2, r26	; 0x02
    17ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ec:	fe 01       	movw	r30, r28
    17ee:	eb 5b       	subi	r30, 0xBB	; 187
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	60 81       	ld	r22, Z
    17f4:	71 81       	ldd	r23, Z+1	; 0x01
    17f6:	82 81       	ldd	r24, Z+2	; 0x02
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1806:	88 23       	and	r24, r24
    1808:	44 f4       	brge	.+16     	; 0x181a <LCD_voidInit+0x8c>
		__ticks = 1;
    180a:	fe 01       	movw	r30, r28
    180c:	ed 5b       	subi	r30, 0xBD	; 189
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	80 83       	st	Z, r24
    1818:	64 c0       	rjmp	.+200    	; 0x18e2 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    181a:	fe 01       	movw	r30, r28
    181c:	eb 5b       	subi	r30, 0xBB	; 187
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	82 81       	ldd	r24, Z+2	; 0x02
    1826:	93 81       	ldd	r25, Z+3	; 0x03
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	0c f0       	brlt	.+2      	; 0x183a <LCD_voidInit+0xac>
    1838:	43 c0       	rjmp	.+134    	; 0x18c0 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183a:	fe 01       	movw	r30, r28
    183c:	e7 5b       	subi	r30, 0xB7	; 183
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	8e 01       	movw	r16, r28
    185a:	0d 5b       	subi	r16, 0xBD	; 189
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	f8 01       	movw	r30, r16
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
    1870:	1f c0       	rjmp	.+62     	; 0x18b0 <LCD_voidInit+0x122>
    1872:	fe 01       	movw	r30, r28
    1874:	ef 5b       	subi	r30, 0xBF	; 191
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	88 ec       	ldi	r24, 0xC8	; 200
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
    1880:	fe 01       	movw	r30, r28
    1882:	ef 5b       	subi	r30, 0xBF	; 191
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_voidInit+0xfc>
    188e:	fe 01       	movw	r30, r28
    1890:	ef 5b       	subi	r30, 0xBF	; 191
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1898:	de 01       	movw	r26, r28
    189a:	ad 5b       	subi	r26, 0xBD	; 189
    189c:	bf 4f       	sbci	r27, 0xFF	; 255
    189e:	fe 01       	movw	r30, r28
    18a0:	ed 5b       	subi	r30, 0xBD	; 189
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	9c 93       	st	X, r25
    18ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b0:	fe 01       	movw	r30, r28
    18b2:	ed 5b       	subi	r30, 0xBD	; 189
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	d1 f6       	brne	.-76     	; 0x1872 <LCD_voidInit+0xe4>
    18be:	24 c0       	rjmp	.+72     	; 0x1908 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c0:	8e 01       	movw	r16, r28
    18c2:	0d 5b       	subi	r16, 0xBD	; 189
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	fe 01       	movw	r30, r28
    18c8:	eb 5b       	subi	r30, 0xBB	; 187
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	f8 01       	movw	r30, r16
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	fe 01       	movw	r30, r28
    18e4:	ed 5b       	subi	r30, 0xBD	; 189
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	fe 01       	movw	r30, r28
    18ee:	ff 96       	adiw	r30, 0x3f	; 63
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	fe 01       	movw	r30, r28
    18f6:	ff 96       	adiw	r30, 0x3f	; 63
    18f8:	80 81       	ld	r24, Z
    18fa:	91 81       	ldd	r25, Z+1	; 0x01
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_voidInit+0x16e>
    1900:	fe 01       	movw	r30, r28
    1902:	ff 96       	adiw	r30, 0x3f	; 63
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Function Set CMND*/
	LCD_voidSendCmnd(CONC(0,0,1,LCD_u8_MODE,LCD_u8_INTIAL_LINE_NUM,LCD_u8_INTIAL_FONT,0,0));
    1908:	88 e3       	ldi	r24, 0x38	; 56
    190a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a0 e2       	ldi	r26, 0x20	; 32
    1914:	b2 e4       	ldi	r27, 0x42	; 66
    1916:	8b af       	std	Y+59, r24	; 0x3b
    1918:	9c af       	std	Y+60, r25	; 0x3c
    191a:	ad af       	std	Y+61, r26	; 0x3d
    191c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    191e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1920:	7c ad       	ldd	r23, Y+60	; 0x3c
    1922:	8d ad       	ldd	r24, Y+61	; 0x3d
    1924:	9e ad       	ldd	r25, Y+62	; 0x3e
    1926:	2b ea       	ldi	r18, 0xAB	; 171
    1928:	3a ea       	ldi	r19, 0xAA	; 170
    192a:	4a e2       	ldi	r20, 0x2A	; 42
    192c:	50 e4       	ldi	r21, 0x40	; 64
    192e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	8f ab       	std	Y+55, r24	; 0x37
    1938:	98 af       	std	Y+56, r25	; 0x38
    193a:	a9 af       	std	Y+57, r26	; 0x39
    193c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    193e:	6f a9       	ldd	r22, Y+55	; 0x37
    1940:	78 ad       	ldd	r23, Y+56	; 0x38
    1942:	89 ad       	ldd	r24, Y+57	; 0x39
    1944:	9a ad       	ldd	r25, Y+58	; 0x3a
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1952:	88 23       	and	r24, r24
    1954:	1c f4       	brge	.+6      	; 0x195c <LCD_voidInit+0x1ce>
		__ticks = 1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	8e ab       	std	Y+54, r24	; 0x36
    195a:	91 c0       	rjmp	.+290    	; 0x1a7e <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    195c:	6f a9       	ldd	r22, Y+55	; 0x37
    195e:	78 ad       	ldd	r23, Y+56	; 0x38
    1960:	89 ad       	ldd	r24, Y+57	; 0x39
    1962:	9a ad       	ldd	r25, Y+58	; 0x3a
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4f e7       	ldi	r20, 0x7F	; 127
    196a:	53 e4       	ldi	r21, 0x43	; 67
    196c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1970:	18 16       	cp	r1, r24
    1972:	0c f0       	brlt	.+2      	; 0x1976 <LCD_voidInit+0x1e8>
    1974:	7b c0       	rjmp	.+246    	; 0x1a6c <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1976:	6b ad       	ldd	r22, Y+59	; 0x3b
    1978:	7c ad       	ldd	r23, Y+60	; 0x3c
    197a:	8d ad       	ldd	r24, Y+61	; 0x3d
    197c:	9e ad       	ldd	r25, Y+62	; 0x3e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a e7       	ldi	r20, 0x7A	; 122
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8a ab       	std	Y+50, r24	; 0x32
    1990:	9b ab       	std	Y+51, r25	; 0x33
    1992:	ac ab       	std	Y+52, r26	; 0x34
    1994:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	6a a9       	ldd	r22, Y+50	; 0x32
    1998:	7b a9       	ldd	r23, Y+51	; 0x33
    199a:	8c a9       	ldd	r24, Y+52	; 0x34
    199c:	9d a9       	ldd	r25, Y+53	; 0x35
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a ef       	ldi	r20, 0xFA	; 250
    19a4:	54 e4       	ldi	r21, 0x44	; 68
    19a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	8e a7       	std	Y+46, r24	; 0x2e
    19b0:	9f a7       	std	Y+47, r25	; 0x2f
    19b2:	a8 ab       	std	Y+48, r26	; 0x30
    19b4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19b6:	6e a5       	ldd	r22, Y+46	; 0x2e
    19b8:	7f a5       	ldd	r23, Y+47	; 0x2f
    19ba:	88 a9       	ldd	r24, Y+48	; 0x30
    19bc:	99 a9       	ldd	r25, Y+49	; 0x31
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <LCD_voidInit+0x24a>
		__ticks = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9d a7       	std	Y+45, r25	; 0x2d
    19d4:	8c a7       	std	Y+44, r24	; 0x2c
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    19d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    19da:	7f a5       	ldd	r23, Y+47	; 0x2f
    19dc:	88 a9       	ldd	r24, Y+48	; 0x30
    19de:	99 a9       	ldd	r25, Y+49	; 0x31
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	57 e4       	ldi	r21, 0x47	; 71
    19e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	4c f5       	brge	.+82     	; 0x1a42 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f0:	6a a9       	ldd	r22, Y+50	; 0x32
    19f2:	7b a9       	ldd	r23, Y+51	; 0x33
    19f4:	8c a9       	ldd	r24, Y+52	; 0x34
    19f6:	9d a9       	ldd	r25, Y+53	; 0x35
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e2       	ldi	r20, 0x20	; 32
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9d a7       	std	Y+45, r25	; 0x2d
    1a16:	8c a7       	std	Y+44, r24	; 0x2c
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <LCD_voidInit+0x2aa>
    1a1a:	88 ec       	ldi	r24, 0xC8	; 200
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9b a7       	std	Y+43, r25	; 0x2b
    1a20:	8a a7       	std	Y+42, r24	; 0x2a
    1a22:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a24:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_voidInit+0x298>
    1a2a:	9b a7       	std	Y+43, r25	; 0x2b
    1a2c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a30:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	9d a7       	std	Y+45, r25	; 0x2d
    1a36:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a38:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a3a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <LCD_voidInit+0x28c>
    1a40:	24 c0       	rjmp	.+72     	; 0x1a8a <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a44:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a46:	88 a9       	ldd	r24, Y+48	; 0x30
    1a48:	99 a9       	ldd	r25, Y+49	; 0x31
    1a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9d a7       	std	Y+45, r25	; 0x2d
    1a54:	8c a7       	std	Y+44, r24	; 0x2c
    1a56:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a58:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a5a:	99 a7       	std	Y+41, r25	; 0x29
    1a5c:	88 a7       	std	Y+40, r24	; 0x28
    1a5e:	88 a5       	ldd	r24, Y+40	; 0x28
    1a60:	99 a5       	ldd	r25, Y+41	; 0x29
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_voidInit+0x2d4>
    1a66:	99 a7       	std	Y+41, r25	; 0x29
    1a68:	88 a7       	std	Y+40, r24	; 0x28
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a6c:	6f a9       	ldd	r22, Y+55	; 0x37
    1a6e:	78 ad       	ldd	r23, Y+56	; 0x38
    1a70:	89 ad       	ldd	r24, Y+57	; 0x39
    1a72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8e ab       	std	Y+54, r24	; 0x36
    1a7e:	8e a9       	ldd	r24, Y+54	; 0x36
    1a80:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a82:	8f a1       	ldd	r24, Y+39	; 0x27
    1a84:	8a 95       	dec	r24
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_voidInit+0x2f6>
    1a88:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/* Display NO/OFF Control */
	LCD_voidSendCmnd(CONC(0,0,0,0,1,1,LCD_u8_INTIAL_CURSOR_DISPLAY,LCD_u8_INTIAL_CURSOR_BLINK));
    1a8a:	8c e0       	ldi	r24, 0x0C	; 12
    1a8c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e2       	ldi	r26, 0x20	; 32
    1a96:	b2 e4       	ldi	r27, 0x42	; 66
    1a98:	8b a3       	std	Y+35, r24	; 0x23
    1a9a:	9c a3       	std	Y+36, r25	; 0x24
    1a9c:	ad a3       	std	Y+37, r26	; 0x25
    1a9e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa8:	2b ea       	ldi	r18, 0xAB	; 171
    1aaa:	3a ea       	ldi	r19, 0xAA	; 170
    1aac:	4a e2       	ldi	r20, 0x2A	; 42
    1aae:	50 e4       	ldi	r21, 0x40	; 64
    1ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aba:	98 a3       	std	Y+32, r25	; 0x20
    1abc:	a9 a3       	std	Y+33, r26	; 0x21
    1abe:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ac0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ac2:	78 a1       	ldd	r23, Y+32	; 0x20
    1ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	1c f4       	brge	.+6      	; 0x1ade <LCD_voidInit+0x350>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	8e 8f       	std	Y+30, r24	; 0x1e
    1adc:	91 c0       	rjmp	.+290    	; 0x1c00 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1ade:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ae0:	78 a1       	ldd	r23, Y+32	; 0x20
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	53 e4       	ldi	r21, 0x43	; 67
    1aee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	0c f0       	brlt	.+2      	; 0x1af8 <LCD_voidInit+0x36a>
    1af6:	7b c0       	rjmp	.+246    	; 0x1bee <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1af8:	6b a1       	ldd	r22, Y+35	; 0x23
    1afa:	7c a1       	ldd	r23, Y+36	; 0x24
    1afc:	8d a1       	ldd	r24, Y+37	; 0x25
    1afe:	9e a1       	ldd	r25, Y+38	; 0x26
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	54 e4       	ldi	r21, 0x44	; 68
    1b08:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8a 8f       	std	Y+26, r24	; 0x1a
    1b12:	9b 8f       	std	Y+27, r25	; 0x1b
    1b14:	ac 8f       	std	Y+28, r26	; 0x1c
    1b16:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b1a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8e 8b       	std	Y+22, r24	; 0x16
    1b32:	9f 8b       	std	Y+23, r25	; 0x17
    1b34:	a8 8f       	std	Y+24, r26	; 0x18
    1b36:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b38:	6e 89       	ldd	r22, Y+22	; 0x16
    1b3a:	7f 89       	ldd	r23, Y+23	; 0x17
    1b3c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b3e:	99 8d       	ldd	r25, Y+25	; 0x19
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_voidInit+0x3cc>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9d 8b       	std	Y+21, r25	; 0x15
    1b56:	8c 8b       	std	Y+20, r24	; 0x14
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1b5a:	6e 89       	ldd	r22, Y+22	; 0x16
    1b5c:	7f 89       	ldd	r23, Y+23	; 0x17
    1b5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1b60:	99 8d       	ldd	r25, Y+25	; 0x19
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b74:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b76:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b78:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9d 8b       	std	Y+21, r25	; 0x15
    1b98:	8c 8b       	std	Y+20, r24	; 0x14
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_voidInit+0x42c>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9b 8b       	std	Y+19, r25	; 0x13
    1ba2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba4:	8a 89       	ldd	r24, Y+18	; 0x12
    1ba6:	9b 89       	ldd	r25, Y+19	; 0x13
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_voidInit+0x41a>
    1bac:	9b 8b       	std	Y+19, r25	; 0x13
    1bae:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8c 89       	ldd	r24, Y+20	; 0x14
    1bb2:	9d 89       	ldd	r25, Y+21	; 0x15
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9d 8b       	std	Y+21, r25	; 0x15
    1bb8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8c 89       	ldd	r24, Y+20	; 0x14
    1bbc:	9d 89       	ldd	r25, Y+21	; 0x15
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_voidInit+0x40e>
    1bc2:	24 c0       	rjmp	.+72     	; 0x1c0c <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6e 89       	ldd	r22, Y+22	; 0x16
    1bc6:	7f 89       	ldd	r23, Y+23	; 0x17
    1bc8:	88 8d       	ldd	r24, Y+24	; 0x18
    1bca:	99 8d       	ldd	r25, Y+25	; 0x19
    1bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9d 8b       	std	Y+21, r25	; 0x15
    1bd6:	8c 8b       	std	Y+20, r24	; 0x14
    1bd8:	8c 89       	ldd	r24, Y+20	; 0x14
    1bda:	9d 89       	ldd	r25, Y+21	; 0x15
    1bdc:	99 8b       	std	Y+17, r25	; 0x11
    1bde:	88 8b       	std	Y+16, r24	; 0x10
    1be0:	88 89       	ldd	r24, Y+16	; 0x10
    1be2:	99 89       	ldd	r25, Y+17	; 0x11
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_voidInit+0x456>
    1be8:	99 8b       	std	Y+17, r25	; 0x11
    1bea:	88 8b       	std	Y+16, r24	; 0x10
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bf0:	78 a1       	ldd	r23, Y+32	; 0x20
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8e 8f       	std	Y+30, r24	; 0x1e
    1c00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c02:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c06:	8a 95       	dec	r24
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_voidInit+0x478>
    1c0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/* Display Clear */
	LCD_voidSendCmnd(0b00000001);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e0       	ldi	r26, 0x00	; 0
    1c18:	b0 e4       	ldi	r27, 0x40	; 64
    1c1a:	8b 87       	std	Y+11, r24	; 0x0b
    1c1c:	9c 87       	std	Y+12, r25	; 0x0c
    1c1e:	ad 87       	std	Y+13, r26	; 0x0d
    1c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a ef       	ldi	r20, 0xFA	; 250
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 83       	std	Y+7, r24	; 0x07
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	a9 87       	std	Y+9, r26	; 0x09
    1c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <LCD_voidInit+0x536>
    1ca6:	88 ec       	ldi	r24, 0xC8	; 200
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_voidInit+0x524>
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <LCD_voidInit+0x518>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_voidInit+0x560>
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* Entry Mood Set */
	LCD_voidSendCmnd(0b00000110);
    1cf6:	86 e0       	ldi	r24, 0x06	; 6
    1cf8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
	
}
    1cfc:	c4 5b       	subi	r28, 0xB4	; 180
    1cfe:	df 4f       	sbci	r29, 0xFF	; 255
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	08 95       	ret

00001d14 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	69 97       	sbiw	r28, 0x19	; 25
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	89 8f       	std	Y+25, r24	; 0x19
	#if LCD_u8_MODE == BIT_LENGTH_8
	/* step-1:Rs = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_LOW);
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	/* Write command */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Cmnd  );
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	69 8d       	ldd	r22, Y+25	; 0x19
    1d42:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	62 e0       	ldi	r22, 0x02	; 2
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e8       	ldi	r26, 0x80	; 128
    1d56:	bf e3       	ldi	r27, 0x3F	; 63
    1d58:	8d 8b       	std	Y+21, r24	; 0x15
    1d5a:	9e 8b       	std	Y+22, r25	; 0x16
    1d5c:	af 8b       	std	Y+23, r26	; 0x17
    1d5e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d60:	6d 89       	ldd	r22, Y+21	; 0x15
    1d62:	7e 89       	ldd	r23, Y+22	; 0x16
    1d64:	8f 89       	ldd	r24, Y+23	; 0x17
    1d66:	98 8d       	ldd	r25, Y+24	; 0x18
    1d68:	2b ea       	ldi	r18, 0xAB	; 171
    1d6a:	3a ea       	ldi	r19, 0xAA	; 170
    1d6c:	4a e2       	ldi	r20, 0x2A	; 42
    1d6e:	50 e4       	ldi	r21, 0x40	; 64
    1d70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	89 8b       	std	Y+17, r24	; 0x11
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	ab 8b       	std	Y+19, r26	; 0x13
    1d7e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d80:	69 89       	ldd	r22, Y+17	; 0x11
    1d82:	7a 89       	ldd	r23, Y+18	; 0x12
    1d84:	8b 89       	ldd	r24, Y+19	; 0x13
    1d86:	9c 89       	ldd	r25, Y+20	; 0x14
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	1c f4       	brge	.+6      	; 0x1d9e <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	88 8b       	std	Y+16, r24	; 0x10
    1d9c:	91 c0       	rjmp	.+290    	; 0x1ec0 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1d9e:	69 89       	ldd	r22, Y+17	; 0x11
    1da0:	7a 89       	ldd	r23, Y+18	; 0x12
    1da2:	8b 89       	ldd	r24, Y+19	; 0x13
    1da4:	9c 89       	ldd	r25, Y+20	; 0x14
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4f e7       	ldi	r20, 0x7F	; 127
    1dac:	53 e4       	ldi	r21, 0x43	; 67
    1dae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1db2:	18 16       	cp	r1, r24
    1db4:	0c f0       	brlt	.+2      	; 0x1db8 <LCD_voidSendCmnd+0xa4>
    1db6:	7b c0       	rjmp	.+246    	; 0x1eae <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1db8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dba:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a e7       	ldi	r20, 0x7A	; 122
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8c 87       	std	Y+12, r24	; 0x0c
    1dd2:	9d 87       	std	Y+13, r25	; 0x0d
    1dd4:	ae 87       	std	Y+14, r26	; 0x0e
    1dd6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dda:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ddc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dde:	9f 85       	ldd	r25, Y+15	; 0x0f
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	4a ef       	ldi	r20, 0xFA	; 250
    1de6:	54 e4       	ldi	r21, 0x44	; 68
    1de8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	88 87       	std	Y+8, r24	; 0x08
    1df2:	99 87       	std	Y+9, r25	; 0x09
    1df4:	aa 87       	std	Y+10, r26	; 0x0a
    1df6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1df8:	68 85       	ldd	r22, Y+8	; 0x08
    1dfa:	79 85       	ldd	r23, Y+9	; 0x09
    1dfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9f 83       	std	Y+7, r25	; 0x07
    1e16:	8e 83       	std	Y+6, r24	; 0x06
    1e18:	3f c0       	rjmp	.+126    	; 0x1e98 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1e1a:	68 85       	ldd	r22, Y+8	; 0x08
    1e1c:	79 85       	ldd	r23, Y+9	; 0x09
    1e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	4f e7       	ldi	r20, 0x7F	; 127
    1e28:	57 e4       	ldi	r21, 0x47	; 71
    1e2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	4c f5       	brge	.+82     	; 0x1e84 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e34:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e38:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9f 83       	std	Y+7, r25	; 0x07
    1e58:	8e 83       	std	Y+6, r24	; 0x06
    1e5a:	0f c0       	rjmp	.+30     	; 0x1e7a <LCD_voidSendCmnd+0x166>
    1e5c:	88 ec       	ldi	r24, 0xC8	; 200
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9d 83       	std	Y+5, r25	; 0x05
    1e62:	8c 83       	std	Y+4, r24	; 0x04
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_voidSendCmnd+0x154>
    1e6c:	9d 83       	std	Y+5, r25	; 0x05
    1e6e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e70:	8e 81       	ldd	r24, Y+6	; 0x06
    1e72:	9f 81       	ldd	r25, Y+7	; 0x07
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	9f 83       	std	Y+7, r25	; 0x07
    1e78:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	69 f7       	brne	.-38     	; 0x1e5c <LCD_voidSendCmnd+0x148>
    1e82:	24 c0       	rjmp	.+72     	; 0x1ecc <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e84:	68 85       	ldd	r22, Y+8	; 0x08
    1e86:	79 85       	ldd	r23, Y+9	; 0x09
    1e88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9f 83       	std	Y+7, r25	; 0x07
    1e96:	8e 83       	std	Y+6, r24	; 0x06
    1e98:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9c:	9b 83       	std	Y+3, r25	; 0x03
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_voidSendCmnd+0x190>
    1ea8:	9b 83       	std	Y+3, r25	; 0x03
    1eaa:	8a 83       	std	Y+2, r24	; 0x02
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eae:	69 89       	ldd	r22, Y+17	; 0x11
    1eb0:	7a 89       	ldd	r23, Y+18	; 0x12
    1eb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	88 8b       	std	Y+16, r24	; 0x10
    1ec0:	88 89       	ldd	r24, Y+16	; 0x10
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	8a 95       	dec	r24
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_voidSendCmnd+0x1b2>
    1eca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	62 e0       	ldi	r22, 0x02	; 2
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	
	
	
	
	#endif
}
    1ed6:	69 96       	adiw	r28, 0x19	; 25
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	69 97       	sbiw	r28, 0x19	; 25
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	89 8f       	std	Y+25, r24	; 0x19
	/* step-1:Rs = 1 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RS_PIN  ,DIO_u8_HIGH);
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	/*       :Rw = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_RW_PIN  ,DIO_u8_LOW);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
	/* Write char */
	DIO_u8SetPortValue (LCD_u8_DATA_PORT , Copy_u8Char  );
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	69 8d       	ldd	r22, Y+25	; 0x19
    1f16:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8SetPortValue>
	/* E = 1 */
	DIO_u8SetPinValue  ( LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_HIGH);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	62 e0       	ldi	r22, 0x02	; 2
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e8       	ldi	r26, 0x80	; 128
    1f2a:	bf e3       	ldi	r27, 0x3F	; 63
    1f2c:	8d 8b       	std	Y+21, r24	; 0x15
    1f2e:	9e 8b       	std	Y+22, r25	; 0x16
    1f30:	af 8b       	std	Y+23, r26	; 0x17
    1f32:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f34:	6d 89       	ldd	r22, Y+21	; 0x15
    1f36:	7e 89       	ldd	r23, Y+22	; 0x16
    1f38:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3c:	2b ea       	ldi	r18, 0xAB	; 171
    1f3e:	3a ea       	ldi	r19, 0xAA	; 170
    1f40:	4a e2       	ldi	r20, 0x2A	; 42
    1f42:	50 e4       	ldi	r21, 0x40	; 64
    1f44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	89 8b       	std	Y+17, r24	; 0x11
    1f4e:	9a 8b       	std	Y+18, r25	; 0x12
    1f50:	ab 8b       	std	Y+19, r26	; 0x13
    1f52:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f54:	69 89       	ldd	r22, Y+17	; 0x11
    1f56:	7a 89       	ldd	r23, Y+18	; 0x12
    1f58:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	1c f4       	brge	.+6      	; 0x1f72 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	88 8b       	std	Y+16, r24	; 0x10
    1f70:	91 c0       	rjmp	.+290    	; 0x2094 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1f72:	69 89       	ldd	r22, Y+17	; 0x11
    1f74:	7a 89       	ldd	r23, Y+18	; 0x12
    1f76:	8b 89       	ldd	r24, Y+19	; 0x13
    1f78:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	53 e4       	ldi	r21, 0x43	; 67
    1f82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	0c f0       	brlt	.+2      	; 0x1f8c <LCD_voidSendChar+0xa4>
    1f8a:	7b c0       	rjmp	.+246    	; 0x2082 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f90:	8f 89       	ldd	r24, Y+23	; 0x17
    1f92:	98 8d       	ldd	r25, Y+24	; 0x18
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a e7       	ldi	r20, 0x7A	; 122
    1f9a:	54 e4       	ldi	r21, 0x44	; 68
    1f9c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8c 87       	std	Y+12, r24	; 0x0c
    1fa6:	9d 87       	std	Y+13, r25	; 0x0d
    1fa8:	ae 87       	std	Y+14, r26	; 0x0e
    1faa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fae:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a ef       	ldi	r20, 0xFA	; 250
    1fba:	54 e4       	ldi	r21, 0x44	; 68
    1fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	88 87       	std	Y+8, r24	; 0x08
    1fc6:	99 87       	std	Y+9, r25	; 0x09
    1fc8:	aa 87       	std	Y+10, r26	; 0x0a
    1fca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fcc:	68 85       	ldd	r22, Y+8	; 0x08
    1fce:	79 85       	ldd	r23, Y+9	; 0x09
    1fd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <LCD_voidSendChar+0x106>
		__ticks = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9f 83       	std	Y+7, r25	; 0x07
    1fea:	8e 83       	std	Y+6, r24	; 0x06
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1fee:	68 85       	ldd	r22, Y+8	; 0x08
    1ff0:	79 85       	ldd	r23, Y+9	; 0x09
    1ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	4c f5       	brge	.+82     	; 0x2058 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	6c 85       	ldd	r22, Y+12	; 0x0c
    2008:	7d 85       	ldd	r23, Y+13	; 0x0d
    200a:	8e 85       	ldd	r24, Y+14	; 0x0e
    200c:	9f 85       	ldd	r25, Y+15	; 0x0f
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9f 83       	std	Y+7, r25	; 0x07
    202c:	8e 83       	std	Y+6, r24	; 0x06
    202e:	0f c0       	rjmp	.+30     	; 0x204e <LCD_voidSendChar+0x166>
    2030:	88 ec       	ldi	r24, 0xC8	; 200
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9d 83       	std	Y+5, r25	; 0x05
    2036:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_voidSendChar+0x154>
    2040:	9d 83       	std	Y+5, r25	; 0x05
    2042:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2044:	8e 81       	ldd	r24, Y+6	; 0x06
    2046:	9f 81       	ldd	r25, Y+7	; 0x07
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	9f 83       	std	Y+7, r25	; 0x07
    204c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	8e 81       	ldd	r24, Y+6	; 0x06
    2050:	9f 81       	ldd	r25, Y+7	; 0x07
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	69 f7       	brne	.-38     	; 0x2030 <LCD_voidSendChar+0x148>
    2056:	24 c0       	rjmp	.+72     	; 0x20a0 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	68 85       	ldd	r22, Y+8	; 0x08
    205a:	79 85       	ldd	r23, Y+9	; 0x09
    205c:	8a 85       	ldd	r24, Y+10	; 0x0a
    205e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9f 83       	std	Y+7, r25	; 0x07
    206a:	8e 83       	std	Y+6, r24	; 0x06
    206c:	8e 81       	ldd	r24, Y+6	; 0x06
    206e:	9f 81       	ldd	r25, Y+7	; 0x07
    2070:	9b 83       	std	Y+3, r25	; 0x03
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	9b 81       	ldd	r25, Y+3	; 0x03
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_voidSendChar+0x190>
    207c:	9b 83       	std	Y+3, r25	; 0x03
    207e:	8a 83       	std	Y+2, r24	; 0x02
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2082:	69 89       	ldd	r22, Y+17	; 0x11
    2084:	7a 89       	ldd	r23, Y+18	; 0x12
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	88 8b       	std	Y+16, r24	; 0x10
    2094:	88 89       	ldd	r24, Y+16	; 0x10
    2096:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	8a 95       	dec	r24
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_voidSendChar+0x1b2>
    209e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_u8SetPinValue  (LCD_u8_CONTROL_PORT ,LCD_u8_E_PIN  ,DIO_u8_LOW);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	62 e0       	ldi	r22, 0x02	; 2
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
}
    20aa:	69 96       	adiw	r28, 0x19	; 25
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <LCD_voidSendStr>:

void LCD_voidSendStr(u8* Copy_pu8Str )
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <LCD_voidSendStr+0x6>
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	9b 83       	std	Y+3, r25	; 0x03
    20ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StrLen = 0;
    20cc:	19 82       	std	Y+1, r1	; 0x01
    20ce:	0e c0       	rjmp	.+28     	; 0x20ec <LCD_voidSendStr+0x30>
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	9b 81       	ldd	r25, Y+3	; 0x03
    20da:	fc 01       	movw	r30, r24
    20dc:	e2 0f       	add	r30, r18
    20de:	f3 1f       	adc	r31, r19
    20e0:	80 81       	ld	r24, Z
    20e2:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_voidSendChar>
		Local_u8StrLen++;
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	8f 5f       	subi	r24, 0xFF	; 255
    20ea:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendStr(u8* Copy_pu8Str )
{
	u8 Local_u8StrLen = 0;
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	9b 81       	ldd	r25, Y+3	; 0x03
    20f6:	fc 01       	movw	r30, r24
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	80 81       	ld	r24, Z
    20fe:	88 23       	and	r24, r24
    2100:	39 f7       	brne	.-50     	; 0x20d0 <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
		Local_u8StrLen++;
	}
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <LCD_voidSendNum>:

void LCD_voidSendNum (u32  Copy_u32Num )
{
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	61 97       	sbiw	r28, 0x11	; 17
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	6e 87       	std	Y+14, r22	; 0x0e
    2128:	7f 87       	std	Y+15, r23	; 0x0f
    212a:	88 8b       	std	Y+16, r24	; 0x10
    212c:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8NumArr[10]= {0};
    212e:	8a e0       	ldi	r24, 0x0A	; 10
    2130:	fe 01       	movw	r30, r28
    2132:	34 96       	adiw	r30, 0x04	; 4
    2134:	df 01       	movw	r26, r30
    2136:	98 2f       	mov	r25, r24
    2138:	1d 92       	st	X+, r1
    213a:	9a 95       	dec	r25
    213c:	e9 f7       	brne	.-6      	; 0x2138 <LCD_voidSendNum+0x2a>
	u8 Local_u8ArrIndex = 0;
    213e:	1b 82       	std	Y+3, r1	; 0x03
    2140:	2d c0       	rjmp	.+90     	; 0x219c <LCD_voidSendNum+0x8e>
	while(Copy_u32Num > 0)
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	08 2f       	mov	r16, r24
    2146:	10 e0       	ldi	r17, 0x00	; 0
    2148:	8e 85       	ldd	r24, Y+14	; 0x0e
    214a:	9f 85       	ldd	r25, Y+15	; 0x0f
    214c:	a8 89       	ldd	r26, Y+16	; 0x10
    214e:	b9 89       	ldd	r27, Y+17	; 0x11
    2150:	2a e0       	ldi	r18, 0x0A	; 10
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__udivmodsi4>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	28 2f       	mov	r18, r24
    2166:	ce 01       	movw	r24, r28
    2168:	04 96       	adiw	r24, 0x04	; 4
    216a:	fc 01       	movw	r30, r24
    216c:	e0 0f       	add	r30, r16
    216e:	f1 1f       	adc	r31, r17
    2170:	20 83       	st	Z, r18
		Copy_u32Num /=10;
    2172:	8e 85       	ldd	r24, Y+14	; 0x0e
    2174:	9f 85       	ldd	r25, Y+15	; 0x0f
    2176:	a8 89       	ldd	r26, Y+16	; 0x10
    2178:	b9 89       	ldd	r27, Y+17	; 0x11
    217a:	2a e0       	ldi	r18, 0x0A	; 10
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	50 e0       	ldi	r21, 0x00	; 0
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__udivmodsi4>
    218a:	da 01       	movw	r26, r20
    218c:	c9 01       	movw	r24, r18
    218e:	8e 87       	std	Y+14, r24	; 0x0e
    2190:	9f 87       	std	Y+15, r25	; 0x0f
    2192:	a8 8b       	std	Y+16, r26	; 0x10
    2194:	b9 8b       	std	Y+17, r27	; 0x11
		Local_u8ArrIndex++;
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidSendNum (u32  Copy_u32Num )
{
    u8 Local_u8NumArr[10]= {0};
	u8 Local_u8ArrIndex = 0;
	while(Copy_u32Num > 0)
    219c:	8e 85       	ldd	r24, Y+14	; 0x0e
    219e:	9f 85       	ldd	r25, Y+15	; 0x0f
    21a0:	a8 89       	ldd	r26, Y+16	; 0x10
    21a2:	b9 89       	ldd	r27, Y+17	; 0x11
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	a1 05       	cpc	r26, r1
    21a8:	b1 05       	cpc	r27, r1
    21aa:	59 f6       	brne	.-106    	; 0x2142 <LCD_voidSendNum+0x34>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	88 2f       	mov	r24, r24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	10 c0       	rjmp	.+32     	; 0x21da <LCD_voidSendNum+0xcc>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
    21ba:	29 81       	ldd	r18, Y+1	; 0x01
    21bc:	3a 81       	ldd	r19, Y+2	; 0x02
    21be:	ce 01       	movw	r24, r28
    21c0:	04 96       	adiw	r24, 0x04	; 4
    21c2:	fc 01       	movw	r30, r24
    21c4:	e2 0f       	add	r30, r18
    21c6:	f3 1f       	adc	r31, r19
    21c8:	80 81       	ld	r24, Z
    21ca:	80 5d       	subi	r24, 0xD0	; 208
    21cc:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_voidSendChar>
	{
		Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
		Copy_u32Num /=10;
		Local_u8ArrIndex++;
	}
	for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	99 23       	and	r25, r25
    21e0:	64 f7       	brge	.-40     	; 0x21ba <LCD_voidSendNum+0xac>
	{
		LCD_voidSendChar( Local_u8NumArr[i] + '0');
	}
} 
    21e2:	61 96       	adiw	r28, 0x11	; 17
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	08 95       	ret

000021f8 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY (u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <LCD_u8GoToXY+0x6>
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <LCD_u8GoToXY+0x8>
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Location <= 39)
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	88 32       	cpi	r24, 0x28	; 40
    2212:	e0 f4       	brcc	.+56     	; 0x224c <LCD_u8GoToXY+0x54>
	{
			switch (Copy_u8LineNum)
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	3d 83       	std	Y+5, r19	; 0x05
    221c:	2c 83       	std	Y+4, r18	; 0x04
    221e:	8c 81       	ldd	r24, Y+4	; 0x04
    2220:	9d 81       	ldd	r25, Y+5	; 0x05
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	91 05       	cpc	r25, r1
    2226:	31 f0       	breq	.+12     	; 0x2234 <LCD_u8GoToXY+0x3c>
    2228:	2c 81       	ldd	r18, Y+4	; 0x04
    222a:	3d 81       	ldd	r19, Y+5	; 0x05
    222c:	22 30       	cpi	r18, 0x02	; 2
    222e:	31 05       	cpc	r19, r1
    2230:	31 f0       	breq	.+12     	; 0x223e <LCD_u8GoToXY+0x46>
    2232:	0a c0       	rjmp	.+20     	; 0x2248 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE_1   : LCD_voidSendCmnd (0x80 + Copy_u8Location); break;
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	80 58       	subi	r24, 0x80	; 128
    2238:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    223c:	08 c0       	rjmp	.+16     	; 0x224e <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE_2   : LCD_voidSendCmnd (0xC0 + Copy_u8Location); break;
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	80 54       	subi	r24, 0x40	; 64
    2242:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    2246:	03 c0       	rjmp	.+6      	; 0x224e <LCD_u8GoToXY+0x56>
			default              : Local_u8ErrorState = STD_TYPES_NOK;
    2248:	19 82       	std	Y+1, r1	; 0x01
    224a:	01 c0       	rjmp	.+2      	; 0x224e <LCD_u8GoToXY+0x56>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    224c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <LCD_voidClearScreen>:

void LCD_voidClearScreen (void)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	2e 97       	sbiw	r28, 0x0e	; 14
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd (0x01);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e0       	ldi	r26, 0x00	; 0
    2280:	b0 e4       	ldi	r27, 0x40	; 64
    2282:	8b 87       	std	Y+11, r24	; 0x0b
    2284:	9c 87       	std	Y+12, r25	; 0x0c
    2286:	ad 87       	std	Y+13, r26	; 0x0d
    2288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	6b 85       	ldd	r22, Y+11	; 0x0b
    228c:	7c 85       	ldd	r23, Y+12	; 0x0c
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	9e 85       	ldd	r25, Y+14	; 0x0e
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a ef       	ldi	r20, 0xFA	; 250
    2298:	54 e4       	ldi	r21, 0x44	; 68
    229a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8f 83       	std	Y+7, r24	; 0x07
    22a4:	98 87       	std	Y+8, r25	; 0x08
    22a6:	a9 87       	std	Y+9, r26	; 0x09
    22a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	78 85       	ldd	r23, Y+8	; 0x08
    22ae:	89 85       	ldd	r24, Y+9	; 0x09
    22b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	2c f4       	brge	.+10     	; 0x22cc <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	3f c0       	rjmp	.+126    	; 0x234a <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	57 e4       	ldi	r21, 0x47	; 71
    22dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	4c f5       	brge	.+82     	; 0x2336 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e2       	ldi	r20, 0x20	; 32
    22f2:	51 e4       	ldi	r21, 0x41	; 65
    22f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	0f c0       	rjmp	.+30     	; 0x232c <LCD_voidClearScreen+0xcc>
    230e:	88 ec       	ldi	r24, 0xC8	; 200
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCD_voidClearScreen+0xba>
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	69 f7       	brne	.-38     	; 0x230e <LCD_voidClearScreen+0xae>
    2334:	14 c0       	rjmp	.+40     	; 0x235e <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <LCD_voidClearScreen+0xf6>
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    235e:	2e 96       	adiw	r28, 0x0e	; 14
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <LCD_u8SendSpecialChar>:

u8 LCD_u8SendSpecialChar    (u8 Copy_u8CharNum , u8* Copy_pu8CharShape ,u8  Copy_u8LineNum , u8 Copy_u8Location )
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	2a 97       	sbiw	r28, 0x0a	; 10
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	8c 83       	std	Y+4, r24	; 0x04
    2386:	7e 83       	std	Y+6, r23	; 0x06
    2388:	6d 83       	std	Y+5, r22	; 0x05
    238a:	4f 83       	std	Y+7, r20	; 0x07
    238c:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	8b 83       	std	Y+3, r24	; 0x03
	if((Copy_u8CharNum <= 7)&&(Copy_u8Location <= 39)&&(Copy_u8LineNum <=2)) 
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	88 30       	cpi	r24, 0x08	; 8
    2396:	08 f0       	brcs	.+2      	; 0x239a <LCD_u8SendSpecialChar+0x2a>
    2398:	79 c0       	rjmp	.+242    	; 0x248c <LCD_u8SendSpecialChar+0x11c>
    239a:	88 85       	ldd	r24, Y+8	; 0x08
    239c:	88 32       	cpi	r24, 0x28	; 40
    239e:	08 f0       	brcs	.+2      	; 0x23a2 <LCD_u8SendSpecialChar+0x32>
    23a0:	75 c0       	rjmp	.+234    	; 0x248c <LCD_u8SendSpecialChar+0x11c>
    23a2:	8f 81       	ldd	r24, Y+7	; 0x07
    23a4:	83 30       	cpi	r24, 0x03	; 3
    23a6:	08 f0       	brcs	.+2      	; 0x23aa <LCD_u8SendSpecialChar+0x3a>
    23a8:	71 c0       	rjmp	.+226    	; 0x248c <LCD_u8SendSpecialChar+0x11c>
	{
		switch(Copy_u8CharNum)
    23aa:	8c 81       	ldd	r24, Y+4	; 0x04
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	3a 87       	std	Y+10, r19	; 0x0a
    23b2:	29 87       	std	Y+9, r18	; 0x09
    23b4:	89 85       	ldd	r24, Y+9	; 0x09
    23b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b8:	83 30       	cpi	r24, 0x03	; 3
    23ba:	91 05       	cpc	r25, r1
    23bc:	a9 f1       	breq	.+106    	; 0x2428 <LCD_u8SendSpecialChar+0xb8>
    23be:	29 85       	ldd	r18, Y+9	; 0x09
    23c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    23c2:	24 30       	cpi	r18, 0x04	; 4
    23c4:	31 05       	cpc	r19, r1
    23c6:	7c f4       	brge	.+30     	; 0x23e6 <LCD_u8SendSpecialChar+0x76>
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	81 30       	cpi	r24, 0x01	; 1
    23ce:	91 05       	cpc	r25, r1
    23d0:	19 f1       	breq	.+70     	; 0x2418 <LCD_u8SendSpecialChar+0xa8>
    23d2:	29 85       	ldd	r18, Y+9	; 0x09
    23d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    23d6:	22 30       	cpi	r18, 0x02	; 2
    23d8:	31 05       	cpc	r19, r1
    23da:	14 f5       	brge	.+68     	; 0x2420 <LCD_u8SendSpecialChar+0xb0>
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	b1 f0       	breq	.+44     	; 0x2410 <LCD_u8SendSpecialChar+0xa0>
    23e4:	34 c0       	rjmp	.+104    	; 0x244e <LCD_u8SendSpecialChar+0xde>
    23e6:	29 85       	ldd	r18, Y+9	; 0x09
    23e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    23ea:	25 30       	cpi	r18, 0x05	; 5
    23ec:	31 05       	cpc	r19, r1
    23ee:	21 f1       	breq	.+72     	; 0x2438 <LCD_u8SendSpecialChar+0xc8>
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	85 30       	cpi	r24, 0x05	; 5
    23f6:	91 05       	cpc	r25, r1
    23f8:	dc f0       	brlt	.+54     	; 0x2430 <LCD_u8SendSpecialChar+0xc0>
    23fa:	29 85       	ldd	r18, Y+9	; 0x09
    23fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    23fe:	26 30       	cpi	r18, 0x06	; 6
    2400:	31 05       	cpc	r19, r1
    2402:	f1 f0       	breq	.+60     	; 0x2440 <LCD_u8SendSpecialChar+0xd0>
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	87 30       	cpi	r24, 0x07	; 7
    240a:	91 05       	cpc	r25, r1
    240c:	e9 f0       	breq	.+58     	; 0x2448 <LCD_u8SendSpecialChar+0xd8>
    240e:	1f c0       	rjmp	.+62     	; 0x244e <LCD_u8SendSpecialChar+0xde>
		{
			case 0:LCD_voidSendCmnd(0b01000000); break; //0
    2410:	80 e4       	ldi	r24, 0x40	; 64
    2412:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    2416:	1b c0       	rjmp	.+54     	; 0x244e <LCD_u8SendSpecialChar+0xde>
			case 1:LCD_voidSendCmnd(0b01001000); break; //8
    2418:	88 e4       	ldi	r24, 0x48	; 72
    241a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    241e:	17 c0       	rjmp	.+46     	; 0x244e <LCD_u8SendSpecialChar+0xde>
			case 2:LCD_voidSendCmnd(0b01010000); break; //16
    2420:	80 e5       	ldi	r24, 0x50	; 80
    2422:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    2426:	13 c0       	rjmp	.+38     	; 0x244e <LCD_u8SendSpecialChar+0xde>
			case 3:LCD_voidSendCmnd(0b01011000); break; //24
    2428:	88 e5       	ldi	r24, 0x58	; 88
    242a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    242e:	0f c0       	rjmp	.+30     	; 0x244e <LCD_u8SendSpecialChar+0xde>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
    2430:	80 e6       	ldi	r24, 0x60	; 96
    2432:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    2436:	0b c0       	rjmp	.+22     	; 0x244e <LCD_u8SendSpecialChar+0xde>
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
    2438:	88 e6       	ldi	r24, 0x68	; 104
    243a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    243e:	07 c0       	rjmp	.+14     	; 0x244e <LCD_u8SendSpecialChar+0xde>
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
    2440:	80 e7       	ldi	r24, 0x70	; 112
    2442:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    2446:	03 c0       	rjmp	.+6      	; 0x244e <LCD_u8SendSpecialChar+0xde>
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
    2448:	88 e7       	ldi	r24, 0x78	; 120
    244a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
		}
		for(int i=0 ;i <8 ;i++)
    244e:	1a 82       	std	Y+2, r1	; 0x02
    2450:	19 82       	std	Y+1, r1	; 0x01
    2452:	0f c0       	rjmp	.+30     	; 0x2472 <LCD_u8SendSpecialChar+0x102>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
    2454:	29 81       	ldd	r18, Y+1	; 0x01
    2456:	3a 81       	ldd	r19, Y+2	; 0x02
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	fc 01       	movw	r30, r24
    245e:	e2 0f       	add	r30, r18
    2460:	f3 1f       	adc	r31, r19
    2462:	80 81       	ld	r24, Z
    2464:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_voidSendChar>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
		}
		for(int i=0 ;i <8 ;i++)
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	9a 81       	ldd	r25, Y+2	; 0x02
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	88 30       	cpi	r24, 0x08	; 8
    2478:	91 05       	cpc	r25, r1
    247a:	64 f3       	brlt	.-40     	; 0x2454 <LCD_u8SendSpecialChar+0xe4>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
		}
	    LCD_u8GoToXY(Copy_u8LineNum ,Copy_u8Location );	
    247c:	8f 81       	ldd	r24, Y+7	; 0x07
    247e:	68 85       	ldd	r22, Y+8	; 0x08
    2480:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2484:	8c 81       	ldd	r24, Y+4	; 0x04
    2486:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_voidSendChar>
    248a:	01 c0       	rjmp	.+2      	; 0x248e <LCD_u8SendSpecialChar+0x11e>
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    248c:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2490:	2a 96       	adiw	r28, 0x0a	; 10
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <LCD_voidShiftRight>:

void LCD_voidShiftRight(void)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	2e 97       	sbiw	r28, 0x0e	; 14
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011100);
    24b6:	8c e1       	ldi	r24, 0x1C	; 28
    24b8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a8 ec       	ldi	r26, 0xC8	; 200
    24c2:	b2 e4       	ldi	r27, 0x42	; 66
    24c4:	8b 87       	std	Y+11, r24	; 0x0b
    24c6:	9c 87       	std	Y+12, r25	; 0x0c
    24c8:	ad 87       	std	Y+13, r26	; 0x0d
    24ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a ef       	ldi	r20, 0xFA	; 250
    24da:	54 e4       	ldi	r21, 0x44	; 68
    24dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	8f 83       	std	Y+7, r24	; 0x07
    24e6:	98 87       	std	Y+8, r25	; 0x08
    24e8:	a9 87       	std	Y+9, r26	; 0x09
    24ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5f e3       	ldi	r21, 0x3F	; 63
    24fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2500:	88 23       	and	r24, r24
    2502:	2c f4       	brge	.+10     	; 0x250e <LCD_voidShiftRight+0x6c>
		__ticks = 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	3f c0       	rjmp	.+126    	; 0x258c <LCD_voidShiftRight+0xea>
	else if (__tmp > 65535)
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	4c f5       	brge	.+82     	; 0x2578 <LCD_voidShiftRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2526:	6b 85       	ldd	r22, Y+11	; 0x0b
    2528:	7c 85       	ldd	r23, Y+12	; 0x0c
    252a:	8d 85       	ldd	r24, Y+13	; 0x0d
    252c:	9e 85       	ldd	r25, Y+14	; 0x0e
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e2       	ldi	r20, 0x20	; 32
    2534:	51 e4       	ldi	r21, 0x41	; 65
    2536:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	0f c0       	rjmp	.+30     	; 0x256e <LCD_voidShiftRight+0xcc>
    2550:	88 ec       	ldi	r24, 0xC8	; 200
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <LCD_voidShiftRight+0xba>
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	69 f7       	brne	.-38     	; 0x2550 <LCD_voidShiftRight+0xae>
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <LCD_voidShiftRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2578:	6f 81       	ldd	r22, Y+7	; 0x07
    257a:	78 85       	ldd	r23, Y+8	; 0x08
    257c:	89 85       	ldd	r24, Y+9	; 0x09
    257e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2580:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <LCD_voidShiftRight+0xf6>
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    25a0:	2e 96       	adiw	r28, 0x0e	; 14
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <LCD_voidShiftLeft>:

void LCD_voidShiftLeft(void)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	2e 97       	sbiw	r28, 0x0e	; 14
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011000);
    25c6:	88 e1       	ldi	r24, 0x18	; 24
    25c8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_voidSendCmnd>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a8 ec       	ldi	r26, 0xC8	; 200
    25d2:	b2 e4       	ldi	r27, 0x42	; 66
    25d4:	8b 87       	std	Y+11, r24	; 0x0b
    25d6:	9c 87       	std	Y+12, r25	; 0x0c
    25d8:	ad 87       	std	Y+13, r26	; 0x0d
    25da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25de:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	4a ef       	ldi	r20, 0xFA	; 250
    25ea:	54 e4       	ldi	r21, 0x44	; 68
    25ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	8f 83       	std	Y+7, r24	; 0x07
    25f6:	98 87       	std	Y+8, r25	; 0x08
    25f8:	a9 87       	std	Y+9, r26	; 0x09
    25fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25fc:	6f 81       	ldd	r22, Y+7	; 0x07
    25fe:	78 85       	ldd	r23, Y+8	; 0x08
    2600:	89 85       	ldd	r24, Y+9	; 0x09
    2602:	9a 85       	ldd	r25, Y+10	; 0x0a
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e8       	ldi	r20, 0x80	; 128
    260a:	5f e3       	ldi	r21, 0x3F	; 63
    260c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2610:	88 23       	and	r24, r24
    2612:	2c f4       	brge	.+10     	; 0x261e <LCD_voidShiftLeft+0x6c>
		__ticks = 1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	3f c0       	rjmp	.+126    	; 0x269c <LCD_voidShiftLeft+0xea>
	else if (__tmp > 65535)
    261e:	6f 81       	ldd	r22, Y+7	; 0x07
    2620:	78 85       	ldd	r23, Y+8	; 0x08
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	3f ef       	ldi	r19, 0xFF	; 255
    262a:	4f e7       	ldi	r20, 0x7F	; 127
    262c:	57 e4       	ldi	r21, 0x47	; 71
    262e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2632:	18 16       	cp	r1, r24
    2634:	4c f5       	brge	.+82     	; 0x2688 <LCD_voidShiftLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2636:	6b 85       	ldd	r22, Y+11	; 0x0b
    2638:	7c 85       	ldd	r23, Y+12	; 0x0c
    263a:	8d 85       	ldd	r24, Y+13	; 0x0d
    263c:	9e 85       	ldd	r25, Y+14	; 0x0e
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e2       	ldi	r20, 0x20	; 32
    2644:	51 e4       	ldi	r21, 0x41	; 65
    2646:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	0f c0       	rjmp	.+30     	; 0x267e <LCD_voidShiftLeft+0xcc>
    2660:	88 ec       	ldi	r24, 0xC8	; 200
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	8b 83       	std	Y+3, r24	; 0x03
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_voidShiftLeft+0xba>
    2670:	9c 83       	std	Y+4, r25	; 0x04
    2672:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	9e 81       	ldd	r25, Y+6	; 0x06
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	9e 83       	std	Y+6, r25	; 0x06
    267c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	69 f7       	brne	.-38     	; 0x2660 <LCD_voidShiftLeft+0xae>
    2686:	14 c0       	rjmp	.+40     	; 0x26b0 <LCD_voidShiftLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2688:	6f 81       	ldd	r22, Y+7	; 0x07
    268a:	78 85       	ldd	r23, Y+8	; 0x08
    268c:	89 85       	ldd	r24, Y+9	; 0x09
    268e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2690:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <LCD_voidShiftLeft+0xf6>
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
    26b0:	2e 96       	adiw	r28, 0x0e	; 14
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <main>:
#include"KPD_interface.h"

#define PASSWORD_SIZE      4

int main(void)
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	c9 54       	subi	r28, 0x49	; 73
    26cc:	d0 40       	sbci	r29, 0x00	; 0
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u8 Local_u8LoginFlag=1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	fe 01       	movw	r30, r28
    26dc:	e0 5c       	subi	r30, 0xC0	; 192
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 83       	st	Z, r24
	u8 Local_u8ExitFlag=1;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	8f af       	std	Y+63, r24	; 0x3f
	u8 Local_u8BackFlag=1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	8e af       	std	Y+62, r24	; 0x3e
	u8 Local_u8TryNumber=0;
    26ea:	1d ae       	std	Y+61, r1	; 0x3d
    u8 Local_Au8PassWord[PASSWORD_SIZE]={'7','5','7','9'};
    26ec:	fe 01       	movw	r30, r28
    26ee:	ee 5b       	subi	r30, 0xBE	; 190
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	87 e3       	ldi	r24, 0x37	; 55
    26f4:	80 83       	st	Z, r24
    26f6:	fe 01       	movw	r30, r28
    26f8:	ee 5b       	subi	r30, 0xBE	; 190
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	85 e3       	ldi	r24, 0x35	; 53
    26fe:	81 83       	std	Z+1, r24	; 0x01
    2700:	fe 01       	movw	r30, r28
    2702:	ee 5b       	subi	r30, 0xBE	; 190
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	87 e3       	ldi	r24, 0x37	; 55
    2708:	82 83       	std	Z+2, r24	; 0x02
    270a:	fe 01       	movw	r30, r28
    270c:	ee 5b       	subi	r30, 0xBE	; 190
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	89 e3       	ldi	r24, 0x39	; 57
    2712:	83 83       	std	Z+3, r24	; 0x03
    u8 Local_Au8Login[PASSWORD_SIZE];
    u8 Local_Index=0;
    2714:	1c ae       	std	Y+60, r1	; 0x3c
	DIO_voidInit();
    2716:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	LCD_voidInit();
    271a:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidInit>
    do
    {
    	Local_u8LoginFlag = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	fe 01       	movw	r30, r28
    2722:	e0 5c       	subi	r30, 0xC0	; 192
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 83       	st	Z, r24
    	Local_u8ExitFlag  = 1;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	8f af       	std	Y+63, r24	; 0x3f
    	Local_u8BackFlag  = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	8e af       	std	Y+62, r24	; 0x3e
    	u8 Local_Index=0;
    2730:	1b ae       	std	Y+59, r1	; 0x3b
        LCD_voidClearScreen();
    2732:	0e 94 30 11 	call	0x2260	; 0x2260 <LCD_voidClearScreen>
    	LCD_voidSendStr("PassWord:");
    2736:	80 e6       	ldi	r24, 0x60	; 96
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
    273e:	22 c0       	rjmp	.+68     	; 0x2784 <main+0xc2>
		while(Local_Index < PASSWORD_SIZE )
		{
			KPD_u8GetKeyState(&Local_u8Key);
    2740:	ce 01       	movw	r24, r28
    2742:	8f 5b       	subi	r24, 0xBF	; 191
    2744:	9f 4f       	sbci	r25, 0xFF	; 255
    2746:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KPD_u8GetKeyState>
			if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    274a:	fe 01       	movw	r30, r28
    274c:	ef 5b       	subi	r30, 0xBF	; 191
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	8f 3f       	cpi	r24, 0xFF	; 255
    2754:	b9 f0       	breq	.+46     	; 0x2784 <main+0xc2>
			{
				LCD_voidSendChar(Local_u8Key);
    2756:	fe 01       	movw	r30, r28
    2758:	ef 5b       	subi	r30, 0xBF	; 191
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 81       	ld	r24, Z
    275e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_voidSendChar>
				Local_Au8Login[Local_Index] = Local_u8Key;
    2762:	8b ad       	ldd	r24, Y+59	; 0x3b
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	fe 01       	movw	r30, r28
    276a:	ef 5b       	subi	r30, 0xBF	; 191
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	40 81       	ld	r20, Z
    2770:	ce 01       	movw	r24, r28
    2772:	8a 5b       	subi	r24, 0xBA	; 186
    2774:	9f 4f       	sbci	r25, 0xFF	; 255
    2776:	fc 01       	movw	r30, r24
    2778:	e2 0f       	add	r30, r18
    277a:	f3 1f       	adc	r31, r19
    277c:	40 83       	st	Z, r20
				Local_Index++;
    277e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2780:	8f 5f       	subi	r24, 0xFF	; 255
    2782:	8b af       	std	Y+59, r24	; 0x3b
    	Local_u8ExitFlag  = 1;
    	Local_u8BackFlag  = 1;
    	u8 Local_Index=0;
        LCD_voidClearScreen();
    	LCD_voidSendStr("PassWord:");
		while(Local_Index < PASSWORD_SIZE )
    2784:	8b ad       	ldd	r24, Y+59	; 0x3b
    2786:	84 30       	cpi	r24, 0x04	; 4
    2788:	d8 f2       	brcs	.-74     	; 0x2740 <main+0x7e>
				LCD_voidSendChar(Local_u8Key);
				Local_Au8Login[Local_Index] = Local_u8Key;
				Local_Index++;
			}
		}
		for(int i=0 ;i<PASSWORD_SIZE ;i++)
    278a:	1a ae       	std	Y+58, r1	; 0x3a
    278c:	19 ae       	std	Y+57, r1	; 0x39
    278e:	1e c0       	rjmp	.+60     	; 0x27cc <main+0x10a>
		{
			if(Local_Au8Login[i] != Local_Au8PassWord[i] )
    2790:	29 ad       	ldd	r18, Y+57	; 0x39
    2792:	3a ad       	ldd	r19, Y+58	; 0x3a
    2794:	ce 01       	movw	r24, r28
    2796:	8a 5b       	subi	r24, 0xBA	; 186
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	fc 01       	movw	r30, r24
    279c:	e2 0f       	add	r30, r18
    279e:	f3 1f       	adc	r31, r19
    27a0:	40 81       	ld	r20, Z
    27a2:	29 ad       	ldd	r18, Y+57	; 0x39
    27a4:	3a ad       	ldd	r19, Y+58	; 0x3a
    27a6:	ce 01       	movw	r24, r28
    27a8:	8e 5b       	subi	r24, 0xBE	; 190
    27aa:	9f 4f       	sbci	r25, 0xFF	; 255
    27ac:	fc 01       	movw	r30, r24
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	80 81       	ld	r24, Z
    27b4:	48 17       	cp	r20, r24
    27b6:	29 f0       	breq	.+10     	; 0x27c2 <main+0x100>
			{
				Local_u8LoginFlag = 0;
    27b8:	fe 01       	movw	r30, r28
    27ba:	e0 5c       	subi	r30, 0xC0	; 192
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	10 82       	st	Z, r1
    27c0:	0a c0       	rjmp	.+20     	; 0x27d6 <main+0x114>
				LCD_voidSendChar(Local_u8Key);
				Local_Au8Login[Local_Index] = Local_u8Key;
				Local_Index++;
			}
		}
		for(int i=0 ;i<PASSWORD_SIZE ;i++)
    27c2:	89 ad       	ldd	r24, Y+57	; 0x39
    27c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	9a af       	std	Y+58, r25	; 0x3a
    27ca:	89 af       	std	Y+57, r24	; 0x39
    27cc:	89 ad       	ldd	r24, Y+57	; 0x39
    27ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	91 05       	cpc	r25, r1
    27d4:	ec f2       	brlt	.-70     	; 0x2790 <main+0xce>
			{
				Local_u8LoginFlag = 0;
				break;
			}
		}
		if(Local_u8LoginFlag == 0)
    27d6:	fe 01       	movw	r30, r28
    27d8:	e0 5c       	subi	r30, 0xC0	; 192
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	88 23       	and	r24, r24
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <main+0x122>
    27e2:	f5 c0       	rjmp	.+490    	; 0x29ce <main+0x30c>
		{
			Local_u8TryNumber++;
    27e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	8d af       	std	Y+61, r24	; 0x3d
			Local_Index =0;
    27ea:	1b ae       	std	Y+59, r1	; 0x3b
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a8 ec       	ldi	r26, 0xC8	; 200
    27f2:	b2 e4       	ldi	r27, 0x42	; 66
    27f4:	8d ab       	std	Y+53, r24	; 0x35
    27f6:	9e ab       	std	Y+54, r25	; 0x36
    27f8:	af ab       	std	Y+55, r26	; 0x37
    27fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	6d a9       	ldd	r22, Y+53	; 0x35
    27fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2800:	8f a9       	ldd	r24, Y+55	; 0x37
    2802:	98 ad       	ldd	r25, Y+56	; 0x38
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a ef       	ldi	r20, 0xFA	; 250
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	89 ab       	std	Y+49, r24	; 0x31
    2816:	9a ab       	std	Y+50, r25	; 0x32
    2818:	ab ab       	std	Y+51, r26	; 0x33
    281a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    281c:	69 a9       	ldd	r22, Y+49	; 0x31
    281e:	7a a9       	ldd	r23, Y+50	; 0x32
    2820:	8b a9       	ldd	r24, Y+51	; 0x33
    2822:	9c a9       	ldd	r25, Y+52	; 0x34
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <main+0x17c>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	98 ab       	std	Y+48, r25	; 0x30
    283a:	8f a7       	std	Y+47, r24	; 0x2f
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <main+0x1fa>
	else if (__tmp > 65535)
    283e:	69 a9       	ldd	r22, Y+49	; 0x31
    2840:	7a a9       	ldd	r23, Y+50	; 0x32
    2842:	8b a9       	ldd	r24, Y+51	; 0x33
    2844:	9c a9       	ldd	r25, Y+52	; 0x34
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	6d a9       	ldd	r22, Y+53	; 0x35
    2858:	7e a9       	ldd	r23, Y+54	; 0x36
    285a:	8f a9       	ldd	r24, Y+55	; 0x37
    285c:	98 ad       	ldd	r25, Y+56	; 0x38
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	98 ab       	std	Y+48, r25	; 0x30
    287c:	8f a7       	std	Y+47, r24	; 0x2f
    287e:	0f c0       	rjmp	.+30     	; 0x289e <main+0x1dc>
    2880:	88 ec       	ldi	r24, 0xC8	; 200
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9e a7       	std	Y+46, r25	; 0x2e
    2886:	8d a7       	std	Y+45, r24	; 0x2d
    2888:	8d a5       	ldd	r24, Y+45	; 0x2d
    288a:	9e a5       	ldd	r25, Y+46	; 0x2e
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <main+0x1ca>
    2890:	9e a7       	std	Y+46, r25	; 0x2e
    2892:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	8f a5       	ldd	r24, Y+47	; 0x2f
    2896:	98 a9       	ldd	r25, Y+48	; 0x30
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	98 ab       	std	Y+48, r25	; 0x30
    289c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a0:	98 a9       	ldd	r25, Y+48	; 0x30
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <main+0x1be>
    28a6:	14 c0       	rjmp	.+40     	; 0x28d0 <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	69 a9       	ldd	r22, Y+49	; 0x31
    28aa:	7a a9       	ldd	r23, Y+50	; 0x32
    28ac:	8b a9       	ldd	r24, Y+51	; 0x33
    28ae:	9c a9       	ldd	r25, Y+52	; 0x34
    28b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	98 ab       	std	Y+48, r25	; 0x30
    28ba:	8f a7       	std	Y+47, r24	; 0x2f
    28bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28be:	98 a9       	ldd	r25, Y+48	; 0x30
    28c0:	9c a7       	std	Y+44, r25	; 0x2c
    28c2:	8b a7       	std	Y+43, r24	; 0x2b
    28c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    28c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <main+0x206>
    28cc:	9c a7       	std	Y+44, r25	; 0x2c
    28ce:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);
			LCD_voidClearScreen();
    28d0:	0e 94 30 11 	call	0x2260	; 0x2260 <LCD_voidClearScreen>
			LCD_u8GoToXY(1,1);
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	61 e0       	ldi	r22, 0x01	; 1
    28d8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
			LCD_voidSendStr("Wrong PassWord");
    28dc:	8a e6       	ldi	r24, 0x6A	; 106
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	aa ef       	ldi	r26, 0xFA	; 250
    28ea:	b3 e4       	ldi	r27, 0x43	; 67
    28ec:	8f a3       	std	Y+39, r24	; 0x27
    28ee:	98 a7       	std	Y+40, r25	; 0x28
    28f0:	a9 a7       	std	Y+41, r26	; 0x29
    28f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f4:	6f a1       	ldd	r22, Y+39	; 0x27
    28f6:	78 a5       	ldd	r23, Y+40	; 0x28
    28f8:	89 a5       	ldd	r24, Y+41	; 0x29
    28fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a ef       	ldi	r20, 0xFA	; 250
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	8b a3       	std	Y+35, r24	; 0x23
    290e:	9c a3       	std	Y+36, r25	; 0x24
    2910:	ad a3       	std	Y+37, r26	; 0x25
    2912:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2914:	6b a1       	ldd	r22, Y+35	; 0x23
    2916:	7c a1       	ldd	r23, Y+36	; 0x24
    2918:	8d a1       	ldd	r24, Y+37	; 0x25
    291a:	9e a1       	ldd	r25, Y+38	; 0x26
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e8       	ldi	r20, 0x80	; 128
    2922:	5f e3       	ldi	r21, 0x3F	; 63
    2924:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2928:	88 23       	and	r24, r24
    292a:	2c f4       	brge	.+10     	; 0x2936 <main+0x274>
		__ticks = 1;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	9a a3       	std	Y+34, r25	; 0x22
    2932:	89 a3       	std	Y+33, r24	; 0x21
    2934:	3f c0       	rjmp	.+126    	; 0x29b4 <main+0x2f2>
	else if (__tmp > 65535)
    2936:	6b a1       	ldd	r22, Y+35	; 0x23
    2938:	7c a1       	ldd	r23, Y+36	; 0x24
    293a:	8d a1       	ldd	r24, Y+37	; 0x25
    293c:	9e a1       	ldd	r25, Y+38	; 0x26
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	3f ef       	ldi	r19, 0xFF	; 255
    2942:	4f e7       	ldi	r20, 0x7F	; 127
    2944:	57 e4       	ldi	r21, 0x47	; 71
    2946:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    294a:	18 16       	cp	r1, r24
    294c:	4c f5       	brge	.+82     	; 0x29a0 <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294e:	6f a1       	ldd	r22, Y+39	; 0x27
    2950:	78 a5       	ldd	r23, Y+40	; 0x28
    2952:	89 a5       	ldd	r24, Y+41	; 0x29
    2954:	9a a5       	ldd	r25, Y+42	; 0x2a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e2       	ldi	r20, 0x20	; 32
    295c:	51 e4       	ldi	r21, 0x41	; 65
    295e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	bc 01       	movw	r22, r24
    2968:	cd 01       	movw	r24, r26
    296a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	9a a3       	std	Y+34, r25	; 0x22
    2974:	89 a3       	std	Y+33, r24	; 0x21
    2976:	0f c0       	rjmp	.+30     	; 0x2996 <main+0x2d4>
    2978:	88 ec       	ldi	r24, 0xC8	; 200
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	98 a3       	std	Y+32, r25	; 0x20
    297e:	8f 8f       	std	Y+31, r24	; 0x1f
    2980:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2982:	98 a1       	ldd	r25, Y+32	; 0x20
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <main+0x2c2>
    2988:	98 a3       	std	Y+32, r25	; 0x20
    298a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298c:	89 a1       	ldd	r24, Y+33	; 0x21
    298e:	9a a1       	ldd	r25, Y+34	; 0x22
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	9a a3       	std	Y+34, r25	; 0x22
    2994:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2996:	89 a1       	ldd	r24, Y+33	; 0x21
    2998:	9a a1       	ldd	r25, Y+34	; 0x22
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	69 f7       	brne	.-38     	; 0x2978 <main+0x2b6>
    299e:	14 c0       	rjmp	.+40     	; 0x29c8 <main+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a0:	6b a1       	ldd	r22, Y+35	; 0x23
    29a2:	7c a1       	ldd	r23, Y+36	; 0x24
    29a4:	8d a1       	ldd	r24, Y+37	; 0x25
    29a6:	9e a1       	ldd	r25, Y+38	; 0x26
    29a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	9a a3       	std	Y+34, r25	; 0x22
    29b2:	89 a3       	std	Y+33, r24	; 0x21
    29b4:	89 a1       	ldd	r24, Y+33	; 0x21
    29b6:	9a a1       	ldd	r25, Y+34	; 0x22
    29b8:	9e 8f       	std	Y+30, r25	; 0x1e
    29ba:	8d 8f       	std	Y+29, r24	; 0x1d
    29bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <main+0x2fe>
    29c4:	9e 8f       	std	Y+30, r25	; 0x1e
    29c6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			LCD_voidClearScreen();
    29c8:	0e 94 30 11 	call	0x2260	; 0x2260 <LCD_voidClearScreen>
    29cc:	a3 c1       	rjmp	.+838    	; 0x2d14 <main+0x652>

		}
		else if(Local_u8LoginFlag == 1)
    29ce:	fe 01       	movw	r30, r28
    29d0:	e0 5c       	subi	r30, 0xC0	; 192
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	81 30       	cpi	r24, 0x01	; 1
    29d8:	09 f0       	breq	.+2      	; 0x29dc <main+0x31a>
    29da:	9c c1       	rjmp	.+824    	; 0x2d14 <main+0x652>
		{
			Local_u8TryNumber =0;
    29dc:	1d ae       	std	Y+61, r1	; 0x3d
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	a8 ec       	ldi	r26, 0xC8	; 200
    29e4:	b2 e4       	ldi	r27, 0x42	; 66
    29e6:	89 8f       	std	Y+25, r24	; 0x19
    29e8:	9a 8f       	std	Y+26, r25	; 0x1a
    29ea:	ab 8f       	std	Y+27, r26	; 0x1b
    29ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ee:	69 8d       	ldd	r22, Y+25	; 0x19
    29f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	4a ef       	ldi	r20, 0xFA	; 250
    29fc:	54 e4       	ldi	r21, 0x44	; 68
    29fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	8d 8b       	std	Y+21, r24	; 0x15
    2a08:	9e 8b       	std	Y+22, r25	; 0x16
    2a0a:	af 8b       	std	Y+23, r26	; 0x17
    2a0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a10:	7e 89       	ldd	r23, Y+22	; 0x16
    2a12:	8f 89       	ldd	r24, Y+23	; 0x17
    2a14:	98 8d       	ldd	r25, Y+24	; 0x18
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e8       	ldi	r20, 0x80	; 128
    2a1c:	5f e3       	ldi	r21, 0x3F	; 63
    2a1e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a22:	88 23       	and	r24, r24
    2a24:	2c f4       	brge	.+10     	; 0x2a30 <main+0x36e>
		__ticks = 1;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	9c 8b       	std	Y+20, r25	; 0x14
    2a2c:	8b 8b       	std	Y+19, r24	; 0x13
    2a2e:	3f c0       	rjmp	.+126    	; 0x2aae <main+0x3ec>
	else if (__tmp > 65535)
    2a30:	6d 89       	ldd	r22, Y+21	; 0x15
    2a32:	7e 89       	ldd	r23, Y+22	; 0x16
    2a34:	8f 89       	ldd	r24, Y+23	; 0x17
    2a36:	98 8d       	ldd	r25, Y+24	; 0x18
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	3f ef       	ldi	r19, 0xFF	; 255
    2a3c:	4f e7       	ldi	r20, 0x7F	; 127
    2a3e:	57 e4       	ldi	r21, 0x47	; 71
    2a40:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a44:	18 16       	cp	r1, r24
    2a46:	4c f5       	brge	.+82     	; 0x2a9a <main+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a48:	69 8d       	ldd	r22, Y+25	; 0x19
    2a4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e2       	ldi	r20, 0x20	; 32
    2a56:	51 e4       	ldi	r21, 0x41	; 65
    2a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	9c 8b       	std	Y+20, r25	; 0x14
    2a6e:	8b 8b       	std	Y+19, r24	; 0x13
    2a70:	0f c0       	rjmp	.+30     	; 0x2a90 <main+0x3ce>
    2a72:	88 ec       	ldi	r24, 0xC8	; 200
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9a 8b       	std	Y+18, r25	; 0x12
    2a78:	89 8b       	std	Y+17, r24	; 0x11
    2a7a:	89 89       	ldd	r24, Y+17	; 0x11
    2a7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <main+0x3bc>
    2a82:	9a 8b       	std	Y+18, r25	; 0x12
    2a84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a86:	8b 89       	ldd	r24, Y+19	; 0x13
    2a88:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	9c 8b       	std	Y+20, r25	; 0x14
    2a8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	69 f7       	brne	.-38     	; 0x2a72 <main+0x3b0>
    2a98:	14 c0       	rjmp	.+40     	; 0x2ac2 <main+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9c 8b       	std	Y+20, r25	; 0x14
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
    2aae:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab2:	98 8b       	std	Y+16, r25	; 0x10
    2ab4:	8f 87       	std	Y+15, r24	; 0x0f
    2ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab8:	98 89       	ldd	r25, Y+16	; 0x10
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <main+0x3f8>
    2abe:	98 8b       	std	Y+16, r25	; 0x10
    2ac0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			LCD_voidClearScreen();
    2ac2:	0e 94 30 11 	call	0x2260	; 0x2260 <LCD_voidClearScreen>
			LCD_u8GoToXY(1,1);
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	61 e0       	ldi	r22, 0x01	; 1
    2aca:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
			LCD_voidSendStr("True PassWord");
    2ace:	89 e7       	ldi	r24, 0x79	; 121
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
			LCD_u8GoToXY(2,0);
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
			LCD_voidSendStr("Welcome To Motor");
    2ade:	87 e8       	ldi	r24, 0x87	; 135
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a6 e9       	ldi	r26, 0x96	; 150
    2aec:	b3 e4       	ldi	r27, 0x43	; 67
    2aee:	8b 87       	std	Y+11, r24	; 0x0b
    2af0:	9c 87       	std	Y+12, r25	; 0x0c
    2af2:	ad 87       	std	Y+13, r26	; 0x0d
    2af4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	4a ef       	ldi	r20, 0xFA	; 250
    2b04:	54 e4       	ldi	r21, 0x44	; 68
    2b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8f 83       	std	Y+7, r24	; 0x07
    2b10:	98 87       	std	Y+8, r25	; 0x08
    2b12:	a9 87       	std	Y+9, r26	; 0x09
    2b14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b16:	6f 81       	ldd	r22, Y+7	; 0x07
    2b18:	78 85       	ldd	r23, Y+8	; 0x08
    2b1a:	89 85       	ldd	r24, Y+9	; 0x09
    2b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	2c f4       	brge	.+10     	; 0x2b38 <main+0x476>
		__ticks = 1;
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9e 83       	std	Y+6, r25	; 0x06
    2b34:	8d 83       	std	Y+5, r24	; 0x05
    2b36:	3f c0       	rjmp	.+126    	; 0x2bb6 <main+0x4f4>
	else if (__tmp > 65535)
    2b38:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3a:	78 85       	ldd	r23, Y+8	; 0x08
    2b3c:	89 85       	ldd	r24, Y+9	; 0x09
    2b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	3f ef       	ldi	r19, 0xFF	; 255
    2b44:	4f e7       	ldi	r20, 0x7F	; 127
    2b46:	57 e4       	ldi	r21, 0x47	; 71
    2b48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b4c:	18 16       	cp	r1, r24
    2b4e:	4c f5       	brge	.+82     	; 0x2ba2 <main+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e2       	ldi	r20, 0x20	; 32
    2b5e:	51 e4       	ldi	r21, 0x41	; 65
    2b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
    2b78:	0f c0       	rjmp	.+30     	; 0x2b98 <main+0x4d6>
    2b7a:	88 ec       	ldi	r24, 0xC8	; 200
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9c 83       	std	Y+4, r25	; 0x04
    2b80:	8b 83       	std	Y+3, r24	; 0x03
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	9c 81       	ldd	r25, Y+4	; 0x04
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <main+0x4c4>
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	69 f7       	brne	.-38     	; 0x2b7a <main+0x4b8>
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <main+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba4:	78 85       	ldd	r23, Y+8	; 0x08
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9e 83       	std	Y+6, r25	; 0x06
    2bb4:	8d 83       	std	Y+5, r24	; 0x05
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bba:	9a 83       	std	Y+2, r25	; 0x02
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <main+0x500>
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
			do
			{
				_delay_ms(300);
				LCD_voidClearScreen();
    2bca:	0e 94 30 11 	call	0x2260	; 0x2260 <LCD_voidClearScreen>
				LCD_u8GoToXY(1,0);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
				LCD_voidSendStr("1.DC Motor");
    2bd6:	88 e9       	ldi	r24, 0x98	; 152
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
				LCD_u8GoToXY(2,0);
    2bde:	82 e0       	ldi	r24, 0x02	; 2
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
				LCD_voidSendStr("2.Exit");
    2be6:	83 ea       	ldi	r24, 0xA3	; 163
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
				KPD_u8GetKeyState(&Local_u8Key);
    2bee:	ce 01       	movw	r24, r28
    2bf0:	8f 5b       	subi	r24, 0xBF	; 191
    2bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KPD_u8GetKeyState>
    2bf8:	05 c0       	rjmp	.+10     	; 0x2c04 <main+0x542>
				while(Local_u8Key == KPD_u8_KEY_NOT_PRESSED)
				{
					KPD_u8GetKeyState(&Local_u8Key);
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	8f 5b       	subi	r24, 0xBF	; 191
    2bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2c00:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KPD_u8GetKeyState>
				LCD_u8GoToXY(1,0);
				LCD_voidSendStr("1.DC Motor");
				LCD_u8GoToXY(2,0);
				LCD_voidSendStr("2.Exit");
				KPD_u8GetKeyState(&Local_u8Key);
				while(Local_u8Key == KPD_u8_KEY_NOT_PRESSED)
    2c04:	fe 01       	movw	r30, r28
    2c06:	ef 5b       	subi	r30, 0xBF	; 191
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0e:	a9 f3       	breq	.-22     	; 0x2bfa <main+0x538>
				{
					KPD_u8GetKeyState(&Local_u8Key);
				}
				if(Local_u8Key == '2')
    2c10:	fe 01       	movw	r30, r28
    2c12:	ef 5b       	subi	r30, 0xBF	; 191
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 81       	ld	r24, Z
    2c18:	82 33       	cpi	r24, 0x32	; 50
    2c1a:	11 f4       	brne	.+4      	; 0x2c20 <main+0x55e>
				{
					Local_u8ExitFlag=0;
    2c1c:	1f ae       	std	Y+63, r1	; 0x3f
    2c1e:	7a c0       	rjmp	.+244    	; 0x2d14 <main+0x652>
					break;
				}
				else if(Local_u8Key == '1')
    2c20:	fe 01       	movw	r30, r28
    2c22:	ef 5b       	subi	r30, 0xBF	; 191
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
    2c28:	81 33       	cpi	r24, 0x31	; 49
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <main+0x56c>
    2c2c:	6f c0       	rjmp	.+222    	; 0x2d0c <main+0x64a>
				{
					LCD_voidClearScreen();
    2c2e:	0e 94 30 11 	call	0x2260	; 0x2260 <LCD_voidClearScreen>
					LCD_u8GoToXY(1,0);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
					LCD_voidSendStr("1.RotCW");
    2c3a:	8a ea       	ldi	r24, 0xAA	; 170
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
					LCD_u8GoToXY(1,10);
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	6a e0       	ldi	r22, 0x0A	; 10
    2c46:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
					LCD_voidSendStr("3.Back");
    2c4a:	82 eb       	ldi	r24, 0xB2	; 178
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
					LCD_u8GoToXY(2,0);
    2c52:	82 e0       	ldi	r24, 0x02	; 2
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
					LCD_voidSendStr("2.RotCCW");
    2c5a:	89 eb       	ldi	r24, 0xB9	; 185
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
					KPD_u8GetKeyState(&Local_u8Key);
    2c62:	ce 01       	movw	r24, r28
    2c64:	8f 5b       	subi	r24, 0xBF	; 191
    2c66:	9f 4f       	sbci	r25, 0xFF	; 255
    2c68:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KPD_u8GetKeyState>
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <main+0x5b6>
					while(Local_u8Key == KPD_u8_KEY_NOT_PRESSED)
					{
						KPD_u8GetKeyState(&Local_u8Key);
    2c6e:	ce 01       	movw	r24, r28
    2c70:	8f 5b       	subi	r24, 0xBF	; 191
    2c72:	9f 4f       	sbci	r25, 0xFF	; 255
    2c74:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KPD_u8GetKeyState>
					LCD_u8GoToXY(1,10);
					LCD_voidSendStr("3.Back");
					LCD_u8GoToXY(2,0);
					LCD_voidSendStr("2.RotCCW");
					KPD_u8GetKeyState(&Local_u8Key);
					while(Local_u8Key == KPD_u8_KEY_NOT_PRESSED)
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ef 5b       	subi	r30, 0xBF	; 191
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	80 81       	ld	r24, Z
    2c80:	8f 3f       	cpi	r24, 0xFF	; 255
    2c82:	a9 f3       	breq	.-22     	; 0x2c6e <main+0x5ac>
    2c84:	32 c0       	rjmp	.+100    	; 0x2cea <main+0x628>
					}

					while((Local_u8Key != '3'))
					{

						if(Local_u8Key == '1')
    2c86:	fe 01       	movw	r30, r28
    2c88:	ef 5b       	subi	r30, 0xBF	; 191
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	81 33       	cpi	r24, 0x31	; 49
    2c90:	59 f4       	brne	.+22     	; 0x2ca8 <main+0x5e6>
						{
							DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	61 e0       	ldi	r22, 0x01	; 1
    2c96:	40 e0       	ldi	r20, 0x00	; 0
    2c98:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
							DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
    2ca6:	10 c0       	rjmp	.+32     	; 0x2cc8 <main+0x606>
						}
						else if(Local_u8Key == '2')
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ef 5b       	subi	r30, 0xBF	; 191
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	82 33       	cpi	r24, 0x32	; 50
    2cb2:	51 f4       	brne	.+20     	; 0x2cc8 <main+0x606>
						{
							DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
							DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	61 e0       	ldi	r22, 0x01	; 1
    2cc2:	41 e0       	ldi	r20, 0x01	; 1
    2cc4:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
						}
						KPD_u8GetKeyState(&Local_u8Key);
    2cc8:	ce 01       	movw	r24, r28
    2cca:	8f 5b       	subi	r24, 0xBF	; 191
    2ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cce:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KPD_u8GetKeyState>
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <main+0x61c>
						while(Local_u8Key == KPD_u8_KEY_NOT_PRESSED)
						{
							KPD_u8GetKeyState(&Local_u8Key);
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	8f 5b       	subi	r24, 0xBF	; 191
    2cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cda:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KPD_u8GetKeyState>
						{
							DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
							DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
						}
						KPD_u8GetKeyState(&Local_u8Key);
						while(Local_u8Key == KPD_u8_KEY_NOT_PRESSED)
    2cde:	fe 01       	movw	r30, r28
    2ce0:	ef 5b       	subi	r30, 0xBF	; 191
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce8:	a9 f3       	breq	.-22     	; 0x2cd4 <main+0x612>
					while(Local_u8Key == KPD_u8_KEY_NOT_PRESSED)
					{
						KPD_u8GetKeyState(&Local_u8Key);
					}

					while((Local_u8Key != '3'))
    2cea:	fe 01       	movw	r30, r28
    2cec:	ef 5b       	subi	r30, 0xBF	; 191
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 81       	ld	r24, Z
    2cf2:	83 33       	cpi	r24, 0x33	; 51
    2cf4:	41 f6       	brne	.-112    	; 0x2c86 <main+0x5c4>
						while(Local_u8Key == KPD_u8_KEY_NOT_PRESSED)
						{
							KPD_u8GetKeyState(&Local_u8Key);
						}
					}
					DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	60 e0       	ldi	r22, 0x00	; 0
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	0e 94 95 07 	call	0xf2a	; 0xf2a <DIO_u8SetPinValue>
					Local_u8BackFlag = 0;
    2d0a:	1e ae       	std	Y+62, r1	; 0x3e
				}
			}while(Local_u8BackFlag == 0);
    2d0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d0e:	88 23       	and	r24, r24
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <main+0x652>
    2d12:	e9 ce       	rjmp	.-558    	; 0x2ae6 <main+0x424>
		}

    }while(((Local_u8LoginFlag == 0 )&&(Local_u8TryNumber < 3))||(Local_u8ExitFlag==0));
    2d14:	fe 01       	movw	r30, r28
    2d16:	e0 5c       	subi	r30, 0xC0	; 192
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 23       	and	r24, r24
    2d1e:	21 f4       	brne	.+8      	; 0x2d28 <main+0x666>
    2d20:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d22:	83 30       	cpi	r24, 0x03	; 3
    2d24:	08 f4       	brcc	.+2      	; 0x2d28 <main+0x666>
    2d26:	fb cc       	rjmp	.-1546   	; 0x271e <main+0x5c>
    2d28:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d2a:	88 23       	and	r24, r24
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <main+0x66e>
    2d2e:	f7 cc       	rjmp	.-1554   	; 0x271e <main+0x5c>
    LCD_voidClearScreen();
    2d30:	0e 94 30 11 	call	0x2260	; 0x2260 <LCD_voidClearScreen>
	LCD_u8GoToXY(1,0);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <LCD_u8GoToXY>
	LCD_voidSendStr("Reset The System");
    2d3c:	82 ec       	ldi	r24, 0xC2	; 194
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LCD_voidSendStr>
	return 0;
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e0       	ldi	r25, 0x00	; 0
}
    2d48:	c7 5b       	subi	r28, 0xB7	; 183
    2d4a:	df 4f       	sbci	r29, 0xFF	; 255
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <__udivmodsi4>:
    2d5c:	a1 e2       	ldi	r26, 0x21	; 33
    2d5e:	1a 2e       	mov	r1, r26
    2d60:	aa 1b       	sub	r26, r26
    2d62:	bb 1b       	sub	r27, r27
    2d64:	fd 01       	movw	r30, r26
    2d66:	0d c0       	rjmp	.+26     	; 0x2d82 <__udivmodsi4_ep>

00002d68 <__udivmodsi4_loop>:
    2d68:	aa 1f       	adc	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	ee 1f       	adc	r30, r30
    2d6e:	ff 1f       	adc	r31, r31
    2d70:	a2 17       	cp	r26, r18
    2d72:	b3 07       	cpc	r27, r19
    2d74:	e4 07       	cpc	r30, r20
    2d76:	f5 07       	cpc	r31, r21
    2d78:	20 f0       	brcs	.+8      	; 0x2d82 <__udivmodsi4_ep>
    2d7a:	a2 1b       	sub	r26, r18
    2d7c:	b3 0b       	sbc	r27, r19
    2d7e:	e4 0b       	sbc	r30, r20
    2d80:	f5 0b       	sbc	r31, r21

00002d82 <__udivmodsi4_ep>:
    2d82:	66 1f       	adc	r22, r22
    2d84:	77 1f       	adc	r23, r23
    2d86:	88 1f       	adc	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	1a 94       	dec	r1
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <__udivmodsi4_loop>
    2d8e:	60 95       	com	r22
    2d90:	70 95       	com	r23
    2d92:	80 95       	com	r24
    2d94:	90 95       	com	r25
    2d96:	9b 01       	movw	r18, r22
    2d98:	ac 01       	movw	r20, r24
    2d9a:	bd 01       	movw	r22, r26
    2d9c:	cf 01       	movw	r24, r30
    2d9e:	08 95       	ret

00002da0 <__prologue_saves__>:
    2da0:	2f 92       	push	r2
    2da2:	3f 92       	push	r3
    2da4:	4f 92       	push	r4
    2da6:	5f 92       	push	r5
    2da8:	6f 92       	push	r6
    2daa:	7f 92       	push	r7
    2dac:	8f 92       	push	r8
    2dae:	9f 92       	push	r9
    2db0:	af 92       	push	r10
    2db2:	bf 92       	push	r11
    2db4:	cf 92       	push	r12
    2db6:	df 92       	push	r13
    2db8:	ef 92       	push	r14
    2dba:	ff 92       	push	r15
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	ca 1b       	sub	r28, r26
    2dca:	db 0b       	sbc	r29, r27
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	09 94       	ijmp

00002dd8 <__epilogue_restores__>:
    2dd8:	2a 88       	ldd	r2, Y+18	; 0x12
    2dda:	39 88       	ldd	r3, Y+17	; 0x11
    2ddc:	48 88       	ldd	r4, Y+16	; 0x10
    2dde:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2de6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2de8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dea:	b9 84       	ldd	r11, Y+9	; 0x09
    2dec:	c8 84       	ldd	r12, Y+8	; 0x08
    2dee:	df 80       	ldd	r13, Y+7	; 0x07
    2df0:	ee 80       	ldd	r14, Y+6	; 0x06
    2df2:	fd 80       	ldd	r15, Y+5	; 0x05
    2df4:	0c 81       	ldd	r16, Y+4	; 0x04
    2df6:	1b 81       	ldd	r17, Y+3	; 0x03
    2df8:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfa:	b9 81       	ldd	r27, Y+1	; 0x01
    2dfc:	ce 0f       	add	r28, r30
    2dfe:	d1 1d       	adc	r29, r1
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	ed 01       	movw	r28, r26
    2e0c:	08 95       	ret

00002e0e <_exit>:
    2e0e:	f8 94       	cli

00002e10 <__stop_program>:
    2e10:	ff cf       	rjmp	.-2      	; 0x2e10 <__stop_program>
