
53_PRIORITY_CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004970  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00004970  00004a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  00800084  00800084  00004a28  2**0
                  ALLOC
  3 .stab         000034f8  00000000  00000000  00004a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e3d  00000000  00000000  00007f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000900d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ac56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bb41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ca50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ccdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d4ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <main>
      8a:	0c 94 b6 24 	jmp	0x496c	; 0x496c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8f 24 	jmp	0x491e	; 0x491e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ab 24 	jmp	0x4956	; 0x4956 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Intial PINS Direction*/ 
	DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION , DIO_u8_PA6_INTIAL_DIRECTION , DIO_u8_PA5_INTIAL_DIRECTION ,  DIO_u8_PA4_INTIAL_DIRECTION, 
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
	                       DIO_u8_PA3_INTIAL_DIRECTION , DIO_u8_PA2_INTIAL_DIRECTION , DIO_u8_PA1_INTIAL_DIRECTION ,  DIO_u8_PA0_INTIAL_DIRECTION );
    
	DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION , DIO_u8_PB6_INTIAL_DIRECTION , DIO_u8_PB5_INTIAL_DIRECTION ,  DIO_u8_PB4_INTIAL_DIRECTION , 
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
			               DIO_u8_PB3_INTIAL_DIRECTION , DIO_u8_PB2_INTIAL_DIRECTION , DIO_u8_PB1_INTIAL_DIRECTION ,  DIO_u8_PB0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION , DIO_u8_PC6_INTIAL_DIRECTION , DIO_u8_PC5_INTIAL_DIRECTION ,  DIO_u8_PC4_INTIAL_DIRECTION ,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8c e3       	ldi	r24, 0x3C	; 60
     b64:	80 83       	st	Z, r24
			               DIO_u8_PC3_INTIAL_DIRECTION , DIO_u8_PC2_INTIAL_DIRECTION , DIO_u8_PC1_INTIAL_DIRECTION ,  DIO_u8_PC0_INTIAL_DIRECTION );
						   
	DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION , DIO_u8_PD6_INTIAL_DIRECTION , DIO_u8_PD5_INTIAL_DIRECTION ,  DIO_u8_PD4_INTIAL_DIRECTION , 
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
			               DIO_u8_PD3_INTIAL_DIRECTION , DIO_u8_PD2_INTIAL_DIRECTION , DIO_u8_PD1_INTIAL_DIRECTION ,  DIO_u8_PD0_INTIAL_DIRECTION );
						  
						  
	/*Intial PINS Value*/
    DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE         , DIO_u8_PA6_INTIAL_VALUE     , DIO_u8_PA5_INTIAL_VALUE ,      DIO_u8_PA4_INTIAL_VALUE , 
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
				            DIO_u8_PA3_INTIAL_VALUE         , DIO_u8_PA2_INTIAL_VALUE     , DIO_u8_PA1_INTIAL_VALUE ,      DIO_u8_PA0_INTIAL_VALUE);                  
                                                                                   
	DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE         , DIO_u8_PB6_INTIAL_VALUE     , DIO_u8_PB5_INTIAL_VALUE ,      DIO_u8_PB4_INTIAL_VALUE ,
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	87 e1       	ldi	r24, 0x17	; 23
     b78:	80 83       	st	Z, r24
				            DIO_u8_PB3_INTIAL_VALUE         , DIO_u8_PB2_INTIAL_VALUE     , DIO_u8_PB1_INTIAL_VALUE ,      DIO_u8_PB0_INTIAL_VALUE);                  
					                                                                  
	DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE         , DIO_u8_PC6_INTIAL_VALUE     , DIO_u8_PC5_INTIAL_VALUE ,      DIO_u8_PC4_INTIAL_VALUE , 
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	8c e3       	ldi	r24, 0x3C	; 60
     b80:	80 83       	st	Z, r24
				            DIO_u8_PC3_INTIAL_VALUE         , DIO_u8_PC2_INTIAL_VALUE     , DIO_u8_PC1_INTIAL_VALUE ,      DIO_u8_PC0_INTIAL_VALUE);                  
					                                                                 
	DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE         , DIO_u8_PD6_INTIAL_VALUE     , DIO_u8_PD5_INTIAL_VALUE ,      DIO_u8_PD4_INTIAL_VALUE , 
     b82:	e2 e3       	ldi	r30, 0x32	; 50
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	88 ee       	ldi	r24, 0xE8	; 232
     b88:	80 83       	st	Z, r24
				            DIO_u8_PD3_INTIAL_VALUE         , DIO_u8_PD2_INTIAL_VALUE     , DIO_u8_PD1_INTIAL_VALUE ,      DIO_u8_PD0_INTIAL_VALUE);
						                                               
						   
}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinDirection)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	2e 97       	sbiw	r28, 0x0e	; 14
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	8a 83       	std	Y+2, r24	; 0x02
     ba6:	6b 83       	std	Y+3, r22	; 0x03
     ba8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_PinDirection == DIO_u8_OUTPUT)||(Copy_PinDirection == DIO_u8_INPUT)))
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	84 30       	cpi	r24, 0x04	; 4
     bb2:	08 f0       	brcs	.+2      	; 0xbb6 <DIO_u8SetPinDirection+0x26>
     bb4:	0c c1       	rjmp	.+536    	; 0xdce <DIO_u8SetPinDirection+0x23e>
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	88 30       	cpi	r24, 0x08	; 8
     bba:	08 f0       	brcs	.+2      	; 0xbbe <DIO_u8SetPinDirection+0x2e>
     bbc:	08 c1       	rjmp	.+528    	; 0xdce <DIO_u8SetPinDirection+0x23e>
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	21 f0       	breq	.+8      	; 0xbcc <DIO_u8SetPinDirection+0x3c>
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	88 23       	and	r24, r24
     bc8:	09 f0       	breq	.+2      	; 0xbcc <DIO_u8SetPinDirection+0x3c>
     bca:	01 c1       	rjmp	.+514    	; 0xdce <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	3e 87       	std	Y+14, r19	; 0x0e
     bd4:	2d 87       	std	Y+13, r18	; 0x0d
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	91 05       	cpc	r25, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <DIO_u8SetPinDirection+0x52>
     be0:	4f c0       	rjmp	.+158    	; 0xc80 <DIO_u8SetPinDirection+0xf0>
     be2:	2d 85       	ldd	r18, Y+13	; 0x0d
     be4:	3e 85       	ldd	r19, Y+14	; 0x0e
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	31 05       	cpc	r19, r1
     bea:	2c f4       	brge	.+10     	; 0xbf6 <DIO_u8SetPinDirection+0x66>
     bec:	8d 85       	ldd	r24, Y+13	; 0x0d
     bee:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	71 f0       	breq	.+28     	; 0xc10 <DIO_u8SetPinDirection+0x80>
     bf4:	ed c0       	rjmp	.+474    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
     bf6:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf8:	3e 85       	ldd	r19, Y+14	; 0x0e
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	31 05       	cpc	r19, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <DIO_u8SetPinDirection+0x72>
     c00:	77 c0       	rjmp	.+238    	; 0xcf0 <DIO_u8SetPinDirection+0x160>
     c02:	8d 85       	ldd	r24, Y+13	; 0x0d
     c04:	9e 85       	ldd	r25, Y+14	; 0x0e
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	91 05       	cpc	r25, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <DIO_u8SetPinDirection+0x7e>
     c0c:	a9 c0       	rjmp	.+338    	; 0xd60 <DIO_u8SetPinDirection+0x1d0>
     c0e:	e0 c0       	rjmp	.+448    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch(Copy_PinDirection)
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	3c 87       	std	Y+12, r19	; 0x0c
     c18:	2b 87       	std	Y+11, r18	; 0x0b
     c1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	d1 f0       	breq	.+52     	; 0xc56 <DIO_u8SetPinDirection+0xc6>
     c22:	2b 85       	ldd	r18, Y+11	; 0x0b
     c24:	3c 85       	ldd	r19, Y+12	; 0x0c
     c26:	21 30       	cpi	r18, 0x01	; 1
     c28:	31 05       	cpc	r19, r1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <DIO_u8SetPinDirection+0x9e>
     c2c:	d1 c0       	rjmp	.+418    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     c2e:	aa e3       	ldi	r26, 0x3A	; 58
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ea e3       	ldi	r30, 0x3A	; 58
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_u8SetPinDirection+0xbc>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_u8SetPinDirection+0xb8>
     c50:	84 2b       	or	r24, r20
     c52:	8c 93       	st	X, r24
     c54:	bd c0       	rjmp	.+378    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId); break;
     c56:	aa e3       	ldi	r26, 0x3A	; 58
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ea e3       	ldi	r30, 0x3A	; 58
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_u8SetPinDirection+0xe4>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_u8SetPinDirection+0xe0>
     c78:	80 95       	com	r24
     c7a:	84 23       	and	r24, r20
     c7c:	8c 93       	st	X, r24
     c7e:	a8 c0       	rjmp	.+336    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTB:
				switch(Copy_PinDirection)
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	3a 87       	std	Y+10, r19	; 0x0a
     c88:	29 87       	std	Y+9, r18	; 0x09
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	d1 f0       	breq	.+52     	; 0xcc6 <DIO_u8SetPinDirection+0x136>
     c92:	29 85       	ldd	r18, Y+9	; 0x09
     c94:	3a 85       	ldd	r19, Y+10	; 0x0a
     c96:	21 30       	cpi	r18, 0x01	; 1
     c98:	31 05       	cpc	r19, r1
     c9a:	09 f0       	breq	.+2      	; 0xc9e <DIO_u8SetPinDirection+0x10e>
     c9c:	99 c0       	rjmp	.+306    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     c9e:	a7 e3       	ldi	r26, 0x37	; 55
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e7 e3       	ldi	r30, 0x37	; 55
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_u8SetPinDirection+0x12c>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_u8SetPinDirection+0x128>
     cc0:	84 2b       	or	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	85 c0       	rjmp	.+266    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId); break;
     cc6:	a7 e3       	ldi	r26, 0x37	; 55
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e7 e3       	ldi	r30, 0x37	; 55
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 2e       	mov	r0, r18
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DIO_u8SetPinDirection+0x154>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DIO_u8SetPinDirection+0x150>
     ce8:	80 95       	com	r24
     cea:	84 23       	and	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	70 c0       	rjmp	.+224    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTC:
				switch(Copy_PinDirection)
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	38 87       	std	Y+8, r19	; 0x08
     cf8:	2f 83       	std	Y+7, r18	; 0x07
     cfa:	8f 81       	ldd	r24, Y+7	; 0x07
     cfc:	98 85       	ldd	r25, Y+8	; 0x08
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	d1 f0       	breq	.+52     	; 0xd36 <DIO_u8SetPinDirection+0x1a6>
     d02:	2f 81       	ldd	r18, Y+7	; 0x07
     d04:	38 85       	ldd	r19, Y+8	; 0x08
     d06:	21 30       	cpi	r18, 0x01	; 1
     d08:	31 05       	cpc	r19, r1
     d0a:	09 f0       	breq	.+2      	; 0xd0e <DIO_u8SetPinDirection+0x17e>
     d0c:	61 c0       	rjmp	.+194    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     d0e:	a4 e3       	ldi	r26, 0x34	; 52
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e4 e3       	ldi	r30, 0x34	; 52
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_u8SetPinDirection+0x19c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_u8SetPinDirection+0x198>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	4d c0       	rjmp	.+154    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId); break;
     d36:	a4 e3       	ldi	r26, 0x34	; 52
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e4 e3       	ldi	r30, 0x34	; 52
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_u8SetPinDirection+0x1c4>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_u8SetPinDirection+0x1c0>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	38 c0       	rjmp	.+112    	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			
			case DIO_u8_PORTD:
				switch(Copy_PinDirection)
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	3e 83       	std	Y+6, r19	; 0x06
     d68:	2d 83       	std	Y+5, r18	; 0x05
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	c9 f0       	breq	.+50     	; 0xda4 <DIO_u8SetPinDirection+0x214>
     d72:	2d 81       	ldd	r18, Y+5	; 0x05
     d74:	3e 81       	ldd	r19, Y+6	; 0x06
     d76:	21 30       	cpi	r18, 0x01	; 1
     d78:	31 05       	cpc	r19, r1
     d7a:	51 f5       	brne	.+84     	; 0xdd0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     d7c:	a1 e3       	ldi	r26, 0x31	; 49
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e1 e3       	ldi	r30, 0x31	; 49
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_u8SetPinDirection+0x20a>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_u8SetPinDirection+0x206>
     d9e:	84 2b       	or	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	16 c0       	rjmp	.+44     	; 0xdd0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId); break;
     da4:	a1 e3       	ldi	r26, 0x31	; 49
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e1 e3       	ldi	r30, 0x31	; 49
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_u8SetPinDirection+0x232>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_u8SetPinDirection+0x22e>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <DIO_u8SetPinDirection+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     dce:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd2:	2e 96       	adiw	r28, 0x0e	; 14
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_PinValue)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	2e 97       	sbiw	r28, 0x0e	; 14
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	6b 83       	std	Y+3, r22	; 0x03
     dfc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	88 30       	cpi	r24, 0x08	; 8
     e06:	08 f0       	brcs	.+2      	; 0xe0a <DIO_u8SetPinValue+0x26>
     e08:	08 c1       	rjmp	.+528    	; 0x101a <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3e 87       	std	Y+14, r19	; 0x0e
     e12:	2d 87       	std	Y+13, r18	; 0x0d
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <DIO_u8SetPinValue+0x3c>
     e1e:	50 c0       	rjmp	.+160    	; 0xec0 <DIO_u8SetPinValue+0xdc>
     e20:	2d 85       	ldd	r18, Y+13	; 0x0d
     e22:	3e 85       	ldd	r19, Y+14	; 0x0e
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	2c f4       	brge	.+10     	; 0xe34 <DIO_u8SetPinValue+0x50>
     e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	71 f0       	breq	.+28     	; 0xe4e <DIO_u8SetPinValue+0x6a>
     e32:	f1 c0       	rjmp	.+482    	; 0x1016 <DIO_u8SetPinValue+0x232>
     e34:	2d 85       	ldd	r18, Y+13	; 0x0d
     e36:	3e 85       	ldd	r19, Y+14	; 0x0e
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <DIO_u8SetPinValue+0x5c>
     e3e:	79 c0       	rjmp	.+242    	; 0xf32 <DIO_u8SetPinValue+0x14e>
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	91 05       	cpc	r25, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <DIO_u8SetPinValue+0x68>
     e4a:	ac c0       	rjmp	.+344    	; 0xfa4 <DIO_u8SetPinValue+0x1c0>
     e4c:	e4 c0       	rjmp	.+456    	; 0x1016 <DIO_u8SetPinValue+0x232>
			{
				case DIO_u8_PORTA:
					switch (Copy_PinValue)
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3c 87       	std	Y+12, r19	; 0x0c
     e56:	2b 87       	std	Y+11, r18	; 0x0b
     e58:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	c9 f0       	breq	.+50     	; 0xe92 <DIO_u8SetPinValue+0xae>
     e60:	2b 85       	ldd	r18, Y+11	; 0x0b
     e62:	3c 85       	ldd	r19, Y+12	; 0x0c
     e64:	21 30       	cpi	r18, 0x01	; 1
     e66:	31 05       	cpc	r19, r1
     e68:	49 f5       	brne	.+82     	; 0xebc <DIO_u8SetPinValue+0xd8>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     e6a:	ab e3       	ldi	r26, 0x3B	; 59
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	eb e3       	ldi	r30, 0x3B	; 59
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_u8SetPinValue+0xa4>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_u8SetPinValue+0xa0>
     e8c:	84 2b       	or	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	c5 c0       	rjmp	.+394    	; 0x101c <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
     e92:	ab e3       	ldi	r26, 0x3B	; 59
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	eb e3       	ldi	r30, 0x3B	; 59
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_u8SetPinValue+0xcc>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_u8SetPinValue+0xc8>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	b0 c0       	rjmp	.+352    	; 0x101c <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	ae c0       	rjmp	.+348    	; 0x101c <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTB:
					switch (Copy_PinValue)
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3a 87       	std	Y+10, r19	; 0x0a
     ec8:	29 87       	std	Y+9, r18	; 0x09
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	c9 f0       	breq	.+50     	; 0xf04 <DIO_u8SetPinValue+0x120>
     ed2:	29 85       	ldd	r18, Y+9	; 0x09
     ed4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed6:	21 30       	cpi	r18, 0x01	; 1
     ed8:	31 05       	cpc	r19, r1
     eda:	49 f5       	brne	.+82     	; 0xf2e <DIO_u8SetPinValue+0x14a>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_u8SetPinValue+0x116>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_u8SetPinValue+0x112>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	8c c0       	rjmp	.+280    	; 0x101c <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId); break;
     f04:	a8 e3       	ldi	r26, 0x38	; 56
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e8 e3       	ldi	r30, 0x38	; 56
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_u8SetPinValue+0x13e>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_u8SetPinValue+0x13a>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	75 c0       	rjmp	.+234    	; 0x101c <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTC:
					switch (Copy_PinValue)
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	38 87       	std	Y+8, r19	; 0x08
     f3a:	2f 83       	std	Y+7, r18	; 0x07
     f3c:	8f 81       	ldd	r24, Y+7	; 0x07
     f3e:	98 85       	ldd	r25, Y+8	; 0x08
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	c9 f0       	breq	.+50     	; 0xf76 <DIO_u8SetPinValue+0x192>
     f44:	2f 81       	ldd	r18, Y+7	; 0x07
     f46:	38 85       	ldd	r19, Y+8	; 0x08
     f48:	21 30       	cpi	r18, 0x01	; 1
     f4a:	31 05       	cpc	r19, r1
     f4c:	49 f5       	brne	.+82     	; 0xfa0 <DIO_u8SetPinValue+0x1bc>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
     f4e:	a5 e3       	ldi	r26, 0x35	; 53
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e5 e3       	ldi	r30, 0x35	; 53
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_u8SetPinValue+0x188>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_u8SetPinValue+0x184>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	53 c0       	rjmp	.+166    	; 0x101c <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId); break;
     f76:	a5 e3       	ldi	r26, 0x35	; 53
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e3       	ldi	r30, 0x35	; 53
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_u8SetPinValue+0x1b0>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_u8SetPinValue+0x1ac>
     f98:	80 95       	com	r24
     f9a:	84 23       	and	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	3e c0       	rjmp	.+124    	; 0x101c <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	3c c0       	rjmp	.+120    	; 0x101c <DIO_u8SetPinValue+0x238>
					}
				break;
				
				case DIO_u8_PORTD:
					switch (Copy_PinValue)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3e 83       	std	Y+6, r19	; 0x06
     fac:	2d 83       	std	Y+5, r18	; 0x05
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	c9 f0       	breq	.+50     	; 0xfe8 <DIO_u8SetPinValue+0x204>
     fb6:	2d 81       	ldd	r18, Y+5	; 0x05
     fb8:	3e 81       	ldd	r19, Y+6	; 0x06
     fba:	21 30       	cpi	r18, 0x01	; 1
     fbc:	31 05       	cpc	r19, r1
     fbe:	49 f5       	brne	.+82     	; 0x1012 <DIO_u8SetPinValue+0x22e>
					{
						case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
     fc0:	a2 e3       	ldi	r26, 0x32	; 50
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e2 e3       	ldi	r30, 0x32	; 50
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_u8SetPinValue+0x1fa>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_u8SetPinValue+0x1f6>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	1a c0       	rjmp	.+52     	; 0x101c <DIO_u8SetPinValue+0x238>
						case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId); break;
     fe8:	a2 e3       	ldi	r26, 0x32	; 50
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e2 e3       	ldi	r30, 0x32	; 50
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_u8SetPinValue+0x222>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_u8SetPinValue+0x21e>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	05 c0       	rjmp	.+10     	; 0x101c <DIO_u8SetPinValue+0x238>
						default         : Local_u8ErrorState = STD_TYPES_NOK;
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	03 c0       	rjmp	.+6      	; 0x101c <DIO_u8SetPinValue+0x238>
					}
				break;
				
				default:Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	01 c0       	rjmp	.+2      	; 0x101c <DIO_u8SetPinValue+0x238>
				
			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    101a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	2e 96       	adiw	r28, 0x0e	; 14
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 * Copy_pu8ReturnedPinValue )
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	28 97       	sbiw	r28, 0x08	; 8
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	8b 83       	std	Y+3, r24	; 0x03
    1046:	6c 83       	std	Y+4, r22	; 0x04
    1048:	5e 83       	std	Y+6, r21	; 0x06
    104a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	08 f0       	brcs	.+2      	; 0x1058 <DIO_u8GetPinValue+0x28>
    1056:	9f c0       	rjmp	.+318    	; 0x1196 <DIO_u8GetPinValue+0x166>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	88 30       	cpi	r24, 0x08	; 8
    105c:	08 f0       	brcs	.+2      	; 0x1060 <DIO_u8GetPinValue+0x30>
    105e:	9b c0       	rjmp	.+310    	; 0x1196 <DIO_u8GetPinValue+0x166>
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	09 f4       	brne	.+2      	; 0x106a <DIO_u8GetPinValue+0x3a>
    1068:	96 c0       	rjmp	.+300    	; 0x1196 <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	38 87       	std	Y+8, r19	; 0x08
    1072:	2f 83       	std	Y+7, r18	; 0x07
    1074:	4f 81       	ldd	r20, Y+7	; 0x07
    1076:	58 85       	ldd	r21, Y+8	; 0x08
    1078:	41 30       	cpi	r20, 0x01	; 1
    107a:	51 05       	cpc	r21, r1
    107c:	a9 f1       	breq	.+106    	; 0x10e8 <DIO_u8GetPinValue+0xb8>
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	91 05       	cpc	r25, r1
    1086:	34 f4       	brge	.+12     	; 0x1094 <DIO_u8GetPinValue+0x64>
    1088:	2f 81       	ldd	r18, Y+7	; 0x07
    108a:	38 85       	ldd	r19, Y+8	; 0x08
    108c:	21 15       	cp	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	71 f0       	breq	.+28     	; 0x10ae <DIO_u8GetPinValue+0x7e>
    1092:	82 c0       	rjmp	.+260    	; 0x1198 <DIO_u8GetPinValue+0x168>
    1094:	4f 81       	ldd	r20, Y+7	; 0x07
    1096:	58 85       	ldd	r21, Y+8	; 0x08
    1098:	42 30       	cpi	r20, 0x02	; 2
    109a:	51 05       	cpc	r21, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <DIO_u8GetPinValue+0x70>
    109e:	41 c0       	rjmp	.+130    	; 0x1122 <DIO_u8GetPinValue+0xf2>
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	98 85       	ldd	r25, Y+8	; 0x08
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <DIO_u8GetPinValue+0x7c>
    10aa:	58 c0       	rjmp	.+176    	; 0x115c <DIO_u8GetPinValue+0x12c>
    10ac:	75 c0       	rjmp	.+234    	; 0x1198 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA : 
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);
    10ae:	e9 e3       	ldi	r30, 0x39	; 57
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8GetPinValue+0x96>
    10c2:	55 95       	asr	r21
    10c4:	47 95       	ror	r20
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8GetPinValue+0x92>
    10ca:	ca 01       	movw	r24, r20
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 23       	and	r24, r24
    10d4:	21 f4       	brne	.+8      	; 0x10de <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    10d6:	ed 81       	ldd	r30, Y+5	; 0x05
    10d8:	fe 81       	ldd	r31, Y+6	; 0x06
    10da:	10 82       	st	Z, r1
    10dc:	5d c0       	rjmp	.+186    	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    10de:	ed 81       	ldd	r30, Y+5	; 0x05
    10e0:	fe 81       	ldd	r31, Y+6	; 0x06
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 83       	st	Z, r24
    10e6:	58 c0       	rjmp	.+176    	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    10e8:	e6 e3       	ldi	r30, 0x36	; 54
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_u8GetPinValue+0xd0>
    10fc:	55 95       	asr	r21
    10fe:	47 95       	ror	r20
    1100:	8a 95       	dec	r24
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_u8GetPinValue+0xcc>
    1104:	ca 01       	movw	r24, r20
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	88 23       	and	r24, r24
    110e:	21 f4       	brne	.+8      	; 0x1118 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1110:	ed 81       	ldd	r30, Y+5	; 0x05
    1112:	fe 81       	ldd	r31, Y+6	; 0x06
    1114:	10 82       	st	Z, r1
    1116:	40 c0       	rjmp	.+128    	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1118:	ed 81       	ldd	r30, Y+5	; 0x05
    111a:	fe 81       	ldd	r31, Y+6	; 0x06
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 83       	st	Z, r24
    1120:	3b c0       	rjmp	.+118    	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    1122:	e3 e3       	ldi	r30, 0x33	; 51
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_u8GetPinValue+0x10a>
    1136:	55 95       	asr	r21
    1138:	47 95       	ror	r20
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_u8GetPinValue+0x106>
    113e:	ca 01       	movw	r24, r20
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	88 23       	and	r24, r24
    1148:	21 f4       	brne	.+8      	; 0x1152 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    114a:	ed 81       	ldd	r30, Y+5	; 0x05
    114c:	fe 81       	ldd	r31, Y+6	; 0x06
    114e:	10 82       	st	Z, r1
    1150:	23 c0       	rjmp	.+70     	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1152:	ed 81       	ldd	r30, Y+5	; 0x05
    1154:	fe 81       	ldd	r31, Y+6	; 0x06
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 83       	st	Z, r24
    115a:	1e c0       	rjmp	.+60     	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			break;
			
			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    115c:	e0 e3       	ldi	r30, 0x30	; 48
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_u8GetPinValue+0x144>
    1170:	55 95       	asr	r21
    1172:	47 95       	ror	r20
    1174:	8a 95       	dec	r24
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_u8GetPinValue+0x140>
    1178:	ca 01       	movw	r24, r20
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	88 23       	and	r24, r24
    1182:	21 f4       	brne	.+8      	; 0x118c <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;				
    1184:	ed 81       	ldd	r30, Y+5	; 0x05
    1186:	fe 81       	ldd	r31, Y+6	; 0x06
    1188:	10 82       	st	Z, r1
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    118c:	ed 81       	ldd	r30, Y+5	; 0x05
    118e:	fe 81       	ldd	r31, Y+6	; 0x06
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 83       	st	Z, r24
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1196:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    119a:	28 96       	adiw	r28, 0x08	; 8
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <DIO_u8SetPortDirection>:
 
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_PortDirection)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	2d 97       	sbiw	r28, 0x0d	; 13
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	8a 83       	std	Y+2, r24	; 0x02
    11c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_PortDirection == DIO_u8_OUTPUT  )||(Copy_PortDirection == DIO_u8_INPUT))
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <DIO_u8SetPortDirection+0x2a>
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	88 23       	and	r24, r24
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <DIO_u8SetPortDirection+0x2a>
    11d4:	7f c0       	rjmp	.+254    	; 0x12d4 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3d 87       	std	Y+13, r19	; 0x0d
    11de:	2c 87       	std	Y+12, r18	; 0x0c
    11e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	71 f1       	breq	.+92     	; 0x1246 <DIO_u8SetPortDirection+0x9a>
    11ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	2c f4       	brge	.+10     	; 0x11fe <DIO_u8SetPortDirection+0x52>
    11f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	69 f0       	breq	.+26     	; 0x1216 <DIO_u8SetPortDirection+0x6a>
    11fc:	69 c0       	rjmp	.+210    	; 0x12d0 <DIO_u8SetPortDirection+0x124>
    11fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1200:	3d 85       	ldd	r19, Y+13	; 0x0d
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	b1 f1       	breq	.+108    	; 0x1274 <DIO_u8SetPortDirection+0xc8>
    1208:	8c 85       	ldd	r24, Y+12	; 0x0c
    120a:	9d 85       	ldd	r25, Y+13	; 0x0d
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <DIO_u8SetPortDirection+0x68>
    1212:	47 c0       	rjmp	.+142    	; 0x12a2 <DIO_u8SetPortDirection+0xf6>
    1214:	5d c0       	rjmp	.+186    	; 0x12d0 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA : 
				switch (Copy_PortDirection)
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3b 87       	std	Y+11, r19	; 0x0b
    121e:	2a 87       	std	Y+10, r18	; 0x0a
    1220:	8a 85       	ldd	r24, Y+10	; 0x0a
    1222:	9b 85       	ldd	r25, Y+11	; 0x0b
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	59 f0       	breq	.+22     	; 0x123e <DIO_u8SetPortDirection+0x92>
    1228:	2a 85       	ldd	r18, Y+10	; 0x0a
    122a:	3b 85       	ldd	r19, Y+11	; 0x0b
    122c:	21 30       	cpi	r18, 0x01	; 1
    122e:	31 05       	cpc	r19, r1
    1230:	09 f0       	breq	.+2      	; 0x1234 <DIO_u8SetPortDirection+0x88>
    1232:	51 c0       	rjmp	.+162    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRA_REG = 0xff; break;
    1234:	ea e3       	ldi	r30, 0x3A	; 58
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	80 83       	st	Z, r24
    123c:	4c c0       	rjmp	.+152    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRA_REG = 0x00; break;
    123e:	ea e3       	ldi	r30, 0x3A	; 58
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	10 82       	st	Z, r1
    1244:	48 c0       	rjmp	.+144    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTB :
				switch (Copy_PortDirection)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	39 87       	std	Y+9, r19	; 0x09
    124e:	28 87       	std	Y+8, r18	; 0x08
    1250:	88 85       	ldd	r24, Y+8	; 0x08
    1252:	99 85       	ldd	r25, Y+9	; 0x09
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	51 f0       	breq	.+20     	; 0x126c <DIO_u8SetPortDirection+0xc0>
    1258:	28 85       	ldd	r18, Y+8	; 0x08
    125a:	39 85       	ldd	r19, Y+9	; 0x09
    125c:	21 30       	cpi	r18, 0x01	; 1
    125e:	31 05       	cpc	r19, r1
    1260:	d1 f5       	brne	.+116    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRB_REG = 0xff; break;
    1262:	e7 e3       	ldi	r30, 0x37	; 55
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	80 83       	st	Z, r24
    126a:	35 c0       	rjmp	.+106    	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRB_REG = 0x00; break;
    126c:	e7 e3       	ldi	r30, 0x37	; 55
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
    1272:	31 c0       	rjmp	.+98     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTC :
				switch (Copy_PortDirection)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3f 83       	std	Y+7, r19	; 0x07
    127c:	2e 83       	std	Y+6, r18	; 0x06
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	9f 81       	ldd	r25, Y+7	; 0x07
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	51 f0       	breq	.+20     	; 0x129a <DIO_u8SetPortDirection+0xee>
    1286:	2e 81       	ldd	r18, Y+6	; 0x06
    1288:	3f 81       	ldd	r19, Y+7	; 0x07
    128a:	21 30       	cpi	r18, 0x01	; 1
    128c:	31 05       	cpc	r19, r1
    128e:	19 f5       	brne	.+70     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRC_REG = 0xff; break;
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	80 83       	st	Z, r24
    1298:	1e c0       	rjmp	.+60     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRC_REG = 0x00; break;
    129a:	e4 e3       	ldi	r30, 0x34	; 52
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	10 82       	st	Z, r1
    12a0:	1a c0       	rjmp	.+52     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			case DIO_u8_PORTD :
				switch (Copy_PortDirection)
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3d 83       	std	Y+5, r19	; 0x05
    12aa:	2c 83       	std	Y+4, r18	; 0x04
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	51 f0       	breq	.+20     	; 0x12c8 <DIO_u8SetPortDirection+0x11c>
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	3d 81       	ldd	r19, Y+5	; 0x05
    12b8:	21 30       	cpi	r18, 0x01	; 1
    12ba:	31 05       	cpc	r19, r1
    12bc:	61 f4       	brne	.+24     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT : DIO_u8_DDRD_REG = 0xff; break;
    12be:	e1 e3       	ldi	r30, 0x31	; 49
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	80 83       	st	Z, r24
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT  : DIO_u8_DDRD_REG = 0x00; break;
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	10 82       	st	Z, r1
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			
			default      :Local_u8ErrorState =STD_TYPES_NOK;
    12d0:	19 82       	std	Y+1, r1	; 0x01
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <DIO_u8SetPortDirection+0x12a>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	2d 96       	adiw	r28, 0x0d	; 13
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_PortValue)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_u8SetPortValue+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <DIO_u8SetPortValue+0x8>
    12f2:	0f 92       	push	r0
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	8a 83       	std	Y+2, r24	; 0x02
    12fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3d 83       	std	Y+5, r19	; 0x05
    1308:	2c 83       	std	Y+4, r18	; 0x04
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <DIO_u8SetPortValue+0x5e>
    1314:	2c 81       	ldd	r18, Y+4	; 0x04
    1316:	3d 81       	ldd	r19, Y+5	; 0x05
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_u8SetPortValue+0x3e>
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_u8SetPortValue+0x54>
    1326:	1f c0       	rjmp	.+62     	; 0x1366 <DIO_u8SetPortValue+0x7c>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_u8SetPortValue+0x68>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <DIO_u8SetPortValue+0x72>
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_PortValue; break;
    133e:	eb e3       	ldi	r30, 0x3B	; 59
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	80 83       	st	Z, r24
    1346:	10 c0       	rjmp	.+32     	; 0x1368 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_PortValue; break;
    1348:	e8 e3       	ldi	r30, 0x38	; 56
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	80 83       	st	Z, r24
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_PortValue; break;
    1352:	e5 e3       	ldi	r30, 0x35	; 53
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_PortValue; break;
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	80 83       	st	Z, r24
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <DIO_u8SetPortValue+0x7e>
		default           : Local_u8ErrorState = STD_TYPES_NOK;
    1366:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return Local_u8ErrorState;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue (u8 Copy_u8PortId , u8 * Copy_pu8ReturnedPortValue )
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <DIO_u8GetPortValue+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <DIO_u8GetPortValue+0x8>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <DIO_u8GetPortValue+0xa>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	8a 83       	std	Y+2, r24	; 0x02
    138a:	7c 83       	std	Y+4, r23	; 0x04
    138c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8ReturnedPortValue != NULL)
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	e9 f1       	breq	.+122    	; 0x1414 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3e 83       	std	Y+6, r19	; 0x06
    13a2:	2d 83       	std	Y+5, r18	; 0x05
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	e1 f0       	breq	.+56     	; 0x13e6 <DIO_u8GetPortValue+0x6c>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <DIO_u8GetPortValue+0x48>
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	61 f0       	breq	.+24     	; 0x13d8 <DIO_u8GetPortValue+0x5e>
    13c0:	27 c0       	rjmp	.+78     	; 0x1410 <DIO_u8GetPortValue+0x96>
    13c2:	2d 81       	ldd	r18, Y+5	; 0x05
    13c4:	3e 81       	ldd	r19, Y+6	; 0x06
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	a1 f0       	breq	.+40     	; 0x13f4 <DIO_u8GetPortValue+0x7a>
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	b1 f0       	breq	.+44     	; 0x1402 <DIO_u8GetPortValue+0x88>
    13d6:	1c c0       	rjmp	.+56     	; 0x1410 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA : *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG; break;
    13d8:	e9 e3       	ldi	r30, 0x39	; 57
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	eb 81       	ldd	r30, Y+3	; 0x03
    13e0:	fc 81       	ldd	r31, Y+4	; 0x04
    13e2:	80 83       	st	Z, r24
    13e4:	18 c0       	rjmp	.+48     	; 0x1416 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB : *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG; break;
    13e6:	e6 e3       	ldi	r30, 0x36	; 54
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	eb 81       	ldd	r30, Y+3	; 0x03
    13ee:	fc 81       	ldd	r31, Y+4	; 0x04
    13f0:	80 83       	st	Z, r24
    13f2:	11 c0       	rjmp	.+34     	; 0x1416 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC : *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG; break; 
    13f4:	e3 e3       	ldi	r30, 0x33	; 51
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	eb 81       	ldd	r30, Y+3	; 0x03
    13fc:	fc 81       	ldd	r31, Y+4	; 0x04
    13fe:	80 83       	st	Z, r24
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD : *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG; break;
    1402:	e0 e3       	ldi	r30, 0x30	; 48
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	eb 81       	ldd	r30, Y+3	; 0x03
    140a:	fc 81       	ldd	r31, Y+4	; 0x04
    140c:	80 83       	st	Z, r24
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <DIO_u8GetPortValue+0x9c>
			default           : Local_u8ErrorState = STD_TYPES_NOK;
    1410:	19 82       	std	Y+1, r1	; 0x01
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1414:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1416:	89 81       	ldd	r24, Y+1	; 0x01
}
    1418:	26 96       	adiw	r28, 0x06	; 6
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <DIO_u8TogglePin>:

u8  DIO_u8TogglePin(u8 Copy_u8PortId, u8 Copy_u8PinId )
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_u8TogglePin+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <DIO_u8TogglePin+0x8>
    1432:	0f 92       	push	r0
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	8a 83       	std	Y+2, r24	; 0x02
    143a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <=  DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7))
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	84 30       	cpi	r24, 0x04	; 4
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_u8TogglePin+0x1e>
    1446:	73 c0       	rjmp	.+230    	; 0x152e <DIO_u8TogglePin+0x104>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 30       	cpi	r24, 0x08	; 8
    144c:	08 f0       	brcs	.+2      	; 0x1450 <DIO_u8TogglePin+0x26>
    144e:	6f c0       	rjmp	.+222    	; 0x152e <DIO_u8TogglePin+0x104>
	{
		switch(Copy_u8PortId)
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3d 83       	std	Y+5, r19	; 0x05
    1458:	2c 83       	std	Y+4, r18	; 0x04
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	49 f1       	breq	.+82     	; 0x14b6 <DIO_u8TogglePin+0x8c>
    1464:	2c 81       	ldd	r18, Y+4	; 0x04
    1466:	3d 81       	ldd	r19, Y+5	; 0x05
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <DIO_u8TogglePin+0x4e>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	61 f0       	breq	.+24     	; 0x148e <DIO_u8TogglePin+0x64>
    1476:	5c c0       	rjmp	.+184    	; 0x1530 <DIO_u8TogglePin+0x106>
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	71 f1       	breq	.+92     	; 0x14de <DIO_u8TogglePin+0xb4>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	e9 f1       	breq	.+122    	; 0x1506 <DIO_u8TogglePin+0xdc>
    148c:	51 c0       	rjmp	.+162    	; 0x1530 <DIO_u8TogglePin+0x106>
		{
			case DIO_u8_PORTA : TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    148e:	ab e3       	ldi	r26, 0x3B	; 59
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e3       	ldi	r30, 0x3B	; 59
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_u8TogglePin+0x82>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_u8TogglePin+0x7e>
    14b0:	84 27       	eor	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	3d c0       	rjmp	.+122    	; 0x1530 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTB : TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    14b6:	a8 e3       	ldi	r26, 0x38	; 56
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e8 e3       	ldi	r30, 0x38	; 56
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8TogglePin+0xaa>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_u8TogglePin+0xa6>
    14d8:	84 27       	eor	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	29 c0       	rjmp	.+82     	; 0x1530 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTC : TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    14de:	a5 e3       	ldi	r26, 0x35	; 53
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e3       	ldi	r30, 0x35	; 53
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8TogglePin+0xd2>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_u8TogglePin+0xce>
    1500:	84 27       	eor	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	15 c0       	rjmp	.+42     	; 0x1530 <DIO_u8TogglePin+0x106>
			case DIO_u8_PORTD : TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1506:	a2 e3       	ldi	r26, 0x32	; 50
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e2 e3       	ldi	r30, 0x32	; 50
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_u8TogglePin+0xfa>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_u8TogglePin+0xf6>
    1528:	84 27       	eor	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <DIO_u8TogglePin+0x106>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    152e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <DIO_u8SendMostNebble>:

u8 DIO_u8SendMostNebble(u8 Copy_u8PortId, u8 Copy_u8Status )
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <DIO_u8SendMostNebble+0x6>
    1548:	00 d0       	rcall	.+0      	; 0x154a <DIO_u8SendMostNebble+0x8>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	8a 83       	std	Y+2, r24	; 0x02
    1552:	6b 83       	std	Y+3, r22	; 0x03
    Copy_u8Status &= 0xF0;
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	80 7f       	andi	r24, 0xF0	; 240
    1558:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <=  DIO_u8_PORTD)
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	84 30       	cpi	r24, 0x04	; 4
    1562:	08 f0       	brcs	.+2      	; 0x1566 <DIO_u8SendMostNebble+0x24>
    1564:	5f c0       	rjmp	.+190    	; 0x1624 <DIO_u8SendMostNebble+0xe2>
	{
		switch(Copy_u8PortId)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3d 83       	std	Y+5, r19	; 0x05
    156e:	2c 83       	std	Y+4, r18	; 0x04
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	29 f1       	breq	.+74     	; 0x15c4 <DIO_u8SendMostNebble+0x82>
    157a:	2c 81       	ldd	r18, Y+4	; 0x04
    157c:	3d 81       	ldd	r19, Y+5	; 0x05
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	2c f4       	brge	.+10     	; 0x158e <DIO_u8SendMostNebble+0x4c>
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	61 f0       	breq	.+24     	; 0x15a4 <DIO_u8SendMostNebble+0x62>
    158c:	4c c0       	rjmp	.+152    	; 0x1626 <DIO_u8SendMostNebble+0xe4>
    158e:	2c 81       	ldd	r18, Y+4	; 0x04
    1590:	3d 81       	ldd	r19, Y+5	; 0x05
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	31 f1       	breq	.+76     	; 0x15e4 <DIO_u8SendMostNebble+0xa2>
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	89 f1       	breq	.+98     	; 0x1604 <DIO_u8SendMostNebble+0xc2>
    15a2:	41 c0       	rjmp	.+130    	; 0x1626 <DIO_u8SendMostNebble+0xe4>
        {
			case DIO_u8_PORTA : DIO_u8_PORTA_REG &= 0x0F; DIO_u8_PORTA_REG |= Copy_u8Status ; break;
    15a4:	ab e3       	ldi	r26, 0x3B	; 59
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	eb e3       	ldi	r30, 0x3B	; 59
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 70       	andi	r24, 0x0F	; 15
    15b0:	8c 93       	st	X, r24
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	90 81       	ld	r25, Z
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	89 2b       	or	r24, r25
    15c0:	8c 93       	st	X, r24
    15c2:	31 c0       	rjmp	.+98     	; 0x1626 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTB : DIO_u8_PORTB_REG &= 0x0F; DIO_u8_PORTB_REG |= Copy_u8Status ; break;
    15c4:	a8 e3       	ldi	r26, 0x38	; 56
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 70       	andi	r24, 0x0F	; 15
    15d0:	8c 93       	st	X, r24
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	90 81       	ld	r25, Z
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	89 2b       	or	r24, r25
    15e0:	8c 93       	st	X, r24
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTC : DIO_u8_PORTC_REG &= 0x0F; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    15e4:	a5 e3       	ldi	r26, 0x35	; 53
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e3       	ldi	r30, 0x35	; 53
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 70       	andi	r24, 0x0F	; 15
    15f0:	8c 93       	st	X, r24
    15f2:	a5 e3       	ldi	r26, 0x35	; 53
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	90 81       	ld	r25, Z
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	89 2b       	or	r24, r25
    1600:	8c 93       	st	X, r24
    1602:	11 c0       	rjmp	.+34     	; 0x1626 <DIO_u8SendMostNebble+0xe4>
			case DIO_u8_PORTD : DIO_u8_PORTD_REG &= 0x0F; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    1604:	a2 e3       	ldi	r26, 0x32	; 50
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e2 e3       	ldi	r30, 0x32	; 50
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	8c 93       	st	X, r24
    1612:	a5 e3       	ldi	r26, 0x35	; 53
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e3       	ldi	r30, 0x35	; 53
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	89 2b       	or	r24, r25
    1620:	8c 93       	st	X, r24
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <DIO_u8SendMostNebble+0xe4>
        }
	}
    else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1624:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <DIO_u8SendLeastNebble>:


u8   DIO_u8SendLeastNebble   (u8 Copy_u8PortId, u8 Copy_u8Status)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_u8SendLeastNebble+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_u8SendLeastNebble+0x8>
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6b 83       	std	Y+3, r22	; 0x03
	Copy_u8Status &= 0x0F;
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	8f 70       	andi	r24, 0x0F	; 15
    164e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <=  DIO_u8_PORTD)
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	08 f0       	brcs	.+2      	; 0x165c <DIO_u8SendLeastNebble+0x24>
    165a:	5f c0       	rjmp	.+190    	; 0x171a <DIO_u8SendLeastNebble+0xe2>
	{
		switch (Copy_u8PortId)
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3d 83       	std	Y+5, r19	; 0x05
    1664:	2c 83       	std	Y+4, r18	; 0x04
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	29 f1       	breq	.+74     	; 0x16ba <DIO_u8SendLeastNebble+0x82>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	2c f4       	brge	.+10     	; 0x1684 <DIO_u8SendLeastNebble+0x4c>
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	61 f0       	breq	.+24     	; 0x169a <DIO_u8SendLeastNebble+0x62>
    1682:	4c c0       	rjmp	.+152    	; 0x171c <DIO_u8SendLeastNebble+0xe4>
    1684:	2c 81       	ldd	r18, Y+4	; 0x04
    1686:	3d 81       	ldd	r19, Y+5	; 0x05
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	31 f1       	breq	.+76     	; 0x16da <DIO_u8SendLeastNebble+0xa2>
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	91 05       	cpc	r25, r1
    1696:	89 f1       	breq	.+98     	; 0x16fa <DIO_u8SendLeastNebble+0xc2>
    1698:	41 c0       	rjmp	.+130    	; 0x171c <DIO_u8SendLeastNebble+0xe4>
        {
			case DIO_u8_PORTA : DIO_u8_PORTA_REG &= 0xF0; DIO_u8_PORTA_REG |= Copy_u8Status ; break;
    169a:	ab e3       	ldi	r26, 0x3B	; 59
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e3       	ldi	r30, 0x3B	; 59
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 7f       	andi	r24, 0xF0	; 240
    16a6:	8c 93       	st	X, r24
    16a8:	ab e3       	ldi	r26, 0x3B	; 59
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e3       	ldi	r30, 0x3B	; 59
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	90 81       	ld	r25, Z
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	89 2b       	or	r24, r25
    16b6:	8c 93       	st	X, r24
    16b8:	31 c0       	rjmp	.+98     	; 0x171c <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTB : DIO_u8_PORTB_REG &= 0xF0; DIO_u8_PORTB_REG |= Copy_u8Status ; break;
    16ba:	a8 e3       	ldi	r26, 0x38	; 56
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e8 e3       	ldi	r30, 0x38	; 56
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	80 7f       	andi	r24, 0xF0	; 240
    16c6:	8c 93       	st	X, r24
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	90 81       	ld	r25, Z
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	89 2b       	or	r24, r25
    16d6:	8c 93       	st	X, r24
    16d8:	21 c0       	rjmp	.+66     	; 0x171c <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTC : DIO_u8_PORTC_REG &= 0xF0; DIO_u8_PORTC_REG |= Copy_u8Status ; break;
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 7f       	andi	r24, 0xF0	; 240
    16e6:	8c 93       	st	X, r24
    16e8:	a5 e3       	ldi	r26, 0x35	; 53
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e3       	ldi	r30, 0x35	; 53
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	90 81       	ld	r25, Z
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	89 2b       	or	r24, r25
    16f6:	8c 93       	st	X, r24
    16f8:	11 c0       	rjmp	.+34     	; 0x171c <DIO_u8SendLeastNebble+0xe4>
			case DIO_u8_PORTD : DIO_u8_PORTD_REG &= 0xF0; DIO_u8_PORTD_REG |= Copy_u8Status ; break;
    16fa:	a2 e3       	ldi	r26, 0x32	; 50
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 7f       	andi	r24, 0xF0	; 240
    1706:	8c 93       	st	X, r24
    1708:	a2 e3       	ldi	r26, 0x32	; 50
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e2 e3       	ldi	r30, 0x32	; 50
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	90 81       	ld	r25, Z
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	89 2b       	or	r24, r25
    1716:	8c 93       	st	X, r24
    1718:	01 c0       	rjmp	.+2      	; 0x171c <DIO_u8SendLeastNebble+0xe4>
        }
	}
    else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    171a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    171c:	89 81       	ldd	r24, Y+1	; 0x01
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <KPD_u8GetKeyState>:
static const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};

static const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

u8 KPD_u8GetKeyState(u8* Copy_pu8ReturnedKey)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	65 97       	sbiw	r28, 0x15	; 21
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	9d 8b       	std	Y+21, r25	; 0x15
    1744:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowCounter;
	u8 Local_u8ColCounter;
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
    174a:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    174c:	8c 89       	ldd	r24, Y+20	; 0x14
    174e:	9d 89       	ldd	r25, Y+21	; 0x15
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	09 f4       	brne	.+2      	; 0x1756 <KPD_u8GetKeyState+0x28>
    1754:	f0 c0       	rjmp	.+480    	; 0x1936 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
    1756:	ec 89       	ldd	r30, Y+20	; 0x14
    1758:	fd 89       	ldd	r31, Y+21	; 0x15
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	80 83       	st	Z, r24
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    175e:	19 8a       	std	Y+17, r1	; 0x11
    1760:	e5 c0       	rjmp	.+458    	; 0x192c <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_ROW_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
    1762:	89 89       	ldd	r24, Y+17	; 0x11
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	fc 01       	movw	r30, r24
    176a:	e4 58       	subi	r30, 0x84	; 132
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	90 81       	ld	r25, Z
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	69 2f       	mov	r22, r25
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    177a:	18 8a       	std	Y+16, r1	; 0x10
    177c:	c1 c0       	rjmp	.+386    	; 0x1900 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    177e:	88 89       	ldd	r24, Y+16	; 0x10
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	e0 58       	subi	r30, 0x80	; 128
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	90 81       	ld	r25, Z
    178c:	9e 01       	movw	r18, r28
    178e:	2d 5e       	subi	r18, 0xED	; 237
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	69 2f       	mov	r22, r25
    1796:	a9 01       	movw	r20, r18
    1798:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    179c:	8b 89       	ldd	r24, Y+19	; 0x13
    179e:	88 23       	and	r24, r24
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <KPD_u8GetKeyState+0x76>
    17a2:	ab c0       	rjmp	.+342    	; 0x18fa <KPD_u8GetKeyState+0x1cc>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 ea       	ldi	r26, 0xA0	; 160
    17aa:	b1 e4       	ldi	r27, 0x41	; 65
    17ac:	8b 87       	std	Y+11, r24	; 0x0b
    17ae:	9c 87       	std	Y+12, r25	; 0x0c
    17b0:	ad 87       	std	Y+13, r26	; 0x0d
    17b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8f 83       	std	Y+7, r24	; 0x07
    17ce:	98 87       	std	Y+8, r25	; 0x08
    17d0:	a9 87       	std	Y+9, r26	; 0x09
    17d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <KPD_u8GetKeyState+0x128>
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <KPD_u8GetKeyState+0x116>
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <KPD_u8GetKeyState+0x10a>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6f 81       	ldd	r22, Y+7	; 0x07
    1862:	78 85       	ldd	r23, Y+8	; 0x08
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <KPD_u8GetKeyState+0x152>
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    1888:	88 89       	ldd	r24, Y+16	; 0x10
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	fc 01       	movw	r30, r24
    1890:	e0 58       	subi	r30, 0x80	; 128
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	90 81       	ld	r25, Z
    1896:	9e 01       	movw	r18, r28
    1898:	2d 5e       	subi	r18, 0xED	; 237
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	69 2f       	mov	r22, r25
    18a0:	a9 01       	movw	r20, r18
    18a2:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8GetPinValue>
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <KPD_u8GetKeyState+0x198>
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
    18a8:	88 89       	ldd	r24, Y+16	; 0x10
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	fc 01       	movw	r30, r24
    18b0:	e0 58       	subi	r30, 0x80	; 128
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	90 81       	ld	r25, Z
    18b6:	9e 01       	movw	r18, r28
    18b8:	2d 5e       	subi	r18, 0xED	; 237
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	69 2f       	mov	r22, r25
    18c0:	a9 01       	movw	r20, r18
    18c2:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_u8GetPinValue>
				{
					/*Debouncing*/
					_delay_ms(20);
					/*Check Agian if Pin Value is Low*/
					DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					while(Local_u8PinValue == DIO_u8_LOW)
    18c6:	8b 89       	ldd	r24, Y+19	; 0x13
    18c8:	88 23       	and	r24, r24
    18ca:	71 f3       	breq	.-36     	; 0x18a8 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_COL_PORT,KPD_Au8ColsPins[Local_u8ColCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
    18cc:	89 89       	ldd	r24, Y+17	; 0x11
    18ce:	48 2f       	mov	r20, r24
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	88 89       	ldd	r24, Y+16	; 0x10
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	ca 01       	movw	r24, r20
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	82 0f       	add	r24, r18
    18e4:	93 1f       	adc	r25, r19
    18e6:	fc 01       	movw	r30, r24
    18e8:	e4 59       	subi	r30, 0x94	; 148
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	ec 89       	ldd	r30, Y+20	; 0x14
    18f0:	fd 89       	ldd	r31, Y+21	; 0x15
    18f2:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	8f 87       	std	Y+15, r24	; 0x0f
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <KPD_u8GetKeyState+0x1da>
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_ROW_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_LOW);
			for(Local_u8ColCounter=0 ;Local_u8ColCounter<=3 ;Local_u8ColCounter++)
    18fa:	88 89       	ldd	r24, Y+16	; 0x10
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	88 8b       	std	Y+16, r24	; 0x10
    1900:	88 89       	ldd	r24, Y+16	; 0x10
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	08 f4       	brcc	.+2      	; 0x1908 <KPD_u8GetKeyState+0x1da>
    1906:	3b cf       	rjmp	.-394    	; 0x177e <KPD_u8GetKeyState+0x50>
					*Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowCounter][Local_u8ColCounter];
					Local_u8Flag = 1;
					break; 
				}
			}
			DIO_u8SetPinValue(KPD_u8_ROW_PORT,KPD_Au8RowsPins[Local_u8RowCounter],DIO_u8_HIGH);
    1908:	89 89       	ldd	r24, Y+17	; 0x11
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	fc 01       	movw	r30, r24
    1910:	e4 58       	subi	r30, 0x84	; 132
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	90 81       	ld	r25, Z
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	69 2f       	mov	r22, r25
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1) 
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	49 f0       	breq	.+18     	; 0x1938 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey =KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8RowCounter=0 ;Local_u8RowCounter<=3 ;Local_u8RowCounter++)
    1926:	89 89       	ldd	r24, Y+17	; 0x11
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	89 8b       	std	Y+17, r24	; 0x11
    192c:	89 89       	ldd	r24, Y+17	; 0x11
    192e:	84 30       	cpi	r24, 0x04	; 4
    1930:	08 f4       	brcc	.+2      	; 0x1934 <KPD_u8GetKeyState+0x206>
    1932:	17 cf       	rjmp	.-466    	; 0x1762 <KPD_u8GetKeyState+0x34>
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <KPD_u8GetKeyState+0x20a>
			}	
		}
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    1936:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    1938:	8a 89       	ldd	r24, Y+18	; 0x12
	
}
    193a:	65 96       	adiw	r28, 0x15	; 21
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"

u8 LCD_Data_Pins[4]={LCD_DB4_PIN,LCD_DB5_PIN,LCD_DB6_PIN,LCD_DB7_PIN};
void LCD_voidInit(void)
{
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	ca 50       	subi	r28, 0x0A	; 10
    195a:	d1 40       	sbci	r29, 0x01	; 1
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	fe 01       	movw	r30, r28
    1968:	e9 5f       	subi	r30, 0xF9	; 249
    196a:	fe 4f       	sbci	r31, 0xFE	; 254
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	ac e0       	ldi	r26, 0x0C	; 12
    1972:	b2 e4       	ldi	r27, 0x42	; 66
    1974:	80 83       	st	Z, r24
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	a2 83       	std	Z+2, r26	; 0x02
    197a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197c:	8e 01       	movw	r16, r28
    197e:	0d 5f       	subi	r16, 0xFD	; 253
    1980:	1e 4f       	sbci	r17, 0xFE	; 254
    1982:	fe 01       	movw	r30, r28
    1984:	e9 5f       	subi	r30, 0xF9	; 249
    1986:	fe 4f       	sbci	r31, 0xFE	; 254
    1988:	60 81       	ld	r22, Z
    198a:	71 81       	ldd	r23, Z+1	; 0x01
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a ef       	ldi	r20, 0xFA	; 250
    1996:	54 e4       	ldi	r21, 0x44	; 68
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	f8 01       	movw	r30, r16
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19aa:	fe 01       	movw	r30, r28
    19ac:	ed 5f       	subi	r30, 0xFD	; 253
    19ae:	fe 4f       	sbci	r31, 0xFE	; 254
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	44 f4       	brge	.+16     	; 0x19d8 <LCD_voidInit+0x8c>
		__ticks = 1;
    19c8:	fe 01       	movw	r30, r28
    19ca:	ef 5f       	subi	r30, 0xFF	; 255
    19cc:	fe 4f       	sbci	r31, 0xFE	; 254
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	80 83       	st	Z, r24
    19d6:	64 c0       	rjmp	.+200    	; 0x1aa0 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    19d8:	fe 01       	movw	r30, r28
    19da:	ed 5f       	subi	r30, 0xFD	; 253
    19dc:	fe 4f       	sbci	r31, 0xFE	; 254
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	0c f0       	brlt	.+2      	; 0x19f8 <LCD_voidInit+0xac>
    19f6:	43 c0       	rjmp	.+134    	; 0x1a7e <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f8:	fe 01       	movw	r30, r28
    19fa:	e9 5f       	subi	r30, 0xF9	; 249
    19fc:	fe 4f       	sbci	r31, 0xFE	; 254
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8e 01       	movw	r16, r28
    1a18:	0f 5f       	subi	r16, 0xFF	; 255
    1a1a:	1e 4f       	sbci	r17, 0xFE	; 254
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	f8 01       	movw	r30, r16
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	80 83       	st	Z, r24
    1a2e:	1f c0       	rjmp	.+62     	; 0x1a6e <LCD_voidInit+0x122>
    1a30:	fe 01       	movw	r30, r28
    1a32:	e1 50       	subi	r30, 0x01	; 1
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	88 ec       	ldi	r24, 0xC8	; 200
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e1 50       	subi	r30, 0x01	; 1
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	80 81       	ld	r24, Z
    1a46:	91 81       	ldd	r25, Z+1	; 0x01
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_voidInit+0xfc>
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e1 50       	subi	r30, 0x01	; 1
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	de 01       	movw	r26, r28
    1a58:	af 5f       	subi	r26, 0xFF	; 255
    1a5a:	be 4f       	sbci	r27, 0xFE	; 254
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ef 5f       	subi	r30, 0xFF	; 255
    1a60:	fe 4f       	sbci	r31, 0xFE	; 254
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	11 96       	adiw	r26, 0x01	; 1
    1a6a:	9c 93       	st	X, r25
    1a6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ef 5f       	subi	r30, 0xFF	; 255
    1a72:	fe 4f       	sbci	r31, 0xFE	; 254
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	d1 f6       	brne	.-76     	; 0x1a30 <LCD_voidInit+0xe4>
    1a7c:	27 c0       	rjmp	.+78     	; 0x1acc <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	8e 01       	movw	r16, r28
    1a80:	0f 5f       	subi	r16, 0xFF	; 255
    1a82:	1e 4f       	sbci	r17, 0xFE	; 254
    1a84:	fe 01       	movw	r30, r28
    1a86:	ed 5f       	subi	r30, 0xFD	; 253
    1a88:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
    1aa0:	de 01       	movw	r26, r28
    1aa2:	a3 50       	subi	r26, 0x03	; 3
    1aa4:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ef 5f       	subi	r30, 0xFF	; 255
    1aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	8d 93       	st	X+, r24
    1ab2:	9c 93       	st	X, r25
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e3 50       	subi	r30, 0x03	; 3
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_voidInit+0x172>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e3 50       	subi	r30, 0x03	; 3
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24

		_delay_ms(35);
		//FIRST 4 BITS SENT (function set)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	62 e0       	ldi	r22, 0x02	; 2
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	63 e0       	ldi	r22, 0x03	; 3
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		//FIRST 4 BITS SENT (function set)
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_HIGH);
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	64 e0       	ldi	r22, 0x04	; 4
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>



		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	62 e0       	ldi	r22, 0x02	; 2
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    1b12:	fe 01       	movw	r30, r28
    1b14:	e7 50       	subi	r30, 0x07	; 7
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 e8       	ldi	r26, 0x80	; 128
    1b1e:	bf e3       	ldi	r27, 0x3F	; 63
    1b20:	80 83       	st	Z, r24
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	a2 83       	std	Z+2, r26	; 0x02
    1b26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	8e 01       	movw	r16, r28
    1b2a:	0b 50       	subi	r16, 0x0B	; 11
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e7 50       	subi	r30, 0x07	; 7
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a ef       	ldi	r20, 0xFA	; 250
    1b42:	54 e4       	ldi	r21, 0x44	; 68
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	80 83       	st	Z, r24
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	a2 83       	std	Z+2, r26	; 0x02
    1b54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b56:	fe 01       	movw	r30, r28
    1b58:	eb 50       	subi	r30, 0x0B	; 11
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	44 f4       	brge	.+16     	; 0x1b84 <LCD_voidInit+0x238>
		__ticks = 1;
    1b74:	fe 01       	movw	r30, r28
    1b76:	ed 50       	subi	r30, 0x0D	; 13
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	64 c0       	rjmp	.+200    	; 0x1c4c <LCD_voidInit+0x300>
	else if (__tmp > 65535)
    1b84:	fe 01       	movw	r30, r28
    1b86:	eb 50       	subi	r30, 0x0B	; 11
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	0c f0       	brlt	.+2      	; 0x1ba4 <LCD_voidInit+0x258>
    1ba2:	43 c0       	rjmp	.+134    	; 0x1c2a <LCD_voidInit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e7 50       	subi	r30, 0x07	; 7
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8e 01       	movw	r16, r28
    1bc4:	0d 50       	subi	r16, 0x0D	; 13
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    1bda:	1f c0       	rjmp	.+62     	; 0x1c1a <LCD_voidInit+0x2ce>
    1bdc:	fe 01       	movw	r30, r28
    1bde:	ef 50       	subi	r30, 0x0F	; 15
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	88 ec       	ldi	r24, 0xC8	; 200
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
    1bea:	fe 01       	movw	r30, r28
    1bec:	ef 50       	subi	r30, 0x0F	; 15
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_voidInit+0x2a8>
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ef 50       	subi	r30, 0x0F	; 15
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c02:	de 01       	movw	r26, r28
    1c04:	ad 50       	subi	r26, 0x0D	; 13
    1c06:	bf 4f       	sbci	r27, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ed 50       	subi	r30, 0x0D	; 13
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	11 96       	adiw	r26, 0x01	; 1
    1c16:	9c 93       	st	X, r25
    1c18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ed 50       	subi	r30, 0x0D	; 13
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	d1 f6       	brne	.-76     	; 0x1bdc <LCD_voidInit+0x290>
    1c28:	27 c0       	rjmp	.+78     	; 0x1c78 <LCD_voidInit+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	8e 01       	movw	r16, r28
    1c2c:	0d 50       	subi	r16, 0x0D	; 13
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	fe 01       	movw	r30, r28
    1c32:	eb 50       	subi	r30, 0x0B	; 11
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	f8 01       	movw	r30, r16
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
    1c4c:	de 01       	movw	r26, r28
    1c4e:	a1 51       	subi	r26, 0x11	; 17
    1c50:	bf 4f       	sbci	r27, 0xFF	; 255
    1c52:	fe 01       	movw	r30, r28
    1c54:	ed 50       	subi	r30, 0x0D	; 13
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	8d 93       	st	X+, r24
    1c5e:	9c 93       	st	X, r25
    1c60:	fe 01       	movw	r30, r28
    1c62:	e1 51       	subi	r30, 0x11	; 17
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_voidInit+0x31e>
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e1 51       	subi	r30, 0x11	; 17
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	63 e0       	ldi	r22, 0x03	; 3
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e5 51       	subi	r30, 0x15	; 21
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e8       	ldi	r26, 0x80	; 128
    1c98:	bf e3       	ldi	r27, 0x3F	; 63
    1c9a:	80 83       	st	Z, r24
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	a2 83       	std	Z+2, r26	; 0x02
    1ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	8e 01       	movw	r16, r28
    1ca4:	09 51       	subi	r16, 0x19	; 25
    1ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e5 51       	subi	r30, 0x15	; 21
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	80 83       	st	Z, r24
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	a2 83       	std	Z+2, r26	; 0x02
    1cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e9 51       	subi	r30, 0x19	; 25
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e8       	ldi	r20, 0x80	; 128
    1ce4:	5f e3       	ldi	r21, 0x3F	; 63
    1ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cea:	88 23       	and	r24, r24
    1cec:	44 f4       	brge	.+16     	; 0x1cfe <LCD_voidInit+0x3b2>
		__ticks = 1;
    1cee:	fe 01       	movw	r30, r28
    1cf0:	eb 51       	subi	r30, 0x1B	; 27
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	64 c0       	rjmp	.+200    	; 0x1dc6 <LCD_voidInit+0x47a>
	else if (__tmp > 65535)
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e9 51       	subi	r30, 0x19	; 25
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	3f ef       	ldi	r19, 0xFF	; 255
    1d10:	4f e7       	ldi	r20, 0x7F	; 127
    1d12:	57 e4       	ldi	r21, 0x47	; 71
    1d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	0c f0       	brlt	.+2      	; 0x1d1e <LCD_voidInit+0x3d2>
    1d1c:	43 c0       	rjmp	.+134    	; 0x1da4 <LCD_voidInit+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e5 51       	subi	r30, 0x15	; 21
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8e 01       	movw	r16, r28
    1d3e:	0b 51       	subi	r16, 0x1B	; 27
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	f8 01       	movw	r30, r16
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	80 83       	st	Z, r24
    1d54:	1f c0       	rjmp	.+62     	; 0x1d94 <LCD_voidInit+0x448>
    1d56:	fe 01       	movw	r30, r28
    1d58:	ed 51       	subi	r30, 0x1D	; 29
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	88 ec       	ldi	r24, 0xC8	; 200
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	80 83       	st	Z, r24
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 51       	subi	r30, 0x1D	; 29
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_voidInit+0x422>
    1d72:	fe 01       	movw	r30, r28
    1d74:	ed 51       	subi	r30, 0x1D	; 29
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7c:	de 01       	movw	r26, r28
    1d7e:	ab 51       	subi	r26, 0x1B	; 27
    1d80:	bf 4f       	sbci	r27, 0xFF	; 255
    1d82:	fe 01       	movw	r30, r28
    1d84:	eb 51       	subi	r30, 0x1B	; 27
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	11 96       	adiw	r26, 0x01	; 1
    1d90:	9c 93       	st	X, r25
    1d92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	fe 01       	movw	r30, r28
    1d96:	eb 51       	subi	r30, 0x1B	; 27
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	d1 f6       	brne	.-76     	; 0x1d56 <LCD_voidInit+0x40a>
    1da2:	27 c0       	rjmp	.+78     	; 0x1df2 <LCD_voidInit+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	8e 01       	movw	r16, r28
    1da6:	0b 51       	subi	r16, 0x1B	; 27
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	fe 01       	movw	r30, r28
    1dac:	e9 51       	subi	r30, 0x19	; 25
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	80 83       	st	Z, r24
    1dc6:	de 01       	movw	r26, r28
    1dc8:	af 51       	subi	r26, 0x1F	; 31
    1dca:	bf 4f       	sbci	r27, 0xFF	; 255
    1dcc:	fe 01       	movw	r30, r28
    1dce:	eb 51       	subi	r30, 0x1B	; 27
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	8d 93       	st	X+, r24
    1dd8:	9c 93       	st	X, r25
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ef 51       	subi	r30, 0x1F	; 31
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_voidInit+0x498>
    1de8:	fe 01       	movw	r30, r28
    1dea:	ef 51       	subi	r30, 0x1F	; 31
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	80 83       	st	Z, r24
		_delay_ms(1);

		//SECOND 4 BITS SENT (function set)
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_HIGH);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	64 e0       	ldi	r22, 0x04	; 4
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	62 e0       	ldi	r22, 0x02	; 2
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    1e24:	fe 01       	movw	r30, r28
    1e26:	e3 52       	subi	r30, 0x23	; 35
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e8       	ldi	r26, 0x80	; 128
    1e30:	bf e3       	ldi	r27, 0x3F	; 63
    1e32:	80 83       	st	Z, r24
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	a2 83       	std	Z+2, r26	; 0x02
    1e38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	07 52       	subi	r16, 0x27	; 39
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	fe 01       	movw	r30, r28
    1e42:	e3 52       	subi	r30, 0x23	; 35
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4a ef       	ldi	r20, 0xFA	; 250
    1e54:	54 e4       	ldi	r21, 0x44	; 68
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	f8 01       	movw	r30, r16
    1e60:	80 83       	st	Z, r24
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	a2 83       	std	Z+2, r26	; 0x02
    1e66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e7 52       	subi	r30, 0x27	; 39
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	44 f4       	brge	.+16     	; 0x1e96 <LCD_voidInit+0x54a>
		__ticks = 1;
    1e86:	fe 01       	movw	r30, r28
    1e88:	e9 52       	subi	r30, 0x29	; 41
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	80 83       	st	Z, r24
    1e94:	64 c0       	rjmp	.+200    	; 0x1f5e <LCD_voidInit+0x612>
	else if (__tmp > 65535)
    1e96:	fe 01       	movw	r30, r28
    1e98:	e7 52       	subi	r30, 0x27	; 39
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	0c f0       	brlt	.+2      	; 0x1eb6 <LCD_voidInit+0x56a>
    1eb4:	43 c0       	rjmp	.+134    	; 0x1f3c <LCD_voidInit+0x5f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e3 52       	subi	r30, 0x23	; 35
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8e 01       	movw	r16, r28
    1ed6:	09 52       	subi	r16, 0x29	; 41
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	1f c0       	rjmp	.+62     	; 0x1f2c <LCD_voidInit+0x5e0>
    1eee:	fe 01       	movw	r30, r28
    1ef0:	eb 52       	subi	r30, 0x2B	; 43
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	88 ec       	ldi	r24, 0xC8	; 200
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
    1efc:	fe 01       	movw	r30, r28
    1efe:	eb 52       	subi	r30, 0x2B	; 43
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <LCD_voidInit+0x5ba>
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	eb 52       	subi	r30, 0x2B	; 43
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	de 01       	movw	r26, r28
    1f16:	a9 52       	subi	r26, 0x29	; 41
    1f18:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e9 52       	subi	r30, 0x29	; 41
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	11 96       	adiw	r26, 0x01	; 1
    1f28:	9c 93       	st	X, r25
    1f2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e9 52       	subi	r30, 0x29	; 41
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	d1 f6       	brne	.-76     	; 0x1eee <LCD_voidInit+0x5a2>
    1f3a:	27 c0       	rjmp	.+78     	; 0x1f8a <LCD_voidInit+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	09 52       	subi	r16, 0x29	; 41
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	fe 01       	movw	r30, r28
    1f44:	e7 52       	subi	r30, 0x27	; 39
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
    1f5e:	de 01       	movw	r26, r28
    1f60:	ad 52       	subi	r26, 0x2D	; 45
    1f62:	bf 4f       	sbci	r27, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	e9 52       	subi	r30, 0x29	; 41
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	8d 93       	st	X+, r24
    1f70:	9c 93       	st	X, r25
    1f72:	fe 01       	movw	r30, r28
    1f74:	ed 52       	subi	r30, 0x2D	; 45
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_voidInit+0x630>
    1f80:	fe 01       	movw	r30, r28
    1f82:	ed 52       	subi	r30, 0x2D	; 45
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	62 e0       	ldi	r22, 0x02	; 2
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	63 e0       	ldi	r22, 0x03	; 3
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e1 53       	subi	r30, 0x31	; 49
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e8       	ldi	r26, 0x80	; 128
    1faa:	bf e3       	ldi	r27, 0x3F	; 63
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	8e 01       	movw	r16, r28
    1fb6:	05 53       	subi	r16, 0x35	; 53
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e1 53       	subi	r30, 0x31	; 49
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a ef       	ldi	r20, 0xFA	; 250
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	f8 01       	movw	r30, r16
    1fda:	80 83       	st	Z, r24
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	a2 83       	std	Z+2, r26	; 0x02
    1fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e5 53       	subi	r30, 0x35	; 53
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	44 f4       	brge	.+16     	; 0x2010 <LCD_voidInit+0x6c4>
		__ticks = 1;
    2000:	fe 01       	movw	r30, r28
    2002:	e7 53       	subi	r30, 0x37	; 55
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
    200e:	64 c0       	rjmp	.+200    	; 0x20d8 <LCD_voidInit+0x78c>
	else if (__tmp > 65535)
    2010:	fe 01       	movw	r30, r28
    2012:	e5 53       	subi	r30, 0x35	; 53
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	0c f0       	brlt	.+2      	; 0x2030 <LCD_voidInit+0x6e4>
    202e:	43 c0       	rjmp	.+134    	; 0x20b6 <LCD_voidInit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	fe 01       	movw	r30, r28
    2032:	e1 53       	subi	r30, 0x31	; 49
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8e 01       	movw	r16, r28
    2050:	07 53       	subi	r16, 0x37	; 55
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	f8 01       	movw	r30, r16
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
    2066:	1f c0       	rjmp	.+62     	; 0x20a6 <LCD_voidInit+0x75a>
    2068:	fe 01       	movw	r30, r28
    206a:	e9 53       	subi	r30, 0x39	; 57
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	fe 01       	movw	r30, r28
    2078:	e9 53       	subi	r30, 0x39	; 57
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_voidInit+0x734>
    2084:	fe 01       	movw	r30, r28
    2086:	e9 53       	subi	r30, 0x39	; 57
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208e:	de 01       	movw	r26, r28
    2090:	a7 53       	subi	r26, 0x37	; 55
    2092:	bf 4f       	sbci	r27, 0xFF	; 255
    2094:	fe 01       	movw	r30, r28
    2096:	e7 53       	subi	r30, 0x37	; 55
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	91 81       	ldd	r25, Z+1	; 0x01
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	9c 93       	st	X, r25
    20a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a6:	fe 01       	movw	r30, r28
    20a8:	e7 53       	subi	r30, 0x37	; 55
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	d1 f6       	brne	.-76     	; 0x2068 <LCD_voidInit+0x71c>
    20b4:	27 c0       	rjmp	.+78     	; 0x2104 <LCD_voidInit+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b6:	8e 01       	movw	r16, r28
    20b8:	07 53       	subi	r16, 0x37	; 55
    20ba:	1f 4f       	sbci	r17, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	e5 53       	subi	r30, 0x35	; 53
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	f8 01       	movw	r30, r16
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	de 01       	movw	r26, r28
    20da:	ab 53       	subi	r26, 0x3B	; 59
    20dc:	bf 4f       	sbci	r27, 0xFF	; 255
    20de:	fe 01       	movw	r30, r28
    20e0:	e7 53       	subi	r30, 0x37	; 55
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	8d 93       	st	X+, r24
    20ea:	9c 93       	st	X, r25
    20ec:	fe 01       	movw	r30, r28
    20ee:	eb 53       	subi	r30, 0x3B	; 59
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <LCD_voidInit+0x7aa>
    20fa:	fe 01       	movw	r30, r28
    20fc:	eb 53       	subi	r30, 0x3B	; 59
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	80 83       	st	Z, r24
		_delay_ms(1);

		//last 3 bits
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_HIGH);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	64 e0       	ldi	r22, 0x04	; 4
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	62 e0       	ldi	r22, 0x02	; 2
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2136:	fe 01       	movw	r30, r28
    2138:	ef 53       	subi	r30, 0x3F	; 63
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	ac e0       	ldi	r26, 0x0C	; 12
    2142:	b2 e4       	ldi	r27, 0x42	; 66
    2144:	80 83       	st	Z, r24
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	a2 83       	std	Z+2, r26	; 0x02
    214a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	8e 01       	movw	r16, r28
    214e:	03 54       	subi	r16, 0x43	; 67
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	ef 53       	subi	r30, 0x3F	; 63
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a ef       	ldi	r20, 0xFA	; 250
    2166:	54 e4       	ldi	r21, 0x44	; 68
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	f8 01       	movw	r30, r16
    2172:	80 83       	st	Z, r24
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	a2 83       	std	Z+2, r26	; 0x02
    2178:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    217a:	fe 01       	movw	r30, r28
    217c:	e3 54       	subi	r30, 0x43	; 67
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	44 f4       	brge	.+16     	; 0x21a8 <LCD_voidInit+0x85c>
		__ticks = 1;
    2198:	fe 01       	movw	r30, r28
    219a:	e5 54       	subi	r30, 0x45	; 69
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	64 c0       	rjmp	.+200    	; 0x2270 <LCD_voidInit+0x924>
	else if (__tmp > 65535)
    21a8:	fe 01       	movw	r30, r28
    21aa:	e3 54       	subi	r30, 0x43	; 67
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	3f ef       	ldi	r19, 0xFF	; 255
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	57 e4       	ldi	r21, 0x47	; 71
    21be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	0c f0       	brlt	.+2      	; 0x21c8 <LCD_voidInit+0x87c>
    21c6:	43 c0       	rjmp	.+134    	; 0x224e <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	fe 01       	movw	r30, r28
    21ca:	ef 53       	subi	r30, 0x3F	; 63
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	8e 01       	movw	r16, r28
    21e8:	05 54       	subi	r16, 0x45	; 69
    21ea:	1f 4f       	sbci	r17, 0xFF	; 255
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	f8 01       	movw	r30, r16
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	80 83       	st	Z, r24
    21fe:	1f c0       	rjmp	.+62     	; 0x223e <LCD_voidInit+0x8f2>
    2200:	fe 01       	movw	r30, r28
    2202:	e7 54       	subi	r30, 0x47	; 71
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	88 ec       	ldi	r24, 0xC8	; 200
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	fe 01       	movw	r30, r28
    2210:	e7 54       	subi	r30, 0x47	; 71
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_voidInit+0x8cc>
    221c:	fe 01       	movw	r30, r28
    221e:	e7 54       	subi	r30, 0x47	; 71
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2226:	de 01       	movw	r26, r28
    2228:	a5 54       	subi	r26, 0x45	; 69
    222a:	bf 4f       	sbci	r27, 0xFF	; 255
    222c:	fe 01       	movw	r30, r28
    222e:	e5 54       	subi	r30, 0x45	; 69
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	11 96       	adiw	r26, 0x01	; 1
    223a:	9c 93       	st	X, r25
    223c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	fe 01       	movw	r30, r28
    2240:	e5 54       	subi	r30, 0x45	; 69
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	d1 f6       	brne	.-76     	; 0x2200 <LCD_voidInit+0x8b4>
    224c:	27 c0       	rjmp	.+78     	; 0x229c <LCD_voidInit+0x950>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224e:	8e 01       	movw	r16, r28
    2250:	05 54       	subi	r16, 0x45	; 69
    2252:	1f 4f       	sbci	r17, 0xFF	; 255
    2254:	fe 01       	movw	r30, r28
    2256:	e3 54       	subi	r30, 0x43	; 67
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	f8 01       	movw	r30, r16
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
    2270:	de 01       	movw	r26, r28
    2272:	a9 54       	subi	r26, 0x49	; 73
    2274:	bf 4f       	sbci	r27, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	e5 54       	subi	r30, 0x45	; 69
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	8d 93       	st	X+, r24
    2282:	9c 93       	st	X, r25
    2284:	fe 01       	movw	r30, r28
    2286:	e9 54       	subi	r30, 0x49	; 73
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_voidInit+0x942>
    2292:	fe 01       	movw	r30, r28
    2294:	e9 54       	subi	r30, 0x49	; 73
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24


		_delay_ms(35);
		// FIRST 4 BITS (display on/off control)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	62 e0       	ldi	r22, 0x02	; 2
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	63 e0       	ldi	r22, 0x03	; 3
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    22b0:	fe 01       	movw	r30, r28
    22b2:	ed 54       	subi	r30, 0x4D	; 77
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e8       	ldi	r26, 0x80	; 128
    22bc:	bf e3       	ldi	r27, 0x3F	; 63
    22be:	80 83       	st	Z, r24
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	8e 01       	movw	r16, r28
    22c8:	01 55       	subi	r16, 0x51	; 81
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255
    22cc:	fe 01       	movw	r30, r28
    22ce:	ed 54       	subi	r30, 0x4D	; 77
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	f8 01       	movw	r30, r16
    22ec:	80 83       	st	Z, r24
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	a2 83       	std	Z+2, r26	; 0x02
    22f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f4:	fe 01       	movw	r30, r28
    22f6:	e1 55       	subi	r30, 0x51	; 81
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	44 f4       	brge	.+16     	; 0x2322 <LCD_voidInit+0x9d6>
		__ticks = 1;
    2312:	fe 01       	movw	r30, r28
    2314:	e3 55       	subi	r30, 0x53	; 83
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	64 c0       	rjmp	.+200    	; 0x23ea <LCD_voidInit+0xa9e>
	else if (__tmp > 65535)
    2322:	fe 01       	movw	r30, r28
    2324:	e1 55       	subi	r30, 0x51	; 81
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	0c f0       	brlt	.+2      	; 0x2342 <LCD_voidInit+0x9f6>
    2340:	43 c0       	rjmp	.+134    	; 0x23c8 <LCD_voidInit+0xa7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	fe 01       	movw	r30, r28
    2344:	ed 54       	subi	r30, 0x4D	; 77
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8e 01       	movw	r16, r28
    2362:	03 55       	subi	r16, 0x53	; 83
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	1f c0       	rjmp	.+62     	; 0x23b8 <LCD_voidInit+0xa6c>
    237a:	fe 01       	movw	r30, r28
    237c:	e5 55       	subi	r30, 0x55	; 85
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	80 83       	st	Z, r24
    2388:	fe 01       	movw	r30, r28
    238a:	e5 55       	subi	r30, 0x55	; 85
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_voidInit+0xa46>
    2396:	fe 01       	movw	r30, r28
    2398:	e5 55       	subi	r30, 0x55	; 85
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	de 01       	movw	r26, r28
    23a2:	a3 55       	subi	r26, 0x53	; 83
    23a4:	bf 4f       	sbci	r27, 0xFF	; 255
    23a6:	fe 01       	movw	r30, r28
    23a8:	e3 55       	subi	r30, 0x53	; 83
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	11 96       	adiw	r26, 0x01	; 1
    23b4:	9c 93       	st	X, r25
    23b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	fe 01       	movw	r30, r28
    23ba:	e3 55       	subi	r30, 0x53	; 83
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	d1 f6       	brne	.-76     	; 0x237a <LCD_voidInit+0xa2e>
    23c6:	27 c0       	rjmp	.+78     	; 0x2416 <LCD_voidInit+0xaca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	8e 01       	movw	r16, r28
    23ca:	03 55       	subi	r16, 0x53	; 83
    23cc:	1f 4f       	sbci	r17, 0xFF	; 255
    23ce:	fe 01       	movw	r30, r28
    23d0:	e1 55       	subi	r30, 0x51	; 81
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	de 01       	movw	r26, r28
    23ec:	a7 55       	subi	r26, 0x57	; 87
    23ee:	bf 4f       	sbci	r27, 0xFF	; 255
    23f0:	fe 01       	movw	r30, r28
    23f2:	e3 55       	subi	r30, 0x53	; 83
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	8d 93       	st	X+, r24
    23fc:	9c 93       	st	X, r25
    23fe:	fe 01       	movw	r30, r28
    2400:	e7 55       	subi	r30, 0x57	; 87
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_voidInit+0xabc>
    240c:	fe 01       	movw	r30, r28
    240e:	e7 55       	subi	r30, 0x57	; 87
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	61 e0       	ldi	r22, 0x01	; 1
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	62 e0       	ldi	r22, 0x02	; 2
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	64 e0       	ldi	r22, 0x04	; 4
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>


		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	62 e0       	ldi	r22, 0x02	; 2
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2448:	fe 01       	movw	r30, r28
    244a:	eb 55       	subi	r30, 0x5B	; 91
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	a0 e8       	ldi	r26, 0x80	; 128
    2454:	bf e3       	ldi	r27, 0x3F	; 63
    2456:	80 83       	st	Z, r24
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	a2 83       	std	Z+2, r26	; 0x02
    245c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245e:	8e 01       	movw	r16, r28
    2460:	0f 55       	subi	r16, 0x5F	; 95
    2462:	1f 4f       	sbci	r17, 0xFF	; 255
    2464:	fe 01       	movw	r30, r28
    2466:	eb 55       	subi	r30, 0x5B	; 91
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	60 81       	ld	r22, Z
    246c:	71 81       	ldd	r23, Z+1	; 0x01
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a ef       	ldi	r20, 0xFA	; 250
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	f8 01       	movw	r30, r16
    2484:	80 83       	st	Z, r24
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	a2 83       	std	Z+2, r26	; 0x02
    248a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    248c:	fe 01       	movw	r30, r28
    248e:	ef 55       	subi	r30, 0x5F	; 95
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	44 f4       	brge	.+16     	; 0x24ba <LCD_voidInit+0xb6e>
		__ticks = 1;
    24aa:	fe 01       	movw	r30, r28
    24ac:	e1 56       	subi	r30, 0x61	; 97
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	80 83       	st	Z, r24
    24b8:	64 c0       	rjmp	.+200    	; 0x2582 <LCD_voidInit+0xc36>
	else if (__tmp > 65535)
    24ba:	fe 01       	movw	r30, r28
    24bc:	ef 55       	subi	r30, 0x5F	; 95
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	3f ef       	ldi	r19, 0xFF	; 255
    24cc:	4f e7       	ldi	r20, 0x7F	; 127
    24ce:	57 e4       	ldi	r21, 0x47	; 71
    24d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d4:	18 16       	cp	r1, r24
    24d6:	0c f0       	brlt	.+2      	; 0x24da <LCD_voidInit+0xb8e>
    24d8:	43 c0       	rjmp	.+134    	; 0x2560 <LCD_voidInit+0xc14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24da:	fe 01       	movw	r30, r28
    24dc:	eb 55       	subi	r30, 0x5B	; 91
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8e 01       	movw	r16, r28
    24fa:	01 56       	subi	r16, 0x61	; 97
    24fc:	1f 4f       	sbci	r17, 0xFF	; 255
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	f8 01       	movw	r30, r16
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	1f c0       	rjmp	.+62     	; 0x2550 <LCD_voidInit+0xc04>
    2512:	fe 01       	movw	r30, r28
    2514:	e3 56       	subi	r30, 0x63	; 99
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	88 ec       	ldi	r24, 0xC8	; 200
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	80 83       	st	Z, r24
    2520:	fe 01       	movw	r30, r28
    2522:	e3 56       	subi	r30, 0x63	; 99
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <LCD_voidInit+0xbde>
    252e:	fe 01       	movw	r30, r28
    2530:	e3 56       	subi	r30, 0x63	; 99
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	de 01       	movw	r26, r28
    253a:	a1 56       	subi	r26, 0x61	; 97
    253c:	bf 4f       	sbci	r27, 0xFF	; 255
    253e:	fe 01       	movw	r30, r28
    2540:	e1 56       	subi	r30, 0x61	; 97
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	11 96       	adiw	r26, 0x01	; 1
    254c:	9c 93       	st	X, r25
    254e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	fe 01       	movw	r30, r28
    2552:	e1 56       	subi	r30, 0x61	; 97
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	d1 f6       	brne	.-76     	; 0x2512 <LCD_voidInit+0xbc6>
    255e:	27 c0       	rjmp	.+78     	; 0x25ae <LCD_voidInit+0xc62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	8e 01       	movw	r16, r28
    2562:	01 56       	subi	r16, 0x61	; 97
    2564:	1f 4f       	sbci	r17, 0xFF	; 255
    2566:	fe 01       	movw	r30, r28
    2568:	ef 55       	subi	r30, 0x5F	; 95
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	f8 01       	movw	r30, r16
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
    2582:	de 01       	movw	r26, r28
    2584:	a5 56       	subi	r26, 0x65	; 101
    2586:	bf 4f       	sbci	r27, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	e1 56       	subi	r30, 0x61	; 97
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	8d 93       	st	X+, r24
    2594:	9c 93       	st	X, r25
    2596:	fe 01       	movw	r30, r28
    2598:	e5 56       	subi	r30, 0x65	; 101
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_voidInit+0xc54>
    25a4:	fe 01       	movw	r30, r28
    25a6:	e5 56       	subi	r30, 0x65	; 101
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
		_delay_ms(1);

		// SECOND 4 BITS (display on/off control)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	62 e0       	ldi	r22, 0x02	; 2
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	63 e0       	ldi	r22, 0x03	; 3
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    25c2:	fe 01       	movw	r30, r28
    25c4:	e9 56       	subi	r30, 0x69	; 105
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e8       	ldi	r26, 0x80	; 128
    25ce:	bf e3       	ldi	r27, 0x3F	; 63
    25d0:	80 83       	st	Z, r24
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	a2 83       	std	Z+2, r26	; 0x02
    25d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	8e 01       	movw	r16, r28
    25da:	0d 56       	subi	r16, 0x6D	; 109
    25dc:	1f 4f       	sbci	r17, 0xFF	; 255
    25de:	fe 01       	movw	r30, r28
    25e0:	e9 56       	subi	r30, 0x69	; 105
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	60 81       	ld	r22, Z
    25e6:	71 81       	ldd	r23, Z+1	; 0x01
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a ef       	ldi	r20, 0xFA	; 250
    25f2:	54 e4       	ldi	r21, 0x44	; 68
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	f8 01       	movw	r30, r16
    25fe:	80 83       	st	Z, r24
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	a2 83       	std	Z+2, r26	; 0x02
    2604:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2606:	fe 01       	movw	r30, r28
    2608:	ed 56       	subi	r30, 0x6D	; 109
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	44 f4       	brge	.+16     	; 0x2634 <LCD_voidInit+0xce8>
		__ticks = 1;
    2624:	fe 01       	movw	r30, r28
    2626:	ef 56       	subi	r30, 0x6F	; 111
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
    2632:	64 c0       	rjmp	.+200    	; 0x26fc <LCD_voidInit+0xdb0>
	else if (__tmp > 65535)
    2634:	fe 01       	movw	r30, r28
    2636:	ed 56       	subi	r30, 0x6D	; 109
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	0c f0       	brlt	.+2      	; 0x2654 <LCD_voidInit+0xd08>
    2652:	43 c0       	rjmp	.+134    	; 0x26da <LCD_voidInit+0xd8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	fe 01       	movw	r30, r28
    2656:	e9 56       	subi	r30, 0x69	; 105
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8e 01       	movw	r16, r28
    2674:	0f 56       	subi	r16, 0x6F	; 111
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	f8 01       	movw	r30, r16
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24
    268a:	1f c0       	rjmp	.+62     	; 0x26ca <LCD_voidInit+0xd7e>
    268c:	fe 01       	movw	r30, r28
    268e:	e1 57       	subi	r30, 0x71	; 113
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	88 ec       	ldi	r24, 0xC8	; 200
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	fe 01       	movw	r30, r28
    269c:	e1 57       	subi	r30, 0x71	; 113
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_voidInit+0xd58>
    26a8:	fe 01       	movw	r30, r28
    26aa:	e1 57       	subi	r30, 0x71	; 113
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	de 01       	movw	r26, r28
    26b4:	af 56       	subi	r26, 0x6F	; 111
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	ef 56       	subi	r30, 0x6F	; 111
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	11 96       	adiw	r26, 0x01	; 1
    26c6:	9c 93       	st	X, r25
    26c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ca:	fe 01       	movw	r30, r28
    26cc:	ef 56       	subi	r30, 0x6F	; 111
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	d1 f6       	brne	.-76     	; 0x268c <LCD_voidInit+0xd40>
    26d8:	27 c0       	rjmp	.+78     	; 0x2728 <LCD_voidInit+0xddc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	8e 01       	movw	r16, r28
    26dc:	0f 56       	subi	r16, 0x6F	; 111
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	fe 01       	movw	r30, r28
    26e2:	ed 56       	subi	r30, 0x6D	; 109
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	f8 01       	movw	r30, r16
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	de 01       	movw	r26, r28
    26fe:	a3 57       	subi	r26, 0x73	; 115
    2700:	bf 4f       	sbci	r27, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	ef 56       	subi	r30, 0x6F	; 111
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	8d 93       	st	X+, r24
    270e:	9c 93       	st	X, r25
    2710:	fe 01       	movw	r30, r28
    2712:	e3 57       	subi	r30, 0x73	; 115
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_voidInit+0xdce>
    271e:	fe 01       	movw	r30, r28
    2720:	e3 57       	subi	r30, 0x73	; 115
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW); //B
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW); //C
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_HIGH); //D
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	62 e0       	ldi	r22, 0x02	; 2
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_HIGH);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	64 e0       	ldi	r22, 0x04	; 4
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	62 e0       	ldi	r22, 0x02	; 2
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    275a:	fe 01       	movw	r30, r28
    275c:	e7 57       	subi	r30, 0x77	; 119
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	ac e0       	ldi	r26, 0x0C	; 12
    2766:	b2 e4       	ldi	r27, 0x42	; 66
    2768:	80 83       	st	Z, r24
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	a2 83       	std	Z+2, r26	; 0x02
    276e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2770:	8e 01       	movw	r16, r28
    2772:	0b 57       	subi	r16, 0x7B	; 123
    2774:	1f 4f       	sbci	r17, 0xFF	; 255
    2776:	fe 01       	movw	r30, r28
    2778:	e7 57       	subi	r30, 0x77	; 119
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a ef       	ldi	r20, 0xFA	; 250
    278a:	54 e4       	ldi	r21, 0x44	; 68
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	f8 01       	movw	r30, r16
    2796:	80 83       	st	Z, r24
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	a2 83       	std	Z+2, r26	; 0x02
    279c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    279e:	fe 01       	movw	r30, r28
    27a0:	eb 57       	subi	r30, 0x7B	; 123
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	44 f4       	brge	.+16     	; 0x27cc <LCD_voidInit+0xe80>
		__ticks = 1;
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 57       	subi	r30, 0x7D	; 125
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	80 83       	st	Z, r24
    27ca:	64 c0       	rjmp	.+200    	; 0x2894 <LCD_voidInit+0xf48>
	else if (__tmp > 65535)
    27cc:	fe 01       	movw	r30, r28
    27ce:	eb 57       	subi	r30, 0x7B	; 123
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	60 81       	ld	r22, Z
    27d4:	71 81       	ldd	r23, Z+1	; 0x01
    27d6:	82 81       	ldd	r24, Z+2	; 0x02
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	0c f0       	brlt	.+2      	; 0x27ec <LCD_voidInit+0xea0>
    27ea:	43 c0       	rjmp	.+134    	; 0x2872 <LCD_voidInit+0xf26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ec:	fe 01       	movw	r30, r28
    27ee:	e7 57       	subi	r30, 0x77	; 119
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	8e 01       	movw	r16, r28
    280c:	0d 57       	subi	r16, 0x7D	; 125
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	f8 01       	movw	r30, r16
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	80 83       	st	Z, r24
    2822:	1f c0       	rjmp	.+62     	; 0x2862 <LCD_voidInit+0xf16>
    2824:	fe 01       	movw	r30, r28
    2826:	ef 57       	subi	r30, 0x7F	; 127
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	88 ec       	ldi	r24, 0xC8	; 200
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24
    2832:	fe 01       	movw	r30, r28
    2834:	ef 57       	subi	r30, 0x7F	; 127
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <LCD_voidInit+0xef0>
    2840:	fe 01       	movw	r30, r28
    2842:	ef 57       	subi	r30, 0x7F	; 127
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284a:	de 01       	movw	r26, r28
    284c:	ad 57       	subi	r26, 0x7D	; 125
    284e:	bf 4f       	sbci	r27, 0xFF	; 255
    2850:	fe 01       	movw	r30, r28
    2852:	ed 57       	subi	r30, 0x7D	; 125
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	91 81       	ldd	r25, Z+1	; 0x01
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	11 96       	adiw	r26, 0x01	; 1
    285e:	9c 93       	st	X, r25
    2860:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2862:	fe 01       	movw	r30, r28
    2864:	ed 57       	subi	r30, 0x7D	; 125
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	91 81       	ldd	r25, Z+1	; 0x01
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	d1 f6       	brne	.-76     	; 0x2824 <LCD_voidInit+0xed8>
    2870:	27 c0       	rjmp	.+78     	; 0x28c0 <LCD_voidInit+0xf74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2872:	8e 01       	movw	r16, r28
    2874:	0d 57       	subi	r16, 0x7D	; 125
    2876:	1f 4f       	sbci	r17, 0xFF	; 255
    2878:	fe 01       	movw	r30, r28
    287a:	eb 57       	subi	r30, 0x7B	; 123
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	f8 01       	movw	r30, r16
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
    2894:	de 01       	movw	r26, r28
    2896:	a1 58       	subi	r26, 0x81	; 129
    2898:	bf 4f       	sbci	r27, 0xFF	; 255
    289a:	fe 01       	movw	r30, r28
    289c:	ed 57       	subi	r30, 0x7D	; 125
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	8d 93       	st	X+, r24
    28a6:	9c 93       	st	X, r25
    28a8:	fe 01       	movw	r30, r28
    28aa:	e1 58       	subi	r30, 0x81	; 129
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <LCD_voidInit+0xf66>
    28b6:	fe 01       	movw	r30, r28
    28b8:	e1 58       	subi	r30, 0x81	; 129
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
		_delay_ms(35);
		//FIRST 4 BITS (display clear)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	62 e0       	ldi	r22, 0x02	; 2
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	63 e0       	ldi	r22, 0x03	; 3
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    28d4:	fe 01       	movw	r30, r28
    28d6:	e5 58       	subi	r30, 0x85	; 133
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e8       	ldi	r26, 0x80	; 128
    28e0:	bf e3       	ldi	r27, 0x3F	; 63
    28e2:	80 83       	st	Z, r24
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	a2 83       	std	Z+2, r26	; 0x02
    28e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ea:	8e 01       	movw	r16, r28
    28ec:	09 58       	subi	r16, 0x89	; 137
    28ee:	1f 4f       	sbci	r17, 0xFF	; 255
    28f0:	fe 01       	movw	r30, r28
    28f2:	e5 58       	subi	r30, 0x85	; 133
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	60 81       	ld	r22, Z
    28f8:	71 81       	ldd	r23, Z+1	; 0x01
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	4a ef       	ldi	r20, 0xFA	; 250
    2904:	54 e4       	ldi	r21, 0x44	; 68
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	f8 01       	movw	r30, r16
    2910:	80 83       	st	Z, r24
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	a2 83       	std	Z+2, r26	; 0x02
    2916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2918:	fe 01       	movw	r30, r28
    291a:	e9 58       	subi	r30, 0x89	; 137
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e8       	ldi	r20, 0x80	; 128
    292c:	5f e3       	ldi	r21, 0x3F	; 63
    292e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2932:	88 23       	and	r24, r24
    2934:	44 f4       	brge	.+16     	; 0x2946 <LCD_voidInit+0xffa>
		__ticks = 1;
    2936:	fe 01       	movw	r30, r28
    2938:	eb 58       	subi	r30, 0x8B	; 139
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	80 83       	st	Z, r24
    2944:	64 c0       	rjmp	.+200    	; 0x2a0e <LCD_voidInit+0x10c2>
	else if (__tmp > 65535)
    2946:	fe 01       	movw	r30, r28
    2948:	e9 58       	subi	r30, 0x89	; 137
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	57 e4       	ldi	r21, 0x47	; 71
    295c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2960:	18 16       	cp	r1, r24
    2962:	0c f0       	brlt	.+2      	; 0x2966 <LCD_voidInit+0x101a>
    2964:	43 c0       	rjmp	.+134    	; 0x29ec <LCD_voidInit+0x10a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	fe 01       	movw	r30, r28
    2968:	e5 58       	subi	r30, 0x85	; 133
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	8e 01       	movw	r16, r28
    2986:	0b 58       	subi	r16, 0x8B	; 139
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	f8 01       	movw	r30, r16
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
    299c:	1f c0       	rjmp	.+62     	; 0x29dc <LCD_voidInit+0x1090>
    299e:	fe 01       	movw	r30, r28
    29a0:	ed 58       	subi	r30, 0x8D	; 141
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	88 ec       	ldi	r24, 0xC8	; 200
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	fe 01       	movw	r30, r28
    29ae:	ed 58       	subi	r30, 0x8D	; 141
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <LCD_voidInit+0x106a>
    29ba:	fe 01       	movw	r30, r28
    29bc:	ed 58       	subi	r30, 0x8D	; 141
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c4:	de 01       	movw	r26, r28
    29c6:	ab 58       	subi	r26, 0x8B	; 139
    29c8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	eb 58       	subi	r30, 0x8B	; 139
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	91 81       	ldd	r25, Z+1	; 0x01
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	11 96       	adiw	r26, 0x01	; 1
    29d8:	9c 93       	st	X, r25
    29da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	fe 01       	movw	r30, r28
    29de:	eb 58       	subi	r30, 0x8B	; 139
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 81       	ld	r24, Z
    29e4:	91 81       	ldd	r25, Z+1	; 0x01
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	d1 f6       	brne	.-76     	; 0x299e <LCD_voidInit+0x1052>
    29ea:	27 c0       	rjmp	.+78     	; 0x2a3a <LCD_voidInit+0x10ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ec:	8e 01       	movw	r16, r28
    29ee:	0b 58       	subi	r16, 0x8B	; 139
    29f0:	1f 4f       	sbci	r17, 0xFF	; 255
    29f2:	fe 01       	movw	r30, r28
    29f4:	e9 58       	subi	r30, 0x89	; 137
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	60 81       	ld	r22, Z
    29fa:	71 81       	ldd	r23, Z+1	; 0x01
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	f8 01       	movw	r30, r16
    2a0a:	91 83       	std	Z+1, r25	; 0x01
    2a0c:	80 83       	st	Z, r24
    2a0e:	de 01       	movw	r26, r28
    2a10:	af 58       	subi	r26, 0x8F	; 143
    2a12:	bf 4f       	sbci	r27, 0xFF	; 255
    2a14:	fe 01       	movw	r30, r28
    2a16:	eb 58       	subi	r30, 0x8B	; 139
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 81       	ld	r24, Z
    2a1c:	91 81       	ldd	r25, Z+1	; 0x01
    2a1e:	8d 93       	st	X+, r24
    2a20:	9c 93       	st	X, r25
    2a22:	fe 01       	movw	r30, r28
    2a24:	ef 58       	subi	r30, 0x8F	; 143
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_voidInit+0x10e0>
    2a30:	fe 01       	movw	r30, r28
    2a32:	ef 58       	subi	r30, 0x8F	; 143
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	61 e0       	ldi	r22, 0x01	; 1
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	62 e0       	ldi	r22, 0x02	; 2
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	64 e0       	ldi	r22, 0x04	; 4
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	62 e0       	ldi	r22, 0x02	; 2
    2a66:	41 e0       	ldi	r20, 0x01	; 1
    2a68:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e3 59       	subi	r30, 0x93	; 147
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a0 e8       	ldi	r26, 0x80	; 128
    2a78:	bf e3       	ldi	r27, 0x3F	; 63
    2a7a:	80 83       	st	Z, r24
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	a2 83       	std	Z+2, r26	; 0x02
    2a80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a82:	8e 01       	movw	r16, r28
    2a84:	07 59       	subi	r16, 0x97	; 151
    2a86:	1f 4f       	sbci	r17, 0xFF	; 255
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e3 59       	subi	r30, 0x93	; 147
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a ef       	ldi	r20, 0xFA	; 250
    2a9c:	54 e4       	ldi	r21, 0x44	; 68
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	80 83       	st	Z, r24
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	a2 83       	std	Z+2, r26	; 0x02
    2aae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	e7 59       	subi	r30, 0x97	; 151
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	60 81       	ld	r22, Z
    2ab8:	71 81       	ldd	r23, Z+1	; 0x01
    2aba:	82 81       	ldd	r24, Z+2	; 0x02
    2abc:	93 81       	ldd	r25, Z+3	; 0x03
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	44 f4       	brge	.+16     	; 0x2ade <LCD_voidInit+0x1192>
		__ticks = 1;
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e9 59       	subi	r30, 0x99	; 153
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	80 83       	st	Z, r24
    2adc:	64 c0       	rjmp	.+200    	; 0x2ba6 <LCD_voidInit+0x125a>
	else if (__tmp > 65535)
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e7 59       	subi	r30, 0x97	; 151
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	3f ef       	ldi	r19, 0xFF	; 255
    2af0:	4f e7       	ldi	r20, 0x7F	; 127
    2af2:	57 e4       	ldi	r21, 0x47	; 71
    2af4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af8:	18 16       	cp	r1, r24
    2afa:	0c f0       	brlt	.+2      	; 0x2afe <LCD_voidInit+0x11b2>
    2afc:	43 c0       	rjmp	.+134    	; 0x2b84 <LCD_voidInit+0x1238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afe:	fe 01       	movw	r30, r28
    2b00:	e3 59       	subi	r30, 0x93	; 147
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e2       	ldi	r20, 0x20	; 32
    2b12:	51 e4       	ldi	r21, 0x41	; 65
    2b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	8e 01       	movw	r16, r28
    2b1e:	09 59       	subi	r16, 0x99	; 153
    2b20:	1f 4f       	sbci	r17, 0xFF	; 255
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	f8 01       	movw	r30, r16
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	1f c0       	rjmp	.+62     	; 0x2b74 <LCD_voidInit+0x1228>
    2b36:	fe 01       	movw	r30, r28
    2b38:	eb 59       	subi	r30, 0x9B	; 155
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	88 ec       	ldi	r24, 0xC8	; 200
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	80 83       	st	Z, r24
    2b44:	fe 01       	movw	r30, r28
    2b46:	eb 59       	subi	r30, 0x9B	; 155
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <LCD_voidInit+0x1202>
    2b52:	fe 01       	movw	r30, r28
    2b54:	eb 59       	subi	r30, 0x9B	; 155
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5c:	de 01       	movw	r26, r28
    2b5e:	a9 59       	subi	r26, 0x99	; 153
    2b60:	bf 4f       	sbci	r27, 0xFF	; 255
    2b62:	fe 01       	movw	r30, r28
    2b64:	e9 59       	subi	r30, 0x99	; 153
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	11 96       	adiw	r26, 0x01	; 1
    2b70:	9c 93       	st	X, r25
    2b72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b74:	fe 01       	movw	r30, r28
    2b76:	e9 59       	subi	r30, 0x99	; 153
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 81       	ld	r24, Z
    2b7c:	91 81       	ldd	r25, Z+1	; 0x01
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	d1 f6       	brne	.-76     	; 0x2b36 <LCD_voidInit+0x11ea>
    2b82:	27 c0       	rjmp	.+78     	; 0x2bd2 <LCD_voidInit+0x1286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b84:	8e 01       	movw	r16, r28
    2b86:	09 59       	subi	r16, 0x99	; 153
    2b88:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e7 59       	subi	r30, 0x97	; 151
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	60 81       	ld	r22, Z
    2b92:	71 81       	ldd	r23, Z+1	; 0x01
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	93 81       	ldd	r25, Z+3	; 0x03
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	f8 01       	movw	r30, r16
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	80 83       	st	Z, r24
    2ba6:	de 01       	movw	r26, r28
    2ba8:	ad 59       	subi	r26, 0x9D	; 157
    2baa:	bf 4f       	sbci	r27, 0xFF	; 255
    2bac:	fe 01       	movw	r30, r28
    2bae:	e9 59       	subi	r30, 0x99	; 153
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	8d 93       	st	X+, r24
    2bb8:	9c 93       	st	X, r25
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ed 59       	subi	r30, 0x9D	; 157
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <LCD_voidInit+0x1278>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ed 59       	subi	r30, 0x9D	; 157
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
		_delay_ms(1);

		//SECOND  4 BITS (display clear)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	62 e0       	ldi	r22, 0x02	; 2
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	63 e0       	ldi	r22, 0x03	; 3
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2be6:	fe 01       	movw	r30, r28
    2be8:	e1 5a       	subi	r30, 0xA1	; 161
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e8       	ldi	r26, 0x80	; 128
    2bf2:	bf e3       	ldi	r27, 0x3F	; 63
    2bf4:	80 83       	st	Z, r24
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	a2 83       	std	Z+2, r26	; 0x02
    2bfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfc:	8e 01       	movw	r16, r28
    2bfe:	05 5a       	subi	r16, 0xA5	; 165
    2c00:	1f 4f       	sbci	r17, 0xFF	; 255
    2c02:	fe 01       	movw	r30, r28
    2c04:	e1 5a       	subi	r30, 0xA1	; 161
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a ef       	ldi	r20, 0xFA	; 250
    2c16:	54 e4       	ldi	r21, 0x44	; 68
    2c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	f8 01       	movw	r30, r16
    2c22:	80 83       	st	Z, r24
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	a2 83       	std	Z+2, r26	; 0x02
    2c28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e5 5a       	subi	r30, 0xA5	; 165
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	60 81       	ld	r22, Z
    2c32:	71 81       	ldd	r23, Z+1	; 0x01
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e8       	ldi	r20, 0x80	; 128
    2c3e:	5f e3       	ldi	r21, 0x3F	; 63
    2c40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c44:	88 23       	and	r24, r24
    2c46:	44 f4       	brge	.+16     	; 0x2c58 <LCD_voidInit+0x130c>
		__ticks = 1;
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e7 5a       	subi	r30, 0xA7	; 167
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	80 83       	st	Z, r24
    2c56:	64 c0       	rjmp	.+200    	; 0x2d20 <LCD_voidInit+0x13d4>
	else if (__tmp > 65535)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e5 5a       	subi	r30, 0xA5	; 165
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	57 e4       	ldi	r21, 0x47	; 71
    2c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	0c f0       	brlt	.+2      	; 0x2c78 <LCD_voidInit+0x132c>
    2c76:	43 c0       	rjmp	.+134    	; 0x2cfe <LCD_voidInit+0x13b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e1 5a       	subi	r30, 0xA1	; 161
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8e 01       	movw	r16, r28
    2c98:	07 5a       	subi	r16, 0xA7	; 167
    2c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	f8 01       	movw	r30, r16
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	80 83       	st	Z, r24
    2cae:	1f c0       	rjmp	.+62     	; 0x2cee <LCD_voidInit+0x13a2>
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e9 5a       	subi	r30, 0xA9	; 169
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	88 ec       	ldi	r24, 0xC8	; 200
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e9 5a       	subi	r30, 0xA9	; 169
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_voidInit+0x137c>
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e9 5a       	subi	r30, 0xA9	; 169
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	de 01       	movw	r26, r28
    2cd8:	a7 5a       	subi	r26, 0xA7	; 167
    2cda:	bf 4f       	sbci	r27, 0xFF	; 255
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e7 5a       	subi	r30, 0xA7	; 167
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	9c 93       	st	X, r25
    2cec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e7 5a       	subi	r30, 0xA7	; 167
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	d1 f6       	brne	.-76     	; 0x2cb0 <LCD_voidInit+0x1364>
    2cfc:	27 c0       	rjmp	.+78     	; 0x2d4c <LCD_voidInit+0x1400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	8e 01       	movw	r16, r28
    2d00:	07 5a       	subi	r16, 0xA7	; 167
    2d02:	1f 4f       	sbci	r17, 0xFF	; 255
    2d04:	fe 01       	movw	r30, r28
    2d06:	e5 5a       	subi	r30, 0xA5	; 165
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
    2d20:	de 01       	movw	r26, r28
    2d22:	ab 5a       	subi	r26, 0xAB	; 171
    2d24:	bf 4f       	sbci	r27, 0xFF	; 255
    2d26:	fe 01       	movw	r30, r28
    2d28:	e7 5a       	subi	r30, 0xA7	; 167
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	8d 93       	st	X+, r24
    2d32:	9c 93       	st	X, r25
    2d34:	fe 01       	movw	r30, r28
    2d36:	eb 5a       	subi	r30, 0xAB	; 171
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_voidInit+0x13f2>
    2d42:	fe 01       	movw	r30, r28
    2d44:	eb 5a       	subi	r30, 0xAB	; 171
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	80 83       	st	Z, r24
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_HIGH);
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	61 e0       	ldi	r22, 0x01	; 1
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	62 e0       	ldi	r22, 0x02	; 2
    2d64:	40 e0       	ldi	r20, 0x00	; 0
    2d66:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	64 e0       	ldi	r22, 0x04	; 4
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	62 e0       	ldi	r22, 0x02	; 2
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ef 5a       	subi	r30, 0xAF	; 175
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	ac e0       	ldi	r26, 0x0C	; 12
    2d8a:	b2 e4       	ldi	r27, 0x42	; 66
    2d8c:	80 83       	st	Z, r24
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	a2 83       	std	Z+2, r26	; 0x02
    2d92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d94:	8e 01       	movw	r16, r28
    2d96:	03 5b       	subi	r16, 0xB3	; 179
    2d98:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ef 5a       	subi	r30, 0xAF	; 175
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	60 81       	ld	r22, Z
    2da2:	71 81       	ldd	r23, Z+1	; 0x01
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a ef       	ldi	r20, 0xFA	; 250
    2dae:	54 e4       	ldi	r21, 0x44	; 68
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	f8 01       	movw	r30, r16
    2dba:	80 83       	st	Z, r24
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	a2 83       	std	Z+2, r26	; 0x02
    2dc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e3 5b       	subi	r30, 0xB3	; 179
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ddc:	88 23       	and	r24, r24
    2dde:	44 f4       	brge	.+16     	; 0x2df0 <LCD_voidInit+0x14a4>
		__ticks = 1;
    2de0:	fe 01       	movw	r30, r28
    2de2:	e5 5b       	subi	r30, 0xB5	; 181
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	80 83       	st	Z, r24
    2dee:	64 c0       	rjmp	.+200    	; 0x2eb8 <LCD_voidInit+0x156c>
	else if (__tmp > 65535)
    2df0:	fe 01       	movw	r30, r28
    2df2:	e3 5b       	subi	r30, 0xB3	; 179
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	3f ef       	ldi	r19, 0xFF	; 255
    2e02:	4f e7       	ldi	r20, 0x7F	; 127
    2e04:	57 e4       	ldi	r21, 0x47	; 71
    2e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	0c f0       	brlt	.+2      	; 0x2e10 <LCD_voidInit+0x14c4>
    2e0e:	43 c0       	rjmp	.+134    	; 0x2e96 <LCD_voidInit+0x154a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e10:	fe 01       	movw	r30, r28
    2e12:	ef 5a       	subi	r30, 0xAF	; 175
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e2       	ldi	r20, 0x20	; 32
    2e24:	51 e4       	ldi	r21, 0x41	; 65
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	8e 01       	movw	r16, r28
    2e30:	05 5b       	subi	r16, 0xB5	; 181
    2e32:	1f 4f       	sbci	r17, 0xFF	; 255
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	1f c0       	rjmp	.+62     	; 0x2e86 <LCD_voidInit+0x153a>
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e7 5b       	subi	r30, 0xB7	; 183
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	88 ec       	ldi	r24, 0xC8	; 200
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	80 83       	st	Z, r24
    2e56:	fe 01       	movw	r30, r28
    2e58:	e7 5b       	subi	r30, 0xB7	; 183
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <LCD_voidInit+0x1514>
    2e64:	fe 01       	movw	r30, r28
    2e66:	e7 5b       	subi	r30, 0xB7	; 183
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6e:	de 01       	movw	r26, r28
    2e70:	a5 5b       	subi	r26, 0xB5	; 181
    2e72:	bf 4f       	sbci	r27, 0xFF	; 255
    2e74:	fe 01       	movw	r30, r28
    2e76:	e5 5b       	subi	r30, 0xB5	; 181
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	80 81       	ld	r24, Z
    2e7c:	91 81       	ldd	r25, Z+1	; 0x01
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	11 96       	adiw	r26, 0x01	; 1
    2e82:	9c 93       	st	X, r25
    2e84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e86:	fe 01       	movw	r30, r28
    2e88:	e5 5b       	subi	r30, 0xB5	; 181
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	d1 f6       	brne	.-76     	; 0x2e48 <LCD_voidInit+0x14fc>
    2e94:	27 c0       	rjmp	.+78     	; 0x2ee4 <LCD_voidInit+0x1598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e96:	8e 01       	movw	r16, r28
    2e98:	05 5b       	subi	r16, 0xB5	; 181
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e3 5b       	subi	r30, 0xB3	; 179
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
    2eb8:	de 01       	movw	r26, r28
    2eba:	a9 5b       	subi	r26, 0xB9	; 185
    2ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e5 5b       	subi	r30, 0xB5	; 181
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	8d 93       	st	X+, r24
    2eca:	9c 93       	st	X, r25
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e9 5b       	subi	r30, 0xB9	; 185
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <LCD_voidInit+0x158a>
    2eda:	fe 01       	movw	r30, r28
    2edc:	e9 5b       	subi	r30, 0xB9	; 185
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
		_delay_ms(35);

		//FIRST 4 BITS (entry mode set)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	62 e0       	ldi	r22, 0x02	; 2
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	63 e0       	ldi	r22, 0x03	; 3
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    2ef8:	fe 01       	movw	r30, r28
    2efa:	ed 5b       	subi	r30, 0xBD	; 189
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	a0 e8       	ldi	r26, 0x80	; 128
    2f04:	bf e3       	ldi	r27, 0x3F	; 63
    2f06:	80 83       	st	Z, r24
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	a2 83       	std	Z+2, r26	; 0x02
    2f0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0e:	8e 01       	movw	r16, r28
    2f10:	01 5c       	subi	r16, 0xC1	; 193
    2f12:	1f 4f       	sbci	r17, 0xFF	; 255
    2f14:	fe 01       	movw	r30, r28
    2f16:	ed 5b       	subi	r30, 0xBD	; 189
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	60 81       	ld	r22, Z
    2f1c:	71 81       	ldd	r23, Z+1	; 0x01
    2f1e:	82 81       	ldd	r24, Z+2	; 0x02
    2f20:	93 81       	ldd	r25, Z+3	; 0x03
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a ef       	ldi	r20, 0xFA	; 250
    2f28:	54 e4       	ldi	r21, 0x44	; 68
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	f8 01       	movw	r30, r16
    2f34:	80 83       	st	Z, r24
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	a2 83       	std	Z+2, r26	; 0x02
    2f3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	ff 96       	adiw	r30, 0x3f	; 63
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <LCD_voidInit+0x1616>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9e af       	std	Y+62, r25	; 0x3e
    2f5e:	8d af       	std	Y+61, r24	; 0x3d
    2f60:	46 c0       	rjmp	.+140    	; 0x2fee <LCD_voidInit+0x16a2>
	else if (__tmp > 65535)
    2f62:	fe 01       	movw	r30, r28
    2f64:	ff 96       	adiw	r30, 0x3f	; 63
    2f66:	60 81       	ld	r22, Z
    2f68:	71 81       	ldd	r23, Z+1	; 0x01
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	93 81       	ldd	r25, Z+3	; 0x03
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	3f ef       	ldi	r19, 0xFF	; 255
    2f72:	4f e7       	ldi	r20, 0x7F	; 127
    2f74:	57 e4       	ldi	r21, 0x47	; 71
    2f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f7a:	18 16       	cp	r1, r24
    2f7c:	64 f5       	brge	.+88     	; 0x2fd6 <LCD_voidInit+0x168a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7e:	fe 01       	movw	r30, r28
    2f80:	ed 5b       	subi	r30, 0xBD	; 189
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9e af       	std	Y+62, r25	; 0x3e
    2faa:	8d af       	std	Y+61, r24	; 0x3d
    2fac:	0f c0       	rjmp	.+30     	; 0x2fcc <LCD_voidInit+0x1680>
    2fae:	88 ec       	ldi	r24, 0xC8	; 200
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9c af       	std	Y+60, r25	; 0x3c
    2fb4:	8b af       	std	Y+59, r24	; 0x3b
    2fb6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fb8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <LCD_voidInit+0x166e>
    2fbe:	9c af       	std	Y+60, r25	; 0x3c
    2fc0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	9e af       	std	Y+62, r25	; 0x3e
    2fca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fce:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	69 f7       	brne	.-38     	; 0x2fae <LCD_voidInit+0x1662>
    2fd4:	16 c0       	rjmp	.+44     	; 0x3002 <LCD_voidInit+0x16b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ff 96       	adiw	r30, 0x3f	; 63
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9e af       	std	Y+62, r25	; 0x3e
    2fec:	8d af       	std	Y+61, r24	; 0x3d
    2fee:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ff0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ff2:	9a af       	std	Y+58, r25	; 0x3a
    2ff4:	89 af       	std	Y+57, r24	; 0x39
    2ff6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ff8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <LCD_voidInit+0x16ae>
    2ffe:	9a af       	std	Y+58, r25	; 0x3a
    3000:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_LOW);
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	61 e0       	ldi	r22, 0x01	; 1
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_LOW);
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	62 e0       	ldi	r22, 0x02	; 2
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	64 e0       	ldi	r22, 0x04	; 4
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	62 e0       	ldi	r22, 0x02	; 2
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e8       	ldi	r26, 0x80	; 128
    303a:	bf e3       	ldi	r27, 0x3F	; 63
    303c:	8d ab       	std	Y+53, r24	; 0x35
    303e:	9e ab       	std	Y+54, r25	; 0x36
    3040:	af ab       	std	Y+55, r26	; 0x37
    3042:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	6d a9       	ldd	r22, Y+53	; 0x35
    3046:	7e a9       	ldd	r23, Y+54	; 0x36
    3048:	8f a9       	ldd	r24, Y+55	; 0x37
    304a:	98 ad       	ldd	r25, Y+56	; 0x38
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a ef       	ldi	r20, 0xFA	; 250
    3052:	54 e4       	ldi	r21, 0x44	; 68
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	89 ab       	std	Y+49, r24	; 0x31
    305e:	9a ab       	std	Y+50, r25	; 0x32
    3060:	ab ab       	std	Y+51, r26	; 0x33
    3062:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3064:	69 a9       	ldd	r22, Y+49	; 0x31
    3066:	7a a9       	ldd	r23, Y+50	; 0x32
    3068:	8b a9       	ldd	r24, Y+51	; 0x33
    306a:	9c a9       	ldd	r25, Y+52	; 0x34
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e8       	ldi	r20, 0x80	; 128
    3072:	5f e3       	ldi	r21, 0x3F	; 63
    3074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3078:	88 23       	and	r24, r24
    307a:	2c f4       	brge	.+10     	; 0x3086 <LCD_voidInit+0x173a>
		__ticks = 1;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	98 ab       	std	Y+48, r25	; 0x30
    3082:	8f a7       	std	Y+47, r24	; 0x2f
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <LCD_voidInit+0x17b8>
	else if (__tmp > 65535)
    3086:	69 a9       	ldd	r22, Y+49	; 0x31
    3088:	7a a9       	ldd	r23, Y+50	; 0x32
    308a:	8b a9       	ldd	r24, Y+51	; 0x33
    308c:	9c a9       	ldd	r25, Y+52	; 0x34
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	3f ef       	ldi	r19, 0xFF	; 255
    3092:	4f e7       	ldi	r20, 0x7F	; 127
    3094:	57 e4       	ldi	r21, 0x47	; 71
    3096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309a:	18 16       	cp	r1, r24
    309c:	4c f5       	brge	.+82     	; 0x30f0 <LCD_voidInit+0x17a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	6d a9       	ldd	r22, Y+53	; 0x35
    30a0:	7e a9       	ldd	r23, Y+54	; 0x36
    30a2:	8f a9       	ldd	r24, Y+55	; 0x37
    30a4:	98 ad       	ldd	r25, Y+56	; 0x38
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e2       	ldi	r20, 0x20	; 32
    30ac:	51 e4       	ldi	r21, 0x41	; 65
    30ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	98 ab       	std	Y+48, r25	; 0x30
    30c4:	8f a7       	std	Y+47, r24	; 0x2f
    30c6:	0f c0       	rjmp	.+30     	; 0x30e6 <LCD_voidInit+0x179a>
    30c8:	88 ec       	ldi	r24, 0xC8	; 200
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	9e a7       	std	Y+46, r25	; 0x2e
    30ce:	8d a7       	std	Y+45, r24	; 0x2d
    30d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <LCD_voidInit+0x1788>
    30d8:	9e a7       	std	Y+46, r25	; 0x2e
    30da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    30de:	98 a9       	ldd	r25, Y+48	; 0x30
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	98 ab       	std	Y+48, r25	; 0x30
    30e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e8:	98 a9       	ldd	r25, Y+48	; 0x30
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <LCD_voidInit+0x177c>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <LCD_voidInit+0x17cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	69 a9       	ldd	r22, Y+49	; 0x31
    30f2:	7a a9       	ldd	r23, Y+50	; 0x32
    30f4:	8b a9       	ldd	r24, Y+51	; 0x33
    30f6:	9c a9       	ldd	r25, Y+52	; 0x34
    30f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	98 ab       	std	Y+48, r25	; 0x30
    3102:	8f a7       	std	Y+47, r24	; 0x2f
    3104:	8f a5       	ldd	r24, Y+47	; 0x2f
    3106:	98 a9       	ldd	r25, Y+48	; 0x30
    3108:	9c a7       	std	Y+44, r25	; 0x2c
    310a:	8b a7       	std	Y+43, r24	; 0x2b
    310c:	8b a5       	ldd	r24, Y+43	; 0x2b
    310e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <LCD_voidInit+0x17c4>
    3114:	9c a7       	std	Y+44, r25	; 0x2c
    3116:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		//SECOND 4 BITS (entry mode set)
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	62 e0       	ldi	r22, 0x02	; 2
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN ,DIO_u8_LOW);
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	63 e0       	ldi	r22, 0x03	; 3
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a0 e8       	ldi	r26, 0x80	; 128
    3132:	bf e3       	ldi	r27, 0x3F	; 63
    3134:	8f a3       	std	Y+39, r24	; 0x27
    3136:	98 a7       	std	Y+40, r25	; 0x28
    3138:	a9 a7       	std	Y+41, r26	; 0x29
    313a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	6f a1       	ldd	r22, Y+39	; 0x27
    313e:	78 a5       	ldd	r23, Y+40	; 0x28
    3140:	89 a5       	ldd	r24, Y+41	; 0x29
    3142:	9a a5       	ldd	r25, Y+42	; 0x2a
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	4a ef       	ldi	r20, 0xFA	; 250
    314a:	54 e4       	ldi	r21, 0x44	; 68
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	8b a3       	std	Y+35, r24	; 0x23
    3156:	9c a3       	std	Y+36, r25	; 0x24
    3158:	ad a3       	std	Y+37, r26	; 0x25
    315a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    315c:	6b a1       	ldd	r22, Y+35	; 0x23
    315e:	7c a1       	ldd	r23, Y+36	; 0x24
    3160:	8d a1       	ldd	r24, Y+37	; 0x25
    3162:	9e a1       	ldd	r25, Y+38	; 0x26
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	2c f4       	brge	.+10     	; 0x317e <LCD_voidInit+0x1832>
		__ticks = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	9a a3       	std	Y+34, r25	; 0x22
    317a:	89 a3       	std	Y+33, r24	; 0x21
    317c:	3f c0       	rjmp	.+126    	; 0x31fc <LCD_voidInit+0x18b0>
	else if (__tmp > 65535)
    317e:	6b a1       	ldd	r22, Y+35	; 0x23
    3180:	7c a1       	ldd	r23, Y+36	; 0x24
    3182:	8d a1       	ldd	r24, Y+37	; 0x25
    3184:	9e a1       	ldd	r25, Y+38	; 0x26
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	4c f5       	brge	.+82     	; 0x31e8 <LCD_voidInit+0x189c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	6f a1       	ldd	r22, Y+39	; 0x27
    3198:	78 a5       	ldd	r23, Y+40	; 0x28
    319a:	89 a5       	ldd	r24, Y+41	; 0x29
    319c:	9a a5       	ldd	r25, Y+42	; 0x2a
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e2       	ldi	r20, 0x20	; 32
    31a4:	51 e4       	ldi	r21, 0x41	; 65
    31a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9a a3       	std	Y+34, r25	; 0x22
    31bc:	89 a3       	std	Y+33, r24	; 0x21
    31be:	0f c0       	rjmp	.+30     	; 0x31de <LCD_voidInit+0x1892>
    31c0:	88 ec       	ldi	r24, 0xC8	; 200
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	98 a3       	std	Y+32, r25	; 0x20
    31c6:	8f 8f       	std	Y+31, r24	; 0x1f
    31c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ca:	98 a1       	ldd	r25, Y+32	; 0x20
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <LCD_voidInit+0x1880>
    31d0:	98 a3       	std	Y+32, r25	; 0x20
    31d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d4:	89 a1       	ldd	r24, Y+33	; 0x21
    31d6:	9a a1       	ldd	r25, Y+34	; 0x22
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	9a a3       	std	Y+34, r25	; 0x22
    31dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31de:	89 a1       	ldd	r24, Y+33	; 0x21
    31e0:	9a a1       	ldd	r25, Y+34	; 0x22
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <LCD_voidInit+0x1874>
    31e6:	14 c0       	rjmp	.+40     	; 0x3210 <LCD_voidInit+0x18c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e8:	6b a1       	ldd	r22, Y+35	; 0x23
    31ea:	7c a1       	ldd	r23, Y+36	; 0x24
    31ec:	8d a1       	ldd	r24, Y+37	; 0x25
    31ee:	9e a1       	ldd	r25, Y+38	; 0x26
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9a a3       	std	Y+34, r25	; 0x22
    31fa:	89 a3       	std	Y+33, r24	; 0x21
    31fc:	89 a1       	ldd	r24, Y+33	; 0x21
    31fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3200:	9e 8f       	std	Y+30, r25	; 0x1e
    3202:	8d 8f       	std	Y+29, r24	; 0x1d
    3204:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3206:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_voidInit+0x18bc>
    320c:	9e 8f       	std	Y+30, r25	; 0x1e
    320e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,DIO_u8_LOW);
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	60 e0       	ldi	r22, 0x00	; 0
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,DIO_u8_HIGH);
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	61 e0       	ldi	r22, 0x01	; 1
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,DIO_u8_HIGH);
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	62 e0       	ldi	r22, 0x02	; 2
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,DIO_u8_LOW);
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	64 e0       	ldi	r22, 0x04	; 4
    3232:	40 e0       	ldi	r20, 0x00	; 0
    3234:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_HIGH);
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	62 e0       	ldi	r22, 0x02	; 2
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a0 e0       	ldi	r26, 0x00	; 0
    3248:	b0 e4       	ldi	r27, 0x40	; 64
    324a:	89 8f       	std	Y+25, r24	; 0x19
    324c:	9a 8f       	std	Y+26, r25	; 0x1a
    324e:	ab 8f       	std	Y+27, r26	; 0x1b
    3250:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3252:	69 8d       	ldd	r22, Y+25	; 0x19
    3254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a ef       	ldi	r20, 0xFA	; 250
    3260:	54 e4       	ldi	r21, 0x44	; 68
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	8d 8b       	std	Y+21, r24	; 0x15
    326c:	9e 8b       	std	Y+22, r25	; 0x16
    326e:	af 8b       	std	Y+23, r26	; 0x17
    3270:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3272:	6d 89       	ldd	r22, Y+21	; 0x15
    3274:	7e 89       	ldd	r23, Y+22	; 0x16
    3276:	8f 89       	ldd	r24, Y+23	; 0x17
    3278:	98 8d       	ldd	r25, Y+24	; 0x18
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <LCD_voidInit+0x1948>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	3f c0       	rjmp	.+126    	; 0x3312 <LCD_voidInit+0x19c6>
	else if (__tmp > 65535)
    3294:	6d 89       	ldd	r22, Y+21	; 0x15
    3296:	7e 89       	ldd	r23, Y+22	; 0x16
    3298:	8f 89       	ldd	r24, Y+23	; 0x17
    329a:	98 8d       	ldd	r25, Y+24	; 0x18
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	4c f5       	brge	.+82     	; 0x32fe <LCD_voidInit+0x19b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ac:	69 8d       	ldd	r22, Y+25	; 0x19
    32ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9c 8b       	std	Y+20, r25	; 0x14
    32d2:	8b 8b       	std	Y+19, r24	; 0x13
    32d4:	0f c0       	rjmp	.+30     	; 0x32f4 <LCD_voidInit+0x19a8>
    32d6:	88 ec       	ldi	r24, 0xC8	; 200
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	9a 8b       	std	Y+18, r25	; 0x12
    32dc:	89 8b       	std	Y+17, r24	; 0x11
    32de:	89 89       	ldd	r24, Y+17	; 0x11
    32e0:	9a 89       	ldd	r25, Y+18	; 0x12
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <LCD_voidInit+0x1996>
    32e6:	9a 8b       	std	Y+18, r25	; 0x12
    32e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ea:	8b 89       	ldd	r24, Y+19	; 0x13
    32ec:	9c 89       	ldd	r25, Y+20	; 0x14
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f4:	8b 89       	ldd	r24, Y+19	; 0x13
    32f6:	9c 89       	ldd	r25, Y+20	; 0x14
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <LCD_voidInit+0x198a>
    32fc:	14 c0       	rjmp	.+40     	; 0x3326 <LCD_voidInit+0x19da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3300:	7e 89       	ldd	r23, Y+22	; 0x16
    3302:	8f 89       	ldd	r24, Y+23	; 0x17
    3304:	98 8d       	ldd	r25, Y+24	; 0x18
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9c 8b       	std	Y+20, r25	; 0x14
    3310:	8b 8b       	std	Y+19, r24	; 0x13
    3312:	8b 89       	ldd	r24, Y+19	; 0x13
    3314:	9c 89       	ldd	r25, Y+20	; 0x14
    3316:	98 8b       	std	Y+16, r25	; 0x10
    3318:	8f 87       	std	Y+15, r24	; 0x0f
    331a:	8f 85       	ldd	r24, Y+15	; 0x0f
    331c:	98 89       	ldd	r25, Y+16	; 0x10
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <LCD_voidInit+0x19d2>
    3322:	98 8b       	std	Y+16, r25	; 0x10
    3324:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN ,DIO_u8_LOW);
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	62 e0       	ldi	r22, 0x02	; 2
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e8       	ldi	r26, 0x80	; 128
    3336:	bf e3       	ldi	r27, 0x3F	; 63
    3338:	8b 87       	std	Y+11, r24	; 0x0b
    333a:	9c 87       	std	Y+12, r25	; 0x0c
    333c:	ad 87       	std	Y+13, r26	; 0x0d
    333e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	6b 85       	ldd	r22, Y+11	; 0x0b
    3342:	7c 85       	ldd	r23, Y+12	; 0x0c
    3344:	8d 85       	ldd	r24, Y+13	; 0x0d
    3346:	9e 85       	ldd	r25, Y+14	; 0x0e
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a ef       	ldi	r20, 0xFA	; 250
    334e:	54 e4       	ldi	r21, 0x44	; 68
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	8f 83       	std	Y+7, r24	; 0x07
    335a:	98 87       	std	Y+8, r25	; 0x08
    335c:	a9 87       	std	Y+9, r26	; 0x09
    335e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <LCD_voidInit+0x1a36>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <LCD_voidInit+0x1ab4>
	else if (__tmp > 65535)
    3382:	6f 81       	ldd	r22, Y+7	; 0x07
    3384:	78 85       	ldd	r23, Y+8	; 0x08
    3386:	89 85       	ldd	r24, Y+9	; 0x09
    3388:	9a 85       	ldd	r25, Y+10	; 0x0a
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <LCD_voidInit+0x1aa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	6b 85       	ldd	r22, Y+11	; 0x0b
    339c:	7c 85       	ldd	r23, Y+12	; 0x0c
    339e:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <LCD_voidInit+0x1a96>
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 83       	std	Y+4, r25	; 0x04
    33ca:	8b 83       	std	Y+3, r24	; 0x03
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	9c 81       	ldd	r25, Y+4	; 0x04
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <LCD_voidInit+0x1a84>
    33d4:	9c 83       	std	Y+4, r25	; 0x04
    33d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8d 81       	ldd	r24, Y+5	; 0x05
    33da:	9e 81       	ldd	r25, Y+6	; 0x06
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <LCD_voidInit+0x1a78>
    33ea:	14 c0       	rjmp	.+40     	; 0x3414 <LCD_voidInit+0x1ac8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	6f 81       	ldd	r22, Y+7	; 0x07
    33ee:	78 85       	ldd	r23, Y+8	; 0x08
    33f0:	89 85       	ldd	r24, Y+9	; 0x09
    33f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9e 83       	std	Y+6, r25	; 0x06
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	9a 83       	std	Y+2, r25	; 0x02
    3406:	89 83       	std	Y+1, r24	; 0x01
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	9a 81       	ldd	r25, Y+2	; 0x02
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <LCD_voidInit+0x1ac0>
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    3414:	c6 5f       	subi	r28, 0xF6	; 246
    3416:	de 4f       	sbci	r29, 0xFE	; 254
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	1f 91       	pop	r17
    3428:	0f 91       	pop	r16
    342a:	08 95       	ret

0000342c <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8  Copy_u8Cmnd)
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	e9 97       	sbiw	r28, 0x39	; 57
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	62 e0       	ldi	r22, 0x02	; 2
    3446:	40 e0       	ldi	r20, 0x00	; 0
    3448:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN,DIO_u8_LOW);
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	63 e0       	ldi	r22, 0x03	; 3
    3450:	40 e0       	ldi	r20, 0x00	; 0
    3452:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,GET_BIT(Copy_u8Cmnd,4));
    3456:	89 ad       	ldd	r24, Y+57	; 0x39
    3458:	82 95       	swap	r24
    345a:	8f 70       	andi	r24, 0x0F	; 15
    345c:	98 2f       	mov	r25, r24
    345e:	91 70       	andi	r25, 0x01	; 1
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	49 2f       	mov	r20, r25
    3466:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,GET_BIT(Copy_u8Cmnd,5));
    346a:	89 ad       	ldd	r24, Y+57	; 0x39
    346c:	82 95       	swap	r24
    346e:	86 95       	lsr	r24
    3470:	87 70       	andi	r24, 0x07	; 7
    3472:	98 2f       	mov	r25, r24
    3474:	91 70       	andi	r25, 0x01	; 1
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	61 e0       	ldi	r22, 0x01	; 1
    347a:	49 2f       	mov	r20, r25
    347c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,GET_BIT(Copy_u8Cmnd,6));
    3480:	89 ad       	ldd	r24, Y+57	; 0x39
    3482:	82 95       	swap	r24
    3484:	86 95       	lsr	r24
    3486:	86 95       	lsr	r24
    3488:	83 70       	andi	r24, 0x03	; 3
    348a:	98 2f       	mov	r25, r24
    348c:	91 70       	andi	r25, 0x01	; 1
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	62 e0       	ldi	r22, 0x02	; 2
    3492:	49 2f       	mov	r20, r25
    3494:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,GET_BIT(Copy_u8Cmnd,7));
    3498:	89 ad       	ldd	r24, Y+57	; 0x39
    349a:	98 2f       	mov	r25, r24
    349c:	99 1f       	adc	r25, r25
    349e:	99 27       	eor	r25, r25
    34a0:	99 1f       	adc	r25, r25
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	64 e0       	ldi	r22, 0x04	; 4
    34a6:	49 2f       	mov	r20, r25
    34a8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_HIGH);
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	62 e0       	ldi	r22, 0x02	; 2
    34b0:	41 e0       	ldi	r20, 0x01	; 1
    34b2:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	a0 e0       	ldi	r26, 0x00	; 0
    34bc:	b0 e4       	ldi	r27, 0x40	; 64
    34be:	8d ab       	std	Y+53, r24	; 0x35
    34c0:	9e ab       	std	Y+54, r25	; 0x36
    34c2:	af ab       	std	Y+55, r26	; 0x37
    34c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c6:	6d a9       	ldd	r22, Y+53	; 0x35
    34c8:	7e a9       	ldd	r23, Y+54	; 0x36
    34ca:	8f a9       	ldd	r24, Y+55	; 0x37
    34cc:	98 ad       	ldd	r25, Y+56	; 0x38
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	4a ef       	ldi	r20, 0xFA	; 250
    34d4:	54 e4       	ldi	r21, 0x44	; 68
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	89 ab       	std	Y+49, r24	; 0x31
    34e0:	9a ab       	std	Y+50, r25	; 0x32
    34e2:	ab ab       	std	Y+51, r26	; 0x33
    34e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34e6:	69 a9       	ldd	r22, Y+49	; 0x31
    34e8:	7a a9       	ldd	r23, Y+50	; 0x32
    34ea:	8b a9       	ldd	r24, Y+51	; 0x33
    34ec:	9c a9       	ldd	r25, Y+52	; 0x34
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e8       	ldi	r20, 0x80	; 128
    34f4:	5f e3       	ldi	r21, 0x3F	; 63
    34f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34fa:	88 23       	and	r24, r24
    34fc:	2c f4       	brge	.+10     	; 0x3508 <LCD_voidSendCmnd+0xdc>
		__ticks = 1;
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	98 ab       	std	Y+48, r25	; 0x30
    3504:	8f a7       	std	Y+47, r24	; 0x2f
    3506:	3f c0       	rjmp	.+126    	; 0x3586 <LCD_voidSendCmnd+0x15a>
	else if (__tmp > 65535)
    3508:	69 a9       	ldd	r22, Y+49	; 0x31
    350a:	7a a9       	ldd	r23, Y+50	; 0x32
    350c:	8b a9       	ldd	r24, Y+51	; 0x33
    350e:	9c a9       	ldd	r25, Y+52	; 0x34
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	3f ef       	ldi	r19, 0xFF	; 255
    3514:	4f e7       	ldi	r20, 0x7F	; 127
    3516:	57 e4       	ldi	r21, 0x47	; 71
    3518:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    351c:	18 16       	cp	r1, r24
    351e:	4c f5       	brge	.+82     	; 0x3572 <LCD_voidSendCmnd+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3520:	6d a9       	ldd	r22, Y+53	; 0x35
    3522:	7e a9       	ldd	r23, Y+54	; 0x36
    3524:	8f a9       	ldd	r24, Y+55	; 0x37
    3526:	98 ad       	ldd	r25, Y+56	; 0x38
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e2       	ldi	r20, 0x20	; 32
    352e:	51 e4       	ldi	r21, 0x41	; 65
    3530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	bc 01       	movw	r22, r24
    353a:	cd 01       	movw	r24, r26
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	98 ab       	std	Y+48, r25	; 0x30
    3546:	8f a7       	std	Y+47, r24	; 0x2f
    3548:	0f c0       	rjmp	.+30     	; 0x3568 <LCD_voidSendCmnd+0x13c>
    354a:	88 ec       	ldi	r24, 0xC8	; 200
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	9e a7       	std	Y+46, r25	; 0x2e
    3550:	8d a7       	std	Y+45, r24	; 0x2d
    3552:	8d a5       	ldd	r24, Y+45	; 0x2d
    3554:	9e a5       	ldd	r25, Y+46	; 0x2e
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	f1 f7       	brne	.-4      	; 0x3556 <LCD_voidSendCmnd+0x12a>
    355a:	9e a7       	std	Y+46, r25	; 0x2e
    355c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3560:	98 a9       	ldd	r25, Y+48	; 0x30
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	98 ab       	std	Y+48, r25	; 0x30
    3566:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3568:	8f a5       	ldd	r24, Y+47	; 0x2f
    356a:	98 a9       	ldd	r25, Y+48	; 0x30
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	69 f7       	brne	.-38     	; 0x354a <LCD_voidSendCmnd+0x11e>
    3570:	14 c0       	rjmp	.+40     	; 0x359a <LCD_voidSendCmnd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3572:	69 a9       	ldd	r22, Y+49	; 0x31
    3574:	7a a9       	ldd	r23, Y+50	; 0x32
    3576:	8b a9       	ldd	r24, Y+51	; 0x33
    3578:	9c a9       	ldd	r25, Y+52	; 0x34
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	98 ab       	std	Y+48, r25	; 0x30
    3584:	8f a7       	std	Y+47, r24	; 0x2f
    3586:	8f a5       	ldd	r24, Y+47	; 0x2f
    3588:	98 a9       	ldd	r25, Y+48	; 0x30
    358a:	9c a7       	std	Y+44, r25	; 0x2c
    358c:	8b a7       	std	Y+43, r24	; 0x2b
    358e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3590:	9c a5       	ldd	r25, Y+44	; 0x2c
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <LCD_voidSendCmnd+0x166>
    3596:	9c a7       	std	Y+44, r25	; 0x2c
    3598:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		//second 4 bits
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	62 e0       	ldi	r22, 0x02	; 2
    359e:	40 e0       	ldi	r20, 0x00	; 0
    35a0:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	a0 e0       	ldi	r26, 0x00	; 0
    35aa:	b0 e4       	ldi	r27, 0x40	; 64
    35ac:	8f a3       	std	Y+39, r24	; 0x27
    35ae:	98 a7       	std	Y+40, r25	; 0x28
    35b0:	a9 a7       	std	Y+41, r26	; 0x29
    35b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b4:	6f a1       	ldd	r22, Y+39	; 0x27
    35b6:	78 a5       	ldd	r23, Y+40	; 0x28
    35b8:	89 a5       	ldd	r24, Y+41	; 0x29
    35ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	4a ef       	ldi	r20, 0xFA	; 250
    35c2:	54 e4       	ldi	r21, 0x44	; 68
    35c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	8b a3       	std	Y+35, r24	; 0x23
    35ce:	9c a3       	std	Y+36, r25	; 0x24
    35d0:	ad a3       	std	Y+37, r26	; 0x25
    35d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35d4:	6b a1       	ldd	r22, Y+35	; 0x23
    35d6:	7c a1       	ldd	r23, Y+36	; 0x24
    35d8:	8d a1       	ldd	r24, Y+37	; 0x25
    35da:	9e a1       	ldd	r25, Y+38	; 0x26
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e8       	ldi	r20, 0x80	; 128
    35e2:	5f e3       	ldi	r21, 0x3F	; 63
    35e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35e8:	88 23       	and	r24, r24
    35ea:	2c f4       	brge	.+10     	; 0x35f6 <LCD_voidSendCmnd+0x1ca>
		__ticks = 1;
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	9a a3       	std	Y+34, r25	; 0x22
    35f2:	89 a3       	std	Y+33, r24	; 0x21
    35f4:	3f c0       	rjmp	.+126    	; 0x3674 <LCD_voidSendCmnd+0x248>
	else if (__tmp > 65535)
    35f6:	6b a1       	ldd	r22, Y+35	; 0x23
    35f8:	7c a1       	ldd	r23, Y+36	; 0x24
    35fa:	8d a1       	ldd	r24, Y+37	; 0x25
    35fc:	9e a1       	ldd	r25, Y+38	; 0x26
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	3f ef       	ldi	r19, 0xFF	; 255
    3602:	4f e7       	ldi	r20, 0x7F	; 127
    3604:	57 e4       	ldi	r21, 0x47	; 71
    3606:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    360a:	18 16       	cp	r1, r24
    360c:	4c f5       	brge	.+82     	; 0x3660 <LCD_voidSendCmnd+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360e:	6f a1       	ldd	r22, Y+39	; 0x27
    3610:	78 a5       	ldd	r23, Y+40	; 0x28
    3612:	89 a5       	ldd	r24, Y+41	; 0x29
    3614:	9a a5       	ldd	r25, Y+42	; 0x2a
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	40 e2       	ldi	r20, 0x20	; 32
    361c:	51 e4       	ldi	r21, 0x41	; 65
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	bc 01       	movw	r22, r24
    3628:	cd 01       	movw	r24, r26
    362a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9a a3       	std	Y+34, r25	; 0x22
    3634:	89 a3       	std	Y+33, r24	; 0x21
    3636:	0f c0       	rjmp	.+30     	; 0x3656 <LCD_voidSendCmnd+0x22a>
    3638:	88 ec       	ldi	r24, 0xC8	; 200
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	98 a3       	std	Y+32, r25	; 0x20
    363e:	8f 8f       	std	Y+31, r24	; 0x1f
    3640:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3642:	98 a1       	ldd	r25, Y+32	; 0x20
    3644:	01 97       	sbiw	r24, 0x01	; 1
    3646:	f1 f7       	brne	.-4      	; 0x3644 <LCD_voidSendCmnd+0x218>
    3648:	98 a3       	std	Y+32, r25	; 0x20
    364a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364c:	89 a1       	ldd	r24, Y+33	; 0x21
    364e:	9a a1       	ldd	r25, Y+34	; 0x22
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	9a a3       	std	Y+34, r25	; 0x22
    3654:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3656:	89 a1       	ldd	r24, Y+33	; 0x21
    3658:	9a a1       	ldd	r25, Y+34	; 0x22
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	69 f7       	brne	.-38     	; 0x3638 <LCD_voidSendCmnd+0x20c>
    365e:	14 c0       	rjmp	.+40     	; 0x3688 <LCD_voidSendCmnd+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3660:	6b a1       	ldd	r22, Y+35	; 0x23
    3662:	7c a1       	ldd	r23, Y+36	; 0x24
    3664:	8d a1       	ldd	r24, Y+37	; 0x25
    3666:	9e a1       	ldd	r25, Y+38	; 0x26
    3668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	9a a3       	std	Y+34, r25	; 0x22
    3672:	89 a3       	std	Y+33, r24	; 0x21
    3674:	89 a1       	ldd	r24, Y+33	; 0x21
    3676:	9a a1       	ldd	r25, Y+34	; 0x22
    3678:	9e 8f       	std	Y+30, r25	; 0x1e
    367a:	8d 8f       	std	Y+29, r24	; 0x1d
    367c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    367e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <LCD_voidSendCmnd+0x254>
    3684:	9e 8f       	std	Y+30, r25	; 0x1e
    3686:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,GET_BIT(Copy_u8Cmnd,0));
    3688:	89 ad       	ldd	r24, Y+57	; 0x39
    368a:	98 2f       	mov	r25, r24
    368c:	91 70       	andi	r25, 0x01	; 1
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	49 2f       	mov	r20, r25
    3694:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,GET_BIT(Copy_u8Cmnd,1));
    3698:	89 ad       	ldd	r24, Y+57	; 0x39
    369a:	86 95       	lsr	r24
    369c:	98 2f       	mov	r25, r24
    369e:	91 70       	andi	r25, 0x01	; 1
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	61 e0       	ldi	r22, 0x01	; 1
    36a4:	49 2f       	mov	r20, r25
    36a6:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,GET_BIT(Copy_u8Cmnd,2));
    36aa:	89 ad       	ldd	r24, Y+57	; 0x39
    36ac:	86 95       	lsr	r24
    36ae:	86 95       	lsr	r24
    36b0:	98 2f       	mov	r25, r24
    36b2:	91 70       	andi	r25, 0x01	; 1
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	62 e0       	ldi	r22, 0x02	; 2
    36b8:	49 2f       	mov	r20, r25
    36ba:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,GET_BIT(Copy_u8Cmnd,3));
    36be:	89 ad       	ldd	r24, Y+57	; 0x39
    36c0:	86 95       	lsr	r24
    36c2:	86 95       	lsr	r24
    36c4:	86 95       	lsr	r24
    36c6:	98 2f       	mov	r25, r24
    36c8:	91 70       	andi	r25, 0x01	; 1
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	64 e0       	ldi	r22, 0x04	; 4
    36ce:	49 2f       	mov	r20, r25
    36d0:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_HIGH);
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	62 e0       	ldi	r22, 0x02	; 2
    36d8:	41 e0       	ldi	r20, 0x01	; 1
    36da:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	a0 e0       	ldi	r26, 0x00	; 0
    36e4:	b0 e4       	ldi	r27, 0x40	; 64
    36e6:	89 8f       	std	Y+25, r24	; 0x19
    36e8:	9a 8f       	std	Y+26, r25	; 0x1a
    36ea:	ab 8f       	std	Y+27, r26	; 0x1b
    36ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ee:	69 8d       	ldd	r22, Y+25	; 0x19
    36f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	4a ef       	ldi	r20, 0xFA	; 250
    36fc:	54 e4       	ldi	r21, 0x44	; 68
    36fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	8d 8b       	std	Y+21, r24	; 0x15
    3708:	9e 8b       	std	Y+22, r25	; 0x16
    370a:	af 8b       	std	Y+23, r26	; 0x17
    370c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    370e:	6d 89       	ldd	r22, Y+21	; 0x15
    3710:	7e 89       	ldd	r23, Y+22	; 0x16
    3712:	8f 89       	ldd	r24, Y+23	; 0x17
    3714:	98 8d       	ldd	r25, Y+24	; 0x18
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	40 e8       	ldi	r20, 0x80	; 128
    371c:	5f e3       	ldi	r21, 0x3F	; 63
    371e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3722:	88 23       	and	r24, r24
    3724:	2c f4       	brge	.+10     	; 0x3730 <LCD_voidSendCmnd+0x304>
		__ticks = 1;
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	9c 8b       	std	Y+20, r25	; 0x14
    372c:	8b 8b       	std	Y+19, r24	; 0x13
    372e:	3f c0       	rjmp	.+126    	; 0x37ae <LCD_voidSendCmnd+0x382>
	else if (__tmp > 65535)
    3730:	6d 89       	ldd	r22, Y+21	; 0x15
    3732:	7e 89       	ldd	r23, Y+22	; 0x16
    3734:	8f 89       	ldd	r24, Y+23	; 0x17
    3736:	98 8d       	ldd	r25, Y+24	; 0x18
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	3f ef       	ldi	r19, 0xFF	; 255
    373c:	4f e7       	ldi	r20, 0x7F	; 127
    373e:	57 e4       	ldi	r21, 0x47	; 71
    3740:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3744:	18 16       	cp	r1, r24
    3746:	4c f5       	brge	.+82     	; 0x379a <LCD_voidSendCmnd+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3748:	69 8d       	ldd	r22, Y+25	; 0x19
    374a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    374c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    374e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	40 e2       	ldi	r20, 0x20	; 32
    3756:	51 e4       	ldi	r21, 0x41	; 65
    3758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9c 8b       	std	Y+20, r25	; 0x14
    376e:	8b 8b       	std	Y+19, r24	; 0x13
    3770:	0f c0       	rjmp	.+30     	; 0x3790 <LCD_voidSendCmnd+0x364>
    3772:	88 ec       	ldi	r24, 0xC8	; 200
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	9a 8b       	std	Y+18, r25	; 0x12
    3778:	89 8b       	std	Y+17, r24	; 0x11
    377a:	89 89       	ldd	r24, Y+17	; 0x11
    377c:	9a 89       	ldd	r25, Y+18	; 0x12
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <LCD_voidSendCmnd+0x352>
    3782:	9a 8b       	std	Y+18, r25	; 0x12
    3784:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3786:	8b 89       	ldd	r24, Y+19	; 0x13
    3788:	9c 89       	ldd	r25, Y+20	; 0x14
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	9c 8b       	std	Y+20, r25	; 0x14
    378e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3790:	8b 89       	ldd	r24, Y+19	; 0x13
    3792:	9c 89       	ldd	r25, Y+20	; 0x14
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	69 f7       	brne	.-38     	; 0x3772 <LCD_voidSendCmnd+0x346>
    3798:	14 c0       	rjmp	.+40     	; 0x37c2 <LCD_voidSendCmnd+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379a:	6d 89       	ldd	r22, Y+21	; 0x15
    379c:	7e 89       	ldd	r23, Y+22	; 0x16
    379e:	8f 89       	ldd	r24, Y+23	; 0x17
    37a0:	98 8d       	ldd	r25, Y+24	; 0x18
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9c 8b       	std	Y+20, r25	; 0x14
    37ac:	8b 8b       	std	Y+19, r24	; 0x13
    37ae:	8b 89       	ldd	r24, Y+19	; 0x13
    37b0:	9c 89       	ldd	r25, Y+20	; 0x14
    37b2:	98 8b       	std	Y+16, r25	; 0x10
    37b4:	8f 87       	std	Y+15, r24	; 0x0f
    37b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37b8:	98 89       	ldd	r25, Y+16	; 0x10
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <LCD_voidSendCmnd+0x38e>
    37be:	98 8b       	std	Y+16, r25	; 0x10
    37c0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	62 e0       	ldi	r22, 0x02	; 2
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a0 e0       	ldi	r26, 0x00	; 0
    37d2:	b0 e4       	ldi	r27, 0x40	; 64
    37d4:	8b 87       	std	Y+11, r24	; 0x0b
    37d6:	9c 87       	std	Y+12, r25	; 0x0c
    37d8:	ad 87       	std	Y+13, r26	; 0x0d
    37da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37de:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a ef       	ldi	r20, 0xFA	; 250
    37ea:	54 e4       	ldi	r21, 0x44	; 68
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	8f 83       	std	Y+7, r24	; 0x07
    37f6:	98 87       	std	Y+8, r25	; 0x08
    37f8:	a9 87       	std	Y+9, r26	; 0x09
    37fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37fc:	6f 81       	ldd	r22, Y+7	; 0x07
    37fe:	78 85       	ldd	r23, Y+8	; 0x08
    3800:	89 85       	ldd	r24, Y+9	; 0x09
    3802:	9a 85       	ldd	r25, Y+10	; 0x0a
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <LCD_voidSendCmnd+0x3f2>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	3f c0       	rjmp	.+126    	; 0x389c <LCD_voidSendCmnd+0x470>
	else if (__tmp > 65535)
    381e:	6f 81       	ldd	r22, Y+7	; 0x07
    3820:	78 85       	ldd	r23, Y+8	; 0x08
    3822:	89 85       	ldd	r24, Y+9	; 0x09
    3824:	9a 85       	ldd	r25, Y+10	; 0x0a
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <LCD_voidSendCmnd+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	6b 85       	ldd	r22, Y+11	; 0x0b
    3838:	7c 85       	ldd	r23, Y+12	; 0x0c
    383a:	8d 85       	ldd	r24, Y+13	; 0x0d
    383c:	9e 85       	ldd	r25, Y+14	; 0x0e
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9e 83       	std	Y+6, r25	; 0x06
    385c:	8d 83       	std	Y+5, r24	; 0x05
    385e:	0f c0       	rjmp	.+30     	; 0x387e <LCD_voidSendCmnd+0x452>
    3860:	88 ec       	ldi	r24, 0xC8	; 200
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9c 83       	std	Y+4, r25	; 0x04
    3866:	8b 83       	std	Y+3, r24	; 0x03
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	9c 81       	ldd	r25, Y+4	; 0x04
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <LCD_voidSendCmnd+0x440>
    3870:	9c 83       	std	Y+4, r25	; 0x04
    3872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8d 81       	ldd	r24, Y+5	; 0x05
    3876:	9e 81       	ldd	r25, Y+6	; 0x06
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9e 83       	std	Y+6, r25	; 0x06
    387c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <LCD_voidSendCmnd+0x434>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <LCD_voidSendCmnd+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	6f 81       	ldd	r22, Y+7	; 0x07
    388a:	78 85       	ldd	r23, Y+8	; 0x08
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9e 83       	std	Y+6, r25	; 0x06
    389a:	8d 83       	std	Y+5, r24	; 0x05
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	9e 81       	ldd	r25, Y+6	; 0x06
    38a0:	9a 83       	std	Y+2, r25	; 0x02
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <LCD_voidSendCmnd+0x47c>
    38ac:	9a 83       	std	Y+2, r25	; 0x02
    38ae:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
}
    38b0:	e9 96       	adiw	r28, 0x39	; 57
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	de bf       	out	0x3e, r29	; 62
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	cd bf       	out	0x3d, r28	; 61
    38bc:	cf 91       	pop	r28
    38be:	df 91       	pop	r29
    38c0:	08 95       	ret

000038c2 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    38c2:	df 93       	push	r29
    38c4:	cf 93       	push	r28
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	e9 97       	sbiw	r28, 0x39	; 57
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	62 e0       	ldi	r22, 0x02	; 2
    38dc:	40 e0       	ldi	r20, 0x00	; 0
    38de:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_RS_PIN,DIO_u8_HIGH);
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	63 e0       	ldi	r22, 0x03	; 3
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,GET_BIT(Copy_u8Char,4));
    38ec:	89 ad       	ldd	r24, Y+57	; 0x39
    38ee:	82 95       	swap	r24
    38f0:	8f 70       	andi	r24, 0x0F	; 15
    38f2:	98 2f       	mov	r25, r24
    38f4:	91 70       	andi	r25, 0x01	; 1
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	49 2f       	mov	r20, r25
    38fc:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,GET_BIT(Copy_u8Char,5));
    3900:	89 ad       	ldd	r24, Y+57	; 0x39
    3902:	82 95       	swap	r24
    3904:	86 95       	lsr	r24
    3906:	87 70       	andi	r24, 0x07	; 7
    3908:	98 2f       	mov	r25, r24
    390a:	91 70       	andi	r25, 0x01	; 1
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	61 e0       	ldi	r22, 0x01	; 1
    3910:	49 2f       	mov	r20, r25
    3912:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,GET_BIT(Copy_u8Char,6));
    3916:	89 ad       	ldd	r24, Y+57	; 0x39
    3918:	82 95       	swap	r24
    391a:	86 95       	lsr	r24
    391c:	86 95       	lsr	r24
    391e:	83 70       	andi	r24, 0x03	; 3
    3920:	98 2f       	mov	r25, r24
    3922:	91 70       	andi	r25, 0x01	; 1
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	62 e0       	ldi	r22, 0x02	; 2
    3928:	49 2f       	mov	r20, r25
    392a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,GET_BIT(Copy_u8Char,7));
    392e:	89 ad       	ldd	r24, Y+57	; 0x39
    3930:	98 2f       	mov	r25, r24
    3932:	99 1f       	adc	r25, r25
    3934:	99 27       	eor	r25, r25
    3936:	99 1f       	adc	r25, r25
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	64 e0       	ldi	r22, 0x04	; 4
    393c:	49 2f       	mov	r20, r25
    393e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_HIGH);
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	62 e0       	ldi	r22, 0x02	; 2
    3946:	41 e0       	ldi	r20, 0x01	; 1
    3948:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	a0 e0       	ldi	r26, 0x00	; 0
    3952:	b0 e4       	ldi	r27, 0x40	; 64
    3954:	8d ab       	std	Y+53, r24	; 0x35
    3956:	9e ab       	std	Y+54, r25	; 0x36
    3958:	af ab       	std	Y+55, r26	; 0x37
    395a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395c:	6d a9       	ldd	r22, Y+53	; 0x35
    395e:	7e a9       	ldd	r23, Y+54	; 0x36
    3960:	8f a9       	ldd	r24, Y+55	; 0x37
    3962:	98 ad       	ldd	r25, Y+56	; 0x38
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	4a ef       	ldi	r20, 0xFA	; 250
    396a:	54 e4       	ldi	r21, 0x44	; 68
    396c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	89 ab       	std	Y+49, r24	; 0x31
    3976:	9a ab       	std	Y+50, r25	; 0x32
    3978:	ab ab       	std	Y+51, r26	; 0x33
    397a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    397c:	69 a9       	ldd	r22, Y+49	; 0x31
    397e:	7a a9       	ldd	r23, Y+50	; 0x32
    3980:	8b a9       	ldd	r24, Y+51	; 0x33
    3982:	9c a9       	ldd	r25, Y+52	; 0x34
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e8       	ldi	r20, 0x80	; 128
    398a:	5f e3       	ldi	r21, 0x3F	; 63
    398c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3990:	88 23       	and	r24, r24
    3992:	2c f4       	brge	.+10     	; 0x399e <LCD_voidSendChar+0xdc>
		__ticks = 1;
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	98 ab       	std	Y+48, r25	; 0x30
    399a:	8f a7       	std	Y+47, r24	; 0x2f
    399c:	3f c0       	rjmp	.+126    	; 0x3a1c <LCD_voidSendChar+0x15a>
	else if (__tmp > 65535)
    399e:	69 a9       	ldd	r22, Y+49	; 0x31
    39a0:	7a a9       	ldd	r23, Y+50	; 0x32
    39a2:	8b a9       	ldd	r24, Y+51	; 0x33
    39a4:	9c a9       	ldd	r25, Y+52	; 0x34
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	3f ef       	ldi	r19, 0xFF	; 255
    39aa:	4f e7       	ldi	r20, 0x7F	; 127
    39ac:	57 e4       	ldi	r21, 0x47	; 71
    39ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39b2:	18 16       	cp	r1, r24
    39b4:	4c f5       	brge	.+82     	; 0x3a08 <LCD_voidSendChar+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b6:	6d a9       	ldd	r22, Y+53	; 0x35
    39b8:	7e a9       	ldd	r23, Y+54	; 0x36
    39ba:	8f a9       	ldd	r24, Y+55	; 0x37
    39bc:	98 ad       	ldd	r25, Y+56	; 0x38
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	40 e2       	ldi	r20, 0x20	; 32
    39c4:	51 e4       	ldi	r21, 0x41	; 65
    39c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	98 ab       	std	Y+48, r25	; 0x30
    39dc:	8f a7       	std	Y+47, r24	; 0x2f
    39de:	0f c0       	rjmp	.+30     	; 0x39fe <LCD_voidSendChar+0x13c>
    39e0:	88 ec       	ldi	r24, 0xC8	; 200
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	9e a7       	std	Y+46, r25	; 0x2e
    39e6:	8d a7       	std	Y+45, r24	; 0x2d
    39e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    39ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	f1 f7       	brne	.-4      	; 0x39ec <LCD_voidSendChar+0x12a>
    39f0:	9e a7       	std	Y+46, r25	; 0x2e
    39f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    39f6:	98 a9       	ldd	r25, Y+48	; 0x30
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	98 ab       	std	Y+48, r25	; 0x30
    39fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a00:	98 a9       	ldd	r25, Y+48	; 0x30
    3a02:	00 97       	sbiw	r24, 0x00	; 0
    3a04:	69 f7       	brne	.-38     	; 0x39e0 <LCD_voidSendChar+0x11e>
    3a06:	14 c0       	rjmp	.+40     	; 0x3a30 <LCD_voidSendChar+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a08:	69 a9       	ldd	r22, Y+49	; 0x31
    3a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    3a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    3a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	98 ab       	std	Y+48, r25	; 0x30
    3a1a:	8f a7       	std	Y+47, r24	; 0x2f
    3a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a20:	9c a7       	std	Y+44, r25	; 0x2c
    3a22:	8b a7       	std	Y+43, r24	; 0x2b
    3a24:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a26:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <LCD_voidSendChar+0x166>
    3a2c:	9c a7       	std	Y+44, r25	; 0x2c
    3a2e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		//second 4 bits
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	62 e0       	ldi	r22, 0x02	; 2
    3a34:	40 e0       	ldi	r20, 0x00	; 0
    3a36:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	a0 e0       	ldi	r26, 0x00	; 0
    3a40:	b0 e4       	ldi	r27, 0x40	; 64
    3a42:	8f a3       	std	Y+39, r24	; 0x27
    3a44:	98 a7       	std	Y+40, r25	; 0x28
    3a46:	a9 a7       	std	Y+41, r26	; 0x29
    3a48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	4a ef       	ldi	r20, 0xFA	; 250
    3a58:	54 e4       	ldi	r21, 0x44	; 68
    3a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	8b a3       	std	Y+35, r24	; 0x23
    3a64:	9c a3       	std	Y+36, r25	; 0x24
    3a66:	ad a3       	std	Y+37, r26	; 0x25
    3a68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a70:	9e a1       	ldd	r25, Y+38	; 0x26
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e8       	ldi	r20, 0x80	; 128
    3a78:	5f e3       	ldi	r21, 0x3F	; 63
    3a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a7e:	88 23       	and	r24, r24
    3a80:	2c f4       	brge	.+10     	; 0x3a8c <LCD_voidSendChar+0x1ca>
		__ticks = 1;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	9a a3       	std	Y+34, r25	; 0x22
    3a88:	89 a3       	std	Y+33, r24	; 0x21
    3a8a:	3f c0       	rjmp	.+126    	; 0x3b0a <LCD_voidSendChar+0x248>
	else if (__tmp > 65535)
    3a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a90:	8d a1       	ldd	r24, Y+37	; 0x25
    3a92:	9e a1       	ldd	r25, Y+38	; 0x26
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	3f ef       	ldi	r19, 0xFF	; 255
    3a98:	4f e7       	ldi	r20, 0x7F	; 127
    3a9a:	57 e4       	ldi	r21, 0x47	; 71
    3a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aa0:	18 16       	cp	r1, r24
    3aa2:	4c f5       	brge	.+82     	; 0x3af6 <LCD_voidSendChar+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    3aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    3aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    3aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e2       	ldi	r20, 0x20	; 32
    3ab2:	51 e4       	ldi	r21, 0x41	; 65
    3ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	9a a3       	std	Y+34, r25	; 0x22
    3aca:	89 a3       	std	Y+33, r24	; 0x21
    3acc:	0f c0       	rjmp	.+30     	; 0x3aec <LCD_voidSendChar+0x22a>
    3ace:	88 ec       	ldi	r24, 0xC8	; 200
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	98 a3       	std	Y+32, r25	; 0x20
    3ad4:	8f 8f       	std	Y+31, r24	; 0x1f
    3ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ad8:	98 a1       	ldd	r25, Y+32	; 0x20
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	f1 f7       	brne	.-4      	; 0x3ada <LCD_voidSendChar+0x218>
    3ade:	98 a3       	std	Y+32, r25	; 0x20
    3ae0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	9a a3       	std	Y+34, r25	; 0x22
    3aea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aec:	89 a1       	ldd	r24, Y+33	; 0x21
    3aee:	9a a1       	ldd	r25, Y+34	; 0x22
    3af0:	00 97       	sbiw	r24, 0x00	; 0
    3af2:	69 f7       	brne	.-38     	; 0x3ace <LCD_voidSendChar+0x20c>
    3af4:	14 c0       	rjmp	.+40     	; 0x3b1e <LCD_voidSendChar+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af6:	6b a1       	ldd	r22, Y+35	; 0x23
    3af8:	7c a1       	ldd	r23, Y+36	; 0x24
    3afa:	8d a1       	ldd	r24, Y+37	; 0x25
    3afc:	9e a1       	ldd	r25, Y+38	; 0x26
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	9a a3       	std	Y+34, r25	; 0x22
    3b08:	89 a3       	std	Y+33, r24	; 0x21
    3b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b0e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b10:	8d 8f       	std	Y+29, r24	; 0x1d
    3b12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	f1 f7       	brne	.-4      	; 0x3b16 <LCD_voidSendChar+0x254>
    3b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b1c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB4_PIN,GET_BIT(Copy_u8Char,0));
    3b1e:	89 ad       	ldd	r24, Y+57	; 0x39
    3b20:	98 2f       	mov	r25, r24
    3b22:	91 70       	andi	r25, 0x01	; 1
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	49 2f       	mov	r20, r25
    3b2a:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB5_PIN,GET_BIT(Copy_u8Char,1));
    3b2e:	89 ad       	ldd	r24, Y+57	; 0x39
    3b30:	86 95       	lsr	r24
    3b32:	98 2f       	mov	r25, r24
    3b34:	91 70       	andi	r25, 0x01	; 1
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	61 e0       	ldi	r22, 0x01	; 1
    3b3a:	49 2f       	mov	r20, r25
    3b3c:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB6_PIN,GET_BIT(Copy_u8Char,2));
    3b40:	89 ad       	ldd	r24, Y+57	; 0x39
    3b42:	86 95       	lsr	r24
    3b44:	86 95       	lsr	r24
    3b46:	98 2f       	mov	r25, r24
    3b48:	91 70       	andi	r25, 0x01	; 1
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	62 e0       	ldi	r22, 0x02	; 2
    3b4e:	49 2f       	mov	r20, r25
    3b50:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTB,LCD_DB7_PIN,GET_BIT(Copy_u8Char,3));
    3b54:	89 ad       	ldd	r24, Y+57	; 0x39
    3b56:	86 95       	lsr	r24
    3b58:	86 95       	lsr	r24
    3b5a:	86 95       	lsr	r24
    3b5c:	98 2f       	mov	r25, r24
    3b5e:	91 70       	andi	r25, 0x01	; 1
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	64 e0       	ldi	r22, 0x04	; 4
    3b64:	49 2f       	mov	r20, r25
    3b66:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>

		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_HIGH);
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	62 e0       	ldi	r22, 0x02	; 2
    3b6e:	41 e0       	ldi	r20, 0x01	; 1
    3b70:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	a0 e0       	ldi	r26, 0x00	; 0
    3b7a:	b0 e4       	ldi	r27, 0x40	; 64
    3b7c:	89 8f       	std	Y+25, r24	; 0x19
    3b7e:	9a 8f       	std	Y+26, r25	; 0x1a
    3b80:	ab 8f       	std	Y+27, r26	; 0x1b
    3b82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b84:	69 8d       	ldd	r22, Y+25	; 0x19
    3b86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	4a ef       	ldi	r20, 0xFA	; 250
    3b92:	54 e4       	ldi	r21, 0x44	; 68
    3b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	8d 8b       	std	Y+21, r24	; 0x15
    3b9e:	9e 8b       	std	Y+22, r25	; 0x16
    3ba0:	af 8b       	std	Y+23, r26	; 0x17
    3ba2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ba4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ba6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    3baa:	98 8d       	ldd	r25, Y+24	; 0x18
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	40 e8       	ldi	r20, 0x80	; 128
    3bb2:	5f e3       	ldi	r21, 0x3F	; 63
    3bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bb8:	88 23       	and	r24, r24
    3bba:	2c f4       	brge	.+10     	; 0x3bc6 <LCD_voidSendChar+0x304>
		__ticks = 1;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	9c 8b       	std	Y+20, r25	; 0x14
    3bc2:	8b 8b       	std	Y+19, r24	; 0x13
    3bc4:	3f c0       	rjmp	.+126    	; 0x3c44 <LCD_voidSendChar+0x382>
	else if (__tmp > 65535)
    3bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bca:	8f 89       	ldd	r24, Y+23	; 0x17
    3bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	3f ef       	ldi	r19, 0xFF	; 255
    3bd2:	4f e7       	ldi	r20, 0x7F	; 127
    3bd4:	57 e4       	ldi	r21, 0x47	; 71
    3bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bda:	18 16       	cp	r1, r24
    3bdc:	4c f5       	brge	.+82     	; 0x3c30 <LCD_voidSendChar+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bde:	69 8d       	ldd	r22, Y+25	; 0x19
    3be0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3be2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3be4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e2       	ldi	r20, 0x20	; 32
    3bec:	51 e4       	ldi	r21, 0x41	; 65
    3bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	bc 01       	movw	r22, r24
    3bf8:	cd 01       	movw	r24, r26
    3bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	9c 8b       	std	Y+20, r25	; 0x14
    3c04:	8b 8b       	std	Y+19, r24	; 0x13
    3c06:	0f c0       	rjmp	.+30     	; 0x3c26 <LCD_voidSendChar+0x364>
    3c08:	88 ec       	ldi	r24, 0xC8	; 200
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	9a 8b       	std	Y+18, r25	; 0x12
    3c0e:	89 8b       	std	Y+17, r24	; 0x11
    3c10:	89 89       	ldd	r24, Y+17	; 0x11
    3c12:	9a 89       	ldd	r25, Y+18	; 0x12
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	f1 f7       	brne	.-4      	; 0x3c14 <LCD_voidSendChar+0x352>
    3c18:	9a 8b       	std	Y+18, r25	; 0x12
    3c1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	9c 8b       	std	Y+20, r25	; 0x14
    3c24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c26:	8b 89       	ldd	r24, Y+19	; 0x13
    3c28:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2a:	00 97       	sbiw	r24, 0x00	; 0
    3c2c:	69 f7       	brne	.-38     	; 0x3c08 <LCD_voidSendChar+0x346>
    3c2e:	14 c0       	rjmp	.+40     	; 0x3c58 <LCD_voidSendChar+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c30:	6d 89       	ldd	r22, Y+21	; 0x15
    3c32:	7e 89       	ldd	r23, Y+22	; 0x16
    3c34:	8f 89       	ldd	r24, Y+23	; 0x17
    3c36:	98 8d       	ldd	r25, Y+24	; 0x18
    3c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	9c 8b       	std	Y+20, r25	; 0x14
    3c42:	8b 8b       	std	Y+19, r24	; 0x13
    3c44:	8b 89       	ldd	r24, Y+19	; 0x13
    3c46:	9c 89       	ldd	r25, Y+20	; 0x14
    3c48:	98 8b       	std	Y+16, r25	; 0x10
    3c4a:	8f 87       	std	Y+15, r24	; 0x0f
    3c4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c4e:	98 89       	ldd	r25, Y+16	; 0x10
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	f1 f7       	brne	.-4      	; 0x3c50 <LCD_voidSendChar+0x38e>
    3c54:	98 8b       	std	Y+16, r25	; 0x10
    3c56:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(DIO_u8_PORTA,LCD_EN_PIN,DIO_u8_LOW);
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	62 e0       	ldi	r22, 0x02	; 2
    3c5c:	40 e0       	ldi	r20, 0x00	; 0
    3c5e:	0e 94 f2 06 	call	0xde4	; 0xde4 <DIO_u8SetPinValue>
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	a0 e0       	ldi	r26, 0x00	; 0
    3c68:	b0 e4       	ldi	r27, 0x40	; 64
    3c6a:	8b 87       	std	Y+11, r24	; 0x0b
    3c6c:	9c 87       	std	Y+12, r25	; 0x0c
    3c6e:	ad 87       	std	Y+13, r26	; 0x0d
    3c70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	4a ef       	ldi	r20, 0xFA	; 250
    3c80:	54 e4       	ldi	r21, 0x44	; 68
    3c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	8f 83       	std	Y+7, r24	; 0x07
    3c8c:	98 87       	std	Y+8, r25	; 0x08
    3c8e:	a9 87       	std	Y+9, r26	; 0x09
    3c90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c92:	6f 81       	ldd	r22, Y+7	; 0x07
    3c94:	78 85       	ldd	r23, Y+8	; 0x08
    3c96:	89 85       	ldd	r24, Y+9	; 0x09
    3c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e8       	ldi	r20, 0x80	; 128
    3ca0:	5f e3       	ldi	r21, 0x3F	; 63
    3ca2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ca6:	88 23       	and	r24, r24
    3ca8:	2c f4       	brge	.+10     	; 0x3cb4 <LCD_voidSendChar+0x3f2>
		__ticks = 1;
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	9e 83       	std	Y+6, r25	; 0x06
    3cb0:	8d 83       	std	Y+5, r24	; 0x05
    3cb2:	3f c0       	rjmp	.+126    	; 0x3d32 <LCD_voidSendChar+0x470>
	else if (__tmp > 65535)
    3cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb6:	78 85       	ldd	r23, Y+8	; 0x08
    3cb8:	89 85       	ldd	r24, Y+9	; 0x09
    3cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	3f ef       	ldi	r19, 0xFF	; 255
    3cc0:	4f e7       	ldi	r20, 0x7F	; 127
    3cc2:	57 e4       	ldi	r21, 0x47	; 71
    3cc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cc8:	18 16       	cp	r1, r24
    3cca:	4c f5       	brge	.+82     	; 0x3d1e <LCD_voidSendChar+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e2       	ldi	r20, 0x20	; 32
    3cda:	51 e4       	ldi	r21, 0x41	; 65
    3cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	bc 01       	movw	r22, r24
    3ce6:	cd 01       	movw	r24, r26
    3ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	9e 83       	std	Y+6, r25	; 0x06
    3cf2:	8d 83       	std	Y+5, r24	; 0x05
    3cf4:	0f c0       	rjmp	.+30     	; 0x3d14 <LCD_voidSendChar+0x452>
    3cf6:	88 ec       	ldi	r24, 0xC8	; 200
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	9c 83       	std	Y+4, r25	; 0x04
    3cfc:	8b 83       	std	Y+3, r24	; 0x03
    3cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3d00:	9c 81       	ldd	r25, Y+4	; 0x04
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	f1 f7       	brne	.-4      	; 0x3d02 <LCD_voidSendChar+0x440>
    3d06:	9c 83       	std	Y+4, r25	; 0x04
    3d08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	9e 83       	std	Y+6, r25	; 0x06
    3d12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d14:	8d 81       	ldd	r24, Y+5	; 0x05
    3d16:	9e 81       	ldd	r25, Y+6	; 0x06
    3d18:	00 97       	sbiw	r24, 0x00	; 0
    3d1a:	69 f7       	brne	.-38     	; 0x3cf6 <LCD_voidSendChar+0x434>
    3d1c:	14 c0       	rjmp	.+40     	; 0x3d46 <LCD_voidSendChar+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d20:	78 85       	ldd	r23, Y+8	; 0x08
    3d22:	89 85       	ldd	r24, Y+9	; 0x09
    3d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	9e 83       	std	Y+6, r25	; 0x06
    3d30:	8d 83       	std	Y+5, r24	; 0x05
    3d32:	8d 81       	ldd	r24, Y+5	; 0x05
    3d34:	9e 81       	ldd	r25, Y+6	; 0x06
    3d36:	9a 83       	std	Y+2, r25	; 0x02
    3d38:	89 83       	std	Y+1, r24	; 0x01
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <LCD_voidSendChar+0x47c>
    3d42:	9a 83       	std	Y+2, r25	; 0x02
    3d44:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

}
    3d46:	e9 96       	adiw	r28, 0x39	; 57
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	cf 91       	pop	r28
    3d54:	df 91       	pop	r29
    3d56:	08 95       	ret

00003d58 <LCD_voidSendStr>:

void LCD_voidSendStr(u8* Copy_pu8Str )
{
    3d58:	df 93       	push	r29
    3d5a:	cf 93       	push	r28
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <LCD_voidSendStr+0x6>
    3d5e:	0f 92       	push	r0
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	9b 83       	std	Y+3, r25	; 0x03
    3d66:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StrLen = 0;
    3d68:	19 82       	std	Y+1, r1	; 0x01
    3d6a:	0e c0       	rjmp	.+28     	; 0x3d88 <LCD_voidSendStr+0x30>
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	28 2f       	mov	r18, r24
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	8a 81       	ldd	r24, Y+2	; 0x02
    3d74:	9b 81       	ldd	r25, Y+3	; 0x03
    3d76:	fc 01       	movw	r30, r24
    3d78:	e2 0f       	add	r30, r18
    3d7a:	f3 1f       	adc	r31, r19
    3d7c:	80 81       	ld	r24, Z
    3d7e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <LCD_voidSendChar>
		Local_u8StrLen++;
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	8f 5f       	subi	r24, 0xFF	; 255
    3d86:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendStr(u8* Copy_pu8Str )
{
	u8 Local_u8StrLen = 0;
	while( Copy_pu8Str[Local_u8StrLen] != '\0')
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	28 2f       	mov	r18, r24
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d90:	9b 81       	ldd	r25, Y+3	; 0x03
    3d92:	fc 01       	movw	r30, r24
    3d94:	e2 0f       	add	r30, r18
    3d96:	f3 1f       	adc	r31, r19
    3d98:	80 81       	ld	r24, Z
    3d9a:	88 23       	and	r24, r24
    3d9c:	39 f7       	brne	.-50     	; 0x3d6c <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar ( Copy_pu8Str[Local_u8StrLen] );
		Local_u8StrLen++;
	}
}
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	cf 91       	pop	r28
    3da6:	df 91       	pop	r29
    3da8:	08 95       	ret

00003daa <LCD_voidSendNum>:

void LCD_voidSendNum (u32  Copy_u32Num )
{
    3daa:	0f 93       	push	r16
    3dac:	1f 93       	push	r17
    3dae:	df 93       	push	r29
    3db0:	cf 93       	push	r28
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	61 97       	sbiw	r28, 0x11	; 17
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	f8 94       	cli
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	cd bf       	out	0x3d, r28	; 61
    3dc2:	6e 87       	std	Y+14, r22	; 0x0e
    3dc4:	7f 87       	std	Y+15, r23	; 0x0f
    3dc6:	88 8b       	std	Y+16, r24	; 0x10
    3dc8:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8NumArr[10]= {0};
    3dca:	8a e0       	ldi	r24, 0x0A	; 10
    3dcc:	fe 01       	movw	r30, r28
    3dce:	34 96       	adiw	r30, 0x04	; 4
    3dd0:	df 01       	movw	r26, r30
    3dd2:	98 2f       	mov	r25, r24
    3dd4:	1d 92       	st	X+, r1
    3dd6:	9a 95       	dec	r25
    3dd8:	e9 f7       	brne	.-6      	; 0x3dd4 <LCD_voidSendNum+0x2a>
	u8 Local_u8ArrIndex = 0;
    3dda:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u32Num == 0)
    3ddc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dde:	9f 85       	ldd	r25, Y+15	; 0x0f
    3de0:	a8 89       	ldd	r26, Y+16	; 0x10
    3de2:	b9 89       	ldd	r27, Y+17	; 0x11
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	a1 05       	cpc	r26, r1
    3de8:	b1 05       	cpc	r27, r1
    3dea:	89 f5       	brne	.+98     	; 0x3e4e <LCD_voidSendNum+0xa4>
	{
		LCD_voidSendChar('0');
    3dec:	80 e3       	ldi	r24, 0x30	; 48
    3dee:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <LCD_voidSendChar>
    3df2:	50 c0       	rjmp	.+160    	; 0x3e94 <LCD_voidSendNum+0xea>
	}
	else
	{
		while(Copy_u32Num > 0)
		{
			Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
    3df4:	8b 81       	ldd	r24, Y+3	; 0x03
    3df6:	08 2f       	mov	r16, r24
    3df8:	10 e0       	ldi	r17, 0x00	; 0
    3dfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dfe:	a8 89       	ldd	r26, Y+16	; 0x10
    3e00:	b9 89       	ldd	r27, Y+17	; 0x11
    3e02:	2a e0       	ldi	r18, 0x0A	; 10
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	40 e0       	ldi	r20, 0x00	; 0
    3e08:	50 e0       	ldi	r21, 0x00	; 0
    3e0a:	bc 01       	movw	r22, r24
    3e0c:	cd 01       	movw	r24, r26
    3e0e:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodsi4>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	28 2f       	mov	r18, r24
    3e18:	ce 01       	movw	r24, r28
    3e1a:	04 96       	adiw	r24, 0x04	; 4
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	e0 0f       	add	r30, r16
    3e20:	f1 1f       	adc	r31, r17
    3e22:	20 83       	st	Z, r18
			Copy_u32Num /=10;
    3e24:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e26:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e28:	a8 89       	ldd	r26, Y+16	; 0x10
    3e2a:	b9 89       	ldd	r27, Y+17	; 0x11
    3e2c:	2a e0       	ldi	r18, 0x0A	; 10
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e0       	ldi	r20, 0x00	; 0
    3e32:	50 e0       	ldi	r21, 0x00	; 0
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodsi4>
    3e3c:	da 01       	movw	r26, r20
    3e3e:	c9 01       	movw	r24, r18
    3e40:	8e 87       	std	Y+14, r24	; 0x0e
    3e42:	9f 87       	std	Y+15, r25	; 0x0f
    3e44:	a8 8b       	std	Y+16, r26	; 0x10
    3e46:	b9 8b       	std	Y+17, r27	; 0x11
			Local_u8ArrIndex++;
    3e48:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4a:	8f 5f       	subi	r24, 0xFF	; 255
    3e4c:	8b 83       	std	Y+3, r24	; 0x03
	{
		LCD_voidSendChar('0');
	}
	else
	{
		while(Copy_u32Num > 0)
    3e4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e50:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e52:	a8 89       	ldd	r26, Y+16	; 0x10
    3e54:	b9 89       	ldd	r27, Y+17	; 0x11
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	a1 05       	cpc	r26, r1
    3e5a:	b1 05       	cpc	r27, r1
    3e5c:	59 f6       	brne	.-106    	; 0x3df4 <LCD_voidSendNum+0x4a>
		{
			Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
			Copy_u32Num /=10;
			Local_u8ArrIndex++;
		}
		for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	88 2f       	mov	r24, r24
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	9a 83       	std	Y+2, r25	; 0x02
    3e68:	89 83       	std	Y+1, r24	; 0x01
    3e6a:	10 c0       	rjmp	.+32     	; 0x3e8c <LCD_voidSendNum+0xe2>
		{
			LCD_voidSendChar( Local_u8NumArr[i] + '0');
    3e6c:	29 81       	ldd	r18, Y+1	; 0x01
    3e6e:	3a 81       	ldd	r19, Y+2	; 0x02
    3e70:	ce 01       	movw	r24, r28
    3e72:	04 96       	adiw	r24, 0x04	; 4
    3e74:	fc 01       	movw	r30, r24
    3e76:	e2 0f       	add	r30, r18
    3e78:	f3 1f       	adc	r31, r19
    3e7a:	80 81       	ld	r24, Z
    3e7c:	80 5d       	subi	r24, 0xD0	; 208
    3e7e:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <LCD_voidSendChar>
		{
			Local_u8NumArr[Local_u8ArrIndex] = (Copy_u32Num % 10);
			Copy_u32Num /=10;
			Local_u8ArrIndex++;
		}
		for (int i = Local_u8ArrIndex-1 ; i>=0 ;i--)
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	9a 81       	ldd	r25, Y+2	; 0x02
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	9a 83       	std	Y+2, r25	; 0x02
    3e8a:	89 83       	std	Y+1, r24	; 0x01
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
    3e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e90:	99 23       	and	r25, r25
    3e92:	64 f7       	brge	.-40     	; 0x3e6c <LCD_voidSendNum+0xc2>
		{
			LCD_voidSendChar( Local_u8NumArr[i] + '0');
		}
	}
}
    3e94:	61 96       	adiw	r28, 0x11	; 17
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	f8 94       	cli
    3e9a:	de bf       	out	0x3e, r29	; 62
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	cd bf       	out	0x3d, r28	; 61
    3ea0:	cf 91       	pop	r28
    3ea2:	df 91       	pop	r29
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	08 95       	ret

00003eaa <LCD_u8GoToXY>:


u8 LCD_u8GoToXY (u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    3eaa:	df 93       	push	r29
    3eac:	cf 93       	push	r28
    3eae:	00 d0       	rcall	.+0      	; 0x3eb0 <LCD_u8GoToXY+0x6>
    3eb0:	00 d0       	rcall	.+0      	; 0x3eb2 <LCD_u8GoToXY+0x8>
    3eb2:	0f 92       	push	r0
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
    3eb8:	8a 83       	std	Y+2, r24	; 0x02
    3eba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Location <= 39)
    3ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec2:	88 32       	cpi	r24, 0x28	; 40
    3ec4:	b0 f5       	brcc	.+108    	; 0x3f32 <LCD_u8GoToXY+0x88>
	{
		switch (Copy_u8LineNum)
    3ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec8:	28 2f       	mov	r18, r24
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	3d 83       	std	Y+5, r19	; 0x05
    3ece:	2c 83       	std	Y+4, r18	; 0x04
    3ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ed4:	82 30       	cpi	r24, 0x02	; 2
    3ed6:	91 05       	cpc	r25, r1
    3ed8:	d9 f0       	breq	.+54     	; 0x3f10 <LCD_u8GoToXY+0x66>
    3eda:	2c 81       	ldd	r18, Y+4	; 0x04
    3edc:	3d 81       	ldd	r19, Y+5	; 0x05
    3ede:	23 30       	cpi	r18, 0x03	; 3
    3ee0:	31 05       	cpc	r19, r1
    3ee2:	34 f4       	brge	.+12     	; 0x3ef0 <LCD_u8GoToXY+0x46>
    3ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ee8:	81 30       	cpi	r24, 0x01	; 1
    3eea:	91 05       	cpc	r25, r1
    3eec:	61 f0       	breq	.+24     	; 0x3f06 <LCD_u8GoToXY+0x5c>
    3eee:	1f c0       	rjmp	.+62     	; 0x3f2e <LCD_u8GoToXY+0x84>
    3ef0:	2c 81       	ldd	r18, Y+4	; 0x04
    3ef2:	3d 81       	ldd	r19, Y+5	; 0x05
    3ef4:	23 30       	cpi	r18, 0x03	; 3
    3ef6:	31 05       	cpc	r19, r1
    3ef8:	81 f0       	breq	.+32     	; 0x3f1a <LCD_u8GoToXY+0x70>
    3efa:	8c 81       	ldd	r24, Y+4	; 0x04
    3efc:	9d 81       	ldd	r25, Y+5	; 0x05
    3efe:	84 30       	cpi	r24, 0x04	; 4
    3f00:	91 05       	cpc	r25, r1
    3f02:	81 f0       	breq	.+32     	; 0x3f24 <LCD_u8GoToXY+0x7a>
    3f04:	14 c0       	rjmp	.+40     	; 0x3f2e <LCD_u8GoToXY+0x84>
		{
			case LCD_u8_LINE_1   : LCD_voidSendCmnd (0x80 + Copy_u8Location); break;
    3f06:	8b 81       	ldd	r24, Y+3	; 0x03
    3f08:	80 58       	subi	r24, 0x80	; 128
    3f0a:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    3f0e:	12 c0       	rjmp	.+36     	; 0x3f34 <LCD_u8GoToXY+0x8a>
			case LCD_u8_LINE_2   : LCD_voidSendCmnd (0xc0 + Copy_u8Location); break;
    3f10:	8b 81       	ldd	r24, Y+3	; 0x03
    3f12:	80 54       	subi	r24, 0x40	; 64
    3f14:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    3f18:	0d c0       	rjmp	.+26     	; 0x3f34 <LCD_u8GoToXY+0x8a>
			case LCD_u8_LINE_3   : LCD_voidSendCmnd (0x94 + Copy_u8Location); break;
    3f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1c:	8c 56       	subi	r24, 0x6C	; 108
    3f1e:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    3f22:	08 c0       	rjmp	.+16     	; 0x3f34 <LCD_u8GoToXY+0x8a>
			case LCD_u8_LINE_4   : LCD_voidSendCmnd (0xD4 + Copy_u8Location); break;
    3f24:	8b 81       	ldd	r24, Y+3	; 0x03
    3f26:	8c 52       	subi	r24, 0x2C	; 44
    3f28:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    3f2c:	03 c0       	rjmp	.+6      	; 0x3f34 <LCD_u8GoToXY+0x8a>
			default              : Local_u8ErrorState = STD_TYPES_NOK;
    3f2e:	19 82       	std	Y+1, r1	; 0x01
    3f30:	01 c0       	rjmp	.+2      	; 0x3f34 <LCD_u8GoToXY+0x8a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3f32:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f36:	0f 90       	pop	r0
    3f38:	0f 90       	pop	r0
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	cf 91       	pop	r28
    3f42:	df 91       	pop	r29
    3f44:	08 95       	ret

00003f46 <LCD_voidClearScreen>:

void LCD_voidClearScreen (void)
{
    3f46:	df 93       	push	r29
    3f48:	cf 93       	push	r28
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
    3f4e:	2e 97       	sbiw	r28, 0x0e	; 14
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	f8 94       	cli
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	0f be       	out	0x3f, r0	; 63
    3f58:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd (0x01);
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    3f60:	80 e0       	ldi	r24, 0x00	; 0
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	a0 e0       	ldi	r26, 0x00	; 0
    3f66:	b0 e4       	ldi	r27, 0x40	; 64
    3f68:	8b 87       	std	Y+11, r24	; 0x0b
    3f6a:	9c 87       	std	Y+12, r25	; 0x0c
    3f6c:	ad 87       	std	Y+13, r26	; 0x0d
    3f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	4a ef       	ldi	r20, 0xFA	; 250
    3f7e:	54 e4       	ldi	r21, 0x44	; 68
    3f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	8f 83       	std	Y+7, r24	; 0x07
    3f8a:	98 87       	std	Y+8, r25	; 0x08
    3f8c:	a9 87       	std	Y+9, r26	; 0x09
    3f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f90:	6f 81       	ldd	r22, Y+7	; 0x07
    3f92:	78 85       	ldd	r23, Y+8	; 0x08
    3f94:	89 85       	ldd	r24, Y+9	; 0x09
    3f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	40 e8       	ldi	r20, 0x80	; 128
    3f9e:	5f e3       	ldi	r21, 0x3F	; 63
    3fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fa4:	88 23       	and	r24, r24
    3fa6:	2c f4       	brge	.+10     	; 0x3fb2 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	9e 83       	std	Y+6, r25	; 0x06
    3fae:	8d 83       	std	Y+5, r24	; 0x05
    3fb0:	3f c0       	rjmp	.+126    	; 0x4030 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    3fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb4:	78 85       	ldd	r23, Y+8	; 0x08
    3fb6:	89 85       	ldd	r24, Y+9	; 0x09
    3fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	3f ef       	ldi	r19, 0xFF	; 255
    3fbe:	4f e7       	ldi	r20, 0x7F	; 127
    3fc0:	57 e4       	ldi	r21, 0x47	; 71
    3fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fc6:	18 16       	cp	r1, r24
    3fc8:	4c f5       	brge	.+82     	; 0x401c <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	40 e2       	ldi	r20, 0x20	; 32
    3fd8:	51 e4       	ldi	r21, 0x41	; 65
    3fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	bc 01       	movw	r22, r24
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	9e 83       	std	Y+6, r25	; 0x06
    3ff0:	8d 83       	std	Y+5, r24	; 0x05
    3ff2:	0f c0       	rjmp	.+30     	; 0x4012 <LCD_voidClearScreen+0xcc>
    3ff4:	88 ec       	ldi	r24, 0xC8	; 200
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	9c 83       	std	Y+4, r25	; 0x04
    3ffa:	8b 83       	std	Y+3, r24	; 0x03
    3ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	f1 f7       	brne	.-4      	; 0x4000 <LCD_voidClearScreen+0xba>
    4004:	9c 83       	std	Y+4, r25	; 0x04
    4006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4008:	8d 81       	ldd	r24, Y+5	; 0x05
    400a:	9e 81       	ldd	r25, Y+6	; 0x06
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	9e 83       	std	Y+6, r25	; 0x06
    4010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4012:	8d 81       	ldd	r24, Y+5	; 0x05
    4014:	9e 81       	ldd	r25, Y+6	; 0x06
    4016:	00 97       	sbiw	r24, 0x00	; 0
    4018:	69 f7       	brne	.-38     	; 0x3ff4 <LCD_voidClearScreen+0xae>
    401a:	14 c0       	rjmp	.+40     	; 0x4044 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401c:	6f 81       	ldd	r22, Y+7	; 0x07
    401e:	78 85       	ldd	r23, Y+8	; 0x08
    4020:	89 85       	ldd	r24, Y+9	; 0x09
    4022:	9a 85       	ldd	r25, Y+10	; 0x0a
    4024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	9e 83       	std	Y+6, r25	; 0x06
    402e:	8d 83       	std	Y+5, r24	; 0x05
    4030:	8d 81       	ldd	r24, Y+5	; 0x05
    4032:	9e 81       	ldd	r25, Y+6	; 0x06
    4034:	9a 83       	std	Y+2, r25	; 0x02
    4036:	89 83       	std	Y+1, r24	; 0x01
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	9a 81       	ldd	r25, Y+2	; 0x02
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <LCD_voidClearScreen+0xf6>
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);
}
    4044:	2e 96       	adiw	r28, 0x0e	; 14
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <LCD_u8SendSpecialChar>:

u8 LCD_u8SendSpecialChar    (u8 Copy_u8CharNum , u8* Copy_pu8CharShape ,u8  Copy_u8LineNum , u8 Copy_u8Location )
{
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	2a 97       	sbiw	r28, 0x0a	; 10
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	f8 94       	cli
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	cd bf       	out	0x3d, r28	; 61
    406a:	8c 83       	std	Y+4, r24	; 0x04
    406c:	7e 83       	std	Y+6, r23	; 0x06
    406e:	6d 83       	std	Y+5, r22	; 0x05
    4070:	4f 83       	std	Y+7, r20	; 0x07
    4072:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	8b 83       	std	Y+3, r24	; 0x03
	if((Copy_u8CharNum <= 7)&&(Copy_u8Location <= 39)&&(Copy_u8LineNum <=4))
    4078:	8c 81       	ldd	r24, Y+4	; 0x04
    407a:	88 30       	cpi	r24, 0x08	; 8
    407c:	08 f0       	brcs	.+2      	; 0x4080 <LCD_u8SendSpecialChar+0x2a>
    407e:	79 c0       	rjmp	.+242    	; 0x4172 <LCD_u8SendSpecialChar+0x11c>
    4080:	88 85       	ldd	r24, Y+8	; 0x08
    4082:	88 32       	cpi	r24, 0x28	; 40
    4084:	08 f0       	brcs	.+2      	; 0x4088 <LCD_u8SendSpecialChar+0x32>
    4086:	75 c0       	rjmp	.+234    	; 0x4172 <LCD_u8SendSpecialChar+0x11c>
    4088:	8f 81       	ldd	r24, Y+7	; 0x07
    408a:	85 30       	cpi	r24, 0x05	; 5
    408c:	08 f0       	brcs	.+2      	; 0x4090 <LCD_u8SendSpecialChar+0x3a>
    408e:	71 c0       	rjmp	.+226    	; 0x4172 <LCD_u8SendSpecialChar+0x11c>
	{
		switch(Copy_u8CharNum)
    4090:	8c 81       	ldd	r24, Y+4	; 0x04
    4092:	28 2f       	mov	r18, r24
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	3a 87       	std	Y+10, r19	; 0x0a
    4098:	29 87       	std	Y+9, r18	; 0x09
    409a:	89 85       	ldd	r24, Y+9	; 0x09
    409c:	9a 85       	ldd	r25, Y+10	; 0x0a
    409e:	83 30       	cpi	r24, 0x03	; 3
    40a0:	91 05       	cpc	r25, r1
    40a2:	a9 f1       	breq	.+106    	; 0x410e <LCD_u8SendSpecialChar+0xb8>
    40a4:	29 85       	ldd	r18, Y+9	; 0x09
    40a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    40a8:	24 30       	cpi	r18, 0x04	; 4
    40aa:	31 05       	cpc	r19, r1
    40ac:	7c f4       	brge	.+30     	; 0x40cc <LCD_u8SendSpecialChar+0x76>
    40ae:	89 85       	ldd	r24, Y+9	; 0x09
    40b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b2:	81 30       	cpi	r24, 0x01	; 1
    40b4:	91 05       	cpc	r25, r1
    40b6:	19 f1       	breq	.+70     	; 0x40fe <LCD_u8SendSpecialChar+0xa8>
    40b8:	29 85       	ldd	r18, Y+9	; 0x09
    40ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    40bc:	22 30       	cpi	r18, 0x02	; 2
    40be:	31 05       	cpc	r19, r1
    40c0:	14 f5       	brge	.+68     	; 0x4106 <LCD_u8SendSpecialChar+0xb0>
    40c2:	89 85       	ldd	r24, Y+9	; 0x09
    40c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c6:	00 97       	sbiw	r24, 0x00	; 0
    40c8:	b1 f0       	breq	.+44     	; 0x40f6 <LCD_u8SendSpecialChar+0xa0>
    40ca:	34 c0       	rjmp	.+104    	; 0x4134 <LCD_u8SendSpecialChar+0xde>
    40cc:	29 85       	ldd	r18, Y+9	; 0x09
    40ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    40d0:	25 30       	cpi	r18, 0x05	; 5
    40d2:	31 05       	cpc	r19, r1
    40d4:	21 f1       	breq	.+72     	; 0x411e <LCD_u8SendSpecialChar+0xc8>
    40d6:	89 85       	ldd	r24, Y+9	; 0x09
    40d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40da:	85 30       	cpi	r24, 0x05	; 5
    40dc:	91 05       	cpc	r25, r1
    40de:	dc f0       	brlt	.+54     	; 0x4116 <LCD_u8SendSpecialChar+0xc0>
    40e0:	29 85       	ldd	r18, Y+9	; 0x09
    40e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    40e4:	26 30       	cpi	r18, 0x06	; 6
    40e6:	31 05       	cpc	r19, r1
    40e8:	f1 f0       	breq	.+60     	; 0x4126 <LCD_u8SendSpecialChar+0xd0>
    40ea:	89 85       	ldd	r24, Y+9	; 0x09
    40ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ee:	87 30       	cpi	r24, 0x07	; 7
    40f0:	91 05       	cpc	r25, r1
    40f2:	e9 f0       	breq	.+58     	; 0x412e <LCD_u8SendSpecialChar+0xd8>
    40f4:	1f c0       	rjmp	.+62     	; 0x4134 <LCD_u8SendSpecialChar+0xde>
		{
			case 0:LCD_voidSendCmnd(0b01000000); break; //0
    40f6:	80 e4       	ldi	r24, 0x40	; 64
    40f8:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    40fc:	1b c0       	rjmp	.+54     	; 0x4134 <LCD_u8SendSpecialChar+0xde>
			case 1:LCD_voidSendCmnd(0b01001000); break; //8
    40fe:	88 e4       	ldi	r24, 0x48	; 72
    4100:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    4104:	17 c0       	rjmp	.+46     	; 0x4134 <LCD_u8SendSpecialChar+0xde>
			case 2:LCD_voidSendCmnd(0b01010000); break; //16
    4106:	80 e5       	ldi	r24, 0x50	; 80
    4108:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    410c:	13 c0       	rjmp	.+38     	; 0x4134 <LCD_u8SendSpecialChar+0xde>
			case 3:LCD_voidSendCmnd(0b01011000); break; //24
    410e:	88 e5       	ldi	r24, 0x58	; 88
    4110:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    4114:	0f c0       	rjmp	.+30     	; 0x4134 <LCD_u8SendSpecialChar+0xde>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
    4116:	80 e6       	ldi	r24, 0x60	; 96
    4118:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    411c:	0b c0       	rjmp	.+22     	; 0x4134 <LCD_u8SendSpecialChar+0xde>
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
    411e:	88 e6       	ldi	r24, 0x68	; 104
    4120:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    4124:	07 c0       	rjmp	.+14     	; 0x4134 <LCD_u8SendSpecialChar+0xde>
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
    4126:	80 e7       	ldi	r24, 0x70	; 112
    4128:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    412c:	03 c0       	rjmp	.+6      	; 0x4134 <LCD_u8SendSpecialChar+0xde>
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
    412e:	88 e7       	ldi	r24, 0x78	; 120
    4130:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
		}
		for(int i=0 ;i <8 ;i++)
    4134:	1a 82       	std	Y+2, r1	; 0x02
    4136:	19 82       	std	Y+1, r1	; 0x01
    4138:	0f c0       	rjmp	.+30     	; 0x4158 <LCD_u8SendSpecialChar+0x102>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
    413a:	29 81       	ldd	r18, Y+1	; 0x01
    413c:	3a 81       	ldd	r19, Y+2	; 0x02
    413e:	8d 81       	ldd	r24, Y+5	; 0x05
    4140:	9e 81       	ldd	r25, Y+6	; 0x06
    4142:	fc 01       	movw	r30, r24
    4144:	e2 0f       	add	r30, r18
    4146:	f3 1f       	adc	r31, r19
    4148:	80 81       	ld	r24, Z
    414a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <LCD_voidSendChar>
			case 4:LCD_voidSendCmnd(0b01100000); break; //32
			case 5:LCD_voidSendCmnd(0b01101000); break; //40
			case 6:LCD_voidSendCmnd(0b01110000); break; //48
			case 7:LCD_voidSendCmnd(0b01111000); break; //56
		}
		for(int i=0 ;i <8 ;i++)
    414e:	89 81       	ldd	r24, Y+1	; 0x01
    4150:	9a 81       	ldd	r25, Y+2	; 0x02
    4152:	01 96       	adiw	r24, 0x01	; 1
    4154:	9a 83       	std	Y+2, r25	; 0x02
    4156:	89 83       	std	Y+1, r24	; 0x01
    4158:	89 81       	ldd	r24, Y+1	; 0x01
    415a:	9a 81       	ldd	r25, Y+2	; 0x02
    415c:	88 30       	cpi	r24, 0x08	; 8
    415e:	91 05       	cpc	r25, r1
    4160:	64 f3       	brlt	.-40     	; 0x413a <LCD_u8SendSpecialChar+0xe4>
		{
		   LCD_voidSendChar(Copy_pu8CharShape[i]);
		}
	    LCD_u8GoToXY(Copy_u8LineNum ,Copy_u8Location );
    4162:	8f 81       	ldd	r24, Y+7	; 0x07
    4164:	68 85       	ldd	r22, Y+8	; 0x08
    4166:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    416a:	8c 81       	ldd	r24, Y+4	; 0x04
    416c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <LCD_voidSendChar>
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <LCD_u8SendSpecialChar+0x11e>
	}
	else
	{
	  Local_u8ErrorState = STD_TYPES_NOK;
    4172:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    4174:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4176:	2a 96       	adiw	r28, 0x0a	; 10
    4178:	0f b6       	in	r0, 0x3f	; 63
    417a:	f8 94       	cli
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	cd bf       	out	0x3d, r28	; 61
    4182:	cf 91       	pop	r28
    4184:	df 91       	pop	r29
    4186:	08 95       	ret

00004188 <LCD_voidShiftRight>:

void LCD_voidShiftRight(void)
{
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
    4190:	2e 97       	sbiw	r28, 0x0e	; 14
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011100);
    419c:	8c e1       	ldi	r24, 0x1C	; 28
    419e:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	a8 ec       	ldi	r26, 0xC8	; 200
    41a8:	b2 e4       	ldi	r27, 0x42	; 66
    41aa:	8b 87       	std	Y+11, r24	; 0x0b
    41ac:	9c 87       	std	Y+12, r25	; 0x0c
    41ae:	ad 87       	std	Y+13, r26	; 0x0d
    41b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	4a ef       	ldi	r20, 0xFA	; 250
    41c0:	54 e4       	ldi	r21, 0x44	; 68
    41c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	8f 83       	std	Y+7, r24	; 0x07
    41cc:	98 87       	std	Y+8, r25	; 0x08
    41ce:	a9 87       	std	Y+9, r26	; 0x09
    41d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41d2:	6f 81       	ldd	r22, Y+7	; 0x07
    41d4:	78 85       	ldd	r23, Y+8	; 0x08
    41d6:	89 85       	ldd	r24, Y+9	; 0x09
    41d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	40 e8       	ldi	r20, 0x80	; 128
    41e0:	5f e3       	ldi	r21, 0x3F	; 63
    41e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41e6:	88 23       	and	r24, r24
    41e8:	2c f4       	brge	.+10     	; 0x41f4 <LCD_voidShiftRight+0x6c>
		__ticks = 1;
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	9e 83       	std	Y+6, r25	; 0x06
    41f0:	8d 83       	std	Y+5, r24	; 0x05
    41f2:	3f c0       	rjmp	.+126    	; 0x4272 <LCD_voidShiftRight+0xea>
	else if (__tmp > 65535)
    41f4:	6f 81       	ldd	r22, Y+7	; 0x07
    41f6:	78 85       	ldd	r23, Y+8	; 0x08
    41f8:	89 85       	ldd	r24, Y+9	; 0x09
    41fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	3f ef       	ldi	r19, 0xFF	; 255
    4200:	4f e7       	ldi	r20, 0x7F	; 127
    4202:	57 e4       	ldi	r21, 0x47	; 71
    4204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4208:	18 16       	cp	r1, r24
    420a:	4c f5       	brge	.+82     	; 0x425e <LCD_voidShiftRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    420c:	6b 85       	ldd	r22, Y+11	; 0x0b
    420e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4210:	8d 85       	ldd	r24, Y+13	; 0x0d
    4212:	9e 85       	ldd	r25, Y+14	; 0x0e
    4214:	20 e0       	ldi	r18, 0x00	; 0
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	40 e2       	ldi	r20, 0x20	; 32
    421a:	51 e4       	ldi	r21, 0x41	; 65
    421c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	bc 01       	movw	r22, r24
    4226:	cd 01       	movw	r24, r26
    4228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	9e 83       	std	Y+6, r25	; 0x06
    4232:	8d 83       	std	Y+5, r24	; 0x05
    4234:	0f c0       	rjmp	.+30     	; 0x4254 <LCD_voidShiftRight+0xcc>
    4236:	88 ec       	ldi	r24, 0xC8	; 200
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	9c 83       	std	Y+4, r25	; 0x04
    423c:	8b 83       	std	Y+3, r24	; 0x03
    423e:	8b 81       	ldd	r24, Y+3	; 0x03
    4240:	9c 81       	ldd	r25, Y+4	; 0x04
    4242:	01 97       	sbiw	r24, 0x01	; 1
    4244:	f1 f7       	brne	.-4      	; 0x4242 <LCD_voidShiftRight+0xba>
    4246:	9c 83       	std	Y+4, r25	; 0x04
    4248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424a:	8d 81       	ldd	r24, Y+5	; 0x05
    424c:	9e 81       	ldd	r25, Y+6	; 0x06
    424e:	01 97       	sbiw	r24, 0x01	; 1
    4250:	9e 83       	std	Y+6, r25	; 0x06
    4252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4254:	8d 81       	ldd	r24, Y+5	; 0x05
    4256:	9e 81       	ldd	r25, Y+6	; 0x06
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	69 f7       	brne	.-38     	; 0x4236 <LCD_voidShiftRight+0xae>
    425c:	14 c0       	rjmp	.+40     	; 0x4286 <LCD_voidShiftRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    425e:	6f 81       	ldd	r22, Y+7	; 0x07
    4260:	78 85       	ldd	r23, Y+8	; 0x08
    4262:	89 85       	ldd	r24, Y+9	; 0x09
    4264:	9a 85       	ldd	r25, Y+10	; 0x0a
    4266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	9e 83       	std	Y+6, r25	; 0x06
    4270:	8d 83       	std	Y+5, r24	; 0x05
    4272:	8d 81       	ldd	r24, Y+5	; 0x05
    4274:	9e 81       	ldd	r25, Y+6	; 0x06
    4276:	9a 83       	std	Y+2, r25	; 0x02
    4278:	89 83       	std	Y+1, r24	; 0x01
    427a:	89 81       	ldd	r24, Y+1	; 0x01
    427c:	9a 81       	ldd	r25, Y+2	; 0x02
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	f1 f7       	brne	.-4      	; 0x427e <LCD_voidShiftRight+0xf6>
    4282:	9a 83       	std	Y+2, r25	; 0x02
    4284:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    4286:	2e 96       	adiw	r28, 0x0e	; 14
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	cf 91       	pop	r28
    4294:	df 91       	pop	r29
    4296:	08 95       	ret

00004298 <LCD_voidShiftLeft>:

void LCD_voidShiftLeft(void)
{
    4298:	df 93       	push	r29
    429a:	cf 93       	push	r28
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	2e 97       	sbiw	r28, 0x0e	; 14
    42a2:	0f b6       	in	r0, 0x3f	; 63
    42a4:	f8 94       	cli
    42a6:	de bf       	out	0x3e, r29	; 62
    42a8:	0f be       	out	0x3f, r0	; 63
    42aa:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00011000);
    42ac:	88 e1       	ldi	r24, 0x18	; 24
    42ae:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_voidSendCmnd>
    42b2:	80 e0       	ldi	r24, 0x00	; 0
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	a8 ec       	ldi	r26, 0xC8	; 200
    42b8:	b2 e4       	ldi	r27, 0x42	; 66
    42ba:	8b 87       	std	Y+11, r24	; 0x0b
    42bc:	9c 87       	std	Y+12, r25	; 0x0c
    42be:	ad 87       	std	Y+13, r26	; 0x0d
    42c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	4a ef       	ldi	r20, 0xFA	; 250
    42d0:	54 e4       	ldi	r21, 0x44	; 68
    42d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	8f 83       	std	Y+7, r24	; 0x07
    42dc:	98 87       	std	Y+8, r25	; 0x08
    42de:	a9 87       	std	Y+9, r26	; 0x09
    42e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42e2:	6f 81       	ldd	r22, Y+7	; 0x07
    42e4:	78 85       	ldd	r23, Y+8	; 0x08
    42e6:	89 85       	ldd	r24, Y+9	; 0x09
    42e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e8       	ldi	r20, 0x80	; 128
    42f0:	5f e3       	ldi	r21, 0x3F	; 63
    42f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42f6:	88 23       	and	r24, r24
    42f8:	2c f4       	brge	.+10     	; 0x4304 <LCD_voidShiftLeft+0x6c>
		__ticks = 1;
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	9e 83       	std	Y+6, r25	; 0x06
    4300:	8d 83       	std	Y+5, r24	; 0x05
    4302:	3f c0       	rjmp	.+126    	; 0x4382 <LCD_voidShiftLeft+0xea>
	else if (__tmp > 65535)
    4304:	6f 81       	ldd	r22, Y+7	; 0x07
    4306:	78 85       	ldd	r23, Y+8	; 0x08
    4308:	89 85       	ldd	r24, Y+9	; 0x09
    430a:	9a 85       	ldd	r25, Y+10	; 0x0a
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	3f ef       	ldi	r19, 0xFF	; 255
    4310:	4f e7       	ldi	r20, 0x7F	; 127
    4312:	57 e4       	ldi	r21, 0x47	; 71
    4314:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4318:	18 16       	cp	r1, r24
    431a:	4c f5       	brge	.+82     	; 0x436e <LCD_voidShiftLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    431c:	6b 85       	ldd	r22, Y+11	; 0x0b
    431e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4320:	8d 85       	ldd	r24, Y+13	; 0x0d
    4322:	9e 85       	ldd	r25, Y+14	; 0x0e
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	40 e2       	ldi	r20, 0x20	; 32
    432a:	51 e4       	ldi	r21, 0x41	; 65
    432c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	bc 01       	movw	r22, r24
    4336:	cd 01       	movw	r24, r26
    4338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	9e 83       	std	Y+6, r25	; 0x06
    4342:	8d 83       	std	Y+5, r24	; 0x05
    4344:	0f c0       	rjmp	.+30     	; 0x4364 <LCD_voidShiftLeft+0xcc>
    4346:	88 ec       	ldi	r24, 0xC8	; 200
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	9c 83       	std	Y+4, r25	; 0x04
    434c:	8b 83       	std	Y+3, r24	; 0x03
    434e:	8b 81       	ldd	r24, Y+3	; 0x03
    4350:	9c 81       	ldd	r25, Y+4	; 0x04
    4352:	01 97       	sbiw	r24, 0x01	; 1
    4354:	f1 f7       	brne	.-4      	; 0x4352 <LCD_voidShiftLeft+0xba>
    4356:	9c 83       	std	Y+4, r25	; 0x04
    4358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    435a:	8d 81       	ldd	r24, Y+5	; 0x05
    435c:	9e 81       	ldd	r25, Y+6	; 0x06
    435e:	01 97       	sbiw	r24, 0x01	; 1
    4360:	9e 83       	std	Y+6, r25	; 0x06
    4362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4364:	8d 81       	ldd	r24, Y+5	; 0x05
    4366:	9e 81       	ldd	r25, Y+6	; 0x06
    4368:	00 97       	sbiw	r24, 0x00	; 0
    436a:	69 f7       	brne	.-38     	; 0x4346 <LCD_voidShiftLeft+0xae>
    436c:	14 c0       	rjmp	.+40     	; 0x4396 <LCD_voidShiftLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    436e:	6f 81       	ldd	r22, Y+7	; 0x07
    4370:	78 85       	ldd	r23, Y+8	; 0x08
    4372:	89 85       	ldd	r24, Y+9	; 0x09
    4374:	9a 85       	ldd	r25, Y+10	; 0x0a
    4376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	9e 83       	std	Y+6, r25	; 0x06
    4380:	8d 83       	std	Y+5, r24	; 0x05
    4382:	8d 81       	ldd	r24, Y+5	; 0x05
    4384:	9e 81       	ldd	r25, Y+6	; 0x06
    4386:	9a 83       	std	Y+2, r25	; 0x02
    4388:	89 83       	std	Y+1, r24	; 0x01
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	9a 81       	ldd	r25, Y+2	; 0x02
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <LCD_voidShiftLeft+0xf6>
    4392:	9a 83       	std	Y+2, r25	; 0x02
    4394:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    4396:	2e 96       	adiw	r28, 0x0e	; 14
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	f8 94       	cli
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	cd bf       	out	0x3d, r28	; 61
    43a2:	cf 91       	pop	r28
    43a4:	df 91       	pop	r29
    43a6:	08 95       	ret

000043a8 <main>:
u8 oper[20];
u8 flag = 0;
u8 number_counter = 0;

int main(void)
{
    43a8:	0f 93       	push	r16
    43aa:	1f 93       	push	r17
    43ac:	df 93       	push	r29
    43ae:	cf 93       	push	r28
    43b0:	00 d0       	rcall	.+0      	; 0x43b2 <main+0xa>
    43b2:	0f 92       	push	r0
    43b4:	cd b7       	in	r28, 0x3d	; 61
    43b6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8KeyValue = KPD_u8_KEY_NOT_PRESSED;
    43b8:	8f ef       	ldi	r24, 0xFF	; 255
    43ba:	8b 83       	std	Y+3, r24	; 0x03
	DIO_voidInit();
    43bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	LCD_voidInit();
    43c0:	0e 94 a6 0c 	call	0x194c	; 0x194c <LCD_voidInit>

	while(1)
	{
		u8 static operation_counter = 0;
		KPD_u8GetKeyState(&Local_u8KeyValue);
    43c4:	ce 01       	movw	r24, r28
    43c6:	03 96       	adiw	r24, 0x03	; 3
    43c8:	0e 94 97 0b 	call	0x172e	; 0x172e <KPD_u8GetKeyState>
		u8 static flag = 0;
		if(Local_u8KeyValue != KPD_u8_KEY_NOT_PRESSED)
    43cc:	8b 81       	ldd	r24, Y+3	; 0x03
    43ce:	8f 3f       	cpi	r24, 0xFF	; 255
    43d0:	c9 f3       	breq	.-14     	; 0x43c4 <main+0x1c>
		{
			if(Local_u8KeyValue >= '0' && Local_u8KeyValue <='9')
    43d2:	8b 81       	ldd	r24, Y+3	; 0x03
    43d4:	80 33       	cpi	r24, 0x30	; 48
    43d6:	c8 f1       	brcs	.+114    	; 0x444a <main+0xa2>
    43d8:	8b 81       	ldd	r24, Y+3	; 0x03
    43da:	8a 33       	cpi	r24, 0x3A	; 58
    43dc:	b0 f5       	brcc	.+108    	; 0x444a <main+0xa2>
			{
				num[number_counter] = (num[number_counter]*10 +  (Local_u8KeyValue-'0'));
    43de:	80 91 85 00 	lds	r24, 0x0085
    43e2:	08 2f       	mov	r16, r24
    43e4:	10 e0       	ldi	r17, 0x00	; 0
    43e6:	80 91 85 00 	lds	r24, 0x0085
    43ea:	88 2f       	mov	r24, r24
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	88 0f       	add	r24, r24
    43f0:	99 1f       	adc	r25, r25
    43f2:	88 0f       	add	r24, r24
    43f4:	99 1f       	adc	r25, r25
    43f6:	fc 01       	movw	r30, r24
    43f8:	e4 56       	subi	r30, 0x64	; 100
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	80 81       	ld	r24, Z
    43fe:	91 81       	ldd	r25, Z+1	; 0x01
    4400:	a2 81       	ldd	r26, Z+2	; 0x02
    4402:	b3 81       	ldd	r27, Z+3	; 0x03
    4404:	2a e0       	ldi	r18, 0x0A	; 10
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e0       	ldi	r20, 0x00	; 0
    440a:	50 e0       	ldi	r21, 0x00	; 0
    440c:	bc 01       	movw	r22, r24
    440e:	cd 01       	movw	r24, r26
    4410:	0e 94 3e 24 	call	0x487c	; 0x487c <__mulsi3>
    4414:	9b 01       	movw	r18, r22
    4416:	ac 01       	movw	r20, r24
    4418:	8b 81       	ldd	r24, Y+3	; 0x03
    441a:	88 2f       	mov	r24, r24
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	c0 97       	sbiw	r24, 0x30	; 48
    4420:	aa 27       	eor	r26, r26
    4422:	97 fd       	sbrc	r25, 7
    4424:	a0 95       	com	r26
    4426:	ba 2f       	mov	r27, r26
    4428:	28 0f       	add	r18, r24
    442a:	39 1f       	adc	r19, r25
    442c:	4a 1f       	adc	r20, r26
    442e:	5b 1f       	adc	r21, r27
    4430:	c8 01       	movw	r24, r16
    4432:	88 0f       	add	r24, r24
    4434:	99 1f       	adc	r25, r25
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	fc 01       	movw	r30, r24
    443c:	e4 56       	subi	r30, 0x64	; 100
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	20 83       	st	Z, r18
    4442:	31 83       	std	Z+1, r19	; 0x01
    4444:	42 83       	std	Z+2, r20	; 0x02
    4446:	53 83       	std	Z+3, r21	; 0x03
    4448:	38 c0       	rjmp	.+112    	; 0x44ba <main+0x112>
			}
			else if((Local_u8KeyValue =='+'||Local_u8KeyValue =='-'||Local_u8KeyValue =='*'||Local_u8KeyValue =='/'))
    444a:	8b 81       	ldd	r24, Y+3	; 0x03
    444c:	8b 32       	cpi	r24, 0x2B	; 43
    444e:	49 f0       	breq	.+18     	; 0x4462 <main+0xba>
    4450:	8b 81       	ldd	r24, Y+3	; 0x03
    4452:	8d 32       	cpi	r24, 0x2D	; 45
    4454:	31 f0       	breq	.+12     	; 0x4462 <main+0xba>
    4456:	8b 81       	ldd	r24, Y+3	; 0x03
    4458:	8a 32       	cpi	r24, 0x2A	; 42
    445a:	19 f0       	breq	.+6      	; 0x4462 <main+0xba>
    445c:	8b 81       	ldd	r24, Y+3	; 0x03
    445e:	8f 32       	cpi	r24, 0x2F	; 47
    4460:	a1 f4       	brne	.+40     	; 0x448a <main+0xe2>
			{
				oper[operation_counter] = Local_u8KeyValue;
    4462:	80 91 87 00 	lds	r24, 0x0087
    4466:	88 2f       	mov	r24, r24
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	2b 81       	ldd	r18, Y+3	; 0x03
    446c:	fc 01       	movw	r30, r24
    446e:	e8 57       	subi	r30, 0x78	; 120
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	20 83       	st	Z, r18
				operation_counter++;
    4474:	80 91 87 00 	lds	r24, 0x0087
    4478:	8f 5f       	subi	r24, 0xFF	; 255
    447a:	80 93 87 00 	sts	0x0087, r24
				number_counter++;
    447e:	80 91 85 00 	lds	r24, 0x0085
    4482:	8f 5f       	subi	r24, 0xFF	; 255
    4484:	80 93 85 00 	sts	0x0085, r24
    4488:	18 c0       	rjmp	.+48     	; 0x44ba <main+0x112>
			}

			else if(Local_u8KeyValue=='=')
    448a:	8b 81       	ldd	r24, Y+3	; 0x03
    448c:	8d 33       	cpi	r24, 0x3D	; 61
    448e:	a9 f4       	brne	.+42     	; 0x44ba <main+0x112>
			{
				flag = 1;
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	80 93 86 00 	sts	0x0086, r24
				helper();
    4496:	0e 94 91 22 	call	0x4522	; 0x4522 <helper>
				LCD_u8GoToXY(2,1);
    449a:	82 e0       	ldi	r24, 0x02	; 2
    449c:	61 e0       	ldi	r22, 0x01	; 1
    449e:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <LCD_u8GoToXY>
				LCD_voidSendNum(num[0]);
    44a2:	80 91 9c 00 	lds	r24, 0x009C
    44a6:	90 91 9d 00 	lds	r25, 0x009D
    44aa:	a0 91 9e 00 	lds	r26, 0x009E
    44ae:	b0 91 9f 00 	lds	r27, 0x009F
    44b2:	bc 01       	movw	r22, r24
    44b4:	cd 01       	movw	r24, r26
    44b6:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <LCD_voidSendNum>

			}

			if(flag!=1)
    44ba:	80 91 86 00 	lds	r24, 0x0086
    44be:	81 30       	cpi	r24, 0x01	; 1
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <main+0x11c>
    44c2:	80 cf       	rjmp	.-256    	; 0x43c4 <main+0x1c>
			{
				LCD_u8GoToXY(1,1);
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	61 e0       	ldi	r22, 0x01	; 1
    44c8:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <LCD_u8GoToXY>

				for(int i = 0; i<=number_counter;i++)
    44cc:	1a 82       	std	Y+2, r1	; 0x02
    44ce:	19 82       	std	Y+1, r1	; 0x01
    44d0:	1e c0       	rjmp	.+60     	; 0x450e <main+0x166>
				{

					LCD_voidSendNum(num[i]);
    44d2:	89 81       	ldd	r24, Y+1	; 0x01
    44d4:	9a 81       	ldd	r25, Y+2	; 0x02
    44d6:	88 0f       	add	r24, r24
    44d8:	99 1f       	adc	r25, r25
    44da:	88 0f       	add	r24, r24
    44dc:	99 1f       	adc	r25, r25
    44de:	fc 01       	movw	r30, r24
    44e0:	e4 56       	subi	r30, 0x64	; 100
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	80 81       	ld	r24, Z
    44e6:	91 81       	ldd	r25, Z+1	; 0x01
    44e8:	a2 81       	ldd	r26, Z+2	; 0x02
    44ea:	b3 81       	ldd	r27, Z+3	; 0x03
    44ec:	bc 01       	movw	r22, r24
    44ee:	cd 01       	movw	r24, r26
    44f0:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <LCD_voidSendNum>
					LCD_voidSendChar(oper[i]);
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	9a 81       	ldd	r25, Y+2	; 0x02
    44f8:	fc 01       	movw	r30, r24
    44fa:	e8 57       	subi	r30, 0x78	; 120
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	80 81       	ld	r24, Z
    4500:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <LCD_voidSendChar>

			if(flag!=1)
			{
				LCD_u8GoToXY(1,1);

				for(int i = 0; i<=number_counter;i++)
    4504:	89 81       	ldd	r24, Y+1	; 0x01
    4506:	9a 81       	ldd	r25, Y+2	; 0x02
    4508:	01 96       	adiw	r24, 0x01	; 1
    450a:	9a 83       	std	Y+2, r25	; 0x02
    450c:	89 83       	std	Y+1, r24	; 0x01
    450e:	80 91 85 00 	lds	r24, 0x0085
    4512:	28 2f       	mov	r18, r24
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	89 81       	ldd	r24, Y+1	; 0x01
    4518:	9a 81       	ldd	r25, Y+2	; 0x02
    451a:	28 17       	cp	r18, r24
    451c:	39 07       	cpc	r19, r25
    451e:	cc f6       	brge	.-78     	; 0x44d2 <main+0x12a>
    4520:	51 cf       	rjmp	.-350    	; 0x43c4 <main+0x1c>

00004522 <helper>:
	return 0;
}


void helper(void)
{
    4522:	cf 92       	push	r12
    4524:	df 92       	push	r13
    4526:	ef 92       	push	r14
    4528:	ff 92       	push	r15
    452a:	0f 93       	push	r16
    452c:	1f 93       	push	r17
    452e:	df 93       	push	r29
    4530:	cf 93       	push	r28
    4532:	cd b7       	in	r28, 0x3d	; 61
    4534:	de b7       	in	r29, 0x3e	; 62
    4536:	2a 97       	sbiw	r28, 0x0a	; 10
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	f8 94       	cli
    453c:	de bf       	out	0x3e, r29	; 62
    453e:	0f be       	out	0x3f, r0	; 63
    4540:	cd bf       	out	0x3d, r28	; 61
		s8 index = -1;
    4542:	8f ef       	ldi	r24, 0xFF	; 255
    4544:	8a 87       	std	Y+10, r24	; 0x0a
		u8 flagg = 0;
    4546:	19 86       	std	Y+9, r1	; 0x09
    4548:	85 c1       	rjmp	.+778    	; 0x4854 <helper+0x332>

		while(number_counter!=0)
		{
			if(flagg==0)
    454a:	89 85       	ldd	r24, Y+9	; 0x09
    454c:	88 23       	and	r24, r24
    454e:	09 f0       	breq	.+2      	; 0x4552 <helper+0x30>
    4550:	97 c0       	rjmp	.+302    	; 0x4680 <helper+0x15e>
			{
				flagg=1;
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	89 87       	std	Y+9, r24	; 0x09
				for(int i = 0; i<number_counter;i++)
    4556:	18 86       	std	Y+8, r1	; 0x08
    4558:	1f 82       	std	Y+7, r1	; 0x07
    455a:	87 c0       	rjmp	.+270    	; 0x466a <helper+0x148>
				{

					if(oper[i]=='/'){
    455c:	8f 81       	ldd	r24, Y+7	; 0x07
    455e:	98 85       	ldd	r25, Y+8	; 0x08
    4560:	fc 01       	movw	r30, r24
    4562:	e8 57       	subi	r30, 0x78	; 120
    4564:	ff 4f       	sbci	r31, 0xFF	; 255
    4566:	80 81       	ld	r24, Z
    4568:	8f 32       	cpi	r24, 0x2F	; 47
    456a:	d1 f5       	brne	.+116    	; 0x45e0 <helper+0xbe>
						num[i]=num[i]/num[i+1];
    456c:	cf 80       	ldd	r12, Y+7	; 0x07
    456e:	d8 84       	ldd	r13, Y+8	; 0x08
    4570:	8f 81       	ldd	r24, Y+7	; 0x07
    4572:	98 85       	ldd	r25, Y+8	; 0x08
    4574:	88 0f       	add	r24, r24
    4576:	99 1f       	adc	r25, r25
    4578:	88 0f       	add	r24, r24
    457a:	99 1f       	adc	r25, r25
    457c:	fc 01       	movw	r30, r24
    457e:	e4 56       	subi	r30, 0x64	; 100
    4580:	ff 4f       	sbci	r31, 0xFF	; 255
    4582:	e0 80       	ld	r14, Z
    4584:	f1 80       	ldd	r15, Z+1	; 0x01
    4586:	02 81       	ldd	r16, Z+2	; 0x02
    4588:	13 81       	ldd	r17, Z+3	; 0x03
    458a:	8f 81       	ldd	r24, Y+7	; 0x07
    458c:	98 85       	ldd	r25, Y+8	; 0x08
    458e:	01 96       	adiw	r24, 0x01	; 1
    4590:	88 0f       	add	r24, r24
    4592:	99 1f       	adc	r25, r25
    4594:	88 0f       	add	r24, r24
    4596:	99 1f       	adc	r25, r25
    4598:	fc 01       	movw	r30, r24
    459a:	e4 56       	subi	r30, 0x64	; 100
    459c:	ff 4f       	sbci	r31, 0xFF	; 255
    459e:	20 81       	ld	r18, Z
    45a0:	31 81       	ldd	r19, Z+1	; 0x01
    45a2:	42 81       	ldd	r20, Z+2	; 0x02
    45a4:	53 81       	ldd	r21, Z+3	; 0x03
    45a6:	c8 01       	movw	r24, r16
    45a8:	b7 01       	movw	r22, r14
    45aa:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__udivmodsi4>
    45ae:	da 01       	movw	r26, r20
    45b0:	c9 01       	movw	r24, r18
    45b2:	9c 01       	movw	r18, r24
    45b4:	ad 01       	movw	r20, r26
    45b6:	c6 01       	movw	r24, r12
    45b8:	88 0f       	add	r24, r24
    45ba:	99 1f       	adc	r25, r25
    45bc:	88 0f       	add	r24, r24
    45be:	99 1f       	adc	r25, r25
    45c0:	fc 01       	movw	r30, r24
    45c2:	e4 56       	subi	r30, 0x64	; 100
    45c4:	ff 4f       	sbci	r31, 0xFF	; 255
    45c6:	20 83       	st	Z, r18
    45c8:	31 83       	std	Z+1, r19	; 0x01
    45ca:	42 83       	std	Z+2, r20	; 0x02
    45cc:	53 83       	std	Z+3, r21	; 0x03
						index = i;
    45ce:	8f 81       	ldd	r24, Y+7	; 0x07
    45d0:	8a 87       	std	Y+10, r24	; 0x0a

						number_counter--;
    45d2:	80 91 85 00 	lds	r24, 0x0085
    45d6:	81 50       	subi	r24, 0x01	; 1
    45d8:	80 93 85 00 	sts	0x0085, r24
						flagg=0;
    45dc:	19 86       	std	Y+9, r1	; 0x09
    45de:	e0 c0       	rjmp	.+448    	; 0x47a0 <helper+0x27e>
						break;
					}
					else if(oper[i]=='*')
    45e0:	8f 81       	ldd	r24, Y+7	; 0x07
    45e2:	98 85       	ldd	r25, Y+8	; 0x08
    45e4:	fc 01       	movw	r30, r24
    45e6:	e8 57       	subi	r30, 0x78	; 120
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	80 81       	ld	r24, Z
    45ec:	8a 32       	cpi	r24, 0x2A	; 42
    45ee:	c1 f5       	brne	.+112    	; 0x4660 <helper+0x13e>
					{
						num[i]=num[i]*num[i+1];
    45f0:	cf 80       	ldd	r12, Y+7	; 0x07
    45f2:	d8 84       	ldd	r13, Y+8	; 0x08
    45f4:	8f 81       	ldd	r24, Y+7	; 0x07
    45f6:	98 85       	ldd	r25, Y+8	; 0x08
    45f8:	88 0f       	add	r24, r24
    45fa:	99 1f       	adc	r25, r25
    45fc:	88 0f       	add	r24, r24
    45fe:	99 1f       	adc	r25, r25
    4600:	fc 01       	movw	r30, r24
    4602:	e4 56       	subi	r30, 0x64	; 100
    4604:	ff 4f       	sbci	r31, 0xFF	; 255
    4606:	e0 80       	ld	r14, Z
    4608:	f1 80       	ldd	r15, Z+1	; 0x01
    460a:	02 81       	ldd	r16, Z+2	; 0x02
    460c:	13 81       	ldd	r17, Z+3	; 0x03
    460e:	8f 81       	ldd	r24, Y+7	; 0x07
    4610:	98 85       	ldd	r25, Y+8	; 0x08
    4612:	01 96       	adiw	r24, 0x01	; 1
    4614:	88 0f       	add	r24, r24
    4616:	99 1f       	adc	r25, r25
    4618:	88 0f       	add	r24, r24
    461a:	99 1f       	adc	r25, r25
    461c:	fc 01       	movw	r30, r24
    461e:	e4 56       	subi	r30, 0x64	; 100
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	20 81       	ld	r18, Z
    4624:	31 81       	ldd	r19, Z+1	; 0x01
    4626:	42 81       	ldd	r20, Z+2	; 0x02
    4628:	53 81       	ldd	r21, Z+3	; 0x03
    462a:	c8 01       	movw	r24, r16
    462c:	b7 01       	movw	r22, r14
    462e:	0e 94 3e 24 	call	0x487c	; 0x487c <__mulsi3>
    4632:	9b 01       	movw	r18, r22
    4634:	ac 01       	movw	r20, r24
    4636:	c6 01       	movw	r24, r12
    4638:	88 0f       	add	r24, r24
    463a:	99 1f       	adc	r25, r25
    463c:	88 0f       	add	r24, r24
    463e:	99 1f       	adc	r25, r25
    4640:	fc 01       	movw	r30, r24
    4642:	e4 56       	subi	r30, 0x64	; 100
    4644:	ff 4f       	sbci	r31, 0xFF	; 255
    4646:	20 83       	st	Z, r18
    4648:	31 83       	std	Z+1, r19	; 0x01
    464a:	42 83       	std	Z+2, r20	; 0x02
    464c:	53 83       	std	Z+3, r21	; 0x03

						index = i;
    464e:	8f 81       	ldd	r24, Y+7	; 0x07
    4650:	8a 87       	std	Y+10, r24	; 0x0a
						number_counter--;
    4652:	80 91 85 00 	lds	r24, 0x0085
    4656:	81 50       	subi	r24, 0x01	; 1
    4658:	80 93 85 00 	sts	0x0085, r24
						flagg = 0;
    465c:	19 86       	std	Y+9, r1	; 0x09
    465e:	a0 c0       	rjmp	.+320    	; 0x47a0 <helper+0x27e>
		while(number_counter!=0)
		{
			if(flagg==0)
			{
				flagg=1;
				for(int i = 0; i<number_counter;i++)
    4660:	8f 81       	ldd	r24, Y+7	; 0x07
    4662:	98 85       	ldd	r25, Y+8	; 0x08
    4664:	01 96       	adiw	r24, 0x01	; 1
    4666:	98 87       	std	Y+8, r25	; 0x08
    4668:	8f 83       	std	Y+7, r24	; 0x07
    466a:	80 91 85 00 	lds	r24, 0x0085
    466e:	28 2f       	mov	r18, r24
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	8f 81       	ldd	r24, Y+7	; 0x07
    4674:	98 85       	ldd	r25, Y+8	; 0x08
    4676:	82 17       	cp	r24, r18
    4678:	93 07       	cpc	r25, r19
    467a:	0c f4       	brge	.+2      	; 0x467e <helper+0x15c>
    467c:	6f cf       	rjmp	.-290    	; 0x455c <helper+0x3a>
    467e:	90 c0       	rjmp	.+288    	; 0x47a0 <helper+0x27e>

				}


			}
			else if(flagg==1){
    4680:	89 85       	ldd	r24, Y+9	; 0x09
    4682:	81 30       	cpi	r24, 0x01	; 1
    4684:	09 f0       	breq	.+2      	; 0x4688 <helper+0x166>
    4686:	8c c0       	rjmp	.+280    	; 0x47a0 <helper+0x27e>
				for(int i = 0; i<number_counter;i++)
    4688:	1e 82       	std	Y+6, r1	; 0x06
    468a:	1d 82       	std	Y+5, r1	; 0x05
    468c:	7f c0       	rjmp	.+254    	; 0x478c <helper+0x26a>
				{

					if(oper[i]=='+'){
    468e:	8d 81       	ldd	r24, Y+5	; 0x05
    4690:	9e 81       	ldd	r25, Y+6	; 0x06
    4692:	fc 01       	movw	r30, r24
    4694:	e8 57       	subi	r30, 0x78	; 120
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	80 81       	ld	r24, Z
    469a:	8b 32       	cpi	r24, 0x2B	; 43
    469c:	a9 f5       	brne	.+106    	; 0x4708 <helper+0x1e6>
						num[i]=num[i]+num[i+1];
    469e:	6d 81       	ldd	r22, Y+5	; 0x05
    46a0:	7e 81       	ldd	r23, Y+6	; 0x06
    46a2:	8d 81       	ldd	r24, Y+5	; 0x05
    46a4:	9e 81       	ldd	r25, Y+6	; 0x06
    46a6:	88 0f       	add	r24, r24
    46a8:	99 1f       	adc	r25, r25
    46aa:	88 0f       	add	r24, r24
    46ac:	99 1f       	adc	r25, r25
    46ae:	fc 01       	movw	r30, r24
    46b0:	e4 56       	subi	r30, 0x64	; 100
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	20 81       	ld	r18, Z
    46b6:	31 81       	ldd	r19, Z+1	; 0x01
    46b8:	42 81       	ldd	r20, Z+2	; 0x02
    46ba:	53 81       	ldd	r21, Z+3	; 0x03
    46bc:	8d 81       	ldd	r24, Y+5	; 0x05
    46be:	9e 81       	ldd	r25, Y+6	; 0x06
    46c0:	01 96       	adiw	r24, 0x01	; 1
    46c2:	88 0f       	add	r24, r24
    46c4:	99 1f       	adc	r25, r25
    46c6:	88 0f       	add	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	fc 01       	movw	r30, r24
    46cc:	e4 56       	subi	r30, 0x64	; 100
    46ce:	ff 4f       	sbci	r31, 0xFF	; 255
    46d0:	80 81       	ld	r24, Z
    46d2:	91 81       	ldd	r25, Z+1	; 0x01
    46d4:	a2 81       	ldd	r26, Z+2	; 0x02
    46d6:	b3 81       	ldd	r27, Z+3	; 0x03
    46d8:	28 0f       	add	r18, r24
    46da:	39 1f       	adc	r19, r25
    46dc:	4a 1f       	adc	r20, r26
    46de:	5b 1f       	adc	r21, r27
    46e0:	cb 01       	movw	r24, r22
    46e2:	88 0f       	add	r24, r24
    46e4:	99 1f       	adc	r25, r25
    46e6:	88 0f       	add	r24, r24
    46e8:	99 1f       	adc	r25, r25
    46ea:	fc 01       	movw	r30, r24
    46ec:	e4 56       	subi	r30, 0x64	; 100
    46ee:	ff 4f       	sbci	r31, 0xFF	; 255
    46f0:	20 83       	st	Z, r18
    46f2:	31 83       	std	Z+1, r19	; 0x01
    46f4:	42 83       	std	Z+2, r20	; 0x02
    46f6:	53 83       	std	Z+3, r21	; 0x03
						index = i;
    46f8:	8d 81       	ldd	r24, Y+5	; 0x05
    46fa:	8a 87       	std	Y+10, r24	; 0x0a

						number_counter--;
    46fc:	80 91 85 00 	lds	r24, 0x0085
    4700:	81 50       	subi	r24, 0x01	; 1
    4702:	80 93 85 00 	sts	0x0085, r24
    4706:	4c c0       	rjmp	.+152    	; 0x47a0 <helper+0x27e>

						break;
					}
					else if(oper[i]=='-')
    4708:	8d 81       	ldd	r24, Y+5	; 0x05
    470a:	9e 81       	ldd	r25, Y+6	; 0x06
    470c:	fc 01       	movw	r30, r24
    470e:	e8 57       	subi	r30, 0x78	; 120
    4710:	ff 4f       	sbci	r31, 0xFF	; 255
    4712:	80 81       	ld	r24, Z
    4714:	8d 32       	cpi	r24, 0x2D	; 45
    4716:	a9 f5       	brne	.+106    	; 0x4782 <helper+0x260>
					{
						num[i]=num[i]-num[i+1];
    4718:	6d 81       	ldd	r22, Y+5	; 0x05
    471a:	7e 81       	ldd	r23, Y+6	; 0x06
    471c:	8d 81       	ldd	r24, Y+5	; 0x05
    471e:	9e 81       	ldd	r25, Y+6	; 0x06
    4720:	88 0f       	add	r24, r24
    4722:	99 1f       	adc	r25, r25
    4724:	88 0f       	add	r24, r24
    4726:	99 1f       	adc	r25, r25
    4728:	fc 01       	movw	r30, r24
    472a:	e4 56       	subi	r30, 0x64	; 100
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	20 81       	ld	r18, Z
    4730:	31 81       	ldd	r19, Z+1	; 0x01
    4732:	42 81       	ldd	r20, Z+2	; 0x02
    4734:	53 81       	ldd	r21, Z+3	; 0x03
    4736:	8d 81       	ldd	r24, Y+5	; 0x05
    4738:	9e 81       	ldd	r25, Y+6	; 0x06
    473a:	01 96       	adiw	r24, 0x01	; 1
    473c:	88 0f       	add	r24, r24
    473e:	99 1f       	adc	r25, r25
    4740:	88 0f       	add	r24, r24
    4742:	99 1f       	adc	r25, r25
    4744:	fc 01       	movw	r30, r24
    4746:	e4 56       	subi	r30, 0x64	; 100
    4748:	ff 4f       	sbci	r31, 0xFF	; 255
    474a:	80 81       	ld	r24, Z
    474c:	91 81       	ldd	r25, Z+1	; 0x01
    474e:	a2 81       	ldd	r26, Z+2	; 0x02
    4750:	b3 81       	ldd	r27, Z+3	; 0x03
    4752:	28 1b       	sub	r18, r24
    4754:	39 0b       	sbc	r19, r25
    4756:	4a 0b       	sbc	r20, r26
    4758:	5b 0b       	sbc	r21, r27
    475a:	cb 01       	movw	r24, r22
    475c:	88 0f       	add	r24, r24
    475e:	99 1f       	adc	r25, r25
    4760:	88 0f       	add	r24, r24
    4762:	99 1f       	adc	r25, r25
    4764:	fc 01       	movw	r30, r24
    4766:	e4 56       	subi	r30, 0x64	; 100
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	20 83       	st	Z, r18
    476c:	31 83       	std	Z+1, r19	; 0x01
    476e:	42 83       	std	Z+2, r20	; 0x02
    4770:	53 83       	std	Z+3, r21	; 0x03

						index = i;
    4772:	8d 81       	ldd	r24, Y+5	; 0x05
    4774:	8a 87       	std	Y+10, r24	; 0x0a
						number_counter--;
    4776:	80 91 85 00 	lds	r24, 0x0085
    477a:	81 50       	subi	r24, 0x01	; 1
    477c:	80 93 85 00 	sts	0x0085, r24
    4780:	0f c0       	rjmp	.+30     	; 0x47a0 <helper+0x27e>
				}


			}
			else if(flagg==1){
				for(int i = 0; i<number_counter;i++)
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	01 96       	adiw	r24, 0x01	; 1
    4788:	9e 83       	std	Y+6, r25	; 0x06
    478a:	8d 83       	std	Y+5, r24	; 0x05
    478c:	80 91 85 00 	lds	r24, 0x0085
    4790:	28 2f       	mov	r18, r24
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	8d 81       	ldd	r24, Y+5	; 0x05
    4796:	9e 81       	ldd	r25, Y+6	; 0x06
    4798:	82 17       	cp	r24, r18
    479a:	93 07       	cpc	r25, r19
    479c:	0c f4       	brge	.+2      	; 0x47a0 <helper+0x27e>
    479e:	77 cf       	rjmp	.-274    	; 0x468e <helper+0x16c>

				}

			}

			if(index!= -1 )
    47a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    47a2:	8f 3f       	cpi	r24, 0xFF	; 255
    47a4:	09 f4       	brne	.+2      	; 0x47a8 <helper+0x286>
    47a6:	56 c0       	rjmp	.+172    	; 0x4854 <helper+0x332>
			{
				for(int i = index+1; i<=number_counter;i++)
    47a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    47aa:	99 27       	eor	r25, r25
    47ac:	87 fd       	sbrc	r24, 7
    47ae:	90 95       	com	r25
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	9c 83       	std	Y+4, r25	; 0x04
    47b4:	8b 83       	std	Y+3, r24	; 0x03
    47b6:	21 c0       	rjmp	.+66     	; 0x47fa <helper+0x2d8>
				{
					num[i]= num[i+1];
    47b8:	6b 81       	ldd	r22, Y+3	; 0x03
    47ba:	7c 81       	ldd	r23, Y+4	; 0x04
    47bc:	8b 81       	ldd	r24, Y+3	; 0x03
    47be:	9c 81       	ldd	r25, Y+4	; 0x04
    47c0:	01 96       	adiw	r24, 0x01	; 1
    47c2:	88 0f       	add	r24, r24
    47c4:	99 1f       	adc	r25, r25
    47c6:	88 0f       	add	r24, r24
    47c8:	99 1f       	adc	r25, r25
    47ca:	fc 01       	movw	r30, r24
    47cc:	e4 56       	subi	r30, 0x64	; 100
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	20 81       	ld	r18, Z
    47d2:	31 81       	ldd	r19, Z+1	; 0x01
    47d4:	42 81       	ldd	r20, Z+2	; 0x02
    47d6:	53 81       	ldd	r21, Z+3	; 0x03
    47d8:	cb 01       	movw	r24, r22
    47da:	88 0f       	add	r24, r24
    47dc:	99 1f       	adc	r25, r25
    47de:	88 0f       	add	r24, r24
    47e0:	99 1f       	adc	r25, r25
    47e2:	fc 01       	movw	r30, r24
    47e4:	e4 56       	subi	r30, 0x64	; 100
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	20 83       	st	Z, r18
    47ea:	31 83       	std	Z+1, r19	; 0x01
    47ec:	42 83       	std	Z+2, r20	; 0x02
    47ee:	53 83       	std	Z+3, r21	; 0x03

			}

			if(index!= -1 )
			{
				for(int i = index+1; i<=number_counter;i++)
    47f0:	8b 81       	ldd	r24, Y+3	; 0x03
    47f2:	9c 81       	ldd	r25, Y+4	; 0x04
    47f4:	01 96       	adiw	r24, 0x01	; 1
    47f6:	9c 83       	std	Y+4, r25	; 0x04
    47f8:	8b 83       	std	Y+3, r24	; 0x03
    47fa:	80 91 85 00 	lds	r24, 0x0085
    47fe:	28 2f       	mov	r18, r24
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	8b 81       	ldd	r24, Y+3	; 0x03
    4804:	9c 81       	ldd	r25, Y+4	; 0x04
    4806:	28 17       	cp	r18, r24
    4808:	39 07       	cpc	r19, r25
    480a:	b4 f6       	brge	.-84     	; 0x47b8 <helper+0x296>
				{
					num[i]= num[i+1];
				}

				for(int j = index; j<number_counter;j++ )
    480c:	8a 85       	ldd	r24, Y+10	; 0x0a
    480e:	99 27       	eor	r25, r25
    4810:	87 fd       	sbrc	r24, 7
    4812:	90 95       	com	r25
    4814:	9a 83       	std	Y+2, r25	; 0x02
    4816:	89 83       	std	Y+1, r24	; 0x01
    4818:	12 c0       	rjmp	.+36     	; 0x483e <helper+0x31c>
				{
					oper[j]= oper[j+1];
    481a:	29 81       	ldd	r18, Y+1	; 0x01
    481c:	3a 81       	ldd	r19, Y+2	; 0x02
    481e:	89 81       	ldd	r24, Y+1	; 0x01
    4820:	9a 81       	ldd	r25, Y+2	; 0x02
    4822:	01 96       	adiw	r24, 0x01	; 1
    4824:	fc 01       	movw	r30, r24
    4826:	e8 57       	subi	r30, 0x78	; 120
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	80 81       	ld	r24, Z
    482c:	f9 01       	movw	r30, r18
    482e:	e8 57       	subi	r30, 0x78	; 120
    4830:	ff 4f       	sbci	r31, 0xFF	; 255
    4832:	80 83       	st	Z, r24
				for(int i = index+1; i<=number_counter;i++)
				{
					num[i]= num[i+1];
				}

				for(int j = index; j<number_counter;j++ )
    4834:	89 81       	ldd	r24, Y+1	; 0x01
    4836:	9a 81       	ldd	r25, Y+2	; 0x02
    4838:	01 96       	adiw	r24, 0x01	; 1
    483a:	9a 83       	std	Y+2, r25	; 0x02
    483c:	89 83       	std	Y+1, r24	; 0x01
    483e:	80 91 85 00 	lds	r24, 0x0085
    4842:	28 2f       	mov	r18, r24
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	89 81       	ldd	r24, Y+1	; 0x01
    4848:	9a 81       	ldd	r25, Y+2	; 0x02
    484a:	82 17       	cp	r24, r18
    484c:	93 07       	cpc	r25, r19
    484e:	2c f3       	brlt	.-54     	; 0x481a <helper+0x2f8>
				{
					oper[j]= oper[j+1];
				}

				index = -1;
    4850:	8f ef       	ldi	r24, 0xFF	; 255
    4852:	8a 87       	std	Y+10, r24	; 0x0a
void helper(void)
{
		s8 index = -1;
		u8 flagg = 0;

		while(number_counter!=0)
    4854:	80 91 85 00 	lds	r24, 0x0085
    4858:	88 23       	and	r24, r24
    485a:	09 f0       	breq	.+2      	; 0x485e <helper+0x33c>
    485c:	76 ce       	rjmp	.-788    	; 0x454a <helper+0x28>

				index = -1;
			}

		}
	}
    485e:	2a 96       	adiw	r28, 0x0a	; 10
    4860:	0f b6       	in	r0, 0x3f	; 63
    4862:	f8 94       	cli
    4864:	de bf       	out	0x3e, r29	; 62
    4866:	0f be       	out	0x3f, r0	; 63
    4868:	cd bf       	out	0x3d, r28	; 61
    486a:	cf 91       	pop	r28
    486c:	df 91       	pop	r29
    486e:	1f 91       	pop	r17
    4870:	0f 91       	pop	r16
    4872:	ff 90       	pop	r15
    4874:	ef 90       	pop	r14
    4876:	df 90       	pop	r13
    4878:	cf 90       	pop	r12
    487a:	08 95       	ret

0000487c <__mulsi3>:
    487c:	62 9f       	mul	r22, r18
    487e:	d0 01       	movw	r26, r0
    4880:	73 9f       	mul	r23, r19
    4882:	f0 01       	movw	r30, r0
    4884:	82 9f       	mul	r24, r18
    4886:	e0 0d       	add	r30, r0
    4888:	f1 1d       	adc	r31, r1
    488a:	64 9f       	mul	r22, r20
    488c:	e0 0d       	add	r30, r0
    488e:	f1 1d       	adc	r31, r1
    4890:	92 9f       	mul	r25, r18
    4892:	f0 0d       	add	r31, r0
    4894:	83 9f       	mul	r24, r19
    4896:	f0 0d       	add	r31, r0
    4898:	74 9f       	mul	r23, r20
    489a:	f0 0d       	add	r31, r0
    489c:	65 9f       	mul	r22, r21
    489e:	f0 0d       	add	r31, r0
    48a0:	99 27       	eor	r25, r25
    48a2:	72 9f       	mul	r23, r18
    48a4:	b0 0d       	add	r27, r0
    48a6:	e1 1d       	adc	r30, r1
    48a8:	f9 1f       	adc	r31, r25
    48aa:	63 9f       	mul	r22, r19
    48ac:	b0 0d       	add	r27, r0
    48ae:	e1 1d       	adc	r30, r1
    48b0:	f9 1f       	adc	r31, r25
    48b2:	bd 01       	movw	r22, r26
    48b4:	cf 01       	movw	r24, r30
    48b6:	11 24       	eor	r1, r1
    48b8:	08 95       	ret

000048ba <__udivmodsi4>:
    48ba:	a1 e2       	ldi	r26, 0x21	; 33
    48bc:	1a 2e       	mov	r1, r26
    48be:	aa 1b       	sub	r26, r26
    48c0:	bb 1b       	sub	r27, r27
    48c2:	fd 01       	movw	r30, r26
    48c4:	0d c0       	rjmp	.+26     	; 0x48e0 <__udivmodsi4_ep>

000048c6 <__udivmodsi4_loop>:
    48c6:	aa 1f       	adc	r26, r26
    48c8:	bb 1f       	adc	r27, r27
    48ca:	ee 1f       	adc	r30, r30
    48cc:	ff 1f       	adc	r31, r31
    48ce:	a2 17       	cp	r26, r18
    48d0:	b3 07       	cpc	r27, r19
    48d2:	e4 07       	cpc	r30, r20
    48d4:	f5 07       	cpc	r31, r21
    48d6:	20 f0       	brcs	.+8      	; 0x48e0 <__udivmodsi4_ep>
    48d8:	a2 1b       	sub	r26, r18
    48da:	b3 0b       	sbc	r27, r19
    48dc:	e4 0b       	sbc	r30, r20
    48de:	f5 0b       	sbc	r31, r21

000048e0 <__udivmodsi4_ep>:
    48e0:	66 1f       	adc	r22, r22
    48e2:	77 1f       	adc	r23, r23
    48e4:	88 1f       	adc	r24, r24
    48e6:	99 1f       	adc	r25, r25
    48e8:	1a 94       	dec	r1
    48ea:	69 f7       	brne	.-38     	; 0x48c6 <__udivmodsi4_loop>
    48ec:	60 95       	com	r22
    48ee:	70 95       	com	r23
    48f0:	80 95       	com	r24
    48f2:	90 95       	com	r25
    48f4:	9b 01       	movw	r18, r22
    48f6:	ac 01       	movw	r20, r24
    48f8:	bd 01       	movw	r22, r26
    48fa:	cf 01       	movw	r24, r30
    48fc:	08 95       	ret

000048fe <__prologue_saves__>:
    48fe:	2f 92       	push	r2
    4900:	3f 92       	push	r3
    4902:	4f 92       	push	r4
    4904:	5f 92       	push	r5
    4906:	6f 92       	push	r6
    4908:	7f 92       	push	r7
    490a:	8f 92       	push	r8
    490c:	9f 92       	push	r9
    490e:	af 92       	push	r10
    4910:	bf 92       	push	r11
    4912:	cf 92       	push	r12
    4914:	df 92       	push	r13
    4916:	ef 92       	push	r14
    4918:	ff 92       	push	r15
    491a:	0f 93       	push	r16
    491c:	1f 93       	push	r17
    491e:	cf 93       	push	r28
    4920:	df 93       	push	r29
    4922:	cd b7       	in	r28, 0x3d	; 61
    4924:	de b7       	in	r29, 0x3e	; 62
    4926:	ca 1b       	sub	r28, r26
    4928:	db 0b       	sbc	r29, r27
    492a:	0f b6       	in	r0, 0x3f	; 63
    492c:	f8 94       	cli
    492e:	de bf       	out	0x3e, r29	; 62
    4930:	0f be       	out	0x3f, r0	; 63
    4932:	cd bf       	out	0x3d, r28	; 61
    4934:	09 94       	ijmp

00004936 <__epilogue_restores__>:
    4936:	2a 88       	ldd	r2, Y+18	; 0x12
    4938:	39 88       	ldd	r3, Y+17	; 0x11
    493a:	48 88       	ldd	r4, Y+16	; 0x10
    493c:	5f 84       	ldd	r5, Y+15	; 0x0f
    493e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4940:	7d 84       	ldd	r7, Y+13	; 0x0d
    4942:	8c 84       	ldd	r8, Y+12	; 0x0c
    4944:	9b 84       	ldd	r9, Y+11	; 0x0b
    4946:	aa 84       	ldd	r10, Y+10	; 0x0a
    4948:	b9 84       	ldd	r11, Y+9	; 0x09
    494a:	c8 84       	ldd	r12, Y+8	; 0x08
    494c:	df 80       	ldd	r13, Y+7	; 0x07
    494e:	ee 80       	ldd	r14, Y+6	; 0x06
    4950:	fd 80       	ldd	r15, Y+5	; 0x05
    4952:	0c 81       	ldd	r16, Y+4	; 0x04
    4954:	1b 81       	ldd	r17, Y+3	; 0x03
    4956:	aa 81       	ldd	r26, Y+2	; 0x02
    4958:	b9 81       	ldd	r27, Y+1	; 0x01
    495a:	ce 0f       	add	r28, r30
    495c:	d1 1d       	adc	r29, r1
    495e:	0f b6       	in	r0, 0x3f	; 63
    4960:	f8 94       	cli
    4962:	de bf       	out	0x3e, r29	; 62
    4964:	0f be       	out	0x3f, r0	; 63
    4966:	cd bf       	out	0x3d, r28	; 61
    4968:	ed 01       	movw	r28, r26
    496a:	08 95       	ret

0000496c <_exit>:
    496c:	f8 94       	cli

0000496e <__stop_program>:
    496e:	ff cf       	rjmp	.-2      	; 0x496e <__stop_program>
